bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getLastChild().getNext().removeFirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getLastChild().getNext().removeFirstChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getLastChild().getNext().removeFirstChild();	  Node    maybeExpr    =    n.getLastChild().removeFirstChild();    	non-compiled	[CE]  	1	None	replace
2	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getOneChild().removeFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getOneChild().removeFirstChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getOneChild().removeFirstChild();	  Node    maybeExpr    =    n.getLastChild().removeFirstChild();    	non-compiled	[CE]  	1	None	replace
3	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getfirstChild().removeFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getfirstChild().removeFirstChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getfirstChild().removeFirstChild();	  Node    maybeExpr    =    n.getLastChild().removeFirstChild();    	non-compiled	[CE]  	1	None	replace
4	[BUG]  [BUGGY]  return  n.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  return  n.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	return  n.getLastChild().getType()  ==  Token.FUNCTION;	  return    n.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	34	None	replace
5	[BUG]  [BUGGY]  return  n.getFirstChild().getType()!=  Token.FUNCTION;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  return  n.getFirstChild().getType()!=  Token.FUNCTION;  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	return  n.getFirstChild().getType()!=  Token.FUNCTION;	  return    n.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	34	None	replace
6	[BUG]  [BUGGY]  return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.getLastChild().getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.getLastChild().getType()  ==  Token.EXPR_RESULT;  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.getLastChild().getType()  ==  Token.EXPR_RESULT;	  return    n.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	34	None	replace
7	[BUG]  [BUGGY]  return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasOneChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasOneChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasOneChild();	  return    n.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	34	None	replace
8	[BUG]  [BUGGY]  return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;	  return    n.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	34	None	replace
9	[BUG]  [BUGGY]  return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.getLastChild().getType()  ==  Token.BLOCK;  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.getLastChild().getType()  ==  Token.BLOCK;  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.getLastChild().getType()  ==  Token.BLOCK;	  return    n.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	34	None	replace
10	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getOwner().cloneTree();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getOwner().cloneTree();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getOwner().cloneTree();	  Node    maybeExpr    =    n.getOwner();    	non-compiled	[CE]  	8	None	replace
11	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getOwner().getParent();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getOwner().getParent();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getOwner().getParent();	  Node    maybeExpr    =    n.getOwner();    	non-compiled	[CE]  	8	None	replace
12	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getOwnerInstantiator();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getOwnerInstantiator();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getOwnerInstantiator();	  Node    maybeExpr    =    n.getOwner();    	non-compiled	[CE]  	8	None	replace
13	[BUG]  [BUGGY]  n  =  n.getLastChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  n  =  n.getLastChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	n  =  n.getLastChild();	  n    =    n.getFirstChild();    	non-compiled	[CE]  	36	None	replace
14	[BUG]  [BUGGY]  n  =  n.getNext();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  n  =  n.getNext();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	n  =  n.getNext();	  n    =    n.getFirstChild();    	non-compiled	[CE]  	36	None	replace
15	[BUG]  [BUGGY]  n  =  n.removeFirstChild();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  n  =  n.removeFirstChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	n  =  n.removeFirstChild();	  n    =    n.getFirstChild();    	non-compiled	[CE]  	36	None	replace
16	[BUG]  [BUGGY]  n  =  n.getOwnerChild();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  n  =  n.getOwnerChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	n  =  n.getOwnerChild();	  n    =    n.getFirstChild();    	non-compiled	[CE]  	36	None	replace
17	[BUG]  [BUGGY]  n  =  n.getLocalPart();  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  n  =  n.getLocalPart();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	n  =  n.getLocalPart();	  n    =    n.getFirstChild();    	non-compiled	[CE]  	36	None	replace
18	[BUG]  [BUGGY]  n  =  n.getParent();  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  n  =  n.getParent();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	n  =  n.getParent();	  n    =    n.getFirstChild();    	non-compiled	[CE]  	36	None	replace
19	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.BLOCK);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.BLOCK);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Preconditions.checkState(n.getType()!=  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	35	None	replace
20	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.hasOneChild());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.hasOneChild());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.hasOneChild());	  Preconditions.checkState(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	35	None	replace
21	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  &&  n.hasOneChild());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  &&  n.hasOneChild());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  &&  n.hasOneChild());	  Preconditions.checkState(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	35	None	replace
22	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Preconditions.checkState(n.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	35	None	replace
23	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.hasChildren());  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.hasChildren());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.hasChildren());	  Preconditions.checkState(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	35	None	replace
24	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNext().removeLastChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNext().removeLastChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getNext().removeLastChild();	  Node    maybeExpr    =    n.getFirstChild().removeLastChild();    	non-compiled	[CE]  	56	None	replace
25	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getLastChild().cloneNode();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getLastChild().cloneNode();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getLastChild().cloneNode();	  Node    maybeExpr    =    n.getFirstChild().cloneNode();    	non-compiled	[CE]  	26	None	replace
26	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().cloneNode(Token.BLOCK);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().cloneNode(Token.BLOCK);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().cloneNode(Token.BLOCK);	  Node    maybeExpr    =    n.getFirstChild().cloneNode();    	non-compiled	[CE]  	26	None	replace
27	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().cloneNode(Token.EXPR_RESULT);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().cloneNode(Token.EXPR_RESULT);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().cloneNode(Token.EXPR_RESULT);	  Node    maybeExpr    =    n.getFirstChild().cloneNode();    	non-compiled	[CE]  	26	None	replace
28	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getImmutableChild().cloneTree();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getImmutableChild().cloneTree();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getImmutableChild().cloneTree();	  Node    maybeExpr    =    n.getImmutableChild();    	non-compiled	[CE]  	5	None	replace
29	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getImmutableChild().getNext();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getImmutableChild().getNext();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getImmutableChild().getNext();	  Node    maybeExpr    =    n.getImmutableChild();    	non-compiled	[CE]  	5	None	replace
30	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getImmutableChild(n.getFirstChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getImmutableChild(n.getFirstChild());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getImmutableChild(n.getFirstChild());	  Node    maybeExpr    =    n.getImmutableChild();    	non-compiled	[CE]  	5	None	replace
31	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getChildAt(1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getChildAt(1);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getChildAt(1);	  Node    maybeExpr    =    n.getChildAt(0);    	non-compiled	[CE]  	47	None	replace
32	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getChildAt(n.getType());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getChildAt(n.getType());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getChildAt(n.getType());	  Node    maybeExpr    =    n.getChildAt(0);    	non-compiled	[CE]  	47	None	replace
33	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getChildAt(n.getType()  -  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getChildAt(n.getType()  -  1);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getChildAt(n.getType()  -  1);	  Node    maybeExpr    =    n.getChildAt(0);    	non-compiled	[CE]  	47	None	replace
34	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getChildAt(n.getFirstChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getChildAt(n.getFirstChild());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getChildAt(n.getFirstChild());	  Node    maybeExpr    =    n.getChildAt(0);    	non-compiled	[CE]  	47	None	replace
35	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getChildAt(n.size()  -  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getChildAt(n.size()  -  1);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getChildAt(n.size()  -  1);	  Node    maybeExpr    =    n.getChildAt(0);    	non-compiled	[CE]  	47	None	replace
36	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getFirstChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getFirstChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getFirstChild();	  Node    maybeExpr    =    n.getFirstChild().getLastChild();    	non-compiled	[CE]  	4	None	replace
37	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getNext().getFirstChild().getLastChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getNext().getFirstChild().getLastChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getNext().getFirstChild().getLastChild();	  Node    maybeExpr    =    n.getFirstChild().getLastChild();    	non-compiled	[CE]  	4	None	replace
38	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getNext().getLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getNext().getLastChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getNext().getLastChild();	  Node    maybeExpr    =    n.getFirstChild().getLastChild();    	non-compiled	[CE]  	4	None	replace
39	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getOneChild().getParent();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getOneChild().getParent();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getOneChild().getParent();	  Node    maybeExpr    =    n.getOneChild().getNext();    	non-compiled	[CE]  	21	None	replace
40	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getOneChild().getFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getOneChild().getFirstChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getOneChild().getFirstChild();	  Node    maybeExpr    =    n.getOneChild().getNext();    	non-compiled	[CE]  	21	None	replace
41	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getOneChild().getLastChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getOneChild().getLastChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getOneChild().getLastChild();	  Node    maybeExpr    =    n.getOneChild().getNext();    	non-compiled	[CE]  	21	None	replace
42	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getOneChild().getFirstChild().getNext();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getOneChild().getFirstChild().getNext();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getOneChild().getFirstChild().getNext();	  Node    maybeExpr    =    n.getOneChild().getNext();    	non-compiled	[CE]  	21	None	replace
43	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getOneChild().getInitializingChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getOneChild().getInitializingChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getOneChild().getInitializingChild();	  Node    maybeExpr    =    n.getOneChild().getNext();    	non-compiled	[CE]  	21	None	replace
44	[BUG]  [BUGGY]  return  n.getLastChild().getType()  ==  Token.BLOCK;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  return  n.getLastChild().getType()  ==  Token.BLOCK;  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	return  n.getLastChild().getType()  ==  Token.BLOCK;	  return    n.getFirstChild().getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	32	None	replace
45	[BUG]  [BUGGY]  return  n.getFirstChild().getType()!=  Token.BLOCK;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  return  n.getFirstChild().getType()!=  Token.BLOCK;  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	return  n.getFirstChild().getType()!=  Token.BLOCK;	  return    n.getFirstChild().getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	32	None	replace
46	[BUG]  [BUGGY]  return  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasOneChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  return  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasOneChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	return  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasOneChild();	  return    n.getFirstChild().getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	32	None	replace
47	[BUG]  [BUGGY]  return  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.getFirstChild().getType()  ==  Token.BLOCK;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  return  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.getFirstChild().getType()  ==  Token.BLOCK;  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	return  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.getFirstChild().getType()  ==  Token.BLOCK;	  return    n.getFirstChild().getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	32	None	replace
48	[BUG]  [BUGGY]  return  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.getLastChild().getType()  ==  Token.BLOCK;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  return  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.getLastChild().getType()  ==  Token.BLOCK;  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	return  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.getLastChild().getType()  ==  Token.BLOCK;	  return    n.getFirstChild().getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	32	None	replace
49	[BUG]  [BUGGY]  return  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  return  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	return  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.getLastChild().getType()  ==  Token.FUNCTION;	  return    n.getFirstChild().getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	32	None	replace
50	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getOneChild().cloneTree();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getOneChild().cloneTree();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getOneChild().cloneTree();	  Node    maybeExpr    =    n.getLastChild().cloneTree();    	non-compiled	[CE]  	22	None	replace
51	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getLastChild().getNext().cloneTree();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getLastChild().getNext().cloneTree();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getLastChild().getNext().cloneTree();	  Node    maybeExpr    =    n.getLastChild().cloneTree();    	non-compiled	[CE]  	22	None	replace
52	[BUG]  [BUGGY]  Node  maybeExpr  =  node.getLastChild().cloneTree();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  node.getLastChild().cloneTree();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  node.getLastChild().cloneTree();	  Node    maybeExpr    =    n.getLastChild().cloneTree();    	non-compiled	[CE]  	22	None	replace
53	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getfirstChild().cloneTree();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getfirstChild().cloneTree();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getfirstChild().cloneTree();	  Node    maybeExpr    =    n.getLastChild().cloneTree();    	non-compiled	[CE]  	22	None	replace
54	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getLastChild().cloneBlock();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getLastChild().cloneBlock();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getLastChild().cloneBlock();	  Node    maybeExpr    =    n.getFirstChild().cloneBlock();    	non-compiled	[CE]  	24	None	replace
55	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNext().cloneBlock();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNext().cloneBlock();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getNext().cloneBlock();	  Node    maybeExpr    =    n.getFirstChild().cloneBlock();    	non-compiled	[CE]  	24	None	replace
56	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getNext().cloneBlock();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getNext().cloneBlock();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getNext().cloneBlock();	  Node    maybeExpr    =    n.getFirstChild().cloneBlock();    	non-compiled	[CE]  	24	None	replace
57	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().cloneBlock(this);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().cloneBlock(this);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().cloneBlock(this);	  Node    maybeExpr    =    n.getFirstChild().cloneBlock();    	non-compiled	[CE]  	24	None	replace
58	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getImmutableValue();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getImmutableValue();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getImmutableValue();	  Node    maybeExpr    =    n.getPreviousChild();    	non-compiled	[CE]  	14	None	replace
59	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getLastChild().clonePath();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getLastChild().clonePath();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getLastChild().clonePath();	  Node    maybeExpr    =    n.getFirstChild().clonePath();    	non-compiled	[CE]  	27	None	replace
60	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().clonePath()  +  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().clonePath()  +  1;  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().clonePath()  +  1;	  Node    maybeExpr    =    n.getFirstChild().clonePath();    	non-compiled	[CE]  	27	None	replace
61	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getNext().clonePath();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getNext().clonePath();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getNext().clonePath();	  Node    maybeExpr    =    n.getFirstChild().clonePath();    	non-compiled	[CE]  	27	None	replace
62	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNext().clonePath();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNext().clonePath();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getNext().clonePath();	  Node    maybeExpr    =    n.getFirstChild().clonePath();    	non-compiled	[CE]  	27	None	replace
63	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getLastChild().getParent();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getLastChild().getParent();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getLastChild().getParent();	  Node    maybeExpr    =    n.getFirstChild().getParent();    	non-compiled	[CE]  	18	None	replace
64	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getNext().getNext();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getNext().getNext();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getNext().getNext();	  Node    maybeExpr    =    n.getFirstChild().getParent();    	non-compiled	[CE]  	18	None	replace
65	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getParent().cloneTree();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getParent().cloneTree();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getParent().cloneTree();	  Node    maybeExpr    =    n.getFirstChild().getNext().cloneTree();    	non-compiled	[CE]  	23	None	replace
66	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNext().cloneNode();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNext().cloneNode();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getNext().cloneNode();	  Node    maybeExpr    =    n.getFirstChild().getNext().cloneTree();    	non-compiled	[CE]  	23	None	replace
67	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNext().isFoldableExpressBlock();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNext().isFoldableExpressBlock();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getNext().isFoldableExpressBlock();	  Node    maybeExpr    =    n.getFirstChild().getNext().cloneTree();    	non-compiled	[CE]  	23	None	replace
68	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getNext().getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getNext().getFirstChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getNext().getFirstChild();	  Node    maybeExpr    =    n.getNext().removeFirstChild();    	non-compiled	[CE]  	3	None	replace
69	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getNext().removeChild(n.getFirstChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getNext().removeChild(n.getFirstChild());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getNext().removeChild(n.getFirstChild());	  Node    maybeExpr    =    n.getNext().removeFirstChild();    	non-compiled	[CE]  	3	None	replace
70	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getParent().removeFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getParent().removeFirstChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getParent().removeFirstChild();	  Node    maybeExpr    =    n.getNext().removeFirstChild();    	non-compiled	[CE]  	3	None	replace
71	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getNext().removeChild(n.getLastChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getNext().removeChild(n.getLastChild());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getNext().removeChild(n.getLastChild());	  Node    maybeExpr    =    n.getNext().removeFirstChild();    	non-compiled	[CE]  	3	None	replace
72	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getAncestor(1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getAncestor(1);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getAncestor(1);	  Node    maybeExpr    =    n.getAncestor(2);    	non-compiled	[CE]  	51	None	replace
73	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getAncestor(3);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getAncestor(3);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getAncestor(3);	  Node    maybeExpr    =    n.getAncestor(2);    	non-compiled	[CE]  	51	None	replace
74	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getAncestor(4);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getAncestor(4);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getAncestor(4);	  Node    maybeExpr    =    n.getAncestor(2);    	non-compiled	[CE]  	51	None	replace
75	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getAncestor(2)  +  1;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getAncestor(2)  +  1;  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getAncestor(2)  +  1;	  Node    maybeExpr    =    n.getAncestor(2);    	non-compiled	[CE]  	51	None	replace
76	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getAncestor(6);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getAncestor(6);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getAncestor(6);	  Node    maybeExpr    =    n.getAncestor(2);    	non-compiled	[CE]  	51	None	replace
77	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getAncestor(0);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getAncestor(0);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getAncestor(0);	  Node    maybeExpr    =    n.getAncestor(2);    	non-compiled	[CE]  	51	None	replace
78	[BUG]  [BUGGY]  Preconditions.checkState(n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Preconditions.checkState(n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Preconditions.checkState(n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  	31	None	replace
79	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  	31	None	replace
80	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  	31	None	replace
81	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getChild();	  Node    maybeExpr    =    n.getChildCount()    -    1;    	non-compiled	[CE]  	9	None	replace
82	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getString();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getString();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getString();	  Node    maybeExpr    =    n.getChildCount()    -    1;    	non-compiled	[CE]  	9	None	replace
83	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getLastChild().getChildCount();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getLastChild().getChildCount();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getLastChild().getChildCount();	  Node    maybeExpr    =    n.getChildCount()    -    1;    	non-compiled	[CE]  	9	None	replace
84	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getChildCount();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getChildCount();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getChildCount();	  Node    maybeExpr    =    n.getChildCount()    -    1;    	non-compiled	[CE]  	9	None	replace
85	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getLastChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getLastChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getOwnerChild().getLastChild();	  Node    maybeExpr    =    n.getOwnerChild().getFirstChild();    	non-compiled	[CE]  	41	None	replace
86	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getInitializingChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getInitializingChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getOwnerChild().getInitializingChild();	  Node    maybeExpr    =    n.getOwnerChild().getFirstChild();    	non-compiled	[CE]  	41	None	replace
87	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getAncestor(1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getAncestor(1);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getOwnerChild().getAncestor(1);	  Node    maybeExpr    =    n.getOwnerChild().getFirstChild();    	non-compiled	[CE]  	41	None	replace
88	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getParent().removeChild(n.getFirstChild());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getParent().removeChild(n.getFirstChild());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getParent().removeChild(n.getFirstChild());	  Node    maybeExpr    =    n.removeChild(n.getFirstChild());    	non-compiled	[CE]  	28	None	replace
89	[BUG]  [BUGGY]  Node  maybeExpr  =  n.removeChild(n.getString());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.removeChild(n.getString());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.removeChild(n.getString());	  Node    maybeExpr    =    n.removeChild(n.getFirstChild());    	non-compiled	[CE]  	28	None	replace
90	[BUG]  [BUGGY]  Node  maybeExpr  =  n.removeChild(n.getFirstChild(),  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.removeChild(n.getFirstChild(),  1);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.removeChild(n.getFirstChild(),  1);	  Node    maybeExpr    =    n.removeChild(n.getFirstChild());    	non-compiled	[CE]  	28	None	replace
91	[BUG]  [BUGGY]  Node  maybeExpr  =  n,  n.getChildCount()  +  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n,  n.getChildCount()  +  1;  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n,  n.getChildCount()  +  1;	  Node    maybeExpr    =    n.getChildCount()    +    1;    	non-compiled	[CE]  	10	None	replace
92	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getChild()  +  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getChild()  +  1;  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getChild()  +  1;	  Node    maybeExpr    =    n.getChildCount()    +    1;    	non-compiled	[CE]  	10	None	replace
93	[BUG]  [BUGGY]  Node  perhapsExpr  =  n.getChildCount();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  perhapsExpr  =  n.getChildCount();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  perhapsExpr  =  n.getChildCount();	  Node    maybeExpr    =    n.getChildCount()    +    1;    	non-compiled	[CE]  	10	None	replace
94	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	NodeTraversal.traverse(compiler,  n,  this,  STANDARD_OBJECT_CONSTRUCTORS);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	45	None	replace
95	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	NodeTraversal.traverse(compiler,  n,  INVALID_REGULAR_EXPRESSION_FLAGS);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	45	None	replace
96	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	NodeTraversal.traverse(compiler,  n,  this,  INVALID_REGULAR_EXPRESSION_FLAGS);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	45	None	replace
97	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  REGEXP_FLAGS);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  REGEXP_FLAGS);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	NodeTraversal.traverse(compiler,  n,  this,  REGEXP_FLAGS);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	45	None	replace
98	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	NodeTraversal.traverse(compiler,  n,  null);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	45	None	replace
99	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  null);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  null);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	NodeTraversal.traverse(compiler,  n,  this,  null);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	45	None	replace
100	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  maybeExpr);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  maybeExpr);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	NodeTraversal.traverse(compiler,  n,  this,  maybeExpr);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	45	None	replace
101	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().removeChild(n.getLastChild());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().removeChild(n.getLastChild());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().removeChild(n.getLastChild());	  Node    maybeExpr    =    n.removeChild(n.getLastChild());    	non-compiled	[CE]  	49	None	replace
102	[BUG]  [BUGGY]  Node  maybeExpr  =  n.removeFirstChild(n.getLastChild());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.removeFirstChild(n.getLastChild());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.removeFirstChild(n.getLastChild());	  Node    maybeExpr    =    n.removeChild(n.getLastChild());    	non-compiled	[CE]  	49	None	replace
103	[BUG]  [BUGGY]  Node  maybeExpr  =  n.addChildToFront(n.getLastChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.addChildToFront(n.getLastChild());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.addChildToFront(n.getLastChild());	  Node    maybeExpr    =    n.removeChild(n.getLastChild());    	non-compiled	[CE]  	49	None	replace
104	[BUG]  [BUGGY]  Node  maybeExpr  =  n.addChildToBack(n.getLastChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.addChildToBack(n.getLastChild());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.addChildToBack(n.getLastChild());	  Node    maybeExpr    =    n.removeChild(n.getLastChild());    	non-compiled	[CE]  	49	None	replace
105	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getLastChild().getAncestor(2);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getLastChild().getAncestor(2);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getLastChild().getAncestor(2);	  Node    maybeExpr    =    n.getFirstChild().getAncestor(2);    	non-compiled	[CE]  	43	None	replace
106	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getAncestor(1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getAncestor(1);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getAncestor(1);	  Node    maybeExpr    =    n.getFirstChild().getAncestor(2);    	non-compiled	[CE]  	43	None	replace
107	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getAncestor(3);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getAncestor(3);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getAncestor(3);	  Node    maybeExpr    =    n.getFirstChild().getAncestor(2);    	non-compiled	[CE]  	43	None	replace
108	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getAncestor(4);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getAncestor(4);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getAncestor(4);	  Node    maybeExpr    =    n.getFirstChild().getAncestor(2);    	non-compiled	[CE]  	43	None	replace
109	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getAncestor(6);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getAncestor(6);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getAncestor(6);	  Node    maybeExpr    =    n.getFirstChild().getAncestor(2);    	non-compiled	[CE]  	43	None	replace
110	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getAncestor(2)  +  1;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getAncestor(2)  +  1;  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getAncestor(2)  +  1;	  Node    maybeExpr    =    n.getFirstChild().getAncestor(2);    	non-compiled	[CE]  	43	None	replace
111	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getLastChild().getNext()  +  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getLastChild().getNext()  +  1;  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getLastChild().getNext()  +  1;	  Node    maybeExpr    =    n.getFirstChild().getNext()    +    1;    	non-compiled	[CE]  	20	None	replace
112	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getParent()  +  1;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getParent()  +  1;  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getParent()  +  1;	  Node    maybeExpr    =    n.getFirstChild().getNext()    +    1;    	non-compiled	[CE]  	20	None	replace
113	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNext()  *  1;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNext()  *  1;  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getNext()  *  1;	  Node    maybeExpr    =    n.getFirstChild().getNext()    +    1;    	non-compiled	[CE]  	20	None	replace
114	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getPrevious();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getPrevious();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getOwnerChild().getPrevious();	  Node    maybeExpr    =    n.getOwnerChild().getNext();    	non-compiled	[CE]  	6	None	replace
115	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getFirstChild().getNext();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getFirstChild().getNext();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getOwnerChild().getFirstChild().getNext();	  Node    maybeExpr    =    n.getOwnerChild().getNext();    	non-compiled	[CE]  	6	None	replace
116	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getConditionalExpr();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getConditionalExpr();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getOwnerChild().getConditionalExpr();	  Node    maybeExpr    =    n.getOwnerChild().getNext();    	non-compiled	[CE]  	6	None	replace
117	[BUG]  [BUGGY]  Node  maybeExpr  =  n.removeChildCount();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.removeChildCount();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.removeChildCount();	  Node    maybeExpr    =    n.getChildCount()    -    2;    	non-compiled	[CE]  	12	None	replace
118	[BUG]  [BUGGY]  Node  maybeExpr  =  no.getChildCount();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  no.getChildCount();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  no.getChildCount();	  Node    maybeExpr    =    n.getChildCount()    -    2;    	non-compiled	[CE]  	12	None	replace
119	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getAncestor(2);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getAncestor(2);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getOwnerChild().getAncestor(2);	  Node    maybeExpr    =    n.getOwnerChild().getParent();    	non-compiled	[CE]  	40	None	replace
120	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getFolder();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getFolder();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getOwnerChild().getFolder();	  Node    maybeExpr    =    n.getOwnerChild().getParent();    	non-compiled	[CE]  	40	None	replace
121	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getfirstChild().getNext();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getfirstChild().getNext();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getfirstChild().getNext();	  Node    maybeExpr    =    n.getLastChild().getNext();    	non-compiled	[CE]  	17	None	replace
122	[BUG]  [BUGGY]  Node  maybeExpr  =  node.getLastChild().getNext();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  node.getLastChild().getNext();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  node.getLastChild().getNext();	  Node    maybeExpr    =    n.getLastChild().getNext();    	non-compiled	[CE]  	17	None	replace
123	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getfirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getfirstChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getfirstChild();	  Node    maybeExpr    =    node.getLastChild();    	non-compiled	[CE]  	16	None	replace
124	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getOwner();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getOwner();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getInitializingChild().getOwner();	  Node    maybeExpr    =    n.getInitializingChild().getParent();    	non-compiled	[CE]  	52	None	replace
125	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getFolder();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getFolder();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getInitializingChild().getFolder();	  Node    maybeExpr    =    n.getInitializingChild().getParent();    	non-compiled	[CE]  	52	None	replace
126	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getConditionExpression();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getConditionExpression();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getInitializingChild().getConditionExpression();	  Node    maybeExpr    =    n.getInitializingChild().getParent();    	non-compiled	[CE]  	52	None	replace
127	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  REGEXP_FLAGS_RE);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  REGEXP_FLAGS_RE);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  REGEXP_FLAGS_RE);	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    	non-compiled	[CE]  	44	None	replace
128	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    	non-compiled	[CE]  	44	None	replace
129	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  STANDARD_OBJECT_CONSTRUCTORS);	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    	non-compiled	[CE]  	44	None	replace
130	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  INVALID_REGULAR_EXPRESSION_FLAGS);	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    	non-compiled	[CE]  	44	None	replace
131	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  this);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  this);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  this);	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    	non-compiled	[CE]  	44	None	replace
132	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getLastChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getInitializingChild().getLastChild();	  Node    maybeExpr    =    n.getInitializingChild().getFirstChild();    	non-compiled	[CE]  	53	None	replace
133	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getString();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getString();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getInitializingChild().getString();	  Node    maybeExpr    =    n.getInitializingChild().getFirstChild();    	non-compiled	[CE]  	53	None	replace
134	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getAncestor(1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getAncestor(1);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getInitializingChild().getAncestor(1);	  Node    maybeExpr    =    n.getInitializingChild().getFirstChild();    	non-compiled	[CE]  	53	None	replace
135	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getNext().removeFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getNext().removeFirstChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getInitializingChild().getNext().removeFirstChild();	  Node    maybeExpr    =    n.getInitializingChild().removeFirstChild();    	non-compiled	[CE]  	54	None	replace
136	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getNext().getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getNext().getFirstChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getInitializingChild().getNext().getFirstChild();	  Node    maybeExpr    =    n.getInitializingChild().removeFirstChild();    	non-compiled	[CE]  	54	None	replace
137	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	33	None	replace
138	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.BLOCK);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	33	None	replace
139	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	33	None	replace
140	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.hasOneChild());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.hasOneChild());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.hasOneChild());	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	33	None	replace
141	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.hasOneChild());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.hasOneChild());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.hasOneChild());	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	33	None	replace
142	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	33	None	replace
143	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getNext().cloneTree();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getNext().cloneTree();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getOwnerChild().getNext().cloneTree();	  Node    maybeExpr    =    n.getOwnerChild().cloneTree();    	non-compiled	[CE]  	7	None	replace
144	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getFirstChild().cloneTree();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getFirstChild().cloneTree();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getOwnerChild().getFirstChild().cloneTree();	  Node    maybeExpr    =    n.getOwnerChild().cloneTree();    	non-compiled	[CE]  	7	None	replace
145	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().cloneBlock();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().cloneBlock();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getOwnerChild().cloneBlock();	  Node    maybeExpr    =    n.getOwnerChild().cloneTree();    	non-compiled	[CE]  	7	None	replace
146	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getParent().cloneTree();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getParent().cloneTree();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getOwnerChild().getParent().cloneTree();	  Node    maybeExpr    =    n.getOwnerChild().cloneTree();    	non-compiled	[CE]  	7	None	replace
147	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getImmutableExpression().cloneTree();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getImmutableExpression().cloneTree();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getImmutableExpression().cloneTree();	  Node    maybeExpr    =    n.getImmutableExpression();    	non-compiled	[CE]  	39	None	replace
148	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getImmutableExpression().getFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getImmutableExpression().getFirstChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getImmutableExpression().getFirstChild();	  Node    maybeExpr    =    n.getImmutableExpression();    	non-compiled	[CE]  	39	None	replace
149	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getImmutableExpression().getParent();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getImmutableExpression().getParent();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getImmutableExpression().getParent();	  Node    maybeExpr    =    n.getImmutableExpression();    	non-compiled	[CE]  	39	None	replace
150	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getImmutableExpression().getNext();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getImmutableExpression().getNext();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getImmutableExpression().getNext();	  Node    maybeExpr    =    n.getImmutableExpression();    	non-compiled	[CE]  	39	None	replace
151	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getImmutableExpression(n.getFirstChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getImmutableExpression(n.getFirstChild());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getImmutableExpression(n.getFirstChild());	  Node    maybeExpr    =    n.getImmutableExpression();    	non-compiled	[CE]  	39	None	replace
152	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getChildCount()  /  2;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getChildCount()  /  2;  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getChildCount()  /  2;	  Node    maybeExpr    =    n.getChildCount()    *    2;    	non-compiled	[CE]  	11	None	replace
153	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getChildCount()  *  2  +  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getChildCount()  *  2  +  1;  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getChildCount()  *  2  +  1;	  Node    maybeExpr    =    n.getChildCount()    *    2;    	non-compiled	[CE]  	11	None	replace
154	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNext().getParent().removeFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNext().getParent().removeFirstChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getNext().getParent().removeFirstChild();	  Node    maybeExpr    =    n.getFirstChild().getNext().removeFirstChild();    	non-compiled	[CE]  	2	None	replace
155	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNext().replaceChild(n.getLastChild(),  n.getLastChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNext().replaceChild(n.getLastChild(),  n.getLastChild());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getNext().replaceChild(n.getLastChild(),  n.getLastChild());	  Node    maybeExpr    =    n.getFirstChild().getNext().removeFirstChild();    	non-compiled	[CE]  	2	None	replace
156	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNext().replaceChild(n.getLastChild(),  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNext().replaceChild(n.getLastChild(),  null);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getNext().replaceChild(n.getLastChild(),  null);	  Node    maybeExpr    =    n.getFirstChild().getNext().removeFirstChild();    	non-compiled	[CE]  	2	None	replace
157	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK);	  Preconditions.checkArgument(n.hasOneChild());    	non-compiled	[CE]  	57	None	replace
158	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(n.hasOneChild());    	non-compiled	[CE]  	57	None	replace
159	[BUG]  [BUGGY]  Preconditions.checkArgument(n.hasChildren());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Preconditions.checkArgument(n.hasChildren());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Preconditions.checkArgument(n.hasChildren());	  Preconditions.checkArgument(n.hasOneChild());    	non-compiled	[CE]  	57	None	replace
160	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  Preconditions.checkArgument(n.hasOneChild());    	non-compiled	[CE]  	57	None	replace
161	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getParent().cloneTree();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getParent().cloneTree();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getParent().cloneTree();	  Node    maybeExpr    =    n.getNext().cloneTree();    	non-compiled	[CE]  	25	None	replace
162	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getNext().cloneNode();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getNext().cloneNode();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getNext().cloneNode();	  Node    maybeExpr    =    n.getNext().cloneTree();    	non-compiled	[CE]  	25	None	replace
163	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getLastChild().getInitializingChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getLastChild().getInitializingChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getLastChild().getInitializingChild();	  Node    maybeExpr    =    n.getFirstChild().getInitializingChild();    	non-compiled	[CE]  	19	None	replace
164	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getNext().getInitializingChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getNext().getInitializingChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getNext().getInitializingChild();	  Node    maybeExpr    =    n.getFirstChild().getInitializingChild();    	non-compiled	[CE]  	19	None	replace
165	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNext().getInitializingChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNext().getInitializingChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getNext().getInitializingChild();	  Node    maybeExpr    =    n.getFirstChild().getInitializingChild();    	non-compiled	[CE]  	19	None	replace
166	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getInitializingChild()  +  1;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getInitializingChild()  +  1;  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getInitializingChild()  +  1;	  Node    maybeExpr    =    n.getFirstChild().getInitializingChild();    	non-compiled	[CE]  	19	None	replace
167	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getInitializingChild().getNext();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getInitializingChild().getNext();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getInitializingChild().getNext();	  Node    maybeExpr    =    n.getFirstChild().getInitializingChild();    	non-compiled	[CE]  	19	None	replace
168	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getBooleanValue();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getBooleanValue();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getBooleanValue();	  Node    maybeExpr    =    n.getOneChild();    	non-compiled	[CE]  	15	None	replace
169	[BUG]  [BUGGY]  Node  perhapsExpr  =  n.getFirstChild();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  perhapsExpr  =  n.getFirstChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  perhapsExpr  =  n.getFirstChild();	  Node    maybeExpr    =    node.getFirstChild();    	non-compiled	[CE]  	58	None	replace
170	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getNext().cloneTree();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getNext().cloneTree();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getInitializingChild().getNext().cloneTree();	  Node    maybeExpr    =    n.getInitializingChild().cloneTree();    	non-compiled	[CE]  	38	None	replace
171	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getFirstChild().cloneTree();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getFirstChild().cloneTree();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getInitializingChild().getFirstChild().cloneTree();	  Node    maybeExpr    =    n.getInitializingChild().cloneTree();    	non-compiled	[CE]  	38	None	replace
172	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getParent().cloneTree();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getParent().cloneTree();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getInitializingChild().getParent().cloneTree();	  Node    maybeExpr    =    n.getInitializingChild().cloneTree();    	non-compiled	[CE]  	38	None	replace
173	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().cloneBlock();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().cloneBlock();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getInitializingChild().cloneBlock();	  Node    maybeExpr    =    n.getInitializingChild().cloneTree();    	non-compiled	[CE]  	38	None	replace
174	[BUG]  [BUGGY]  Node  maybeExpr  =  n.firstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.firstChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.firstChild();	  Node    maybeExpr    =    n.removeLastChild();    	non-compiled	[CE]  	30	None	replace
175	[BUG]  [BUGGY]  Node  maybeExpr  =  n.removeOneChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.removeOneChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.removeOneChild();	  Node    maybeExpr    =    n.removeLastChild();    	non-compiled	[CE]  	30	None	replace
176	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getLastChild().getPredicate();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getLastChild().getPredicate();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getLastChild().getPredicate();	  Node    maybeExpr    =    n.getFirstChild().getPredicate();    	non-compiled	[CE]  	42	None	replace
177	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getNext().getPredicate();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getNext().getPredicate();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getNext().getPredicate();	  Node    maybeExpr    =    n.getFirstChild().getPredicate();    	non-compiled	[CE]  	42	None	replace
178	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getExpression();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getExpression();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getInitializingChild().getExpression();	  Node    maybeExpr    =    n.getInitializingChild().getNext();    	non-compiled	[CE]  	37	None	replace
179	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getPrevious();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getPrevious();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getInitializingChild().getPrevious();	  Node    maybeExpr    =    n.getInitializingChild().getNext();    	non-compiled	[CE]  	37	None	replace
180	[BUG]  [BUGGY]  Node  maybeExpr  =  n.removeFirstChild().getParent();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.removeFirstChild().getParent();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.removeFirstChild().getParent();	  Node    maybeExpr    =    n.removeFirstChild().getNext();    	non-compiled	[CE]  	55	None	replace
181	[BUG]  [BUGGY]  Node  maybeExpr  =  n.removeFirstChild().cloneTree().getNext();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.removeFirstChild().cloneTree().getNext();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.removeFirstChild().cloneTree().getNext();	  Node    maybeExpr    =    n.removeFirstChild().getNext();    	non-compiled	[CE]  	55	None	replace
182	[BUG]  [BUGGY]  Node  maybeExpr  =  n.removeLastChild().getNext();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.removeLastChild().getNext();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.removeLastChild().getNext();	  Node    maybeExpr    =    n.removeFirstChild().getNext();    	non-compiled	[CE]  	55	None	replace
183	[BUG]  [BUGGY]  Node  maybeExpr  =  n.removeOneChild().getNext();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.removeOneChild().getNext();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.removeOneChild().getNext();	  Node    maybeExpr    =    n.removeFirstChild().getNext();    	non-compiled	[CE]  	55	None	replace
184	[BUG]  [BUGGY]  Node  maybeExpr  =  n.cloneChildren();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.cloneChildren();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.cloneChildren();	  Node    maybeExpr    =    n.cloneTree();    	non-compiled	[CE]  	29	None	replace
185	[BUG]  [BUGGY]  Node  maybeExpr  =  n.cloneBlock();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.cloneBlock();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.cloneBlock();	  Node    maybeExpr    =    n.cloneTree();    	non-compiled	[CE]  	29	None	replace
186	[BUG]  [BUGGY]  Node  maybeExpr  =  n.cloneChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.cloneChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.cloneChild();	  Node    maybeExpr    =    n.cloneTree();    	non-compiled	[CE]  	29	None	replace
187	[BUG]  [BUGGY]  Node  maybeExpr  =  n.clone();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.clone();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.clone();	  Node    maybeExpr    =    n.cloneTree();    	non-compiled	[CE]  	29	None	replace
188	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren()  ||  n.hasChildren());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Preconditions.checkState(n.hasChildren()  ||  n.hasChildren());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Preconditions.checkState(n.hasChildren()  ||  n.hasChildren());	  Preconditions.checkState(n.hasChildren());    	non-compiled	[CE]  	46	None	replace
189	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren()  ||  n.hasOneChild());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Preconditions.checkState(n.hasChildren()  ||  n.hasOneChild());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Preconditions.checkState(n.hasChildren()  ||  n.hasOneChild());	  Preconditions.checkState(n.hasChildren());    	non-compiled	[CE]  	46	None	replace
190	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren()  &&!NodeUtil.isFoldableExpressBlock(n));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Preconditions.checkState(n.hasChildren()  &&!NodeUtil.isFoldableExpressBlock(n));  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Preconditions.checkState(n.hasChildren()  &&!NodeUtil.isFoldableExpressBlock(n));	  Preconditions.checkState(n.hasChildren());    	non-compiled	[CE]  	46	None	replace
191	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Preconditions.checkState(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Preconditions.checkState(n.hasChildren()  &&  n.getFirstChild().getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.hasChildren());    	non-compiled	[CE]  	46	None	replace
192	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren()  &&  n.getType()  ==  Token.BLOCK);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Preconditions.checkState(n.hasChildren()  &&  n.getType()  ==  Token.BLOCK);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Preconditions.checkState(n.hasChildren()  &&  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.hasChildren());    	non-compiled	[CE]  	46	None	replace
193	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getLastChild().getNextSibling();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getLastChild().getNextSibling();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getLastChild().getNextSibling();	  Node    maybeExpr    =    n.getFirstChild().getNextSibling();    	non-compiled	[CE]  	50	None	replace
194	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getPreviousSibling();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getPreviousSibling();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getPreviousSibling();	  Node    maybeExpr    =    n.getFirstChild().getNextSibling();    	non-compiled	[CE]  	50	None	replace
195	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNextParent();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNextParent();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getNextParent();	  Node    maybeExpr    =    n.getFirstChild().getNextSibling();    	non-compiled	[CE]  	50	None	replace
196	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren()  &&  n.hasChildren());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Preconditions.checkState(n.hasChildren()  &&  n.hasChildren());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Preconditions.checkState(n.hasChildren()  &&  n.hasChildren());	  Preconditions.checkState(n.hasChildren());    	non-compiled	[CE]  	46	None	replace
197	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren()  &&  n.hasOneChild());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Preconditions.checkState(n.hasChildren()  &&  n.hasOneChild());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Preconditions.checkState(n.hasChildren()  &&  n.hasOneChild());	  Preconditions.checkState(n.hasChildren());    	non-compiled	[CE]  	46	None	replace
198	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.hasChildren());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.hasChildren());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.hasChildren());	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	33	None	replace
199	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.hasOneChild());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.hasOneChild());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.hasOneChild());	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	33	None	replace
200	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EMPTY);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EMPTY);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Preconditions.checkState(n.getType()  ==  Token.EMPTY);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	33	None	replace
201	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getOperator();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getOperator();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getOperator();	  Node    maybeExpr    =    n.getFirstChild().getPredicate();    	non-compiled	[CE]  	42	None	replace
202	[BUG]  [BUGGY]  Node  maybeExpr  =  node.getFirstChild().getNext();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  node.getFirstChild().getNext();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  node.getFirstChild().getNext();	  Node    maybeExpr    =    n.getLastChild().getNext();    	non-compiled	[CE]  	17	None	replace
203	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getFolderParent();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getFolderParent();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getOwnerChild().getFolderParent();	  Node    maybeExpr    =    n.getOwnerChild().getParent();    	non-compiled	[CE]  	40	None	replace
204	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getPrettyPrinter();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getPrettyPrinter();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getOwnerChild().getPrettyPrinter();	  Node    maybeExpr    =    n.getOwnerChild().getParent();    	non-compiled	[CE]  	40	None	replace
205	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getParent().removeFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getParent().removeFirstChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getParent().removeFirstChild();	  Node    maybeExpr    =    n.getFirstChild().getNext().removeFirstChild();    	non-compiled	[CE]  	2	None	replace
206	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNext().getLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNext().getLastChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getNext().getLastChild();	  Node    maybeExpr    =    n.getFirstChild().getNext().removeFirstChild();    	non-compiled	[CE]  	2	None	replace
207	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNext().replaceChild(n.getLastChild(),  false);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNext().replaceChild(n.getLastChild(),  false);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getNext().replaceChild(n.getLastChild(),  false);	  Node    maybeExpr    =    n.getFirstChild().getNext().removeFirstChild();    	non-compiled	[CE]  	2	None	replace
208	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getOwnExpression(n.getFirstChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getOwnExpression(n.getFirstChild());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getInitializingChild().getOwnExpression(n.getFirstChild());	  Node    maybeExpr    =    n.getInitializingChild().removeFirstChild();    	non-compiled	[CE]  	54	None	replace
209	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getParent().removeChild(n.getLastChild());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getParent().removeChild(n.getLastChild());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getParent().removeChild(n.getLastChild());	  Node    maybeExpr    =    n.removeChild(n.getLastChild());    	non-compiled	[CE]  	49	None	replace
210	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getChildCount()  *  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getChildCount()  *  1;  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getChildCount()  *  1;	  Node    maybeExpr    =    n.getChildCount()    -    1;    	non-compiled	[CE]  	9	None	replace
211	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getChildAt(2);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getChildAt(2);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getChildAt(2);	  Node    maybeExpr    =    n.getChildAt(0);    	non-compiled	[CE]  	47	None	replace
212	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getChildAt(n.getLastChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getChildAt(n.getLastChild());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getChildAt(n.getLastChild());	  Node    maybeExpr    =    n.getChildAt(0);    	non-compiled	[CE]  	47	None	replace
213	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.hasChildCount());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.hasChildCount());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.hasChildCount());	  Preconditions.checkState(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	35	None	replace
214	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK,  n.hasOneChild());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK,  n.hasOneChild());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK,  n.hasOneChild());	  Preconditions.checkState(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	35	None	replace
215	[BUG]  [BUGGY]  return  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasLastChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  return  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasLastChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	return  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.hasLastChild();	  return    n.getFirstChild().getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	32	None	replace
216	[BUG]  [BUGGY]  return  n.getFirstChild().getType()!=  Token.BLOCK  ||  n.hasOneChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  return  n.getFirstChild().getType()!=  Token.BLOCK  ||  n.hasOneChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	return  n.getFirstChild().getType()!=  Token.BLOCK  ||  n.hasOneChild();	  return    n.getFirstChild().getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	32	None	replace
217	[BUG]  [BUGGY]  return  n.getNext().getType()  ==  Token.BLOCK;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  return  n.getNext().getType()  ==  Token.BLOCK;  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	return  n.getNext().getType()  ==  Token.BLOCK;	  return    n.getFirstChild().getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	32	None	replace
218	[BUG]  [BUGGY]  Node  mayExpr  =  n.getChildCount();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  mayExpr  =  n.getChildCount();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  mayExpr  =  n.getChildCount();	  Node    maybeExpr    =    n.getChildCount()    -    2;    	non-compiled	[CE]  	12	None	replace
219	[BUG]  [BUGGY]  Node  MaybeExpr  =  n.getChildCount();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  MaybeExpr  =  n.getChildCount();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  MaybeExpr  =  n.getChildCount();	  Node    maybeExpr    =    n.getChildCount()    -    2;    	non-compiled	[CE]  	12	None	replace
220	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().cloneTree(this);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().cloneTree(this);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getOwnerChild().cloneTree(this);	  Node    maybeExpr    =    n.getOwnerChild().cloneTree();    	non-compiled	[CE]  	7	None	replace
221	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getAlternateNode();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getAlternateNode();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getOwnerChild().getAlternateNode();	  Node    maybeExpr    =    n.getOwnerChild().cloneTree();    	non-compiled	[CE]  	7	None	replace
222	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getOneChild().getPredicate();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getOneChild().getPredicate();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getOneChild().getPredicate();	  Node    maybeExpr    =    n.getOneChild().getNext();    	non-compiled	[CE]  	21	None	replace
223	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getOneChild().getAncestor(2);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getOneChild().getAncestor(2);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getOneChild().getAncestor(2);	  Node    maybeExpr    =    n.getOneChild().getNext();    	non-compiled	[CE]  	21	None	replace
224	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getLastChild().removeChild(n.getLastChild());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getLastChild().removeChild(n.getLastChild());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getLastChild().removeChild(n.getLastChild());	  Node    maybeExpr    =    n.removeChild(n.getFirstChild());    	non-compiled	[CE]  	28	None	replace
225	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().removeChild(n.getFirstChild());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().removeChild(n.getFirstChild());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().removeChild(n.getFirstChild());	  Node    maybeExpr    =    n.removeChild(n.getFirstChild());    	non-compiled	[CE]  	28	None	replace
226	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getAncestor(2);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getAncestor(2);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getInitializingChild().getAncestor(2);	  Node    maybeExpr    =    n.getInitializingChild().getParent();    	non-compiled	[CE]  	52	None	replace
227	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getPredicate();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getPredicate();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getInitializingChild().getPredicate();	  Node    maybeExpr    =    n.getInitializingChild().getParent();    	non-compiled	[CE]  	52	None	replace
228	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getOwnerFunction();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getOwnerFunction();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getInitializingChild().getOwnerFunction();	  Node    maybeExpr    =    n.getInitializingChild().getParent();    	non-compiled	[CE]  	52	None	replace
229	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getChildren().iterator();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getChildren().iterator();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getChildren().iterator();	  Node    maybeExpr    =    n.getChildren();    	non-compiled	[CE]  	48	None	replace
230	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getOperator();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getOperator();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getOperator();	  Node    maybeExpr    =    n.getChildren();    	non-compiled	[CE]  	48	None	replace
231	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getImmutableSet();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getImmutableSet();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getImmutableSet();	  Node    maybeExpr    =    n.getOneChild();    	non-compiled	[CE]  	15	None	replace
232	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getImmutableExpression(n.getLastChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getImmutableExpression(n.getLastChild());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getImmutableExpression(n.getLastChild());	  Node    maybeExpr    =    n.getImmutableExpression();    	non-compiled	[CE]  	39	None	replace
233	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getImmutableExpression(n.getChildCount());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getImmutableExpression(n.getChildCount());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getImmutableExpression(n.getChildCount());	  Node    maybeExpr    =    n.getImmutableExpression();    	non-compiled	[CE]  	39	None	replace
234	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getLastChild().getFirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getLastChild().getFirstChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getLastChild().getFirstChild();	  Node    maybeExpr    =    n.getLastChild().removeFirstChild();    	non-compiled	[CE]  	1	None	replace
235	[BUG]  [BUGGY]  Node  maybeExpr  =  node.getFirstChild().removeFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  node.getFirstChild().removeFirstChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  node.getFirstChild().removeFirstChild();	  Node    maybeExpr    =    n.getLastChild().removeFirstChild();    	non-compiled	[CE]  	1	None	replace
236	[BUG]  [BUGGY]  Preconditions.checkState(n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Preconditions.checkState(n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Preconditions.checkState(n.hasOneChild()  ||  n.getFirstChild().getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  	31	None	replace
237	[BUG]  [BUGGY]  Preconditions.checkState(n.hasOneChild()  ||  n.getType()  ==  Token.NAME);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Preconditions.checkState(n.hasOneChild()  ||  n.getType()  ==  Token.NAME);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Preconditions.checkState(n.hasOneChild()  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  	31	None	replace
238	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getAlternateChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getAlternateChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getOwnerChild().getAlternateChild();	  Node    maybeExpr    =    n.getOwnerChild().getFirstChild();    	non-compiled	[CE]  	41	None	replace
239	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getPrevious();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getPrevious();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getPrevious();	  Node    maybeExpr    =    n.getFirstChild().getNext()    +    1;    	non-compiled	[CE]  	20	None	replace
240	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getAncestor(2).cloneTree();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getAncestor(2).cloneTree();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getAncestor(2).cloneTree();	  Node    maybeExpr    =    n.getAncestor(2);    	non-compiled	[CE]  	51	None	replace
241	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getAncestor(2).getParent();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getAncestor(2).getParent();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getAncestor(2).getParent();	  Node    maybeExpr    =    n.getAncestor(2);    	non-compiled	[CE]  	51	None	replace
242	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getFirstChild().getLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getFirstChild().getLastChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getInitializingChild().getFirstChild().getLastChild();	  Node    maybeExpr    =    n.getInitializingChild().getFirstChild();    	non-compiled	[CE]  	53	None	replace
243	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getFirstChild().getNext();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getFirstChild().getNext();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getInitializingChild().getFirstChild().getNext();	  Node    maybeExpr    =    n.getInitializingChild().getFirstChild();    	non-compiled	[CE]  	53	None	replace
244	[BUG]  [BUGGY]  Preconditions.checkArgument(n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Preconditions.checkArgument(n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Preconditions.checkArgument(n.hasOneChild()  ||  n.getType()  ==  Token.BLOCK);	  Preconditions.checkArgument(n.hasOneChild());    	non-compiled	[CE]  	57	None	replace
245	[BUG]  [BUGGY]  Node  maybeExpr  =  n.cloneNode();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.cloneNode();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.cloneNode();	  Node    maybeExpr    =    n.cloneTree();    	non-compiled	[CE]  	29	None	replace
246	[BUG]  [BUGGY]  Node  maybeExpr  =  n.get1stChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.get1stChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.get1stChild();	  Node    maybeExpr    =    node.getLastChild();    	non-compiled	[CE]  	16	None	replace
247	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getlastChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getlastChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getlastChild();	  Node    maybeExpr    =    node.getLastChild();    	non-compiled	[CE]  	16	None	replace
248	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getNext().copyCurrentStructure(n.getString());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getNext().copyCurrentStructure(n.getString());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getNext().copyCurrentStructure(n.getString());	  Node    maybeExpr    =    n.getNext().cloneTree();    	non-compiled	[CE]  	25	None	replace
249	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getOperator();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getOperator();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getInitializingChild().getOperator();	  Node    maybeExpr    =    n.getInitializingChild().getNext();    	non-compiled	[CE]  	37	None	replace
250	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getImmutableChild(0);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getImmutableChild(0);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getImmutableChild(0);	  Node    maybeExpr    =    n.getImmutableChild();    	non-compiled	[CE]  	5	None	replace
251	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getImmutableChild().removeFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getImmutableChild().removeFirstChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getImmutableChild().removeFirstChild();	  Node    maybeExpr    =    n.getImmutableChild();    	non-compiled	[CE]  	5	None	replace
252	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getImmutableChild().getFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getImmutableChild().getFirstChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getImmutableChild().getFirstChild();	  Node    maybeExpr    =    n.getImmutableChild();    	non-compiled	[CE]  	5	None	replace
253	[BUG]  [BUGGY]  n  =  n.getChildCount();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  n  =  n.getChildCount();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	n  =  n.getChildCount();	  n    =    n.getFirstChild();    	non-compiled	[CE]  	36	None	replace
254	[BUG]  [BUGGY]  n  =  n.getFirstChild().getNext();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  n  =  n.getFirstChild().getNext();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	n  =  n.getFirstChild().getNext();	  n    =    n.getFirstChild();    	non-compiled	[CE]  	36	None	replace
255	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getFold(n.getOwnerChild().getNext());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getFold(n.getOwnerChild().getNext());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getOwnerChild().getFold(n.getOwnerChild().getNext());	  Node    maybeExpr    =    n.getOwnerChild().getNext();    	non-compiled	[CE]  	6	None	replace
256	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getFolder(n.getOwnerChild().getNext());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getFolder(n.getOwnerChild().getNext());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getOwnerChild().getFolder(n.getOwnerChild().getNext());	  Node    maybeExpr    =    n.getOwnerChild().getNext();    	non-compiled	[CE]  	6	None	replace
257	[BUG]  [BUGGY]  return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasLastChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasLastChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasLastChild();	  return    n.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	34	None	replace
258	[BUG]  [BUGGY]  return  n.getNext().getType()  ==  Token.FUNCTION;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  return  n.getNext().getType()  ==  Token.FUNCTION;  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	return  n.getNext().getType()  ==  Token.FUNCTION;	  return    n.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	34	None	replace
259	[BUG]  [BUGGY]  return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.hasChildren();	  return    n.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	34	None	replace
260	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNext().isFoldableExpressBlock(n);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNext().isFoldableExpressBlock(n);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getNext().isFoldableExpressBlock(n);	  Node    maybeExpr    =    n.getFirstChild().getNext().cloneTree();    	non-compiled	[CE]  	23	None	replace
261	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getAncestor(2)-  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getAncestor(2)-  1;  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getAncestor(2)-  1;	  Node    maybeExpr    =    n.getFirstChild().getAncestor(2);    	non-compiled	[CE]  	43	None	replace
262	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getInitializingChild(n.getLastChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getInitializingChild(n.getLastChild());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getInitializingChild(n.getLastChild());	  Node    maybeExpr    =    n.getFirstChild().getInitializingChild();    	non-compiled	[CE]  	19	None	replace
263	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getFolderInitializingChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getFolderInitializingChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getFolderInitializingChild();	  Node    maybeExpr    =    n.getFirstChild().getInitializingChild();    	non-compiled	[CE]  	19	None	replace
264	[BUG]  [BUGGY]  Node  maybeExpr  =  n.removeFirstChild().getLastChild();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.removeFirstChild().getLastChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.removeFirstChild().getLastChild();	  Node    maybeExpr    =    n.removeFirstChild().getNext();    	non-compiled	[CE]  	55	None	replace
265	[BUG]  [BUGGY]  Node  maybeExpr  =  n.cloneTree().getNext();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.cloneTree().getNext();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.cloneTree().getNext();	  Node    maybeExpr    =    n.removeFirstChild().getNext();    	non-compiled	[CE]  	55	None	replace
266	[BUG]  [BUGGY]  Node  maybeExpr  =  n.removeFirstChild().getString();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.removeFirstChild().getString();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.removeFirstChild().getString();	  Node    maybeExpr    =    n.removeFirstChild().getNext();    	non-compiled	[CE]  	55	None	replace
267	[BUG]  [BUGGY]  Node  maybeExpr  =  n.addChildToFront(n);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.addChildToFront(n);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.addChildToFront(n);	  Node    maybeExpr    =    n.removeLastChild();    	non-compiled	[CE]  	30	None	replace
268	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getBlock();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getBlock();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getInitializingChild().getBlock();	  Node    maybeExpr    =    n.getInitializingChild().cloneTree();    	non-compiled	[CE]  	38	None	replace
269	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ImmutableSet());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ImmutableSet());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	NodeTraversal.traverse(compiler,  n,  new  ImmutableSet());	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    	non-compiled	[CE]  	44	None	replace
270	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  FoldArrayAction());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  FoldArrayAction());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	NodeTraversal.traverse(compiler,  n,  this,  new  FoldArrayAction());	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    	non-compiled	[CE]  	44	None	replace
271	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getImmutableExpressBlock(n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getImmutableExpressBlock(n);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getOwnerChild().getImmutableExpressBlock(n);	  Node    maybeExpr    =    n.getOwnerChild().getNext();    	non-compiled	[CE]  	6	None	replace
272	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getImmutableExpression();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getImmutableExpression();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getOwnerChild().getImmutableExpression();	  Node    maybeExpr    =    n.getOwnerChild().getNext();    	non-compiled	[CE]  	6	None	replace
273	[BUG]  [BUGGY]  Preconditions.checkArgument(n.hasOneChild()  ||  n.hasOneChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Preconditions.checkArgument(n.hasOneChild()  ||  n.hasOneChild());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Preconditions.checkArgument(n.hasOneChild()  ||  n.hasOneChild());	  Preconditions.checkArgument(n.hasOneChild());    	non-compiled	[CE]  	57	None	replace
274	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getAncestor(2).getNext();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getAncestor(2).getNext();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getAncestor(2).getNext();	  Node    maybeExpr    =    n.getAncestor(2);    	non-compiled	[CE]  	51	None	replace
275	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getNext().removeChild(n.getString());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getNext().removeChild(n.getString());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getNext().removeChild(n.getString());	  Node    maybeExpr    =    n.getNext().removeFirstChild();    	non-compiled	[CE]  	3	None	replace
276	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getAssignedValue();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getAssignedValue();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getInitializingChild().getAssignedValue();	  Node    maybeExpr    =    n.getInitializingChild().cloneTree();    	non-compiled	[CE]  	38	None	replace
277	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getOwnerDocument().cloneTree();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getOwnerDocument().cloneTree();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getInitializingChild().getOwnerDocument().cloneTree();	  Node    maybeExpr    =    n.getInitializingChild().cloneTree();    	non-compiled	[CE]  	38	None	replace
278	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  &&  n.hasChildren());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  &&  n.hasChildren());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  &&  n.hasChildren());	  Preconditions.checkState(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	35	None	replace
279	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getNext().removeChild(n.getNext());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getNext().removeChild(n.getNext());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getNext().removeChild(n.getNext());	  Node    maybeExpr    =    n.getNext().cloneTree();    	non-compiled	[CE]  	25	None	replace
280	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldBlockAction());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldBlockAction());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	NodeTraversal.traverse(compiler,  n,  new  FoldBlockAction());	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    	non-compiled	[CE]  	44	None	replace
281	[BUG]  [BUGGY]  return  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.getFirstChild().getType()  ==  Token.GETPROP;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  return  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.getFirstChild().getType()  ==  Token.GETPROP;  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	return  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.getFirstChild().getType()  ==  Token.GETPROP;	  return    n.getFirstChild().getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	32	None	replace
282	[BUG]  [BUGGY]  return  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  return  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	return  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.getFirstChild().getType()  ==  Token.FUNCTION;	  return    n.getFirstChild().getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	32	None	replace
283	[BUG]  [BUGGY]  return  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.getFirstChild().getType()  ==  Token.THIS;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  return  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.getFirstChild().getType()  ==  Token.THIS;  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	return  n.getFirstChild().getType()  ==  Token.BLOCK  ||  n.getFirstChild().getType()  ==  Token.THIS;	  return    n.getFirstChild().getType()    ==    Token.BLOCK;    	non-compiled	[CE]  	32	None	replace
284	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getOwnerDocument();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getOwnerDocument();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getInitializingChild().getOwnerDocument();	  Node    maybeExpr    =    n.getInitializingChild().getParent();    	non-compiled	[CE]  	52	None	replace
285	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getImmutableChildren();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getImmutableChildren();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getImmutableChildren();	  Node    maybeExpr    =    n.getOwner();    	non-compiled	[CE]  	8	None	replace
286	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getChildCount()  >  2;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getChildCount()  >  2;  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getChildCount()  >  2;	  Node    maybeExpr    =    n.getChildCount()    *    2;    	non-compiled	[CE]  	11	None	replace
287	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getChildren().iterator().next();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getChildren().iterator().next();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getChildren().iterator().next();	  Node    maybeExpr    =    n.getChildren();    	non-compiled	[CE]  	48	None	replace
288	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getChildren()  [0];  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getChildren()  [0];  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getChildren()  [0];	  Node    maybeExpr    =    n.getChildren();    	non-compiled	[CE]  	48	None	replace
289	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getBlock();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getBlock();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getOwnerChild().getBlock();	  Node    maybeExpr    =    n.getOwnerChild().cloneTree();    	non-compiled	[CE]  	7	None	replace
290	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getImmutableExpressions();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getImmutableExpressions();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getOwnerChild().getImmutableExpressions();	  Node    maybeExpr    =    n.getOwnerChild().cloneTree();    	non-compiled	[CE]  	7	None	replace
291	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  NOT_SAFE_TO_FOLD_WITHOUT_ARGS);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  NOT_SAFE_TO_FOLD_WITHOUT_ARGS);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	NodeTraversal.traverse(compiler,  n,  this,  NOT_SAFE_TO_FOLD_WITHOUT_ARGS);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	45	None	replace
292	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  NOT_TO_FOLD_WITHOUT_ARGS);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  NOT_TO_FOLD_WITHOUT_ARGS);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	NodeTraversal.traverse(compiler,  n,  this,  NOT_TO_FOLD_WITHOUT_ARGS);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	45	None	replace
293	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  justification);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  justification);  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	NodeTraversal.traverse(compiler,  n,  this,  justification);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	45	None	replace
294	[BUG]  [BUGGY]  return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.BLOCK;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.BLOCK;  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.BLOCK;	  return    n.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	34	None	replace
295	[BUG]  [BUGGY]  return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.NAME;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.NAME;  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.NAME;	  return    n.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	34	None	replace
296	[BUG]  [BUGGY]  return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.TRY;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.TRY;  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.TRY;	  return    n.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	34	None	replace
297	[BUG]  [BUGGY]  Node  maybeExpr  =  n.removeFirstChild().cloneTree();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.removeFirstChild().cloneTree();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.removeFirstChild().cloneTree();	  Node    maybeExpr    =    n.removeFirstChild().getNext();    	non-compiled	[CE]  	55	None	replace
298	[BUG]  [BUGGY]  Node  maybeExpr  =  node.getFirstChild().cloneTree();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  node.getFirstChild().cloneTree();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  node.getFirstChild().cloneTree();	  Node    maybeExpr    =    n.getLastChild().cloneTree();    	non-compiled	[CE]  	22	None	replace
299	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getChildCount()  >  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getChildCount()  >  1;  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getChildCount()  >  1;	  Node    maybeExpr    =    n.getChildCount()    -    1;    	non-compiled	[CE]  	9	None	replace
300	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNext().addChildToFront(n.getFirstChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNext().addChildToFront(n.getFirstChild());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getNext().addChildToFront(n.getFirstChild());	  Node    maybeExpr    =    n.getFirstChild().getNext().removeFirstChild();    	non-compiled	[CE]  	2	None	replace
301	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNext().isExported(n.getFirstChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNext().isExported(n.getFirstChild());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getNext().isExported(n.getFirstChild());	  Node    maybeExpr    =    n.getFirstChild().getNext().removeFirstChild();    	non-compiled	[CE]  	2	None	replace
302	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNext().replaceChild(n.getLastChild(),  new  FoldArrayAction());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNext().replaceChild(n.getLastChild(),  new  FoldArrayAction());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getNext().replaceChild(n.getLastChild(),  new  FoldArrayAction());	  Node    maybeExpr    =    n.getFirstChild().getNext().removeFirstChild();    	non-compiled	[CE]  	2	None	replace
303	[BUG]  [BUGGY]  Node  maybeExpr  =  n.addChildToFront(n.removeFirstChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.addChildToFront(n.removeFirstChild());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.addChildToFront(n.removeFirstChild());	  Node    maybeExpr    =    n.removeLastChild();    	non-compiled	[CE]  	30	None	replace
304	[BUG]  [BUGGY]  Node  maybeExpr  =  n.addChildToFront(n.getFirstChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.addChildToFront(n.getFirstChild());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.addChildToFront(n.getFirstChild());	  Node    maybeExpr    =    n.removeLastChild();    	non-compiled	[CE]  	30	None	replace
305	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNext().removeChild(n.getFirstChild());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNext().removeChild(n.getFirstChild());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getNext().removeChild(n.getFirstChild());	  Node    maybeExpr    =    n.getFirstChild().getNext().cloneTree();    	non-compiled	[CE]  	23	None	replace
306	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNext().isExpressBlock();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNext().isExpressBlock();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getNext().isExpressBlock();	  Node    maybeExpr    =    n.getFirstChild().getNext().cloneTree();    	non-compiled	[CE]  	23	None	replace
307	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNext().removeChild(n.getFirstChild().getNext());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNext().removeChild(n.getFirstChild().getNext());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getNext().removeChild(n.getFirstChild().getNext());	  Node    maybeExpr    =    n.getFirstChild().getNext().cloneTree();    	non-compiled	[CE]  	23	None	replace
308	[BUG]  [BUGGY]  Preconditions.checkState(n.hasOneChild()  ||  n.hasOneChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Preconditions.checkState(n.hasOneChild()  ||  n.hasOneChild());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Preconditions.checkState(n.hasOneChild()  ||  n.hasOneChild());	  Preconditions.checkState(n.hasOneChild());    	non-compiled	[CE]  	31	None	replace
309	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getChildAtFirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getChildAtFirstChild();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getChildAtFirstChild();	  Node    maybeExpr    =    n.getChildAt(0);    	non-compiled	[CE]  	47	None	replace
310	[BUG]  [BUGGY]  Node  maybeExpr  =  node.removeChild(n.getFirstChild());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  node.removeChild(n.getFirstChild());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  node.removeChild(n.getFirstChild());	  Node    maybeExpr    =    n.removeChild(n.getLastChild());    	non-compiled	[CE]  	49	None	replace
311	[BUG]  [BUGGY]  Node  maybeExpr  =  this.maybeExpr.removeChild(n.getFirstChild());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  this.maybeExpr.removeChild(n.getFirstChild());  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  this.maybeExpr.removeChild(n.getFirstChild());	  Node    maybeExpr    =    n.removeChild(n.getLastChild());    	non-compiled	[CE]  	49	None	replace
312	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getNextSibling();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getNextSibling();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getInitializingChild().getNextSibling();	  Node    maybeExpr    =    n.getInitializingChild().removeFirstChild();    	non-compiled	[CE]  	54	None	replace
313	[BUG]  [BUGGY]  n  =  n.getOwnerDocument();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  n  =  n.getOwnerDocument();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	n  =  n.getOwnerDocument();	  n    =    n.getFirstChild();    	non-compiled	[CE]  	36	None	replace
314	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getInitializingChild().cloneTree();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {      [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getInitializingChild().cloneTree();  [BUGGY]                [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getInitializingChild().cloneTree();	  Node    maybeExpr    =    n.getFirstChild().getInitializingChild();    	non-compiled	[CE]  	19	None	replace
