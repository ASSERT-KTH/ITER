bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getLastChild().removeFirstChild();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.getLastChild().removeFirstChild();  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getLastChild().removeFirstChild();	  Node    maybeExpr    =    n.getFirstChild().removeFirstChild();    	non-compiled	[CE]  	11	None	replace
2	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNext().removeFirstChild();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNext().removeFirstChild();  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getNext().removeFirstChild();	  Node    maybeExpr    =    n.getFirstChild().removeFirstChild();    	non-compiled	[CE]  	11	None	replace
3	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getNext().removeFirstChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.getNext().removeFirstChild();  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getNext().removeFirstChild();	  Node    maybeExpr    =    n.getFirstChild().removeFirstChild();    	non-compiled	[CE]  	11	None	replace
4	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getLastChild();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getLastChild();  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getLastChild();	  Node    maybeExpr    =    n.getFirstChild().removeFirstChild();    	non-compiled	[CE]  	11	None	replace
5	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getImmutableChild();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.getImmutableChild();  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getImmutableChild();	  Node    maybeExpr    =    n.getOwnerChild();    	non-compiled	[CE]  	5	None	replace
6	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getNext();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getNext();  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getOwnerChild().getNext();	  Node    maybeExpr    =    n.getOwnerChild();    	non-compiled	[CE]  	5	None	replace
7	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().cloneTree();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().cloneTree();  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getOwnerChild().cloneTree();	  Node    maybeExpr    =    n.getOwnerChild();    	non-compiled	[CE]  	5	None	replace
8	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getOwner();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.getOwner();  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getOwner();	  Node    maybeExpr    =    n.getOwnerChild();    	non-compiled	[CE]  	5	None	replace
9	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getChildCount()  -  1;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.getChildCount()  -  1;  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getChildCount()  -  1;	  Node    maybeExpr    =    n.getChildCount();    	non-compiled	[CE]  	9	None	replace
10	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getChildCount()  +  1;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.getChildCount()  +  1;  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getChildCount()  +  1;	  Node    maybeExpr    =    n.getChildCount();    	non-compiled	[CE]  	9	None	replace
11	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getChildCount()  *  2;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.getChildCount()  *  2;  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getChildCount()  *  2;	  Node    maybeExpr    =    n.getChildCount();    	non-compiled	[CE]  	9	None	replace
12	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getChildCount()  -  2;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.getChildCount()  -  2;  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getChildCount()  -  2;	  Node    maybeExpr    =    n.getChildCount();    	non-compiled	[CE]  	9	None	replace
13	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFolder();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.getFolder();  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFolder();	  Node    maybeExpr    =    n.getParent();    	non-compiled	[CE]  	6	None	replace
14	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getPreviousChild();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.getPreviousChild();  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getPreviousChild();	  Node    maybeExpr    =    n.getParent();    	non-compiled	[CE]  	6	None	replace
15	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getOneChild();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.getOneChild();  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getOneChild();	  Node    maybeExpr    =    n.getLastChild();    	non-compiled	[CE]  	1	None	replace
16	[BUG]  [BUGGY]  Node  maybeExpr  =  node.getLastChild();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  node.getLastChild();  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  node.getLastChild();	  Node    maybeExpr    =    n.getLastChild();    	non-compiled	[CE]  	1	None	replace
17	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getLastChild().getNext();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.getLastChild().getNext();  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getLastChild().getNext();	  Node    maybeExpr    =    n.getFirstChild().getNext();    	non-compiled	[CE]  	4	None	replace
18	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getParent();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getParent();  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getParent();	  Node    maybeExpr    =    n.getFirstChild().getNext();    	non-compiled	[CE]  	4	None	replace
19	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getInitializingChild();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getInitializingChild();  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getInitializingChild();	  Node    maybeExpr    =    n.getFirstChild().getNext();    	non-compiled	[CE]  	4	None	replace
20	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNext()  +  1;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNext()  +  1;  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getNext()  +  1;	  Node    maybeExpr    =    n.getFirstChild().getNext();    	non-compiled	[CE]  	4	None	replace
21	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getOneChild().getNext();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.getOneChild().getNext();  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getOneChild().getNext();	  Node    maybeExpr    =    n.getFirstChild().getNext();    	non-compiled	[CE]  	4	None	replace
22	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getLastChild().cloneTree();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.getLastChild().cloneTree();  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getLastChild().cloneTree();	  Node    maybeExpr    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  	10	None	replace
23	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNext().cloneTree();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNext().cloneTree();  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getNext().cloneTree();	  Node    maybeExpr    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  	10	None	replace
24	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().cloneBlock();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.getFirstChild().cloneBlock();  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().cloneBlock();	  Node    maybeExpr    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  	10	None	replace
25	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getNext().cloneTree();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.getNext().cloneTree();  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getNext().cloneTree();	  Node    maybeExpr    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  	10	None	replace
26	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().cloneNode();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.getFirstChild().cloneNode();  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().cloneNode();	  Node    maybeExpr    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  	10	None	replace
27	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().clonePath();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.getFirstChild().clonePath();  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().clonePath();	  Node    maybeExpr    =    n.getFirstChild().cloneTree();    	non-compiled	[CE]  	10	None	replace
28	[BUG]  [BUGGY]  Node  maybeExpr  =  n.removeChild(n.getFirstChild());  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.removeChild(n.getFirstChild());  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.removeChild(n.getFirstChild());	  Node    maybeExpr    =    n.removeFirstChild();    	non-compiled	[CE]  	8	None	replace
29	[BUG]  [BUGGY]  Node  maybeExpr  =  n.cloneTree();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.cloneTree();  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.cloneTree();	  Node    maybeExpr    =    n.removeFirstChild();    	non-compiled	[CE]  	8	None	replace
30	[BUG]  [BUGGY]  Node  maybeExpr  =  n.removeLastChild();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.removeLastChild();  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.removeLastChild();	  Node    maybeExpr    =    n.removeFirstChild();    	non-compiled	[CE]  	8	None	replace
31	[BUG]  [BUGGY]  Preconditions.checkState(n.hasOneChild());  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Preconditions.checkState(n.hasOneChild());  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Preconditions.checkState(n.hasOneChild());	      	non-compiled	[CE]  	7	None	replace
32	[BUG]  [BUGGY]  return  n.getFirstChild().getType()  ==  Token.BLOCK;  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  return  n.getFirstChild().getType()  ==  Token.BLOCK;  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	return  n.getFirstChild().getType()  ==  Token.BLOCK;	      	non-compiled	[CE]  	7	None	replace
33	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);	      	non-compiled	[CE]  	7	None	replace
34	[BUG]  [BUGGY]  return  n.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  return  n.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	return  n.getFirstChild().getType()  ==  Token.FUNCTION;	      	non-compiled	[CE]  	7	None	replace
35	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK);	      	non-compiled	[CE]  	7	None	replace
36	[BUG]  [BUGGY]  n  =  n.getFirstChild();  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  n  =  n.getFirstChild();  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	n  =  n.getFirstChild();	      	non-compiled	[CE]  	7	None	replace
37	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getNext();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getNext();  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getInitializingChild().getNext();	  Node    maybeExpr    =    n.getInitializingChild();    	non-compiled	[CE]  	3	None	replace
38	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().cloneTree();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().cloneTree();  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getInitializingChild().cloneTree();	  Node    maybeExpr    =    n.getInitializingChild();    	non-compiled	[CE]  	3	None	replace
39	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getImmutableExpression();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.getImmutableExpression();  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getImmutableExpression();	  Node    maybeExpr    =    n.getInitializingChild();    	non-compiled	[CE]  	3	None	replace
40	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getParent();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getParent();  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getOwnerChild().getParent();	  Node    maybeExpr    =    n.getOwnerChild();    	non-compiled	[CE]  	5	None	replace
41	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getFirstChild();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.getOwnerChild().getFirstChild();  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getOwnerChild().getFirstChild();	  Node    maybeExpr    =    n.getOwnerChild();    	non-compiled	[CE]  	5	None	replace
42	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getPredicate();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getPredicate();  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getPredicate();	  Node    maybeExpr    =    n.getFirstChild().getNext();    	non-compiled	[CE]  	4	None	replace
43	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getAncestor(2);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getAncestor(2);  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getAncestor(2);	  Node    maybeExpr    =    n.getFirstChild().getNext();    	non-compiled	[CE]  	4	None	replace
44	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction());  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction());  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction());	      	non-compiled	[CE]  	7	None	replace
45	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	NodeTraversal.traverse(compiler,  n,  this);	      	non-compiled	[CE]  	7	None	replace
46	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren());  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Preconditions.checkState(n.hasChildren());  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Preconditions.checkState(n.hasChildren());	      	non-compiled	[CE]  	7	None	replace
47	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getChildAt(0);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.getChildAt(0);  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getChildAt(0);	  Node    maybeExpr    =    n.getChildCount();    	non-compiled	[CE]  	9	None	replace
48	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getChildren();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.getChildren();  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getChildren();	  Node    maybeExpr    =    n.getChildCount();    	non-compiled	[CE]  	9	None	replace
49	[BUG]  [BUGGY]  Node  maybeExpr  =  n.removeChild(n.getLastChild());  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.removeChild(n.getLastChild());  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.removeChild(n.getLastChild());	  Node    maybeExpr    =    n.removeFirstChild();    	non-compiled	[CE]  	8	None	replace
50	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNextSibling();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.getFirstChild().getNextSibling();  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().getNextSibling();	  Node    maybeExpr    =    n.getFirstChild().removeFirstChild();    	non-compiled	[CE]  	11	None	replace
51	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getAncestor(2);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.getAncestor(2);  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getAncestor(2);	  Node    maybeExpr    =    n.getParent();    	non-compiled	[CE]  	6	None	replace
52	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getParent();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getParent();  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getInitializingChild().getParent();	  Node    maybeExpr    =    n.getInitializingChild();    	non-compiled	[CE]  	3	None	replace
53	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getFirstChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().getFirstChild();  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getInitializingChild().getFirstChild();	  Node    maybeExpr    =    n.getInitializingChild();    	non-compiled	[CE]  	3	None	replace
54	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().removeFirstChild();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.getInitializingChild().removeFirstChild();  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getInitializingChild().removeFirstChild();	  Node    maybeExpr    =    n.getInitializingChild();    	non-compiled	[CE]  	3	None	replace
55	[BUG]  [BUGGY]  Node  maybeExpr  =  n.removeFirstChild().getNext();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.removeFirstChild().getNext();  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.removeFirstChild().getNext();	  Node    maybeExpr    =    n.removeFirstChild();    	non-compiled	[CE]  	8	None	replace
56	[BUG]  [BUGGY]  Node  maybeExpr  =  n.getFirstChild().removeLastChild();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  n.getFirstChild().removeLastChild();  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  n.getFirstChild().removeLastChild();	  Node    maybeExpr    =    n.getFirstChild().removeFirstChild();    	non-compiled	[CE]  	11	None	replace
57	[BUG]  [BUGGY]  Preconditions.checkArgument(n.hasOneChild());  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Preconditions.checkArgument(n.hasOneChild());  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Preconditions.checkArgument(n.hasOneChild());	      	non-compiled	[CE]  	7	None	replace
58	[BUG]  [BUGGY]  Node  maybeExpr  =  node.getFirstChild();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isFoldableExpressBlock(Node  n)  {  if  (n.getType()  ==  Token.BLOCK)  {  if  (n.hasOneChild())  {    [BUGGY]  Node  maybeExpr  =  node.getFirstChild();  [BUGGY]              [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isFoldableExpressBlock  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  maybeExpr  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.30151134457776363	522	522	1	replace	Node  maybeExpr  =  node.getFirstChild();	  Node    maybeExpr    =    n.getLastChild();    	non-compiled	[CE]  	1	None	replace
