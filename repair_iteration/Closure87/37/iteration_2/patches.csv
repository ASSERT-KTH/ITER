bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  tryMinimizeCondition(node.getParent(),  node);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getParent(),  node);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getParent(),  node);	  tryMinimizeCondition(node.getNext(),    node);    	non-compiled	[CE]  	8	None	replace
2	[BUG]  [BUGGY]  tryMinimizeCondition(node.getPrevious(),  node);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getPrevious(),  node);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getPrevious(),  node);	  tryMinimizeCondition(node.getNext(),    node);    	non-compiled	[CE]  	8	None	replace
3	[BUG]  [BUGGY]  tryMinimizeIF(node.getLastChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeIF(node.getLastChild());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeIF(node.getLastChild());	  tryMinimizeIF(node.getFirstChild());    	non-compiled	[CE]  	16	None	replace
4	[BUG]  [BUGGY]  tryMinimizeIF(node.getType());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeIF(node.getType());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeIF(node.getType());	  tryMinimizeIF(node.getFirstChild());    	non-compiled	[CE]  	16	None	replace
5	[BUG]  [BUGGY]  tryMinimize(node.getChildCount()  -  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimize(node.getChildCount()  -  1);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimize(node.getChildCount()  -  1);	  tryMinimize(node.getChildCount());    	non-compiled	[CE]  	37	None	replace
6	[BUG]  [BUGGY]  tryMinimize(node.getChildCount()  +  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimize(node.getChildCount()  +  1);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimize(node.getChildCount()  +  1);	  tryMinimize(node.getChildCount());    	non-compiled	[CE]  	37	None	replace
7	[BUG]  [BUGGY]  tryMinimizeNot(node.getChildCount());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeNot(node.getChildCount());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeNot(node.getChildCount());	  tryMinimize(node.getChildCount());    	non-compiled	[CE]  	37	None	replace
8	[BUG]  [BUGGY]  tryMinimizeIf(node.getChildCount());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeIf(node.getChildCount());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeIf(node.getChildCount());	  tryMinimize(node.getChildCount());    	non-compiled	[CE]  	37	None	replace
9	[BUG]  [BUGGY]  tryMinimizeField(node.getLastChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeField(node.getLastChild());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeField(node.getLastChild());	  tryMinimizeField(node.getFirstChild());    	non-compiled	[CE]  	28	None	replace
10	[BUG]  [BUGGY]  tryMinimizeField(node.getType());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeField(node.getType());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeField(node.getType());	  tryMinimizeField(node.getFirstChild());    	non-compiled	[CE]  	28	None	replace
11	[BUG]  [BUGGY]  tryMinimizeReturn(node.getLastChild(),  node);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeReturn(node.getLastChild(),  node);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeReturn(node.getLastChild(),  node);	  tryMinimizeReturn(node.getFirstChild(),    node);    	non-compiled	[CE]  	39	None	replace
12	[BUG]  [BUGGY]  tryMinimizeFor(node.getFirstChild(),  node);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeFor(node.getFirstChild(),  node);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeFor(node.getFirstChild(),  node);	  tryMinimizeReturn(node.getFirstChild(),    node);    	non-compiled	[CE]  	39	None	replace
13	[BUG]  [BUGGY]  tryMinimizeFunction(node.getLastChild(),  node);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeFunction(node.getLastChild(),  node);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeFunction(node.getLastChild(),  node);	  tryMinimizeFunction(node.getFirstChild(),    node);    	non-compiled	[CE]  	38	None	replace
14	[BUG]  [BUGGY]  tryMinimizeField(node.getFirstChild(),  node);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeField(node.getFirstChild(),  node);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeField(node.getFirstChild(),  node);	  tryMinimizeFunction(node.getFirstChild(),    node);    	non-compiled	[CE]  	38	None	replace
15	[BUG]  [BUGGY]  tryMinimizeCondition(node.getString(),  NodeUtil.isFunctionDeclaration(node));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getString(),  NodeUtil.isFunctionDeclaration(node));  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getString(),  NodeUtil.isFunctionDeclaration(node));	  tryMinimizeCondition(node.getString(),    node);    	non-compiled	[CE]  	1	None	replace
16	[BUG]  [BUGGY]  tryMinimizeCondition(node.getString(),  NodeUtil.isExpressionNode(node));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getString(),  NodeUtil.isExpressionNode(node));  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getString(),  NodeUtil.isExpressionNode(node));	  tryMinimizeCondition(node.getString(),    node);    	non-compiled	[CE]  	1	None	replace
17	[BUG]  [BUGGY]  tryMinimizeCondition(node.getString(),  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getString(),  null);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getString(),  null);	  tryMinimizeCondition(node.getString(),    node);    	non-compiled	[CE]  	1	None	replace
18	[BUG]  [BUGGY]  tryMinimizeCondition(node.getString(),  node  +  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getString(),  node  +  1);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getString(),  node  +  1);	  tryMinimizeCondition(node.getString(),    node);    	non-compiled	[CE]  	1	None	replace
19	[BUG]  [BUGGY]  tryMinimizeCondition(node.getString(),  NodeUtil.isEmpty(node));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getString(),  NodeUtil.isEmpty(node));  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getString(),  NodeUtil.isEmpty(node));	  tryMinimizeCondition(node.getString(),    node);    	non-compiled	[CE]  	1	None	replace
20	[BUG]  [BUGGY]  Node  node  =  getSubtree(node.getFirstChild());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  Node  node  =  getSubtree(node.getFirstChild());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	Node  node  =  getSubtree(node.getFirstChild());	  Node    node    =    getSubtree(node.getLastChild());    	non-compiled	[CE]  	33	None	replace
21	[BUG]  [BUGGY]  Node  node  =  tryMinimizeCondition(node.getLastChild());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  Node  node  =  tryMinimizeCondition(node.getLastChild());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	Node  node  =  tryMinimizeCondition(node.getLastChild());	  Node    node    =    getSubtree(node.getLastChild());    	non-compiled	[CE]  	33	None	replace
22	[BUG]  [BUGGY]  Node  node  =  findSubtree(node.getFirstChild());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  Node  node  =  findSubtree(node.getFirstChild());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	Node  node  =  findSubtree(node.getFirstChild());	  Node    node    =    getSubtree(node.getLastChild());    	non-compiled	[CE]  	33	None	replace
23	[BUG]  [BUGGY]  Node  node  =  getSubtraversal(node.getLastChild());  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  Node  node  =  getSubtraversal(node.getLastChild());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	Node  node  =  getSubtraversal(node.getLastChild());	  Node    node    =    getSubtree(node.getLastChild());    	non-compiled	[CE]  	33	None	replace
24	[BUG]  [BUGGY]  Node  node  =  getSubtractor(node.getFirstChild());  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  Node  node  =  getSubtractor(node.getFirstChild());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	Node  node  =  getSubtractor(node.getFirstChild());	  Node    node    =    getSubtree(node.getLastChild());    	non-compiled	[CE]  	33	None	replace
25	[BUG]  [BUGGY]  Node  node  =  getSubtree(node.getLastChild(),  null);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  Node  node  =  getSubtree(node.getLastChild(),  null);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	Node  node  =  getSubtree(node.getLastChild(),  null);	  Node    node    =    getSubtree(node.getLastChild());    	non-compiled	[CE]  	33	None	replace
26	[BUG]  [BUGGY]  TryMinimizeCondition(node.getChildCount());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  TryMinimizeCondition(node.getChildCount());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	TryMinimizeCondition(node.getChildCount());	  tryMinimizeCondition(node.getChildCount()    -    2);    	non-compiled	[CE]  	36	None	replace
27	[BUG]  [BUGGY]  tryMaximizeCondition(node.getChildCount());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMaximizeCondition(node.getChildCount());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMaximizeCondition(node.getChildCount());	  tryMinimizeCondition(node.getChildCount()    -    2);    	non-compiled	[CE]  	36	None	replace
28	[BUG]  [BUGGY]  tryMinimizeNot(node.getString());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeNot(node.getString());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeNot(node.getString());	  tryMinimizeIf(node.getString());    	non-compiled	[CE]  	40	None	replace
29	[BUG]  [BUGGY]  tryMinimizeCondition(node.getInitialChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getInitialChild());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getInitialChild());	  tryMinimizeCondition(node.getInitialValue());    	non-compiled	[CE]  	45	None	replace
30	[BUG]  [BUGGY]  tryMinimizeCondition(node.getInitialState());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getInitialState());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getInitialState());	  tryMinimizeCondition(node.getInitialValue());    	non-compiled	[CE]  	45	None	replace
31	[BUG]  [BUGGY]  tryMinimizeCondition(node.getInitialValue(),  node);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getInitialValue(),  node);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getInitialValue(),  node);	  tryMinimizeCondition(node.getInitialValue());    	non-compiled	[CE]  	45	None	replace
32	[BUG]  [BUGGY]  tryMinimizeCondition(node.getInitializingChild(),  node);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getInitializingChild(),  node);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getInitializingChild(),  node);	  tryMinimizeCondition(node.getInitializingChild());    	non-compiled	[CE]  	3	None	replace
33	[BUG]  [BUGGY]  tryMinimize(node.getInitializingChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimize(node.getInitializingChild());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimize(node.getInitializingChild());	  tryMinimizeCondition(node.getInitializingChild());    	non-compiled	[CE]  	3	None	replace
34	[BUG]  [BUGGY]  tryMinimizeNot(node.getInitializingChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeNot(node.getInitializingChild());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeNot(node.getInitializingChild());	  tryMinimizeCondition(node.getInitializingChild());    	non-compiled	[CE]  	3	None	replace
35	[BUG]  [BUGGY]  tryReduceSubtree(node.getInitializingChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryReduceSubtree(node.getInitializingChild());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryReduceSubtree(node.getInitializingChild());	  tryMinimizeCondition(node.getInitializingChild());    	non-compiled	[CE]  	3	None	replace
36	[BUG]  [BUGGY]  tryReduceSubtree(node.getLastChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryReduceSubtree(node.getLastChild());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryReduceSubtree(node.getLastChild());	  tryMinimize(node.getLastChild());    	non-compiled	[CE]  	18	None	replace
37	[BUG]  [BUGGY]  tryMinimizeCondition(node.getString(),  node.getLastChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getString(),  node.getLastChild());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getString(),  node.getLastChild());	  tryMinimizeCondition(node.getString()    +    1);    	non-compiled	[CE]  	52	None	replace
38	[BUG]  [BUGGY]  tryMinimizeCondition(node.getString(),  node.getType());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getString(),  node.getType());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getString(),  node.getType());	  tryMinimizeCondition(node.getString()    +    1);    	non-compiled	[CE]  	52	None	replace
39	[BUG]  [BUGGY]  TryMinimizeCondition(node.getString());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  TryMinimizeCondition(node.getString());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	TryMinimizeCondition(node.getString());	  tryMinimizeCondition(node.getString()    +    1);    	non-compiled	[CE]  	52	None	replace
40	[BUG]  [BUGGY]  tryMinimizeCondition(node.getString(),  node.getLocalPart());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getString(),  node.getLocalPart());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getString(),  node.getLocalPart());	  tryMinimizeCondition(node.getString()    +    1);    	non-compiled	[CE]  	52	None	replace
41	[BUG]  [BUGGY]  Node  node  =  node.removeFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  Node  node  =  node.removeFirstChild();  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	Node  node  =  node.removeFirstChild();	  Node    node    =    node.getLastChild();    	non-compiled	[CE]  	50	None	replace
42	[BUG]  [BUGGY]  Node  node  =  parent.getFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  Node  node  =  parent.getFirstChild();  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	Node  node  =  parent.getFirstChild();	  Node    node    =    node.getLastChild();    	non-compiled	[CE]  	50	None	replace
43	[BUG]  [BUGGY]  Node  node  =  n.getFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  Node  node  =  n.getFirstChild();  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	Node  node  =  n.getFirstChild();	  Node    node    =    node.getLastChild();    	non-compiled	[CE]  	50	None	replace
44	[BUG]  [BUGGY]  tryMinimizeCondition(node.getLastChild(),  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getLastChild(),  null);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getLastChild(),  null);	  tryMinimizeCondition(node.getFirstChild(),    null);    	non-compiled	[CE]  	10	None	replace
45	[BUG]  [BUGGY]  tryMinimizeCondition(node.getFirstChild(),  this);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getFirstChild(),  this);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getFirstChild(),  this);	  tryMinimizeCondition(node.getFirstChild(),    null);    	non-compiled	[CE]  	10	None	replace
46	[BUG]  [BUGGY]  tryMinimizeCondition(node.getFirstChild(),  true);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getFirstChild(),  true);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getFirstChild(),  true);	  tryMinimizeCondition(node.getFirstChild(),    null);    	non-compiled	[CE]  	10	None	replace
47	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getLastChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  return  tryMinimizeCondition(node.getLastChild());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	return  tryMinimizeCondition(node.getLastChild());	  return    tryMinimizeCondition(node.getFirstChild());    	non-compiled	[CE]  	43	None	replace
48	[BUG]  [BUGGY]  return  trySubtree(node.getFirstChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  return  trySubtree(node.getFirstChild());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	return  trySubtree(node.getFirstChild());	  return    tryMinimizeCondition(node.getFirstChild());    	non-compiled	[CE]  	43	None	replace
49	[BUG]  [BUGGY]  return  tryFixCondition(node.getFirstChild());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  return  tryFixCondition(node.getFirstChild());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	return  tryFixCondition(node.getFirstChild());	  return    tryMinimizeCondition(node.getFirstChild());    	non-compiled	[CE]  	43	None	replace
50	[BUG]  [BUGGY]  return  tryMinimizeFor(node.getFirstChild());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  return  tryMinimizeFor(node.getFirstChild());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	return  tryMinimizeFor(node.getFirstChild());	  return    tryMinimizeCondition(node.getFirstChild());    	non-compiled	[CE]  	43	None	replace
51	[BUG]  [BUGGY]  return  tryMinimize(node.getFirstChild());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  return  tryMinimize(node.getFirstChild());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	return  tryMinimize(node.getFirstChild());	  return    tryMinimizeCondition(node.getFirstChild());    	non-compiled	[CE]  	43	None	replace
52	[BUG]  [BUGGY]  return  tryMinimizeIf(node.getFirstChild());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  return  tryMinimizeIf(node.getFirstChild());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	return  tryMinimizeIf(node.getFirstChild());	  return    tryMinimizeCondition(node.getFirstChild());    	non-compiled	[CE]  	43	None	replace
53	[BUG]  [BUGGY]  tryMinimizeIf(node.getNext());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeIf(node.getNext());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeIf(node.getNext());	  tryMinimizeFor(node.getNext());    	non-compiled	[CE]  	46	None	replace
54	[BUG]  [BUGGY]  tryMinimizeFor(node.getParent());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeFor(node.getParent());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeFor(node.getParent());	  tryMinimizeFor(node.getNext());    	non-compiled	[CE]  	46	None	replace
55	[BUG]  [BUGGY]  tryMinimizeNot(node.getNext());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeNot(node.getNext());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeNot(node.getNext());	  tryMinimizeFor(node.getNext());    	non-compiled	[CE]  	46	None	replace
56	[BUG]  [BUGGY]  tryMinimize(node.getNext());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimize(node.getNext());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimize(node.getNext());	  tryMinimizeFor(node.getNext());    	non-compiled	[CE]  	46	None	replace
57	[BUG]  [BUGGY]  tryMinimizeWith(node.getLastChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeWith(node.getLastChild());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeWith(node.getLastChild());	  tryMinimizeFor(node.getLastChild());    	non-compiled	[CE]  	25	None	replace
58	[BUG]  [BUGGY]  tryMinimizeCondition(node.getLastChild());  return  null;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getLastChild());  return  null;  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getLastChild());  return  null;	  tryMinimizeCondition(node.getLastChild());    return    node;    	non-compiled	[CE]  	32	None	replace
59	[BUG]  [BUGGY]  tryMinimizeCondition(node.getLastChild());  return  this;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getLastChild());  return  this;  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getLastChild());  return  this;	  tryMinimizeCondition(node.getLastChild());    return    node;    	non-compiled	[CE]  	32	None	replace
60	[BUG]  [BUGGY]  tryMinimizeSubtree(node.getFirstChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeSubtree(node.getFirstChild());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeSubtree(node.getFirstChild());	  tryReduceSubtree(node.getFirstChild());    	non-compiled	[CE]  	19	None	replace
61	[BUG]  [BUGGY]  tryReduceIf(node.getFirstChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryReduceIf(node.getFirstChild());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryReduceIf(node.getFirstChild());	  tryReduceSubtree(node.getFirstChild());    	non-compiled	[CE]  	19	None	replace
62	[BUG]  [BUGGY]  tryReduceField(node.getFirstChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryReduceField(node.getFirstChild());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryReduceField(node.getFirstChild());	  tryReduceSubtree(node.getFirstChild());    	non-compiled	[CE]  	19	None	replace
63	[BUG]  [BUGGY]  tryReduceFunction(node.getFirstChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryReduceFunction(node.getFirstChild());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryReduceFunction(node.getFirstChild());	  tryReduceSubtree(node.getFirstChild());    	non-compiled	[CE]  	19	None	replace
64	[BUG]  [BUGGY]  tryMinimizeCondition(node.getFirstChild()  -  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getFirstChild()  -  1);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getFirstChild()  -  1);	  tryMinimizeCondition(node.getChildCount()    -    1);    	non-compiled	[CE]  	34	None	replace
65	[BUG]  [BUGGY]  tryMinimizeFunction(node.getString());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeFunction(node.getString());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeFunction(node.getString());	  tryMinimizeFunction(node.getType());    	non-compiled	[CE]  	41	None	replace
66	[BUG]  [BUGGY]  tryMinimizeCondition(node.getType(),  NodeUtil.isFunctionDeclaration(node));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getType(),  NodeUtil.isFunctionDeclaration(node));  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getType(),  NodeUtil.isFunctionDeclaration(node));	  tryMinimizeCondition(node.getType(),    node);    	non-compiled	[CE]  	47	None	replace
67	[BUG]  [BUGGY]  tryMinimizeCondition(node.getType(),  NodeUtil.mayHaveSideEffects(node));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getType(),  NodeUtil.mayHaveSideEffects(node));  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getType(),  NodeUtil.mayHaveSideEffects(node));	  tryMinimizeCondition(node.getType(),    node);    	non-compiled	[CE]  	47	None	replace
68	[BUG]  [BUGGY]  tryMinimize(node.getType(),  node);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimize(node.getType(),  node);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimize(node.getType(),  node);	  tryMinimizeCondition(node.getType(),    node);    	non-compiled	[CE]  	47	None	replace
69	[BUG]  [BUGGY]  tryMaximizeCondition(node.getLastChild());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMaximizeCondition(node.getLastChild());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMaximizeCondition(node.getLastChild());	  tryMaximizeCondition(node.getFirstChild());    	non-compiled	[CE]  	23	None	replace
70	[BUG]  [BUGGY]  Node  node  =  node.getParent();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  Node  node  =  node.getParent();  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	Node  node  =  node.getParent();	  Node    node    =    node.getFirstChild();    	non-compiled	[CE]  	29	None	replace
71	[BUG]  [BUGGY]  tryMinimizeField(node.getString());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeField(node.getString());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeField(node.getString());	  tryMinimizeField(node);    	non-compiled	[CE]  	15	None	replace
72	[BUG]  [BUGGY]  return  tryMinimizeIf(node);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  return  tryMinimizeIf(node);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	return  tryMinimizeIf(node);	  return    tryMinimizeCondition(node);    	non-compiled	[CE]  	42	None	replace
73	[BUG]  [BUGGY]  return  tryFixedSubtree(node);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  return  tryFixedSubtree(node);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	return  tryFixedSubtree(node);	  return    tryMinimizeCondition(node);    	non-compiled	[CE]  	42	None	replace
74	[BUG]  [BUGGY]  return  tryIf(node);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  return  tryIf(node);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	return  tryIf(node);	  return    tryMinimizeCondition(node);    	non-compiled	[CE]  	42	None	replace
75	[BUG]  [BUGGY]  return  trySubtree(node);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  return  trySubtree(node);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	return  trySubtree(node);	  return    tryMinimizeCondition(node);    	non-compiled	[CE]  	42	None	replace
76	[BUG]  [BUGGY]  return  tryFieldSubtree(node);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  return  tryFieldSubtree(node);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	return  tryFieldSubtree(node);	  return    tryMinimizeCondition(node);    	non-compiled	[CE]  	42	None	replace
77	[BUG]  [BUGGY]  tryMinimizeCondition(node.getFullChild());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getFullChild());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getFullChild());	  tryMinimizeCondition(node.getSecondChild());    	non-compiled	[CE]  	53	None	replace
78	[BUG]  [BUGGY]  tryMinimizeCondition(node.getSecondChild(),  node);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getSecondChild(),  node);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getSecondChild(),  node);	  tryMinimizeCondition(node.getSecondChild());    	non-compiled	[CE]  	53	None	replace
79	[BUG]  [BUGGY]  tryMinimizeCondition(node.getSelectedChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getSelectedChild());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getSelectedChild());	  tryMinimizeCondition(node.getSecondChild());    	non-compiled	[CE]  	53	None	replace
80	[BUG]  [BUGGY]  tryMinimizeCondition(node.getInitialSecondChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getInitialSecondChild());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getInitialSecondChild());	  tryMinimizeCondition(node.getSecondChild());    	non-compiled	[CE]  	53	None	replace
81	[BUG]  [BUGGY]  tryMinimizeNot(node.getFirstChild(),  node);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeNot(node.getFirstChild(),  node);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeNot(node.getFirstChild(),  node);	  tryMinimize(node.getFirstChild(),    node);    	non-compiled	[CE]  	6	None	replace
82	[BUG]  [BUGGY]  tryMinimizeIf(node.getLastChild(),  node);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeIf(node.getLastChild(),  node);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeIf(node.getLastChild(),  node);	  tryMinimizeIf(node.getFirstChild(),    node);    	non-compiled	[CE]  	7	None	replace
83	[BUG]  [BUGGY]  tryMinimize(node.getString(),  node);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimize(node.getString(),  node);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimize(node.getString(),  node);	  tryMinimize(node.getString());    	non-compiled	[CE]  	2	None	replace
84	[BUG]  [BUGGY]  tryMinimizeImmutable(node.getFirstChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeImmutable(node.getFirstChild());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeImmutable(node.getFirstChild());	  tryMinimizeImmutable(node);    	non-compiled	[CE]  	49	None	replace
85	[BUG]  [BUGGY]  tryMinimizeImmutable(node.getLastChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeImmutable(node.getLastChild());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeImmutable(node.getLastChild());	  tryMinimizeImmutable(node);    	non-compiled	[CE]  	49	None	replace
86	[BUG]  [BUGGY]  tryMaximizeCondition(node.getFirstChild(),  node);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMaximizeCondition(node.getFirstChild(),  node);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMaximizeCondition(node.getFirstChild(),  node);	  tryMinimizeCondition(node.getLastChild(),    node);    	non-compiled	[CE]  	5	None	replace
87	[BUG]  [BUGGY]  Node  node  =  node.getNext()  :  null;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  Node  node  =  node.getNext()  :  null;  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	Node  node  =  node.getNext()  :  null;	  Node    node    =    node.getNext();    	non-compiled	[CE]  	31	None	replace
88	[BUG]  [BUGGY]  Node  node  =  node.getNext()  -  1;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  Node  node  =  node.getNext()  -  1;  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	Node  node  =  node.getNext()  -  1;	  Node    node    =    node.getNext();    	non-compiled	[CE]  	31	None	replace
89	[BUG]  [BUGGY]  Node  node  =  node.getPrevious();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  Node  node  =  node.getPrevious();  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	Node  node  =  node.getPrevious();	  Node    node    =    node.getNext();    	non-compiled	[CE]  	31	None	replace
90	[BUG]  [BUGGY]  tryMinimizeReturn(node.getFirstChild());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeReturn(node.getFirstChild());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeReturn(node.getFirstChild());	  tryMinimizeReturn(node.getLastChild());    	non-compiled	[CE]  	44	None	replace
91	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.IF);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.IF);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	Preconditions.checkState(node.getType()!=  Token.IF);	  Preconditions.checkState(node.getType()    ==    Token.IF);    	non-compiled	[CE]  	51	None	replace
92	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.IF,  tryMinimizeNot(node));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.IF,  tryMinimizeNot(node));  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	Preconditions.checkState(node.getType()  ==  Token.IF,  tryMinimizeNot(node));	  Preconditions.checkState(node.getType()    ==    Token.IF);    	non-compiled	[CE]  	51	None	replace
93	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.IF,  tryMinimizeCondition(node.getFirstChild()));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.IF,  tryMinimizeCondition(node.getFirstChild()));  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	Preconditions.checkState(node.getType()  ==  Token.IF,  tryMinimizeCondition(node.getFirstChild()));	  Preconditions.checkState(node.getType()    ==    Token.IF);    	non-compiled	[CE]  	51	None	replace
94	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FIELD);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FIELD);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	Preconditions.checkState(node.getType()  ==  Token.FIELD);	  Preconditions.checkState(node.getType()    ==    Token.IF);    	non-compiled	[CE]  	51	None	replace
95	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.GETPROP);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	Preconditions.checkState(node.getType()  ==  Token.GETPROP);	  Preconditions.checkState(node.getType()    ==    Token.IF);    	non-compiled	[CE]  	51	None	replace
96	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.IF  ||  node.getType()  ==  Token.GETPROP);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.IF  ||  node.getType()  ==  Token.GETPROP);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	Preconditions.checkState(node.getType()  ==  Token.IF  ||  node.getType()  ==  Token.GETPROP);	  Preconditions.checkState(node.getType()    ==    Token.IF);    	non-compiled	[CE]  	51	None	replace
97	[BUG]  [BUGGY]  tryMinimizeCondition(node.getFirstChild());  return  null;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getFirstChild());  return  null;  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getFirstChild());  return  null;	  tryMinimizeCondition(node.getFirstChild());    return    node;    	non-compiled	[CE]  	30	None	replace
98	[BUG]  [BUGGY]  tryMinimizeCondition(node.getFirstChild());  return  this;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getFirstChild());  return  this;  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getFirstChild());  return  this;	  tryMinimizeCondition(node.getFirstChild());    return    node;    	non-compiled	[CE]  	30	None	replace
99	[BUG]  [BUGGY]  tryMinimizeIf(node.getFirstChild());  return  node;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeIf(node.getFirstChild());  return  node;  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeIf(node.getFirstChild());  return  node;	  tryMinimizeCondition(node.getFirstChild());    return    node;    	non-compiled	[CE]  	30	None	replace
100	[BUG]  [BUGGY]  tryMinimize(node.getFirstChild());  return  node;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimize(node.getFirstChild());  return  node;  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimize(node.getFirstChild());  return  node;	  tryMinimizeCondition(node.getFirstChild());    return    node;    	non-compiled	[CE]  	30	None	replace
101	[BUG]  [BUGGY]  tryMinimizeCondition(node.getChildCount()  /  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getChildCount()  /  1);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getChildCount()  /  1);	  tryMinimizeCondition(node.getChildCount()    +    1);    	non-compiled	[CE]  	35	None	replace
102	[BUG]  [BUGGY]  tryMinimizeCondition(node.getLastChild(),  parent);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getLastChild(),  parent);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getLastChild(),  parent);	  tryMinimizeCondition(node.getFirstChild(),    parent);    	non-compiled	[CE]  	48	None	replace
103	[BUG]  [BUGGY]  tryMinimizeCondition(node.getFirstChild(),  NodeUtil.isFunctionDeclaration(node));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getFirstChild(),  NodeUtil.isFunctionDeclaration(node));  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getFirstChild(),  NodeUtil.isFunctionDeclaration(node));	  tryMinimizeCondition(node.getFirstChild(),    parent);    	non-compiled	[CE]  	48	None	replace
104	[BUG]  [BUGGY]  tryMinimizeCondition(node.getFirstChild(),  NodeUtil.isFunctionAnonymous(node));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getFirstChild(),  NodeUtil.isFunctionAnonymous(node));  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getFirstChild(),  NodeUtil.isFunctionAnonymous(node));	  tryMinimizeCondition(node.getFirstChild(),    parent);    	non-compiled	[CE]  	48	None	replace
105	[BUG]  [BUGGY]  tryMinimizeCondition(node.getFirstChild(),  child);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getFirstChild(),  child);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getFirstChild(),  child);	  tryMinimizeCondition(node.getFirstChild(),    parent);    	non-compiled	[CE]  	48	None	replace
106	[BUG]  [BUGGY]  tryMinimizeNot(node.getLastChild(),  node);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeNot(node.getLastChild(),  node);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeNot(node.getLastChild(),  node);	  tryMinimize(node.getLastChild(),    node);    	non-compiled	[CE]  	9	None	replace
107	[BUG]  [BUGGY]  tryMinimizeCondition(node.getLastChild(),  node);  return  node;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getLastChild(),  node);  return  node;  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getLastChild(),  node);  return  node;	  tryMinimizeCondition(node.getLastChild());    return    node;    	non-compiled	[CE]  	32	None	replace
108	[BUG]  [BUGGY]  tryMinimizeCondition(node.getString()  -  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getString()  -  1);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getString()  -  1);	  tryMinimizeCondition(node.getString()    +    1);    	non-compiled	[CE]  	52	None	replace
109	[BUG]  [BUGGY]  tryMinimizeCondition(node.getString()  /  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getString()  /  1);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getString()  /  1);	  tryMinimizeCondition(node.getString()    +    1);    	non-compiled	[CE]  	52	None	replace
110	[BUG]  [BUGGY]  return  tryMinimizeFunction(node.getFirstChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  return  tryMinimizeFunction(node.getFirstChild());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	return  tryMinimizeFunction(node.getFirstChild());	  return    tryMinimizeCondition(node.getFirstChild());    	non-compiled	[CE]  	43	None	replace
111	[BUG]  [BUGGY]  return  tryMinimizeNot(node);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  return  tryMinimizeNot(node);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	return  tryMinimizeNot(node);	  return    tryMinimizeCondition(node.getFirstChild());    	non-compiled	[CE]  	43	None	replace
112	[BUG]  [BUGGY]  return  tryMinimizeField(node.getFirstChild());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  return  tryMinimizeField(node.getFirstChild());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	return  tryMinimizeField(node.getFirstChild());	  return    tryMinimizeCondition(node.getFirstChild());    	non-compiled	[CE]  	43	None	replace
113	[BUG]  [BUGGY]  tryMinimizeCondition(node.getInitializingChild()  +  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getInitializingChild()  +  1);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getInitializingChild()  +  1);	  tryMinimizeCondition(node.getInitializingChild());    	non-compiled	[CE]  	3	None	replace
114	[BUG]  [BUGGY]  tryMinimizeCondition(node.getInitializingChild(),  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getInitializingChild(),  null);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getInitializingChild(),  null);	  tryMinimizeCondition(node.getInitializingChild());    	non-compiled	[CE]  	3	None	replace
115	[BUG]  [BUGGY]  tryMinimizeCondition(node.getInitializingChild(),  false);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getInitializingChild(),  false);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getInitializingChild(),  false);	  tryMinimizeCondition(node.getInitializingChild());    	non-compiled	[CE]  	3	None	replace
116	[BUG]  [BUGGY]  tryMinimizeCondition(node.getInitializingChild(),  true);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getInitializingChild(),  true);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getInitializingChild(),  true);	  tryMinimizeCondition(node.getInitializingChild());    	non-compiled	[CE]  	3	None	replace
117	[BUG]  [BUGGY]  tryMinimizeCondition(node.getString(),  parent);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getString(),  parent);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getString(),  parent);	  tryMinimizeCondition(node.getString(),    node);    	non-compiled	[CE]  	1	None	replace
118	[BUG]  [BUGGY]  tryMinimizeFor(node.getString());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeFor(node.getString());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeFor(node.getString());	  tryMinimizeIf(node.getString());    	non-compiled	[CE]  	40	None	replace
119	[BUG]  [BUGGY]  tryMinimizeCondition(node.getNext(),  parent);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getNext(),  parent);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getNext(),  parent);	  tryMinimizeCondition(node.getNext(),    node);    	non-compiled	[CE]  	8	None	replace
120	[BUG]  [BUGGY]  tryMinimizeCondition(node.getNext(),  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getNext(),  null);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getNext(),  null);	  tryMinimizeCondition(node.getNext(),    node);    	non-compiled	[CE]  	8	None	replace
121	[BUG]  [BUGGY]  tryMinimizeFor(node.getLastChild(),  node);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeFor(node.getLastChild(),  node);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeFor(node.getLastChild(),  node);	  tryMinimize(node.getLastChild(),    node);    	non-compiled	[CE]  	9	None	replace
122	[BUG]  [BUGGY]  tryMinimizeInvalid(node.getLastChild());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeInvalid(node.getLastChild());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeInvalid(node.getLastChild());	  tryMinimizeReturn(node.getLastChild());    	non-compiled	[CE]  	44	None	replace
123	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.IF,  tryMinimizeIf(node));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.IF,  tryMinimizeIf(node));  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	Preconditions.checkState(node.getType()  ==  Token.IF,  tryMinimizeIf(node));	  Preconditions.checkState(node.getType()    ==    Token.IF);    	non-compiled	[CE]  	51	None	replace
124	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.IF,  tryMinimizeCondition(node));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.IF,  tryMinimizeCondition(node));  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	Preconditions.checkState(node.getType()  ==  Token.IF,  tryMinimizeCondition(node));	  Preconditions.checkState(node.getType()    ==    Token.IF);    	non-compiled	[CE]  	51	None	replace
125	[BUG]  [BUGGY]  Node  node  =  node.getNode();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  Node  node  =  node.getNode();  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	Node  node  =  node.getNode();	  Node    node    =    node.getNext();    	non-compiled	[CE]  	31	None	replace
126	[BUG]  [BUGGY]  Node  node  =  node.getOwner();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  Node  node  =  node.getOwner();  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	Node  node  =  node.getOwner();	  Node    node    =    node.getNext();    	non-compiled	[CE]  	31	None	replace
127	[BUG]  [BUGGY]  Node  node  =  node.cloneTree();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  Node  node  =  node.cloneTree();  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	Node  node  =  node.cloneTree();	  Node    node    =    node.getFirstChild();    	non-compiled	[CE]  	29	None	replace
128	[BUG]  [BUGGY]  tryMinimizeCondition(parent.getFirstChild(),  node);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(parent.getFirstChild(),  node);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(parent.getFirstChild(),  node);	  tryMinimizeCondition(node.getFirstChild(),    parent);    	non-compiled	[CE]  	48	None	replace
129	[BUG]  [BUGGY]  Node  node  =  tryMinimizeCondition(node.getFirstChild());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  Node  node  =  tryMinimizeCondition(node.getFirstChild());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	Node  node  =  tryMinimizeCondition(node.getFirstChild());	  Node    node    =    getSubtree(node.getLastChild());    	non-compiled	[CE]  	33	None	replace
130	[BUG]  [BUGGY]  Node  node  =  getSubtree(node.getLastChild(),  node);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  Node  node  =  getSubtree(node.getLastChild(),  node);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	Node  node  =  getSubtree(node.getLastChild(),  node);	  Node    node    =    getSubtree(node.getLastChild());    	non-compiled	[CE]  	33	None	replace
131	[BUG]  [BUGGY]  tryMinimizeInvalid(node.getFirstChild(),  node);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeInvalid(node.getFirstChild(),  node);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeInvalid(node.getFirstChild(),  node);	  tryMinimizeReturn(node.getFirstChild(),    node);    	non-compiled	[CE]  	39	None	replace
132	[BUG]  [BUGGY]  tryMinimizeIF(node.getNext());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeIF(node.getNext());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeIF(node.getNext());	  tryMinimizeFor(node.getNext());    	non-compiled	[CE]  	46	None	replace
133	[BUG]  [BUGGY]  Node  node  =  this.node.getFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  Node  node  =  this.node.getFirstChild();  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	Node  node  =  this.node.getFirstChild();	  Node    node    =    node.getLastChild();    	non-compiled	[CE]  	50	None	replace
134	[BUG]  [BUGGY]  Node  node  =  node.getfirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  Node  node  =  node.getfirstChild();  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	Node  node  =  node.getfirstChild();	  Node    node    =    node.getLastChild();    	non-compiled	[CE]  	50	None	replace
135	[BUG]  [BUGGY]  tryMinimizeFor(node);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeFor(node);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeFor(node);	  tryMinimizeIF(node);    	non-compiled	[CE]  	12	None	replace
136	[BUG]  [BUGGY]  tryMinimizeImmutableSet(node.getType());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeImmutableSet(node.getType());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeImmutableSet(node.getType());	  tryMinimizeNot(node.getType());    	non-compiled	[CE]  	21	None	replace
137	[BUG]  [BUGGY]  tryMinimizeIF(node.getFirstChild(),  node);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeIF(node.getFirstChild(),  node);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeIF(node.getFirstChild(),  node);	  tryMinimizeFunction(node.getFirstChild(),    node);    	non-compiled	[CE]  	38	None	replace
138	[BUG]  [BUGGY]  tryMinimizeIf(node.getType(),  node);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeIf(node.getType(),  node);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeIf(node.getType(),  node);	  tryMinimizeCondition(node.getType(),    node);    	non-compiled	[CE]  	47	None	replace
139	[BUG]  [BUGGY]  TryMinimizeCondition(node.getFirstChild(),  node);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  TryMinimizeCondition(node.getFirstChild(),  node);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	TryMinimizeCondition(node.getFirstChild(),  node);	  tryMinimizeCondition(node.getLastChild(),    node);    	non-compiled	[CE]  	5	None	replace
140	[BUG]  [BUGGY]  return  tryMinimizeFunction(node);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  return  tryMinimizeFunction(node);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	return  tryMinimizeFunction(node);	  return    tryMinimizeCondition(node);    	non-compiled	[CE]  	42	None	replace
141	[BUG]  [BUGGY]  return  tryMinimizeField(node);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  return  tryMinimizeField(node);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	return  tryMinimizeField(node);	  return    tryMinimizeCondition(node);    	non-compiled	[CE]  	42	None	replace
142	[BUG]  [BUGGY]  tryMaximizeCondition(node.getString());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMaximizeCondition(node.getString());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMaximizeCondition(node.getString());	  tryMinimizeCondition(node.getString()    +    1);    	non-compiled	[CE]  	52	None	replace
143	[BUG]  [BUGGY]  tryMinimizeCondition(node.getChildCount(),  node);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getChildCount(),  node);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getChildCount(),  node);	  tryMinimizeCondition(node.getNext(),    node);    	non-compiled	[CE]  	8	None	replace
144	[BUG]  [BUGGY]  Node  node  =  node.removeChild(node);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  Node  node  =  node.removeChild(node);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	Node  node  =  node.removeChild(node);	  Node    node    =    node.getFirstChild();    	non-compiled	[CE]  	29	None	replace
145	[BUG]  [BUGGY]  Node  node  =  node.removeChildren();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  Node  node  =  node.removeChildren();  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	Node  node  =  node.removeChildren();	  Node    node    =    node.getFirstChild();    	non-compiled	[CE]  	29	None	replace
146	[BUG]  [BUGGY]  tryMinimizeFunction(node.getType(),  node);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeFunction(node.getType(),  node);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeFunction(node.getType(),  node);	  tryMinimizeFunction(node.getFirstChild(),    node);    	non-compiled	[CE]  	38	None	replace
147	[BUG]  [BUGGY]  tryMinimizeCondition(node.getFirstChild(),  NodeUtil.isExpressionNode(node));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getFirstChild(),  NodeUtil.isExpressionNode(node));  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getFirstChild(),  NodeUtil.isExpressionNode(node));	  tryMinimizeCondition(node.getFirstChild(),    parent);    	non-compiled	[CE]  	48	None	replace
148	[BUG]  [BUGGY]  Node  node  =  node.getAncestor(2);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  Node  node  =  node.getAncestor(2);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	Node  node  =  node.getAncestor(2);	  Node    node    =    node.getNext();    	non-compiled	[CE]  	31	None	replace
149	[BUG]  [BUGGY]  Node  node  =  node.getOwnerDocument();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  Node  node  =  node.getOwnerDocument();  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	Node  node  =  node.getOwnerDocument();	  Node    node    =    node.getNext();    	non-compiled	[CE]  	31	None	replace
150	[BUG]  [BUGGY]  Node  node  =  node.removeChild(node.getFirstChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  Node  node  =  node.removeChild(node.getFirstChild());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	Node  node  =  node.removeChild(node.getFirstChild());	  Node    node    =    node.getLastChild();    	non-compiled	[CE]  	50	None	replace
151	[BUG]  [BUGGY]  tryMaximizeCondition(node.getLastChild(),  node);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMaximizeCondition(node.getLastChild(),  node);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMaximizeCondition(node.getLastChild(),  node);	  tryMinimize(node.getLastChild(),    node);    	non-compiled	[CE]  	9	None	replace
152	[BUG]  [BUGGY]  tryMinimizeFields(node);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeFields(node);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeFields(node);	  tryMinimizeField(node);    	non-compiled	[CE]  	15	None	replace
153	[BUG]  [BUGGY]  tryMinimizeCondition(node.getFirstChild(),  false);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getFirstChild(),  false);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getFirstChild(),  false);	  tryMinimizeCondition(node.getFirstChild(),    null);    	non-compiled	[CE]  	10	None	replace
154	[BUG]  [BUGGY]  return  tryMinimize(node);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  return  tryMinimize(node);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	return  tryMinimize(node);	  return    tryMinimizeCondition(node);    	non-compiled	[CE]  	42	None	replace
155	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FOR);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.FOR);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	Preconditions.checkState(node.getType()  ==  Token.FOR);	  Preconditions.checkState(node.getType()    ==    Token.IF);    	non-compiled	[CE]  	51	None	replace
156	[BUG]  [BUGGY]  tryMinimizeCondition(node.getType(),  NodeUtil.isExpressionNode(node));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getType(),  NodeUtil.isExpressionNode(node));  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getType(),  NodeUtil.isExpressionNode(node));	  tryMinimizeCondition(node.getType(),    node);    	non-compiled	[CE]  	47	None	replace
157	[BUG]  [BUGGY]  tryMinimizeCondition(node.getType(),  NodeUtil.isFunctionAnonymous(node));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getType(),  NodeUtil.isFunctionAnonymous(node));  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getType(),  NodeUtil.isFunctionAnonymous(node));	  tryMinimizeCondition(node.getType(),    node);    	non-compiled	[CE]  	47	None	replace
158	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getFirstChild(),  node);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  return  tryMinimizeCondition(node.getFirstChild(),  node);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	return  tryMinimizeCondition(node.getFirstChild(),  node);	  return    tryMinimizeCondition(node.getFirstChild());    	non-compiled	[CE]  	43	None	replace
159	[BUG]  [BUGGY]  tryMinimizeCondition(node.getType());  return  node;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getType());  return  node;  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getType());  return  node;	  tryMinimizeCondition(node.getFirstChild());    return    node;    	non-compiled	[CE]  	30	None	replace
160	[BUG]  [BUGGY]  tryMinimizeImmutable(node.getType());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeImmutable(node.getType());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeImmutable(node.getType());	  tryMinimizeNot(node.getType());    	non-compiled	[CE]  	21	None	replace
161	[BUG]  [BUGGY]  tryMinimizeCondition(node.getSecondChild()  +  1);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  tryMinimizeCondition(node.getSecondChild()  +  1);  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getSecondChild()  +  1);	  tryMinimizeCondition(node.getSecondChild());    	non-compiled	[CE]  	53	None	replace
162	[BUG]  [BUGGY]  Node  node  =  trySubtree(node.getFirstChild());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:      [BUGGY]  Node  node  =  trySubtree(node.getFirstChild());  [BUGGY]      return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	Node  node  =  trySubtree(node.getFirstChild());	  Node    node    =    getSubtree(node.getLastChild());    	non-compiled	[CE]  	33	None	replace
