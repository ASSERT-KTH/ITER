bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  tryMinimizeCondition(node.getString(),  node);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMinimizeCondition(node.getString(),  node);  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getString(),  node);	  tryMinimizeCondition(node.getString());    	non-compiled	[CE]  	14	None	replace
2	[BUG]  [BUGGY]  tryMinimize(node.getString());  [CE]  [FE]                AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMinimize(node.getString());  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimize(node.getString());	  tryMinimizeCondition(node.getString());    	non-compiled	[CE]  	14	None	replace
3	[BUG]  [BUGGY]  tryMinimizeCondition(node.getInitializingChild());  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMinimizeCondition(node.getInitializingChild());  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getInitializingChild());	  tryMinimizeCondition(node.getString());    	non-compiled	[CE]  	14	None	replace
4	[BUG]  [BUGGY]  tryMinimizeIf(node.getLastChild());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMinimizeIf(node.getLastChild());  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeIf(node.getLastChild());	  tryMinimizeIf(node.getFirstChild());    	non-compiled	[CE]  	2	None	replace
5	[BUG]  [BUGGY]  tryMinimizeCondition(node.getLastChild(),  node);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMinimizeCondition(node.getLastChild(),  node);  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getLastChild(),  node);	  tryMinimizeCondition(node.getFirstChild(),    node);    	non-compiled	[CE]  	11	None	replace
6	[BUG]  [BUGGY]  tryMinimize(node.getFirstChild(),  node);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMinimize(node.getFirstChild(),  node);  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimize(node.getFirstChild(),  node);	  tryMinimizeCondition(node.getFirstChild(),    node);    	non-compiled	[CE]  	11	None	replace
7	[BUG]  [BUGGY]  tryMinimizeIf(node.getFirstChild(),  node);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMinimizeIf(node.getFirstChild(),  node);  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeIf(node.getFirstChild(),  node);	  tryMinimizeCondition(node.getFirstChild(),    node);    	non-compiled	[CE]  	11	None	replace
8	[BUG]  [BUGGY]  tryMinimizeCondition(node.getNext(),  node);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMinimizeCondition(node.getNext(),  node);  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getNext(),  node);	  tryMinimizeCondition(node.getFirstChild(),    node);    	non-compiled	[CE]  	11	None	replace
9	[BUG]  [BUGGY]  tryMinimize(node.getLastChild(),  node);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMinimize(node.getLastChild(),  node);  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimize(node.getLastChild(),  node);	  tryMinimizeCondition(node.getFirstChild(),    node);    	non-compiled	[CE]  	11	None	replace
10	[BUG]  [BUGGY]  tryMinimizeCondition(node.getFirstChild(),  null);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMinimizeCondition(node.getFirstChild(),  null);  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getFirstChild(),  null);	  tryMinimizeCondition(node.getFirstChild(),    node);    	non-compiled	[CE]  	11	None	replace
11	[BUG]  [BUGGY]  tryMinimizeCondition(node);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMinimizeCondition(node);  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node);	  tryMinimizeNot(node);    	non-compiled	[CE]  	10	None	replace
12	[BUG]  [BUGGY]  tryMinimizeIF(node);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMinimizeIF(node);  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeIF(node);	  tryMinimizeNot(node);    	non-compiled	[CE]  	10	None	replace
13	[BUG]  [BUGGY]  tryMinimizeFunction(node);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMinimizeFunction(node);  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeFunction(node);	  tryMinimizeNot(node);    	non-compiled	[CE]  	10	None	replace
14	[BUG]  [BUGGY]  tryMinimize(node);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMinimize(node);  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimize(node);	  tryMinimizeNot(node);    	non-compiled	[CE]  	10	None	replace
15	[BUG]  [BUGGY]  tryMinimizeField(node);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMinimizeField(node);  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeField(node);	  tryMinimizeNot(node);    	non-compiled	[CE]  	10	None	replace
16	[BUG]  [BUGGY]  tryMinimizeIF(node.getFirstChild());  [CE]  [FE]              AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMinimizeIF(node.getFirstChild());  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeIF(node.getFirstChild());	  tryMinimizeNot(node.getFirstChild());    	non-compiled	[CE]  	4	None	replace
17	[BUG]  [BUGGY]  tryMinimizeCondition(node.getParent());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMinimizeCondition(node.getParent());  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getParent());	  tryMinimizeCondition(node.getNext());    	non-compiled	[CE]  	13	None	replace
18	[BUG]  [BUGGY]  tryMinimize(node.getLastChild());  [CE]  [FE]                AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMinimize(node.getLastChild());  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimize(node.getLastChild());	  tryMinimize(node.getFirstChild());    	non-compiled	[CE]  	5	None	replace
19	[BUG]  [BUGGY]  tryReduceSubtree(node.getFirstChild());  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryReduceSubtree(node.getFirstChild());  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryReduceSubtree(node.getFirstChild());	  tryMinimize(node.getFirstChild());    	non-compiled	[CE]  	5	None	replace
20	[BUG]  [BUGGY]  tryMinimizeIf(node.getType());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMinimizeIf(node.getType());  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeIf(node.getType());	  tryMinimizeCondition(node.getType());    	non-compiled	[CE]  	3	None	replace
21	[BUG]  [BUGGY]  tryMinimizeNot(node.getType());  [CE]  [FE]              AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMinimizeNot(node.getType());  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeNot(node.getType());	  tryMinimizeCondition(node.getType());    	non-compiled	[CE]  	3	None	replace
22	[BUG]  [BUGGY]  tryMinimize(node.getType());  [CE]  [FE]                AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMinimize(node.getType());  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimize(node.getType());	  tryMinimizeCondition(node.getType());    	non-compiled	[CE]  	3	None	replace
23	[BUG]  [BUGGY]  tryMaximizeCondition(node.getFirstChild());  [CE]  [FE]        AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMaximizeCondition(node.getFirstChild());  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMaximizeCondition(node.getFirstChild());	  tryMinimizeCondition(node.getLastChild());    	non-compiled	[CE]  	1	None	replace
24	[BUG]  [BUGGY]  tryMinimizeNot(node.getLastChild());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMinimizeNot(node.getLastChild());  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeNot(node.getLastChild());	  tryMinimizeCondition(node.getLastChild());    	non-compiled	[CE]  	1	None	replace
25	[BUG]  [BUGGY]  tryMinimizeFor(node.getLastChild());  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMinimizeFor(node.getLastChild());  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeFor(node.getLastChild());	  tryMinimizeFor(node.getFirstChild());    	non-compiled	[CE]  	6	None	replace
26	[BUG]  [BUGGY]  tryMinimizeFor(node.getType());  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMinimizeFor(node.getType());  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeFor(node.getType());	  tryMinimizeFor(node.getFirstChild());    	non-compiled	[CE]  	6	None	replace
27	[BUG]  [BUGGY]  tryMinimizeFunction(node.getLastChild());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMinimizeFunction(node.getLastChild());  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeFunction(node.getLastChild());	  tryMinimizeFunction(node.getFirstChild());    	non-compiled	[CE]  	9	None	replace
28	[BUG]  [BUGGY]  tryMinimizeField(node.getFirstChild());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMinimizeField(node.getFirstChild());  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeField(node.getFirstChild());	  tryMinimizeFunction(node.getFirstChild());    	non-compiled	[CE]  	9	None	replace
29	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  Node  node  =  node.getFirstChild();  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	Node  node  =  node.getFirstChild();	      	non-compiled	[CE]  	7	None	replace
30	[BUG]  [BUGGY]  tryMinimizeCondition(node.getFirstChild());  return  node;  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMinimizeCondition(node.getFirstChild());  return  node;  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getFirstChild());  return  node;	      	non-compiled	[CE]  	7	None	replace
31	[BUG]  [BUGGY]  Node  node  =  node.getNext();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  Node  node  =  node.getNext();  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	Node  node  =  node.getNext();	      	non-compiled	[CE]  	7	None	replace
32	[BUG]  [BUGGY]  tryMinimizeCondition(node.getLastChild());  return  node;  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMinimizeCondition(node.getLastChild());  return  node;  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getLastChild());  return  node;	      	non-compiled	[CE]  	7	None	replace
33	[BUG]  [BUGGY]  Node  node  =  getSubtree(node.getLastChild());  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  Node  node  =  getSubtree(node.getLastChild());  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	Node  node  =  getSubtree(node.getLastChild());	      	non-compiled	[CE]  	7	None	replace
34	[BUG]  [BUGGY]  tryMinimizeCondition(node.getChildCount()  -  1);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMinimizeCondition(node.getChildCount()  -  1);  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getChildCount()  -  1);	  tryMinimizeCondition(node.getChildCount());    	non-compiled	[CE]  	12	None	replace
35	[BUG]  [BUGGY]  tryMinimizeCondition(node.getChildCount()  +  1);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMinimizeCondition(node.getChildCount()  +  1);  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getChildCount()  +  1);	  tryMinimizeCondition(node.getChildCount());    	non-compiled	[CE]  	12	None	replace
36	[BUG]  [BUGGY]  tryMinimizeCondition(node.getChildCount()  -  2);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMinimizeCondition(node.getChildCount()  -  2);  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getChildCount()  -  2);	  tryMinimizeCondition(node.getChildCount());    	non-compiled	[CE]  	12	None	replace
37	[BUG]  [BUGGY]  tryMinimize(node.getChildCount());  [CE]  [FE]                AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMinimize(node.getChildCount());  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimize(node.getChildCount());	  tryMinimizeCondition(node.getChildCount());    	non-compiled	[CE]  	12	None	replace
38	[BUG]  [BUGGY]  tryMinimizeFunction(node.getFirstChild(),  node);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMinimizeFunction(node.getFirstChild(),  node);  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeFunction(node.getFirstChild(),  node);	  tryMinimizeCondition(node.getFirstChild(),    node);    	non-compiled	[CE]  	11	None	replace
39	[BUG]  [BUGGY]  tryMinimizeReturn(node.getFirstChild(),  node);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMinimizeReturn(node.getFirstChild(),  node);  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeReturn(node.getFirstChild(),  node);	  tryMinimizeCondition(node.getFirstChild(),    node);    	non-compiled	[CE]  	11	None	replace
40	[BUG]  [BUGGY]  tryMinimizeIf(node.getString());  [CE]  [FE]              AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMinimizeIf(node.getString());  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeIf(node.getString());	  tryMinimizeCondition(node.getString());    	non-compiled	[CE]  	14	None	replace
41	[BUG]  [BUGGY]  tryMinimizeFunction(node.getType());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMinimizeFunction(node.getType());  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeFunction(node.getType());	  tryMinimizeCondition(node.getType());    	non-compiled	[CE]  	3	None	replace
42	[BUG]  [BUGGY]  return  tryMinimizeCondition(node);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  return  tryMinimizeCondition(node);  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	return  tryMinimizeCondition(node);	      	non-compiled	[CE]  	7	None	replace
43	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getFirstChild());  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  return  tryMinimizeCondition(node.getFirstChild());  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	return  tryMinimizeCondition(node.getFirstChild());	      	non-compiled	[CE]  	7	None	replace
44	[BUG]  [BUGGY]  tryMinimizeReturn(node.getLastChild());  [CE]  [FE]        AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMinimizeReturn(node.getLastChild());  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeReturn(node.getLastChild());	  tryMinimizeCondition(node.getLastChild());    	non-compiled	[CE]  	1	None	replace
45	[BUG]  [BUGGY]  tryMinimizeCondition(node.getInitialValue());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMinimizeCondition(node.getInitialValue());  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getInitialValue());	  tryMinimizeCondition(node.getNext());    	non-compiled	[CE]  	13	None	replace
46	[BUG]  [BUGGY]  tryMinimizeFor(node.getNext());  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMinimizeFor(node.getNext());  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeFor(node.getNext());	  tryMinimizeFor(node.getFirstChild());    	non-compiled	[CE]  	6	None	replace
47	[BUG]  [BUGGY]  tryMinimizeCondition(node.getType(),  node);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMinimizeCondition(node.getType(),  node);  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getType(),  node);	  tryMinimizeCondition(node.getFirstChild(),    node);    	non-compiled	[CE]  	11	None	replace
48	[BUG]  [BUGGY]  tryMinimizeCondition(node.getFirstChild(),  parent);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMinimizeCondition(node.getFirstChild(),  parent);  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getFirstChild(),  parent);	  tryMinimizeCondition(node.getFirstChild(),    node);    	non-compiled	[CE]  	11	None	replace
49	[BUG]  [BUGGY]  tryMinimizeImmutable(node);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMinimizeImmutable(node);  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeImmutable(node);	  tryMinimizeNot(node);    	non-compiled	[CE]  	10	None	replace
50	[BUG]  [BUGGY]  Node  node  =  node.getLastChild();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  Node  node  =  node.getLastChild();  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	Node  node  =  node.getLastChild();	      	non-compiled	[CE]  	7	None	replace
51	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.IF);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.IF);  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	Preconditions.checkState(node.getType()  ==  Token.IF);	      	non-compiled	[CE]  	7	None	replace
52	[BUG]  [BUGGY]  tryMinimizeCondition(node.getString()  +  1);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMinimizeCondition(node.getString()  +  1);  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getString()  +  1);	  tryMinimizeCondition(node.getString());    	non-compiled	[CE]  	14	None	replace
53	[BUG]  [BUGGY]  tryMinimizeCondition(node.getSecondChild());  [CE]  [FE]        AssertionFailedError    [CONTEXT]    public  Node  optimizeSubtree(Node  node)  {  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:    [BUGGY]  tryMinimizeCondition(node.getSecondChild());  [BUGGY]    return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	68	68	1	replace	tryMinimizeCondition(node.getSecondChild());	  tryMinimizeCondition(node.getLastChild());    	non-compiled	[CE]  	1	None	replace
