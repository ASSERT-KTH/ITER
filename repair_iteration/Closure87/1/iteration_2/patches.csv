bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(parent,  true,  cond);  [CE]  cannot  find  symbol  elseBranch  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.newLiteralValue(parent,  true,  cond);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(parent,  true,  cond);	  return    NodeUtil.newLiteralValue(cond,    true,    parent);    	non-compiled	[CE]  cannot  find  symbol  elseBranch	91	None	replace
2	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(cond,  true,  parent,  n);  [CE]  cannot  find  symbol  elseBranch  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.newLiteralValue(cond,  true,  parent,  n);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(cond,  true,  parent,  n);	  return    NodeUtil.newLiteralValue(cond,    true,    parent);    	non-compiled	[CE]  cannot  find  symbol  elseBranch	91	None	replace
3	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(cond,  true,  cond);  [CE]  cannot  find  symbol  elseBranch  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.newLiteralValue(cond,  true,  cond);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(cond,  true,  cond);	  return    NodeUtil.newLiteralValue(cond,    true,    parent);    	non-compiled	[CE]  cannot  find  symbol  elseBranch	91	None	replace
4	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(cond,  true,  parent,  expr);  [CE]  cannot  find  symbol  elseBranch  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.newLiteralValue(cond,  true,  parent,  expr);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(cond,  true,  parent,  expr);	  return    NodeUtil.newLiteralValue(cond,    true,    parent);    	non-compiled	[CE]  cannot  find  symbol  elseBranch	91	None	replace
5	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(cond,  true,  parent,  false);  [CE]  cannot  find  symbol  elseBranch  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.newLiteralValue(cond,  true,  parent,  false);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(cond,  true,  parent,  false);	  return    NodeUtil.newLiteralValue(cond,    true,    parent);    	non-compiled	[CE]  cannot  find  symbol  elseBranch	91	None	replace
6	[BUG]  [BUGGY]  Node  parent  =  parent  ==  null)?  null  :  parent.getNext();  [CE]  cannot  find  symbol  elseBranch  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  parent  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  parent  ==  null)?  null  :  parent.getNext();	  return(parent!=    null)?    null    :    parent.getNext();    Node    parent    =    parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  cannot  find  symbol  elseBranch	140	None	replace
7	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  parent  =  parent  ==  null)?  null  :  parent.getParent();  [CE]  cannot  find  symbol  elseBranch  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  parent  =  parent  ==  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getNext();  Node  parent  =  parent  ==  null)?  null  :  parent.getParent();	  return(parent!=    null)?    null    :    parent.getNext();    Node    parent    =    parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  cannot  find  symbol  elseBranch	140	None	replace
8	[BUG]  [BUGGY]  return  parent  ==  null?  null  :  parent.getNext();  [CE]  cannot  find  symbol  elseBranch  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent  ==  null?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null?  null  :  parent.getNext();	  return(parent!=    null)?    null    :    parent.getNext();    Node    parent    =    parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  cannot  find  symbol  elseBranch	140	None	replace
9	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getNext();  Node  parent  =  parent  ==  null)?  null  :  parent.getParent();  [CE]  cannot  find  symbol  elseBranch  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent!=  null)?  null  :  parent.getNext();  Node  parent  =  parent  ==  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=  null)?  null  :  parent.getNext();  Node  parent  =  parent  ==  null)?  null  :  parent.getParent();	  return(parent!=    null)?    null    :    parent.getNext();    Node    parent    =    parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  cannot  find  symbol  elseBranch	140	None	replace
10	[BUG]  [BUGGY]  Node  child  =  parent.getFirstChild();  [CE]  cannot  find  symbol  elseBranch  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  child  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  child  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    child    =    parent.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  elseBranch	105	None	replace
11	[BUG]  [BUGGY]  Node  child  =  n.getFirstChild();  [CE]  cannot  find  symbol  elseBranch  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  child  =  n.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  child  =  n.getFirstChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    child    =    parent.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  elseBranch	105	None	replace
12	[BUG]  [BUGGY]  Node  child  =  parent.getLastChild();  [CE]  cannot  find  symbol  elseBranch  [FE]                        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  child  =  parent.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  child  =  parent.getLastChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    child    =    parent.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  elseBranch	105	None	replace
13	[BUG]  [BUGGY]  Node  child  =  node.getFirstChild();  [CE]  cannot  find  symbol  elseBranch  [FE]                          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  child  =  node.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  child  =  node.getFirstChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    child    =    parent.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  elseBranch	105	None	replace
14	[BUG]  [BUGGY]  Node  child  =  cond.getFirstChild();  [CE]  cannot  find  symbol  elseBranch  [FE]                            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  child  =  cond.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  child  =  cond.getFirstChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    child    =    parent.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  elseBranch	105	None	replace
15	[BUG]  [BUGGY]  Node  parent  =  parent.getFirstChild();  [CE]  cannot  find  symbol  elseBranch  [FE]                              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    child    =    parent.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  elseBranch	105	None	replace
16	[BUG]  [BUGGY]  Node  parent  =  parent!=  null)?  null  :  parent.getNext();  [CE]  cannot  find  symbol  elseBranch  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  parent!=  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  parent!=  null)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    Node    parent    =    parent!=    null)?    null    :    parent.getNext();    	non-compiled	[CE]  cannot  find  symbol  elseBranch	76	None	replace
17	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  parent  =  parent!=  null)?  null  :  parent.getParent();  [CE]  cannot  find  symbol  elseBranch  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  parent  =  parent!=  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getNext();  Node  parent  =  parent!=  null)?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getNext();    Node    parent    =    parent!=    null)?    null    :    parent.getNext();    	non-compiled	[CE]  cannot  find  symbol  elseBranch	76	None	replace
18	[BUG]  [BUGGY]  Node  assignName  =  cond.getFirstChild().getString();  [CE]  cannot  find  symbol  elseBranch  [FE]        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assignName  =  cond.getFirstChild().getString();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assignName  =  cond.getFirstChild().getString();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    assign    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol  elseBranch	214	None	replace
19	[BUG]  [BUGGY]  Node  assignName  =  cond.getFirstChild().getString();  return  Node.newString(Token.NAME,  assignName.getFirstChild().getString());  [CE]  cannot  find  symbol  elseBranch  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assignName  =  cond.getFirstChild().getString();  return  Node.newString(Token.NAME,  assignName.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assignName  =  cond.getFirstChild().getString();  return  Node.newString(Token.NAME,  assignName.getFirstChild().getString());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    assign    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol  elseBranch	214	None	replace
20	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  assign);  [CE]  cannot  find  symbol  elseBranch  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  assign);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  assign);	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    assign    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol  elseBranch	214	None	replace
21	[BUG]  [BUGGY]  Node  assignName  =  n.getFirstChild().getString();  return  Node.newString(Token.NAME,  assignName.getFirstChild().getString());  [CE]  cannot  find  symbol  elseBranch  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assignName  =  n.getFirstChild().getString();  return  Node.newString(Token.NAME,  assignName.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assignName  =  n.getFirstChild().getString();  return  Node.newString(Token.NAME,  assignName.getFirstChild().getString());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    assign    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol  elseBranch	214	None	replace
22	[BUG]  [BUGGY]  Node  assignName  =  n.getFirstChild().getString();  [CE]  cannot  find  symbol  elseBranch  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assignName  =  n.getFirstChild().getString();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assignName  =  n.getFirstChild().getString();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    assign    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol  elseBranch	214	None	replace
23	[BUG]  [BUGGY]  Node  assignName  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  assignName.getFirstChild().getString());  [CE]  cannot  find  symbol  elseBranch  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assignName  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  assignName.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assignName  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  assignName.getFirstChild().getString());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    assign    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol  elseBranch	214	None	replace
24	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond,  n,  parent);  [CE]  cannot  find  symbol  elseBranch  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond,  n,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond,  n,  parent);	  return    Node.newString(Token.NAME,    cond,    parent);    	non-compiled	[CE]  cannot  find  symbol  elseBranch	117	None	replace
25	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond,  parent,  n);  [CE]  cannot  find  symbol  elseBranch  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond,  parent,  n);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond,  parent,  n);	  return    Node.newString(Token.NAME,    cond,    parent);    	non-compiled	[CE]  cannot  find  symbol  elseBranch	117	None	replace
26	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond,  STANDARD_OBJECT_CONSTRUCTORS,  parent);  [CE]  cannot  find  symbol  elseBranch  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond,  STANDARD_OBJECT_CONSTRUCTORS,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond,  STANDARD_OBJECT_CONSTRUCTORS,  parent);	  return    Node.newString(Token.NAME,    cond,    parent);    	non-compiled	[CE]  cannot  find  symbol  elseBranch	117	None	replace
27	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond,  n);  [CE]  cannot  find  symbol  elseBranch  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond,  n);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond,  n);	  return    Node.newString(Token.NAME,    cond,    parent);    	non-compiled	[CE]  cannot  find  symbol  elseBranch	117	None	replace
28	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n,  cond);  [CE]  cannot  find  symbol  elseBranch  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n,  cond);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n,  cond);	  return    Node.newString(Token.NAME,    cond,    parent);    	non-compiled	[CE]  cannot  find  symbol  elseBranch	117	None	replace
29	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond,  name1,  parent);  [CE]  cannot  find  symbol  elseBranch  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond,  name1,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond,  name1,  parent);	  return    Node.newString(Token.NAME,    cond,    parent);    	non-compiled	[CE]  cannot  find  symbol  elseBranch	117	None	replace
30	[BUG]  [BUGGY]  Node  thenAssign  =  cond.getFirstChild().getNext();  [CE]  cannot  find  symbol  elseBranch  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  thenAssign  =  cond.getFirstChild().getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  thenAssign  =  cond.getFirstChild().getNext();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    thenAssign    =    parent.getFirstChild().getNext();    return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol  elseBranch	216	None	replace
31	[BUG]  [BUGGY]  Node  thenAssign  =  cond.getFirstChild().getNext();  return  Node.newString(Token.NAME,  thenAssign.getFirstChild().getString());  [CE]  cannot  find  symbol  elseBranch  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  thenAssign  =  cond.getFirstChild().getNext();  return  Node.newString(Token.NAME,  thenAssign.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  thenAssign  =  cond.getFirstChild().getNext();  return  Node.newString(Token.NAME,  thenAssign.getFirstChild().getString());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    thenAssign    =    parent.getFirstChild().getNext();    return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol  elseBranch	216	None	replace
32	[BUG]  [BUGGY]  Node  thenAssign  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [CE]  cannot  find  symbol  elseBranch  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  thenAssign  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  thenAssign  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    thenAssign    =    parent.getFirstChild().getNext();    return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol  elseBranch	216	None	replace
33	[BUG]  [BUGGY]  Node  thenAssign  =  n.getFirstChild().getNext();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [CE]  cannot  find  symbol  elseBranch  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  thenAssign  =  n.getFirstChild().getNext();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  thenAssign  =  n.getFirstChild().getNext();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    thenAssign    =    parent.getFirstChild().getNext();    return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol  elseBranch	216	None	replace
34	[BUG]  [BUGGY]  Node  thenAssign  =  parent.getFirstChild().getNext();  [CE]  cannot  find  symbol  elseBranch  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  thenAssign  =  parent.getFirstChild().getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  thenAssign  =  parent.getFirstChild().getNext();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    thenAssign    =    parent.getFirstChild().getNext();    return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol  elseBranch	216	None	replace
35	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  thenAssign);  [CE]  cannot  find  symbol  elseBranch  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  thenAssign);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  thenAssign);	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    thenAssign    =    parent.getFirstChild().getNext();    return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol  elseBranch	216	None	replace
36	[BUG]  [BUGGY]  Node  thenBranch  =  cond.getFirstChild().getNext();  return  Node.newString(Token.NAME,  thenAssign.getFirstChild().getString());  [CE]  cannot  find  symbol  elseBranch  [FE]                        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  thenBranch  =  cond.getFirstChild().getNext();  return  Node.newString(Token.NAME,  thenAssign.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  thenBranch  =  cond.getFirstChild().getNext();  return  Node.newString(Token.NAME,  thenAssign.getFirstChild().getString());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    thenAssign    =    parent.getFirstChild().getNext();    return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol  elseBranch	216	None	replace
37	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getString(),  false);  [CE]  cannot  find  symbol  elseBranch  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getString(),  false);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getString(),  false);	  return    Node.newString(Token.NAME,    cond.getString(),    false);    	non-compiled	[CE]  cannot  find  symbol  elseBranch	47	None	replace
38	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n.getString(),  false);  [CE]  cannot  find  symbol  elseBranch  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n.getString(),  false);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n.getString(),  false);	  return    Node.newString(Token.NAME,    cond.getString(),    false);    	non-compiled	[CE]  cannot  find  symbol  elseBranch	47	None	replace
39	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  false,  parent);  [CE]  cannot  find  symbol  elseBranch  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  false,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  false,  parent);	  return    Node.newString(Token.NAME,    cond.getString(),    false);    	non-compiled	[CE]  cannot  find  symbol  elseBranch	47	None	replace
40	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  null,  false);  [CE]  cannot  find  symbol  elseBranch  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  null,  false);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  null,  false);	  return    Node.newString(Token.NAME,    cond.getString(),    false);    	non-compiled	[CE]  cannot  find  symbol  elseBranch	47	None	replace
41	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  parent,  false);  [CE]  cannot  find  symbol  elseBranch  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  parent,  false);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  parent,  false);	  return    Node.newString(Token.NAME,    cond.getString(),    false);    	non-compiled	[CE]  cannot  find  symbol  elseBranch	47	None	replace
42	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  ISO_8859_1);  [CE]  cannot  find  symbol  elseBranch  [FE]                        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  ISO_8859_1);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  ISO_8859_1);	  return    Node.newString(Token.NAME,    cond.getString(),    false);    	non-compiled	[CE]  cannot  find  symbol  elseBranch	47	None	replace
43	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.cloneTree(),  parent);  [CE]  cannot  find  symbol  elseBranch  [FE]        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.cloneTree(),  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.cloneTree(),  parent);	  return    Node.newString(Token.NAME,    cond.cloneTree());    	non-compiled	[CE]  cannot  find  symbol  elseBranch	206	None	replace
44	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.cloneTree());  [CE]  cannot  find  symbol  elseBranch  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.cloneTree());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.cloneTree());	  return    Node.newString(Token.NAME,    cond.cloneTree());    	non-compiled	[CE]  cannot  find  symbol  elseBranch	206	None	replace
45	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond,  parent.cloneTree());  [CE]  cannot  find  symbol  elseBranch  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond,  parent.cloneTree());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond,  parent.cloneTree());	  return    Node.newString(Token.NAME,    cond.cloneTree());    	non-compiled	[CE]  cannot  find  symbol  elseBranch	206	None	replace
46	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n.cloneTree());  [CE]  cannot  find  symbol  elseBranch  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n.cloneTree());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n.cloneTree());	  return    Node.newString(Token.NAME,    cond.cloneTree());    	non-compiled	[CE]  cannot  find  symbol  elseBranch	206	None	replace
47	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond,  n.cloneTree());  [CE]  cannot  find  symbol  elseBranch  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond,  n.cloneTree());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond,  n.cloneTree());	  return    Node.newString(Token.NAME,    cond.cloneTree());    	non-compiled	[CE]  cannot  find  symbol  elseBranch	206	None	replace
48	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n,  cond.cloneTree());  [CE]  cannot  find  symbol  elseBranch  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n,  cond.cloneTree());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n,  cond.cloneTree());	  return    Node.newString(Token.NAME,    cond.cloneTree());    	non-compiled	[CE]  cannot  find  symbol  elseBranch	206	None	replace
49	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  CondUtil.cloneTree(cond));  [CE]  cannot  find  symbol  elseBranch  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  CondUtil.cloneTree(cond));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  CondUtil.cloneTree(cond));	  return    Node.newString(Token.NAME,    cond.cloneTree());    	non-compiled	[CE]  cannot  find  symbol  elseBranch	206	None	replace
50	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  true,  parent);  [CE]  cannot  find  symbol  elseBranch  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  true,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  true,  parent);	  return    Node.newString(Token.NAME,    cond.getString(),    true);    	non-compiled	[CE]  cannot  find  symbol  elseBranch	48	None	replace
51	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getString(),  true);  [CE]  cannot  find  symbol  elseBranch  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getString(),  true);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getString(),  true);	  return    Node.newString(Token.NAME,    cond.getString(),    true);    	non-compiled	[CE]  cannot  find  symbol  elseBranch	48	None	replace
52	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  STANDARD_OBJECT_CONSTRUCTORS,  true);  [CE]  cannot  find  symbol  elseBranch  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  STANDARD_OBJECT_CONSTRUCTORS,  true);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  STANDARD_OBJECT_CONSTRUCTORS,  true);	  return    Node.newString(Token.NAME,    cond.getString(),    true);    	non-compiled	[CE]  cannot  find  symbol  elseBranch	48	None	replace
53	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n.getString(),  true);  [CE]  cannot  find  symbol  elseBranch  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n.getString(),  true);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n.getString(),  true);	  return    Node.newString(Token.NAME,    cond.getString(),    true);    	non-compiled	[CE]  cannot  find  symbol  elseBranch	48	None	replace
54	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  null,  true);  [CE]  cannot  find  symbol  elseBranch  [FE]                        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  null,  true);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  null,  true);	  return    Node.newString(Token.NAME,    cond.getString(),    true);    	non-compiled	[CE]  cannot  find  symbol  elseBranch	48	None	replace
55	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  n,  true);  [CE]  cannot  find  symbol  elseBranch  [FE]                          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  n,  true);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  n,  true);	  return    Node.newString(Token.NAME,    cond.getString(),    true);    	non-compiled	[CE]  cannot  find  symbol  elseBranch	48	None	replace
56	[BUG]  [BUGGY]  Node  thenBranch  =  cond.getNext();  [CE]  cannot  find  symbol  elseBranch  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  thenBranch  =  cond.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  thenBranch  =  cond.getNext();	  return    Node.newString(Token.NAME,    cond.getString());    Node    thenBranch    =    cond.getNext();    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  cannot  find  symbol  elseBranch	197	None	replace
57	[BUG]  [BUGGY]  Node  thenBranch  =  cond.getNext();  return  Node.newString(Token.NAME,  cond.getString());  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  thenBranch  =  cond.getNext();  return  Node.newString(Token.NAME,  cond.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  thenBranch  =  cond.getNext();  return  Node.newString(Token.NAME,  cond.getString());	  return    Node.newString(Token.NAME,    cond.getString());    Node    thenBranch    =    cond.getNext();    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  illegal  start  of  expression	197	None	replace
58	[BUG]  [BUGGY]  Node  thenBranch  =  cond.getNext();  return  Node.newString(Token.NAME,  elseBranch.getString());  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  thenBranch  =  cond.getNext();  return  Node.newString(Token.NAME,  elseBranch.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  thenBranch  =  cond.getNext();  return  Node.newString(Token.NAME,  elseBranch.getString());	  return    Node.newString(Token.NAME,    cond.getString());    Node    thenBranch    =    cond.getNext();    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  illegal  start  of  expression	197	None	replace
59	[BUG]  [BUGGY]  Node  thenBranch  =  cond.getNext();  return  Node.newString(Token.NAME,  thenBranch.getString());  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  thenBranch  =  cond.getNext();  return  Node.newString(Token.NAME,  thenBranch.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  thenBranch  =  cond.getNext();  return  Node.newString(Token.NAME,  thenBranch.getString());	  return    Node.newString(Token.NAME,    cond.getString());    Node    thenBranch    =    cond.getNext();    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  illegal  start  of  expression	197	None	replace
60	[BUG]  [BUGGY]  Node  elseBranch  =  cond.getNext();  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  elseBranch  =  cond.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  elseBranch  =  cond.getNext();	  return    Node.newString(Token.NAME,    cond.getString());    Node    thenBranch    =    cond.getNext();    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  illegal  start  of  expression	197	None	replace
61	[BUG]  [BUGGY]  Node  elseBranch  =  cond.getNext();  return  Node.newString(Token.NAME,  elseBranch.getString());  [CE]  illegal  start  of  expression  [FE]                        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  elseBranch  =  cond.getNext();  return  Node.newString(Token.NAME,  elseBranch.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  elseBranch  =  cond.getNext();  return  Node.newString(Token.NAME,  elseBranch.getString());	  return    Node.newString(Token.NAME,    cond.getString());    Node    thenBranch    =    cond.getNext();    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  illegal  start  of  expression	197	None	replace
62	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  elseBranch  [FE]    RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol  elseBranch	7	None	add
63	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Node  parent  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]      RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Node  parent  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    Node  parent  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	7	None	add
64	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Node  parent  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]        RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Node  parent  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    Node  parent  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	7	None	add
65	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Node  assign  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  elseBranch  [FE]          RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Node  assign  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    Node  assign  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol  elseBranch	7	None	add
66	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()!=  Token.FUNCTION);  [CE]  cannot  find  symbol  elseBranch  [FE]            RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()!=  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    Preconditions.checkState(parent.getType()!=  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol  elseBranch	7	None	add
67	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Node  assign  =  parent.getFirstChild();  Preconditions.checkState(cond.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  elseBranch  [FE]              RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Node  assign  =  parent.getFirstChild();  Preconditions.checkState(cond.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    Node  assign  =  parent.getFirstChild();  Preconditions.checkState(cond.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol  elseBranch	7	None	add
68	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  >=  Token.FUNCTION);  [CE]  cannot  find  symbol  elseBranch  [FE]                RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(parent.getType()  >=  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    Preconditions.checkState(parent.getType()  >=  Token.FUNCTION);	  	non-compiled	[CE]  cannot  find  symbol  elseBranch	7	None	add
69	[BUG]  [BUGGY]  Return(parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Return(parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Return(parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Return(parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	247	None	replace
70	[BUG]  [BUGGY]  parent  ==  null?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  ==  null?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  ==  null?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Return(parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	247	None	replace
71	[BUG]  [BUGGY]  Node  parent  =  parent.getFirstChild();  return(parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  parent.getFirstChild();  return(parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  parent.getFirstChild();  return(parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Return(parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	247	None	replace
72	[BUG]  [BUGGY]  Node  assign  =  parent.getFirstChild().getString();  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent.getFirstChild().getString();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assign  =  parent.getFirstChild().getString();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    thenAssign    =    parent.getFirstChild().getString();    return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  illegal  start  of  expression	251	None	replace
73	[BUG]  [BUGGY]  Node  thenAssign  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  thenAssign  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  thenAssign  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    thenAssign    =    parent.getFirstChild().getString();    return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  illegal  start  of  expression	251	None	replace
74	[BUG]  [BUGGY]  Node  thenAssign  =  parent.getFirstChild().getString();  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  thenAssign  =  parent.getFirstChild().getString();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  thenAssign  =  parent.getFirstChild().getString();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    thenAssign    =    parent.getFirstChild().getString();    return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  illegal  start  of  expression	251	None	replace
75	[BUG]  [BUGGY]  Node  assign  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  assign.getFirstChild().getString());  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  assign.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assign  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  assign.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    thenAssign    =    parent.getFirstChild().getString();    return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  illegal  start  of  expression	251	None	replace
76	[BUG]  [BUGGY]  Node  thenBranch  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  thenBranch.getFirstChild().getString());  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  thenBranch  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  thenBranch.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  thenBranch  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  thenBranch.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    thenAssign    =    parent.getFirstChild().getString();    return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  illegal  start  of  expression	251	None	replace
77	[BUG]  [BUGGY]  Node  assignName  =  parent.getFirstChild().getString();  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assignName  =  parent.getFirstChild().getString();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assignName  =  parent.getFirstChild().getString();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    thenAssign    =    parent.getFirstChild().getString();    return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  illegal  start  of  expression	251	None	replace
78	[BUG]  [BUGGY]  Node  thenBranch  =  parent.getFirstChild().getString();  [CE]  illegal  start  of  expression  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  thenBranch  =  parent.getFirstChild().getString();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  thenBranch  =  parent.getFirstChild().getString();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    thenAssign    =    parent.getFirstChild().getString();    return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  illegal  start  of  expression	251	None	replace
79	[BUG]  [BUGGY]  Node  var  =  cond.getNext();  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  var  =  cond.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  var  =  cond.getNext();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    var    =    cond.getNext();    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
80	[BUG]  [BUGGY]  Node  var  =  Cond.newString(Token.NAME,  cond.getFirstChild().getString());  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  var  =  Cond.newString(Token.NAME,  cond.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  var  =  Cond.newString(Token.NAME,  cond.getFirstChild().getString());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    var    =    cond.getNext();    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
81	[BUG]  [BUGGY]  Node  var  =  Cond.newString(Token.NAME,  parent.getFirstChild().getString());  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  var  =  Cond.newString(Token.NAME,  parent.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  var  =  Cond.newString(Token.NAME,  parent.getFirstChild().getString());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    var    =    cond.getNext();    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
82	[BUG]  [BUGGY]  Node  var  =  Cond.newString(Token.NAME,  cond.getLastChild().getString());  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  var  =  Cond.newString(Token.NAME,  cond.getLastChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  var  =  Cond.newString(Token.NAME,  cond.getLastChild().getString());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    var    =    cond.getNext();    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
83	[BUG]  [BUGGY]  Node  var  =  cond.getNext();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  var  =  cond.getNext();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  var  =  cond.getNext();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    var    =    cond.getNext();    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
84	[BUG]  [BUGGY]  Node  var  =  Cond.newString(Token.NAME,  cond.getfirstChild().getString());  [CE]  illegal  start  of  expression  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  var  =  Cond.newString(Token.NAME,  cond.getfirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  var  =  Cond.newString(Token.NAME,  cond.getfirstChild().getString());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    var    =    cond.getNext();    	non-compiled	[CE]  illegal  start  of  expression	162	None	replace
85	[BUG]  [BUGGY]  Node  thenAssign  =  parent.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  thenAssign  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  thenAssign  =  parent.getFirstChild();	  return    parent;    Node    thenAssign    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	229	None	replace
86	[BUG]  [BUGGY]  Node  thenAssign  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  thenAssign  =  n.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  thenAssign  =  n.getFirstChild();	  return    parent;    Node    thenAssign    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	229	None	replace
87	[BUG]  [BUGGY]  Node  thenAssign  =  cond.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  thenAssign  =  cond.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  thenAssign  =  cond.getFirstChild();	  return    parent;    Node    thenAssign    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	229	None	replace
88	[BUG]  [BUGGY]  return  thenAssign;  Node  thenAssign  =  parent.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  thenAssign;  Node  thenAssign  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  thenAssign;  Node  thenAssign  =  parent.getFirstChild();	  return    parent;    Node    thenAssign    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	229	None	replace
89	[BUG]  [BUGGY]  return  parent;  Node  thenAssign  =  cond.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent;  Node  thenAssign  =  cond.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent;  Node  thenAssign  =  cond.getFirstChild();	  return    parent;    Node    thenAssign    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	229	None	replace
90	[BUG]  [BUGGY]  Node  thenAssign  =  parent.getLastChild();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  thenAssign  =  parent.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  thenAssign  =  parent.getLastChild();	  return    parent;    Node    thenAssign    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	229	None	replace
91	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  n.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  n.getParent();	  return(parent!=    null)?    null    :    parent.getParent();    Node    parent    =    n.getParent();    	non-compiled	[CE]  illegal  start  of  expression	177	None	replace
92	[BUG]  [BUGGY]  parent!=  null?  null  :  parent.getParent();  Node  parent  =  n.getParent();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent!=  null?  null  :  parent.getParent();  Node  parent  =  n.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent!=  null?  null  :  parent.getParent();  Node  parent  =  n.getParent();	  return(parent!=    null)?    null    :    parent.getParent();    Node    parent    =    n.getParent();    	non-compiled	[CE]  not  a  statement	177	None	replace
93	[BUG]  [BUGGY]  parent  ==  null?  null  :  parent.getParent();  Node  parent  =  n.getParent();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  ==  null?  null  :  parent.getParent();  Node  parent  =  n.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  ==  null?  null  :  parent.getParent();  Node  parent  =  n.getParent();	  return(parent!=    null)?    null    :    parent.getParent();    Node    parent    =    n.getParent();    	non-compiled	[CE]  not  a  statement	177	None	replace
94	[BUG]  [BUGGY]  Node  parent  =  parent!=  null?  parent.getParent()  :  n.getParent();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  parent!=  null?  parent.getParent()  :  n.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  parent!=  null?  parent.getParent()  :  n.getParent();	  return(parent!=    null)?    null    :    parent.getParent();    Node    parent    =    n.getParent();    	non-compiled	[CE]  illegal  start  of  expression	177	None	replace
95	[BUG]  [BUGGY]  parent!=  null?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent!=  null?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent!=  null?  null  :  parent.getParent();	  return(parent!=    null)?    null    :    parent.getParent();    Node    parent    =    n.getParent();    	non-compiled	[CE]  not  a  statement	177	None	replace
96	[BUG]  [BUGGY]  Node  parent  =  parent!=  null?  null  :  parent.getParent();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  parent!=  null?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  parent!=  null?  null  :  parent.getParent();	  return(parent!=    null)?    null    :    parent.getParent();    Node    parent    =    n.getParent();    	non-compiled	[CE]  illegal  start  of  expression	177	None	replace
97	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  n.getParent();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  n.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent!=  null);  Node  parent  =  n.getParent();	  return(parent!=    null)?    null    :    parent.getParent();    Node    parent    =    n.getParent();    	non-compiled	[CE]  illegal  start  of  expression	177	None	replace
98	[BUG]  [BUGGY]  Node  return(parent  ==  null)?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  return(parent  ==  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  return(parent  ==  null)?  null  :  parent.getParent();	  return(parent!=    null)?    null    :    parent.getParent();    Node    return(parent!=    null)?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	176	None	replace
99	[BUG]  [BUGGY]  Node  return(parent!=  null)?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  return(parent!=  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  return(parent!=  null)?  null  :  parent.getParent();	  return(parent!=    null)?    null    :    parent.getParent();    Node    return(parent!=    null)?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	176	None	replace
100	[BUG]  [BUGGY]  parent  ==  null?  null  :  parent.getParent();  Node  return(parent!=  null)?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  ==  null?  null  :  parent.getParent();  Node  return(parent!=  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  ==  null?  null  :  parent.getParent();  Node  return(parent!=  null)?  null  :  parent.getParent();	  return(parent!=    null)?    null    :    parent.getParent();    Node    return(parent!=    null)?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	176	None	replace
101	[BUG]  [BUGGY]  Node  return(parent  ==  null)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  return(parent  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  return(parent  ==  null)?  null  :  parent.getNext();	  return(parent!=    null)?    null    :    parent.getParent();    Node    return(parent!=    null)?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	176	None	replace
102	[BUG]  [BUGGY]  Node  return(parent!=  null)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  return(parent!=  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  return(parent!=  null)?  null  :  parent.getNext();	  return(parent!=    null)?    null    :    parent.getParent();    Node    return(parent!=    null)?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	176	None	replace
103	[BUG]  [BUGGY]  parent!=  null?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent!=  null?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent!=  null?  null  :  parent.getNext();	  return(parent!=    null)?    null    :    parent.getNext();    (parent!=    null)?    null    :    parent.getNext();    	non-compiled	[CE]  not  a  statement	149	None	replace
104	[BUG]  [BUGGY]  (parent!=  null)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  (parent!=  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	(parent!=  null)?  null  :  parent.getNext();	  return(parent!=    null)?    null    :    parent.getNext();    (parent!=    null)?    null    :    parent.getNext();    	non-compiled	[CE]  not  a  statement	149	None	replace
105	[BUG]  [BUGGY]  parent  ==  null?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  ==  null?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  ==  null?  null  :  parent.getNext();	  return(parent!=    null)?    null    :    parent.getNext();    (parent!=    null)?    null    :    parent.getNext();    	non-compiled	[CE]  not  a  statement	149	None	replace
106	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  (parent!=  null)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  (parent!=  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getNext();  (parent!=  null)?  null  :  parent.getNext();	  return(parent!=    null)?    null    :    parent.getNext();    (parent!=    null)?    null    :    parent.getNext();    	non-compiled	[CE]  not  a  statement	149	None	replace
107	[BUG]  [BUGGY]  (parent  ==  null)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  (parent  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	(parent  ==  null)?  null  :  parent.getNext();	  return(parent!=    null)?    null    :    parent.getNext();    (parent!=    null)?    null    :    parent.getNext();    	non-compiled	[CE]  not  a  statement	149	None	replace
108	[BUG]  [BUGGY]  Node  parent  =  parent.getParent();  (parent!=  null)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  parent.getParent();  (parent!=  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  parent.getParent();  (parent!=  null)?  null  :  parent.getNext();	  return(parent!=    null)?    null    :    parent.getNext();    (parent!=    null)?    null    :    parent.getNext();    	non-compiled	[CE]  not  a  statement	149	None	replace
109	[BUG]  [BUGGY]  Node  return(parent!=  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  return(parent!=  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  return(parent!=  null)?  null  :  parent.getFirstChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    Node    return(parent!=    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	151	None	replace
110	[BUG]  [BUGGY]  Node  return(parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  return(parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  return(parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    Node    return(parent!=    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	151	None	replace
111	[BUG]  [BUGGY]  parent  ==  null?  null  :  parent.getFirstChild();  Node  return(parent!=  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  ==  null?  null  :  parent.getFirstChild();  Node  return(parent!=  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  ==  null?  null  :  parent.getFirstChild();  Node  return(parent!=  null)?  null  :  parent.getFirstChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    Node    return(parent!=    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	151	None	replace
112	[BUG]  [BUGGY]  Node  return(n  ==  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  return(n  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  return(n  ==  null)?  null  :  parent.getFirstChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    Node    return(parent!=    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	151	None	replace
113	[BUG]  [BUGGY]  Node  return(parent!=  null)?  null  :  parent.getLastChild();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  return(parent!=  null)?  null  :  parent.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  return(parent!=  null)?  null  :  parent.getLastChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    Node    return(parent!=    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	151	None	replace
114	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild(),  cond);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild(),  cond);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild(),  cond);	  return    Node.newString(Token.NAME,    parent.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
115	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS);	  return    Node.newString(Token.NAME,    parent.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
116	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild(),  COND);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild(),  COND);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild(),  COND);	  return    Node.newString(Token.NAME,    parent.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
117	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild(),  n);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild(),  n);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild(),  n);	  return    Node.newString(Token.NAME,    parent.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
118	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getLastChild());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getLastChild());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getLastChild());	  return    Node.newString(Token.NAME,    parent.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
119	[BUG]  [BUGGY]  Node  assign  =  parent.getNext();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assign  =  parent.getNext();	  return    parent;    Node    assign    =    parent.getParent();    	non-compiled	[CE]  illegal  start  of  expression	225	None	replace
120	[BUG]  [BUGGY]  Node  assign  =  n.getParent();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  n.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assign  =  n.getParent();	  return    parent;    Node    assign    =    parent.getParent();    	non-compiled	[CE]  illegal  start  of  expression	225	None	replace
121	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  Node  assign  =  parent.getParent();  [CE]  cannot  find  symbol  elseBranch  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Node  assign  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent!=  null);  Node  assign  =  parent.getParent();	  return    parent;    Node    assign    =    parent.getParent();    	non-compiled	[CE]  cannot  find  symbol  elseBranch	225	None	replace
122	[BUG]  [BUGGY]  return  assign;  Node  assign  =  parent.getParent();  [CE]  cannot  find  symbol  assign  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  assign;  Node  assign  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  assign;  Node  assign  =  parent.getParent();	  return    parent;    Node    assign    =    parent.getParent();    	non-compiled	[CE]  cannot  find  symbol  assign	225	None	replace
123	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  Node  assign  =  parent.getNext();  [CE]  cannot  find  symbol  elseBranch  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Node  assign  =  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent!=  null);  Node  assign  =  parent.getNext();	  return    parent;    Node    assign    =    parent.getParent();    	non-compiled	[CE]  cannot  find  symbol  elseBranch	225	None	replace
124	[BUG]  [BUGGY]  return  assign;  Node  assign  =  parent.getNext();  [CE]  cannot  find  symbol  assign  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  assign;  Node  assign  =  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  assign;  Node  assign  =  parent.getNext();	  return    parent;    Node    assign    =    parent.getParent();    	non-compiled	[CE]  cannot  find  symbol  assign	225	None	replace
125	[BUG]  [BUGGY]  Node  parent  =  parent.getFirstChild();  return(parent!=  null)?  null  :  parent.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  parent.getFirstChild();  return(parent!=  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  parent.getFirstChild();  return(parent!=  null)?  null  :  parent.getFirstChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent.getFirstChild();    return(parent!=    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	154	None	replace
126	[BUG]  [BUGGY]  parent!=  null?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent!=  null?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent!=  null?  null  :  parent.getFirstChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent.getFirstChild();    return(parent!=    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	154	None	replace
127	[BUG]  [BUGGY]  parent!=  null?  null  :  parent.getFirstChild();  return(parent!=  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent!=  null?  null  :  parent.getFirstChild();  return(parent!=  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent!=  null?  null  :  parent.getFirstChild();  return(parent!=  null)?  null  :  parent.getFirstChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent.getFirstChild();    return(parent!=    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	154	None	replace
128	[BUG]  [BUGGY]  Node  return  parent;  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  return  parent;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  return  parent;	  return    parent;    Node    return    parent;    	non-compiled	[CE]  not  a  statement	175	None	replace
129	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  Node  return  parent;  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Node  return  parent;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent!=  null);  Node  return  parent;	  return    parent;    Node    return    parent;    	non-compiled	[CE]  not  a  statement	175	None	replace
130	[BUG]  [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.FUNCTION);  Node  return  parent;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.FUNCTION);  Node  return  parent;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(cond.getType()  ==  Token.FUNCTION);  Node  return  parent;	  return    parent;    Node    return    parent;    	non-compiled	[CE]  not  a  statement	175	None	replace
131	[BUG]  [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.NAME);  Node  return  parent;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.NAME);  Node  return  parent;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(cond.getType()  ==  Token.NAME);  Node  return  parent;	  return    parent;    Node    return    parent;    	non-compiled	[CE]  not  a  statement	175	None	replace
132	[BUG]  [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.REGEXP);  Node  return  parent;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.REGEXP);  Node  return  parent;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(cond.getType()  ==  Token.REGEXP);  Node  return  parent;	  return    parent;    Node    return    parent;    	non-compiled	[CE]  not  a  statement	175	None	replace
133	[BUG]  [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.GETPROP);  Node  return  parent;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.GETPROP);  Node  return  parent;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(cond.getType()  ==  Token.GETPROP);  Node  return  parent;	  return    parent;    Node    return    parent;    	non-compiled	[CE]  not  a  statement	175	None	replace
134	[BUG]  [BUGGY]  Preconditions.checkState(parent  ==  null);  Node  return  parent;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent  ==  null);  Node  return  parent;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent  ==  null);  Node  return  parent;	  return    parent;    Node    return    parent;    	non-compiled	[CE]  not  a  statement	175	None	replace
135	[BUG]  [BUGGY]  Node  parent  =  n.getLastChild();  return  parent;  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  n.getLastChild();  return  parent;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  n.getLastChild();  return  parent;	  return    parent;    Node    parent    =    n.getLastChild();    return    parent;    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	86	None	replace
136	[BUG]  [BUGGY]  parent  =  n.getLastChild();  return  parent;  [CE]  cannot  find  symbol  elseBranch  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  =  n.getLastChild();  return  parent;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  =  n.getLastChild();  return  parent;	  return    parent;    Node    parent    =    n.getLastChild();    return    parent;    	non-compiled	[CE]  cannot  find  symbol  elseBranch	86	None	replace
137	[BUG]  [BUGGY]  Node  parent  =  n.getLastChild();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  n.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  n.getLastChild();	  return    parent;    Node    parent    =    n.getLastChild();    return    parent;    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	86	None	replace
138	[BUG]  [BUGGY]  Node  parent  =  n.getFirstChild();  return  parent;  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  n.getFirstChild();  return  parent;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  n.getFirstChild();  return  parent;	  return    parent;    Node    parent    =    n.getLastChild();    return    parent;    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	86	None	replace
139	[BUG]  [BUGGY]  parent  =  parent.getLastChild();  return  parent;  [CE]  cannot  find  symbol  cond  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  =  parent.getLastChild();  return  parent;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  =  parent.getLastChild();  return  parent;	  return    parent;    Node    parent    =    n.getLastChild();    return    parent;    	non-compiled	[CE]  cannot  find  symbol  cond	86	None	replace
140	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString(),  cond);  [CE]  cannot  find  symbol  cond  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString(),  cond);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n.getFirstChild().getString(),  cond);	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString(),    cond);    	non-compiled	[CE]  cannot  find  symbol  cond	96	None	replace
141	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  cond,  n);  [CE]  cannot  find  symbol  cond  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  cond,  n);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  cond,  n);	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString(),    cond);    	non-compiled	[CE]  cannot  find  symbol  cond	96	None	replace
142	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  name1,  cond);  [CE]  cannot  find  symbol  name1  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  name1,  cond);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  name1,  cond);	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString(),    cond);    	non-compiled	[CE]  cannot  find  symbol  name1	96	None	replace
143	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  n,  cond);  [CE]  cannot  find  symbol  cond  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  n,  cond);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  n,  cond);	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString(),    cond);    	non-compiled	[CE]  cannot  find  symbol  cond	96	None	replace
144	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  cond,  predicate);  [CE]  cannot  find  symbol  cond  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  cond,  predicate);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  cond,  predicate);	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString(),    cond);    	non-compiled	[CE]  cannot  find  symbol  cond	96	None	replace
145	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  cond,  false);  [CE]  cannot  find  symbol  cond  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  cond,  false);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  cond,  false);	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString(),    cond);    	non-compiled	[CE]  cannot  find  symbol  cond	96	None	replace
146	[BUG]  [BUGGY]  return(n  ==  null)?  null  :  parent.getLastChild();  [CE]  cannot  find  symbol  cond  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(n  ==  null)?  null  :  parent.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(n  ==  null)?  null  :  parent.getLastChild();	  return(parent!=    null)?    null    :    parent.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  cond	89	None	replace
147	[BUG]  [BUGGY]  Node  parent  =  parent.getNext();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  parent.getNext();	  return(parent!=    null)?    null    :    parent.getNext();    Node    parent    =    parent.getNext();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	141	None	replace
148	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  parent.getNext();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent!=  null);  Node  parent  =  parent.getNext();	  return(parent!=    null)?    null    :    parent.getNext();    Node    parent    =    parent.getNext();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	141	None	replace
149	[BUG]  [BUGGY]  Node  parent  =  parent!=  null?  null  :  parent.getNext();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  parent!=  null?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  parent!=  null?  null  :  parent.getNext();	  return(parent!=    null)?    null    :    parent.getNext();    Node    parent    =    parent.getNext();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	141	None	replace
150	[BUG]  [BUGGY]  Node  parent  =  parent!=  null?  parent.getNext()  :  null;  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  parent!=  null?  parent.getNext()  :  null;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  parent!=  null?  parent.getNext()  :  null;	  return(parent!=    null)?    null    :    parent.getNext();    Node    parent    =    parent.getNext();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	141	None	replace
151	[BUG]  [BUGGY]  Node  parent  =  parent  ==  null?  null  :  parent.getNext();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  parent  ==  null?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  parent  ==  null?  null  :  parent.getNext();	  return(parent!=    null)?    null    :    parent.getNext();    Node    parent    =    parent.getNext();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	141	None	replace
152	[BUG]  [BUGGY]  parent  ==  null?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  ==  null?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  ==  null?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	232	None	replace
153	[BUG]  [BUGGY]  parent  ==  null)?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  ==  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  ==  null)?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	232	None	replace
154	[BUG]  [BUGGY]  Node  parent  =  parent!=  null)?  null  :  parent.getParent();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  parent!=  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  parent!=  null)?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    Node    parent    =    parent!=    null)?    null    :    parent.getParent();    	non-compiled	[CE]  ';'  expected	33	None	replace
155	[BUG]  [BUGGY]  Node  parent  =  parent  ==  null)?  null  :  parent.getParent();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  parent  ==  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  parent  ==  null)?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    Node    parent    =    parent!=    null)?    null    :    parent.getParent();    	non-compiled	[CE]  ';'  expected	33	None	replace
156	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  true,  parent);  [CE]  cannot  find  symbol  cond  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  true,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  true,  parent);	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString(),    true);    	non-compiled	[CE]  cannot  find  symbol  cond	28	None	replace
157	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  true);  [CE]  cannot  find  symbol  parent  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  true);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  true);	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString(),    true);    	non-compiled	[CE]  cannot  find  symbol  parent	28	None	replace
158	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString(),  true);  [CE]  no  suitable  method  found  for  newString(int,String,boolean)  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString(),  true);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n.getFirstChild().getString(),  true);	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString(),    true);    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,String,boolean)	28	None	replace
159	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  n,  true);  [CE]  cannot  find  symbol  cond  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  n,  true);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  n,  true);	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString(),    true);    	non-compiled	[CE]  cannot  find  symbol  cond	28	None	replace
160	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getLastChild().getString(),  true);  [CE]  cannot  find  symbol  cond  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getLastChild().getString(),  true);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getLastChild().getString(),  true);	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString(),    true);    	non-compiled	[CE]  cannot  find  symbol  cond	28	None	replace
161	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  null,  true);  [CE]  cannot  find  symbol  cond  [FE]                        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  null,  true);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  null,  true);	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString(),    true);    	non-compiled	[CE]  cannot  find  symbol  cond	28	None	replace
162	[BUG]  [BUGGY]  Node  parent  =  parent.getLastChild();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  parent.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  parent.getLastChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent.getLastChild();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	63	None	replace
163	[BUG]  [BUGGY]  parent!=  null?  null  :  parent.getFirstChild();  Node  parent  =  parent.getLastChild();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent!=  null?  null  :  parent.getFirstChild();  Node  parent  =  parent.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent!=  null?  null  :  parent.getFirstChild();  Node  parent  =  parent.getLastChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent.getLastChild();    	non-compiled	[CE]  not  a  statement	63	None	replace
164	[BUG]  [BUGGY]  parent  ==  null?  null  :  parent.getFirstChild();  Node  parent  =  parent.getLastChild();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  ==  null?  null  :  parent.getFirstChild();  Node  parent  =  parent.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  ==  null?  null  :  parent.getFirstChild();  Node  parent  =  parent.getLastChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent.getLastChild();    	non-compiled	[CE]  not  a  statement	63	None	replace
165	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  parent.getLastChild();  [CE]  cannot  find  symbol  parent  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  parent.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent!=  null);  Node  parent  =  parent.getLastChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  parent	63	None	replace
166	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  parent  [FE]    RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  cannot  find  symbol  parent	3	None	add
167	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  Node  parent  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  parent  [FE]      RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  Node  parent  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()    ==    Token.EXPR_RESULT);    Node  parent  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  cannot  find  symbol  parent	3	None	add
168	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(parent.getType()!=  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  parent  [FE]        RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(parent.getType()!=  Token.EXPR_RESULT);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(parent.getType()!=  Token.EXPR_RESULT);	  	non-compiled	[CE]  cannot  find  symbol  parent	3	None	add
169	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  Node  assign  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  parent  [FE]          RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  Node  assign  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()    ==    Token.EXPR_RESULT);    Node  assign  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  cannot  find  symbol  parent	3	None	add
170	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  }  else  {  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  type  [FE]            RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  }  else  {  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  }  else  {  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  illegal  start  of  type	3	None	add
171	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  parent  [FE]              RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  cannot  find  symbol  parent	3	None	add
172	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(parent.getType()  >=  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  parent  [FE]                RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(parent.getType()  >=  Token.EXPR_RESULT);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(parent.getType()  >=  Token.EXPR_RESULT);	  	non-compiled	[CE]  cannot  find  symbol  parent	3	None	add
173	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  parent  =  parent.getLastChild();  [CE]  cannot  find  symbol  cond  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  parent  =  parent.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  parent  =  parent.getLastChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    parent    =    parent.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  cond	102	None	replace
174	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  parent  =  parent.getLastChild();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  parent  =  parent.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  parent  =  parent.getLastChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    parent    =    parent.getLastChild();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	102	None	replace
175	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  parent  =  n.getLastChild();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  parent  =  n.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  parent  =  n.getLastChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    parent    =    parent.getLastChild();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	102	None	replace
176	[BUG]  [BUGGY]  parent  ==  null?  null  :  parent.getFirstChild();  Node  return(parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  ==  null?  null  :  parent.getFirstChild();  Node  return(parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  ==  null?  null  :  parent.getFirstChild();  Node  return(parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    return(parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	126	None	replace
177	[BUG]  [BUGGY]  Node  return(parent  ==  null)?  null  :  parent.getLastChild();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  return(parent  ==  null)?  null  :  parent.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  return(parent  ==  null)?  null  :  parent.getLastChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    return(parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	126	None	replace
178	[BUG]  [BUGGY]  Node  newExpr  =  Node.newString(Token.NAME,  cond.getFirstChild().getString());  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  [CE]  cannot  find  symbol  cond  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  newExpr  =  Node.newString(Token.NAME,  cond.getFirstChild().getString());  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  newExpr  =  Node.newString(Token.NAME,  cond.getFirstChild().getString());  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    newExpr    =    Node.newString(Token.NAME,    parent.getFirstChild().getString());    return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol  cond	169	None	replace
179	[BUG]  [BUGGY]  Node  newExpr  =  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [CE]  cannot  find  symbol  cond  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  newExpr  =  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  newExpr  =  Node.newString(Token.NAME,  cond.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    newExpr    =    Node.newString(Token.NAME,    parent.getFirstChild().getString());    return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol  cond	169	None	replace
180	[BUG]  [BUGGY]  Node  newExpr  =  Node.newString(Token.NAME,  parent.getFirstChild().getString());  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  [CE]  cannot  find  symbol  parent  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  newExpr  =  Node.newString(Token.NAME,  parent.getFirstChild().getString());  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  newExpr  =  Node.newString(Token.NAME,  parent.getFirstChild().getString());  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    newExpr    =    Node.newString(Token.NAME,    parent.getFirstChild().getString());    return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol  parent	169	None	replace
181	[BUG]  [BUGGY]  Node  newExpr  =  Node.newString(Token.NAME,  cond.getFirstChild().getString());  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [CE]  cannot  find  symbol  cond  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  newExpr  =  Node.newString(Token.NAME,  cond.getFirstChild().getString());  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  newExpr  =  Node.newString(Token.NAME,  cond.getFirstChild().getString());  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    newExpr    =    Node.newString(Token.NAME,    parent.getFirstChild().getString());    return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol  cond	169	None	replace
182	[BUG]  [BUGGY]  Node  newExpr  =  Node.newString(Token.NAME,  parent.getFirstChild().getString());  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [CE]  cannot  find  symbol  parent  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  newExpr  =  Node.newString(Token.NAME,  parent.getFirstChild().getString());  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  newExpr  =  Node.newString(Token.NAME,  parent.getFirstChild().getString());  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    newExpr    =    Node.newString(Token.NAME,    parent.getFirstChild().getString());    return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol  parent	169	None	replace
183	[BUG]  [BUGGY]  Node  newExpr  =  Node.newString(Token.NAME,  n.getFirstChild().getString());  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [CE]  cannot  find  symbol  cond  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  newExpr  =  Node.newString(Token.NAME,  n.getFirstChild().getString());  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  newExpr  =  Node.newString(Token.NAME,  n.getFirstChild().getString());  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    newExpr    =    Node.newString(Token.NAME,    parent.getFirstChild().getString());    return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol  cond	169	None	replace
184	[BUG]  [BUGGY]  Node  newExpr  =  Node.newString(Token.NAME,  n.getFirstChild().getString());  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  [CE]  cannot  find  symbol  parent  [FE]                        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  newExpr  =  Node.newString(Token.NAME,  n.getFirstChild().getString());  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  newExpr  =  Node.newString(Token.NAME,  n.getFirstChild().getString());  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    newExpr    =    Node.newString(Token.NAME,    parent.getFirstChild().getString());    return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol  parent	169	None	replace
185	[BUG]  [BUGGY]  Node  lhs  =  parent.getFirstChild();  [CE]  cannot  find  symbol  parent  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  lhs  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  lhs  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    lhs    =    parent.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  parent	104	None	replace
186	[BUG]  [BUGGY]  node  =  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  lhs  =  parent.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  node  =  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  lhs  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	node  =  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  lhs  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    lhs    =    parent.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	104	None	replace
187	[BUG]  [BUGGY]  node  =  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  n);  Node  lhs  =  parent.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  node  =  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  n);  Node  lhs  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	node  =  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  n);  Node  lhs  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    lhs    =    parent.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	104	None	replace
188	[BUG]  [BUGGY]  node  =  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  lhs  =  parent.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]                        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  node  =  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  lhs  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	node  =  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  lhs  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    lhs    =    parent.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	104	None	replace
189	[BUG]  [BUGGY]  node  =  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  lhs  =  parent.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]                          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  node  =  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  lhs  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	node  =  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  lhs  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    lhs    =    parent.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	104	None	replace
190	[BUG]  [BUGGY]  node  =  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  cond);  Node  lhs  =  parent.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]                            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  node  =  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  cond);  Node  lhs  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	node  =  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  cond);  Node  lhs  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    lhs    =    parent.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	104	None	replace
191	[BUG]  [BUGGY]  node  =  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  false);  Node  lhs  =  parent.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]                              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  node  =  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  false);  Node  lhs  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	node  =  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  false);  Node  lhs  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    lhs    =    parent.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  node	104	None	replace
192	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(n,  true,  parent);  [CE]  cannot  find  symbol  parent  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.newLiteralValue(n,  true,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(n,  true,  parent);	  return    NodeUtil.newLiteralValue(n,    true);    	non-compiled	[CE]  cannot  find  symbol  parent	93	None	replace
193	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(n,  true,  cond);  [CE]  cannot  find  symbol  cond  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.newLiteralValue(n,  true,  cond);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(n,  true,  cond);	  return    NodeUtil.newLiteralValue(n,    true);    	non-compiled	[CE]  cannot  find  symbol  cond	93	None	replace
194	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  if(parent!=  null)?  null  :  parent.getNext();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  if(parent!=  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getNext();  if(parent!=  null)?  null  :  parent.getNext();	  return(parent!=    null)?    null    :    parent.getNext();    if(parent!=    null)?    null    :    parent.getNext();    	non-compiled	[CE]  illegal  start  of  expression	234	None	replace
195	[BUG]  [BUGGY]  return  parent  ==  null?  null  :  parent.getNext();  if(parent!=  null)?  null  :  parent.getNext();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent  ==  null?  null  :  parent.getNext();  if(parent!=  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null?  null  :  parent.getNext();  if(parent!=  null)?  null  :  parent.getNext();	  return(parent!=    null)?    null    :    parent.getNext();    if(parent!=    null)?    null    :    parent.getNext();    	non-compiled	[CE]  illegal  start  of  expression	234	None	replace
196	[BUG]  [BUGGY]  return  parent!=  null?  null  :  parent.getNext();  if(parent!=  null)?  null  :  parent.getNext();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent!=  null?  null  :  parent.getNext();  if(parent!=  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null?  null  :  parent.getNext();  if(parent!=  null)?  null  :  parent.getNext();	  return(parent!=    null)?    null    :    parent.getNext();    if(parent!=    null)?    null    :    parent.getNext();    	non-compiled	[CE]  illegal  start  of  expression	234	None	replace
197	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getNext();  if(parent  ==  null)?  null  :  parent.getNext();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent!=  null)?  null  :  parent.getNext();  if(parent  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=  null)?  null  :  parent.getNext();  if(parent  ==  null)?  null  :  parent.getNext();	  return(parent!=    null)?    null    :    parent.getNext();    if(parent!=    null)?    null    :    parent.getNext();    	non-compiled	[CE]  illegal  start  of  expression	234	None	replace
198	[BUG]  [BUGGY]  Return  parent  =  NodeUtil.newLiteralValue(cond,  true);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Return  parent  =  NodeUtil.newLiteralValue(cond,  true);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Return  parent  =  NodeUtil.newLiteralValue(cond,  true);	  return    NodeUtil.newLiteralValue(parent,    true);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
199	[BUG]  [BUGGY]  Return  parent  =  NodeUtil.newLiteralValue(parent,  true);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Return  parent  =  NodeUtil.newLiteralValue(parent,  true);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Return  parent  =  NodeUtil.newLiteralValue(parent,  true);	  return    NodeUtil.newLiteralValue(parent,    true);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
200	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(parent,  true,  false);  [CE]  cannot  find  symbol  parent  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.newLiteralValue(parent,  true,  false);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(parent,  true,  false);	  return    NodeUtil.newLiteralValue(parent,    true);    	non-compiled	[CE]  cannot  find  symbol  parent	90	None	replace
201	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString(),  false);  [CE]  no  suitable  method  found  for  newString(int,String,boolean)  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString(),  false);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n.getFirstChild().getString(),  false);	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString(),    false);    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,String,boolean)	29	None	replace
202	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  false,  parent);  [CE]  cannot  find  symbol  cond  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  false,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  false,  parent);	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString(),    false);    	non-compiled	[CE]  cannot  find  symbol  cond	29	None	replace
203	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  null,  false);  [CE]  cannot  find  symbol  cond  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  null,  false);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  null,  false);	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString(),    false);    	non-compiled	[CE]  cannot  find  symbol  cond	29	None	replace
204	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent,  false);  [CE]  cannot  find  symbol  cond  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent,  false);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent,  false);	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString(),    false);    	non-compiled	[CE]  cannot  find  symbol  cond	29	None	replace
205	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  n,  false);  [CE]  cannot  find  symbol  cond  [FE]                        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  n,  false);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  n,  false);	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString(),    false);    	non-compiled	[CE]  cannot  find  symbol  cond	29	None	replace
206	[BUG]  [BUGGY]  return  NodeUtil.newLLiteralValue(cond,  true);  [CE]  cannot  find  symbol  cond  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.newLLiteralValue(cond,  true);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLLiteralValue(cond,  true);	  return    NodeUtil.newLLiteralValue(cond,    false);    	non-compiled	[CE]  cannot  find  symbol  cond	205	None	replace
207	[BUG]  [BUGGY]  return  NodeUtil.newLLiteralValue(parent,  false);  [CE]  cannot  find  symbol  parent  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.newLLiteralValue(parent,  false);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLLiteralValue(parent,  false);	  return    NodeUtil.newLLiteralValue(cond,    false);    	non-compiled	[CE]  cannot  find  symbol  parent	205	None	replace
208	[BUG]  [BUGGY]  return  NodeUtil.newLLiteralValue(n,  false);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.newLLiteralValue(n,  false);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLLiteralValue(n,  false);	  return    NodeUtil.newLLiteralValue(cond,    false);    	non-compiled	[CE]  cannot  find  symbol	205	None	replace
209	[BUG]  [BUGGY]  return  NodeUtil.newLLiteralValue(cond,  false,  parent);  [CE]  cannot  find  symbol  cond  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.newLLiteralValue(cond,  false,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLLiteralValue(cond,  false,  parent);	  return    NodeUtil.newLLiteralValue(cond,    false);    	non-compiled	[CE]  cannot  find  symbol  cond	205	None	replace
210	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n.getLastChild().getString());  [CE]  cannot  find  symbol  name1  [FE]        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n.getLastChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n.getLastChild().getString());	  return    Node.newString(Token.NAME,    cond.getLastChild().getString());    	non-compiled	[CE]  cannot  find  symbol  name1	25	None	replace
211	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getLastChild().getString(),  parent);  [CE]  cannot  find  symbol  cond  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getLastChild().getString(),  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getLastChild().getString(),  parent);	  return    Node.newString(Token.NAME,    cond.getLastChild().getString());    	non-compiled	[CE]  cannot  find  symbol  cond	25	None	replace
212	[BUG]  [BUGGY]  ReturnNode.newString(Token.NAME,  cond.getFirstChild().getString());  [CE]  cannot  find  symbol  cond  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  ReturnNode.newString(Token.NAME,  cond.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	ReturnNode.newString(Token.NAME,  cond.getFirstChild().getString());	  return    Node.newString(Token.NAME,    cond.getLastChild().getString());    	non-compiled	[CE]  cannot  find  symbol  cond	25	None	replace
213	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  (parent!=  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  (parent!=  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getFirstChild();  (parent!=  null)?  null  :  parent.getFirstChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    (parent!=    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	153	None	replace
214	[BUG]  [BUGGY]  (parent!=  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  (parent!=  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	(parent!=  null)?  null  :  parent.getFirstChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    (parent!=    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	153	None	replace
215	[BUG]  [BUGGY]  Node  parent  =  parent.getFirstChild();  (parent!=  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  parent.getFirstChild();  (parent!=  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  parent.getFirstChild();  (parent!=  null)?  null  :  parent.getFirstChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    (parent!=    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	153	None	replace
216	[BUG]  [BUGGY]  Node  parent  =  n.getFirstChild();  (parent!=  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  n.getFirstChild();  (parent!=  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  n.getFirstChild();  (parent!=  null)?  null  :  parent.getFirstChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    (parent!=    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	153	None	replace
217	[BUG]  [BUGGY]  (parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  (parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	(parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    (parent!=    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	153	None	replace
218	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  cannot  find  symbol  parent  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS);	  return    Node.newString(Token.NAME,    cond.getFirstChild(),    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  cannot  find  symbol  parent	69	None	replace
219	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  cannot  find  symbol  cond  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS,  INVALID_REGULAR_EXPRESSION_FLAGS);	  return    Node.newString(Token.NAME,    cond.getFirstChild(),    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  cannot  find  symbol  cond	69	None	replace
220	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS,  parent);  [CE]  invalid  method  declaration;  return  type  required  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS,  parent);	  return    Node.newString(Token.NAME,    cond.getFirstChild(),    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	69	None	replace
221	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  invalid  method  declaration;  return  type  required  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);	  return    Node.newString(Token.NAME,    cond.getFirstChild(),    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	69	None	replace
222	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  invalid  method  declaration;  return  type  required  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS);	  return    Node.newString(Token.NAME,    cond.getFirstChild(),    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	69	None	replace
223	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS,  SHORT_OBJECT_CONSTRUCTORS);  [CE]  invalid  method  declaration;  return  type  required  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS,  SHORT_OBJECT_CONSTRUCTORS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS,  SHORT_OBJECT_CONSTRUCTORS);	  return    Node.newString(Token.NAME,    cond.getFirstChild(),    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	69	None	replace
224	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS,  DEFAULT_OBJECT_CONSTRUCTORS);  [CE]  invalid  method  declaration;  return  type  required  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS,  DEFAULT_OBJECT_CONSTRUCTORS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS,  DEFAULT_OBJECT_CONSTRUCTORS);	  return    Node.newString(Token.NAME,    cond.getFirstChild(),    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	69	None	replace
225	[BUG]  [BUGGY]  Node  nextBranch  =  parent.getFirstChild().getNext();  [CE]  invalid  method  declaration;  return  type  required  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  nextBranch  =  parent.getFirstChild().getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  nextBranch  =  parent.getFirstChild().getNext();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    nextBranch    =    parent.getFirstChild().getNext();    return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	253	None	replace
226	[BUG]  [BUGGY]  Node  nextBranch  =  parent.getLastChild().getNext();  [CE]  invalid  method  declaration;  return  type  required  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  nextBranch  =  parent.getLastChild().getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  nextBranch  =  parent.getLastChild().getNext();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    nextBranch    =    parent.getFirstChild().getNext();    return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	253	None	replace
227	[BUG]  [BUGGY]  Node  nextBranch  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  nextBranch.getFirstChild().getString());  [CE]  invalid  method  declaration;  return  type  required  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  nextBranch  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  nextBranch.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  nextBranch  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  nextBranch.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    nextBranch    =    parent.getFirstChild().getNext();    return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	253	None	replace
228	[BUG]  [BUGGY]  Node  nextBranch  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  [CE]  invalid  method  declaration;  return  type  required  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  nextBranch  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  nextBranch  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    nextBranch    =    parent.getFirstChild().getNext();    return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	253	None	replace
229	[BUG]  [BUGGY]  Node  nextBranch  =  parent.getLastChild().getNext();  return  Node.newString(Token.NAME,  nextBranch.getFirstChild().getString());  [CE]  invalid  method  declaration;  return  type  required  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  nextBranch  =  parent.getLastChild().getNext();  return  Node.newString(Token.NAME,  nextBranch.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  nextBranch  =  parent.getLastChild().getNext();  return  Node.newString(Token.NAME,  nextBranch.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    nextBranch    =    parent.getFirstChild().getNext();    return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	253	None	replace
230	[BUG]  [BUGGY]  Node  nextBranch  =  n.getLastChild().getNext();  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  [CE]  invalid  method  declaration;  return  type  required  [FE]                        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  nextBranch  =  n.getLastChild().getNext();  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  nextBranch  =  n.getLastChild().getNext();  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    nextBranch    =    parent.getFirstChild().getNext();    return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	253	None	replace
231	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  COND,  cond);  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  COND,  cond);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  COND,  cond);	  return    Node.newString(Token.NAME,    COND,    parent);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	203	None	replace
232	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  COND,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  COND,  n);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  COND,  n);	  return    Node.newString(Token.NAME,    COND,    parent);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	203	None	replace
233	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  Cond.EMPTY,  parent);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  Cond.EMPTY,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  Cond.EMPTY,  parent);	  return    Node.newString(Token.NAME,    COND,    parent);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	203	None	replace
234	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  COND,  parent,  cond);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  COND,  parent,  cond);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  COND,  parent,  cond);	  return    Node.newString(Token.NAME,    COND,    parent);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	203	None	replace
235	[BUG]  [BUGGY]  Node  toString  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  toString);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  toString  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  toString);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  toString  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  toString);	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    toString    =    parent.getFirstChild().getString();    return    Node.newString(Token.NAME,    toString);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	255	None	replace
236	[BUG]  [BUGGY]  Node  toString  =  parent.getFirstChild().getString();  [CE]  invalid  method  declaration;  return  type  required  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  toString  =  parent.getFirstChild().getString();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  toString  =  parent.getFirstChild().getString();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    toString    =    parent.getFirstChild().getString();    return    Node.newString(Token.NAME,    toString);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	255	None	replace
237	[BUG]  [BUGGY]  Node  toString  =  n.getFirstChild().getString();  return  Node.newString(Token.NAME,  toString);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  toString  =  n.getFirstChild().getString();  return  Node.newString(Token.NAME,  toString);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  toString  =  n.getFirstChild().getString();  return  Node.newString(Token.NAME,  toString);	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    toString    =    parent.getFirstChild().getString();    return    Node.newString(Token.NAME,    toString);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	255	None	replace
238	[BUG]  [BUGGY]  Node  toString  =  parent.getLastChild().getString();  return  Node.newString(Token.NAME,  toString);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  toString  =  parent.getLastChild().getString();  return  Node.newString(Token.NAME,  toString);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  toString  =  parent.getLastChild().getString();  return  Node.newString(Token.NAME,  toString);	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    toString    =    parent.getFirstChild().getString();    return    Node.newString(Token.NAME,    toString);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	255	None	replace
239	[BUG]  [BUGGY]  Node  toString  =  n.getFirstChild().getString();  [CE]  invalid  method  declaration;  return  type  required  [FE]                          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  toString  =  n.getFirstChild().getString();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  toString  =  n.getFirstChild().getString();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    toString    =    parent.getFirstChild().getString();    return    Node.newString(Token.NAME,    toString);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	255	None	replace
240	[BUG]  [BUGGY]  (parent!=  null)?  null  :  parent.getParent();  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  (parent!=  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	(parent!=  null)?  null  :  parent.getParent();	  return(parent!=    null)?    null    :    parent.getParent();    (parent!=    null)?    null    :    parent.getParent();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	114	None	replace
241	[BUG]  [BUGGY]  (parent  ==  null)?  null  :  parent.getParent();  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  (parent  ==  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	(parent  ==  null)?  null  :  parent.getParent();	  return(parent!=    null)?    null    :    parent.getParent();    (parent!=    null)?    null    :    parent.getParent();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	114	None	replace
242	[BUG]  [BUGGY]  Node  parent  =  parent.getParent();  (parent!=  null)?  null  :  parent.getParent();  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  parent.getParent();  (parent!=  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  parent.getParent();  (parent!=  null)?  null  :  parent.getParent();	  return(parent!=    null)?    null    :    parent.getParent();    (parent!=    null)?    null    :    parent.getParent();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	114	None	replace
243	[BUG]  [BUGGY]  parent!=  null?  parent.getType()  ==  Token.FUNCTION  :  parent.getParent();  [CE]  invalid  method  declaration;  return  type  required  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent!=  null?  parent.getType()  ==  Token.FUNCTION  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent!=  null?  parent.getType()  ==  Token.FUNCTION  :  parent.getParent();	  return(parent!=    null)?    null    :    parent.getParent();    (parent!=    null)?    null    :    parent.getParent();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	114	None	replace
244	[BUG]  [BUGGY]  parent!=  null?  parent.getType()  ==  Token.NAME  :  parent.getParent();  [CE]  invalid  method  declaration;  return  type  required  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent!=  null?  parent.getType()  ==  Token.NAME  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent!=  null?  parent.getType()  ==  Token.NAME  :  parent.getParent();	  return(parent!=    null)?    null    :    parent.getParent();    (parent!=    null)?    null    :    parent.getParent();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	114	None	replace
245	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent!=  null)?  null  :  parent.getLastChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent!=  null)?  null  :  parent.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent!=  null)?  null  :  parent.getLastChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent!=    null)?    null    :    parent.getLastChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
246	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent  ==  null)?  null  :  parent.getLastChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent  ==  null)?  null  :  parent.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent  ==  null)?  null  :  parent.getLastChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent!=    null)?    null    :    parent.getLastChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
247	[BUG]  [BUGGY]  Node  parent  =  parent!=  null)?  null  :  parent.getLastChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  parent!=  null)?  null  :  parent.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  parent!=  null)?  null  :  parent.getLastChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent!=    null)?    null    :    parent.getLastChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
248	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent  ==  null)?  null  :  parent.getLastChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent  ==  null)?  null  :  parent.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent  ==  null)?  null  :  parent.getLastChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent!=    null)?    null    :    parent.getLastChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	64	None	replace
249	[BUG]  [BUGGY]  ||(parent  ==  null)?  null  :  parent.getNext();  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  ||(parent  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	||(parent  ==  null)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    ||(parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	222	None	replace
250	[BUG]  [BUGGY]  ||(parent!=  null)?  null  :  parent.getNext();  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  ||(parent!=  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	||(parent!=  null)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    ||(parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	222	None	replace
251	[BUG]  [BUGGY]  ||(parent  ==  null)?  null  :  parent.getParent();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  ||(parent  ==  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	||(parent  ==  null)?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getNext();    ||(parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	222	None	replace
252	[BUG]  [BUGGY]  ||(parent!=  null)?  null  :  parent.getParent();  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  ||(parent!=  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	||(parent!=  null)?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getNext();    ||(parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	222	None	replace
253	[BUG]  [BUGGY]  ||  parent  ==  null?  null  :  parent.getNext();  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  ||  parent  ==  null?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	||  parent  ==  null?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    ||(parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	222	None	replace
254	[BUG]  [BUGGY]  |(parent  ==  null)?  null  :  parent.getNext();  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  |(parent  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	|(parent  ==  null)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    ||(parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	222	None	replace
255	[BUG]  [BUGGY]  ||  parent!=  null?  null  :  parent.getNext();  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  ||  parent!=  null?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	||  parent!=  null?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    ||(parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	222	None	replace
256	[BUG]  [BUGGY]  return  parent!=  null?  null  :  parent.getNext();  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent!=  null?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null?  null  :  parent.getNext();	  return(parent!=    null)?    null    :    parent.getNext();    parent!=    null)?    null    :    parent.getNext();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	236	None	replace
257	[BUG]  [BUGGY]  parent!=  null)?  null  :  parent.getNext();  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent!=  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent!=  null)?  null  :  parent.getNext();	  return(parent!=    null)?    null    :    parent.getNext();    parent!=    null)?    null    :    parent.getNext();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	236	None	replace
258	[BUG]  [BUGGY]  Node  parent  =  parent!=  null)?  null  :  parent.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  parent!=  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  parent!=  null)?  null  :  parent.getFirstChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent!=    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	57	None	replace
259	[BUG]  [BUGGY]  parent  ==  null?  null  :  parent.getFirstChild();  return(parent  ==  null)?  null  :  parent.getLastChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  ==  null?  null  :  parent.getFirstChild();  return(parent  ==  null)?  null  :  parent.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  ==  null?  null  :  parent.getFirstChild();  return(parent  ==  null)?  null  :  parent.getLastChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    return(parent    ==    null)?    null    :    parent.getLastChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	249	None	replace
260	[BUG]  [BUGGY]  parent!=  null?  null  :  parent.getFirstChild();  return(parent  ==  null)?  null  :  parent.getLastChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent!=  null?  null  :  parent.getFirstChild();  return(parent  ==  null)?  null  :  parent.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent!=  null?  null  :  parent.getFirstChild();  return(parent  ==  null)?  null  :  parent.getLastChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    return(parent    ==    null)?    null    :    parent.getLastChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	249	None	replace
261	[BUG]  [BUGGY]  return  parent  ==  null?  null  :  parent.getLastChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent  ==  null?  null  :  parent.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null?  null  :  parent.getLastChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    return(parent    ==    null)?    null    :    parent.getLastChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	249	None	replace
262	[BUG]  [BUGGY]  Node  parent  =  parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	58	None	replace
263	[BUG]  [BUGGY]  Node  returnNode.newString(Token.NAME,  cond.getFirstChild().getString());  [CE]  invalid  method  declaration;  return  type  required  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  returnNode.newString(Token.NAME,  cond.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  returnNode.newString(Token.NAME,  cond.getFirstChild().getString());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    returnNode.newString(Token.NAME,    cond.getLastChild().getString());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	163	None	replace
264	[BUG]  [BUGGY]  Node  returnNode.newString(Token.NAME,  cond.getLastChild().getString());  [CE]  invalid  method  declaration;  return  type  required  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  returnNode.newString(Token.NAME,  cond.getLastChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  returnNode.newString(Token.NAME,  cond.getLastChild().getString());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    returnNode.newString(Token.NAME,    cond.getLastChild().getString());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	163	None	replace
265	[BUG]  [BUGGY]  Node  returnNode.newString(Token.NAME,  cond.getFirstChild().getString(),  parent.getLastChild().getString());  [CE]  invalid  method  declaration;  return  type  required  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  returnNode.newString(Token.NAME,  cond.getFirstChild().getString(),  parent.getLastChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  returnNode.newString(Token.NAME,  cond.getFirstChild().getString(),  parent.getLastChild().getString());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    returnNode.newString(Token.NAME,    cond.getLastChild().getString());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	163	None	replace
266	[BUG]  [BUGGY]  Node  parent  =  parent.getParent();  [CE]  invalid  method  declaration;  return  type  required  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  parent.getParent();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    parent    =    parent.getParent();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	100	None	replace
267	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  parent  =  parent.getParent();  [CE]  invalid  method  declaration;  return  type  required  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  parent  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  parent  =  parent.getParent();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    parent    =    parent.getParent();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	100	None	replace
268	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  parent  =  parent.getParent();  [CE]  invalid  method  declaration;  return  type  required  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  parent  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  parent  =  parent.getParent();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    parent    =    parent.getParent();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	100	None	replace
269	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  parent  =  parent.getNext();  [CE]  invalid  method  declaration;  return  type  required  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  parent  =  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  parent  =  parent.getNext();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    parent    =    parent.getParent();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	100	None	replace
270	[BUG]  [BUGGY]  Node  parent  =  n.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  n.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  n.getFirstChild();	  return    parent;    Node    parent    =    n.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	replace
271	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  n.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  n.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent!=  null);  Node  parent  =  n.getFirstChild();	  return    parent;    Node    parent    =    n.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	replace
272	[BUG]  [BUGGY]  Preconditions.checkState(parent  ==  null);  Node  parent  =  n.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent  ==  null);  Node  parent  =  n.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent  ==  null);  Node  parent  =  n.getFirstChild();	  return    parent;    Node    parent    =    n.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	replace
273	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  parent  =  n.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent!=  null);  parent  =  n.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent!=  null);  parent  =  n.getFirstChild();	  return    parent;    Node    parent    =    n.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	82	None	replace
274	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  [CE]  invalid  method  declaration;  return  type  required  [FE]    RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	add
275	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Node  parent  =  parent.getFirstChild();  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  [CE]  invalid  method  declaration;  return  type  required  [FE]      RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Node  parent  =  parent.getFirstChild();  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()    ==    Token.FUNCTION);    Node  parent  =  parent.getFirstChild();  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	add
276	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Node  parent  =  parent.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  [CE]  invalid  method  declaration;  return  type  required  [FE]        RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Node  parent  =  parent.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()    ==    Token.FUNCTION);    Node  parent  =  parent.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	add
277	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(parent.getType()!=  Token.FUNCTION);  [CE]  invalid  method  declaration;  return  type  required  [FE]          RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(parent.getType()!=  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(parent.getType()!=  Token.FUNCTION);	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	add
278	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  }  else  {  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  [CE]  invalid  method  declaration;  return  type  required  [FE]            RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  }  else  {  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  }  else  {  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	add
279	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  [CE]  invalid  method  declaration;  return  type  required  [FE]              RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	add
280	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(parent.getType()  >=  Token.FUNCTION);  [CE]  invalid  method  declaration;  return  type  required  [FE]                RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(parent.getType()  >=  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(parent.getType()  >=  Token.FUNCTION);	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	13	None	add
281	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  n,  parent);  [CE]  invalid  method  declaration;  return  type  required  [FE]        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  n,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  n,  parent);	  return    Node.newString(Token.NAME,    cond.getString(),    parent);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
282	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getString(),  cond);  [CE]  invalid  method  declaration;  return  type  required  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getString(),  cond);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getString(),  cond);	  return    Node.newString(Token.NAME,    cond.getString(),    parent);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
283	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  INVALID_REGULAR_EXPRESSION_FLAGS,  parent);  [CE]  invalid  method  declaration;  return  type  required  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  INVALID_REGULAR_EXPRESSION_FLAGS,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  INVALID_REGULAR_EXPRESSION_FLAGS,  parent);	  return    Node.newString(Token.NAME,    cond.getString(),    parent);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
284	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n.getString(),  parent);  [CE]  invalid  method  declaration;  return  type  required  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n.getString(),  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n.getString(),  parent);	  return    Node.newString(Token.NAME,    cond.getString(),    parent);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
285	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n.getString(),  cond);  [CE]  invalid  method  declaration;  return  type  required  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n.getString(),  cond);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n.getString(),  cond);	  return    Node.newString(Token.NAME,    cond.getString(),    parent);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
286	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  INVALID_REGULAR_FLAGS,  parent);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  INVALID_REGULAR_FLAGS,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  INVALID_REGULAR_FLAGS,  parent);	  return    Node.newString(Token.NAME,    cond.getString(),    parent);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
287	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  parent,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  parent,  n);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  parent,  n);	  return    Node.newString(Token.NAME,    cond.getString(),    parent);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	44	None	replace
288	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n.getLastChild());  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n.getLastChild());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n.getLastChild());	  return    Node.newString(Token.NAME,    cond.getLastChild());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
289	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getLastChild(),  parent);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getLastChild(),  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getLastChild(),  parent);	  return    Node.newString(Token.NAME,    cond.getLastChild());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
290	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild(),  cond.getLastChild());  [CE]  invalid  method  declaration;  return  type  required  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild(),  cond.getLastChild());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild(),  cond.getLastChild());	  return    Node.newString(Token.NAME,    cond.getLastChild());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
291	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent,  cond.getLastChild());  [CE]  invalid  method  declaration;  return  type  required  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent,  cond.getLastChild());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent,  cond.getLastChild());	  return    Node.newString(Token.NAME,    cond.getLastChild());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	68	None	replace
292	[BUG]  [BUGGY]  Node  newExpr  =  Node.newString(Token.NAME,  parent.getFirstChild().getString());  [CE]  invalid  method  declaration;  return  type  required  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  newExpr  =  Node.newString(Token.NAME,  parent.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  newExpr  =  Node.newString(Token.NAME,  parent.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    newExpr    =    Node.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	168	None	replace
293	[BUG]  [BUGGY]  Node  newExpr  =  Node.newString(Token.NAME,  n.getFirstChild().getString());  [CE]  invalid  method  declaration;  return  type  required  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  newExpr  =  Node.newString(Token.NAME,  n.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  newExpr  =  Node.newString(Token.NAME,  n.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    newExpr    =    Node.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	168	None	replace
294	[BUG]  [BUGGY]  newExpr  =  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [CE]  invalid  method  declaration;  return  type  required  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  newExpr  =  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	newExpr  =  Node.newString(Token.NAME,  cond.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    newExpr    =    Node.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	168	None	replace
295	[BUG]  [BUGGY]  Node  newExpr  =  Node.newString(Token.NAME,  cond.getLastChild().getString());  [CE]  invalid  method  declaration;  return  type  required  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  newExpr  =  Node.newString(Token.NAME,  cond.getLastChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  newExpr  =  Node.newString(Token.NAME,  cond.getLastChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    newExpr    =    Node.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	168	None	replace
296	[BUG]  [BUGGY]  Return  Node.newString(Token.NAME,  cond,  parent);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Return  Node.newString(Token.NAME,  cond,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Return  Node.newString(Token.NAME,  cond,  parent);	  return    Node.newString(Token.NAME,    var,    parent);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	121	None	replace
297	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  Cond.SYNTHETIC,  parent);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  Cond.SYNTHETIC,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  Cond.SYNTHETIC,  parent);	  return    Node.newString(Token.NAME,    var,    parent);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	121	None	replace
298	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  Cond.SIGNATURE,  parent);  [CE]  invalid  method  declaration;  return  type  required  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  Cond.SIGNATURE,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  Cond.SIGNATURE,  parent);	  return    Node.newString(Token.NAME,    var,    parent);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	121	None	replace
299	[BUG]  [BUGGY]  Node  assign  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  assign.getString());  [CE]  invalid  method  declaration;  return  type  required  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  assign.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assign  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  assign.getString());	  return    Node.newString(Token.NAME,    cond.getString());    Node    assign    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
300	[BUG]  [BUGGY]  Node  assign  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString());  [CE]  invalid  method  declaration;  return  type  required  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assign  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString());	  return    Node.newString(Token.NAME,    cond.getString());    Node    assign    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
301	[BUG]  [BUGGY]  Node  assignName  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  assignName.getString());  [CE]  invalid  method  declaration;  return  type  required  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assignName  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  assignName.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assignName  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  assignName.getString());	  return    Node.newString(Token.NAME,    cond.getString());    Node    assign    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
302	[BUG]  [BUGGY]  Node  assignName  =  cond.getFirstChild();  return  Node.newString(Token.NAME,  assignName.getString());  [CE]  invalid  method  declaration;  return  type  required  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assignName  =  cond.getFirstChild();  return  Node.newString(Token.NAME,  assignName.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assignName  =  cond.getFirstChild();  return  Node.newString(Token.NAME,  assignName.getString());	  return    Node.newString(Token.NAME,    cond.getString());    Node    assign    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
303	[BUG]  [BUGGY]  Node  assignName  =  cond.getString();  [CE]  invalid  method  declaration;  return  type  required  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assignName  =  cond.getString();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assignName  =  cond.getString();	  return    Node.newString(Token.NAME,    cond.getString());    Node    assign    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
304	[BUG]  [BUGGY]  Node  assignName  =  parent.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assignName  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assignName  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    cond.getString());    Node    assign    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
305	[BUG]  [BUGGY]  Node  var  =  Cond.newString(Token.NAME,  cond.getString());  [CE]  invalid  method  declaration;  return  type  required  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  var  =  Cond.newString(Token.NAME,  cond.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  var  =  Cond.newString(Token.NAME,  cond.getString());	  return    Node.newString(Token.NAME,    cond.getString());    Node    var    =    cond.getNext();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	195	None	replace
306	[BUG]  [BUGGY]  Node  var  =  Cond.newString(Token.NAME,  parent.getString());  [CE]  invalid  method  declaration;  return  type  required  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  var  =  Cond.newString(Token.NAME,  parent.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  var  =  Cond.newString(Token.NAME,  parent.getString());	  return    Node.newString(Token.NAME,    cond.getString());    Node    var    =    cond.getNext();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	195	None	replace
307	[BUG]  [BUGGY]  Node  var  =  parent.getNext();  [CE]  invalid  method  declaration;  return  type  required  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  var  =  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  var  =  parent.getNext();	  return    Node.newString(Token.NAME,    cond.getString());    Node    var    =    cond.getNext();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	195	None	replace
308	[BUG]  [BUGGY]  Node  cond  =  cond.getNext();  [CE]  invalid  method  declaration;  return  type  required  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  cond  =  cond.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  cond  =  cond.getNext();	  return    Node.newString(Token.NAME,    cond.getString());    Node    var    =    cond.getNext();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	195	None	replace
309	[BUG]  [BUGGY]  Node  assign  =  cond.getNext();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  cond.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assign  =  cond.getNext();	  return    Node.newString(Token.NAME,    cond.getString());    Node    var    =    cond.getNext();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	195	None	replace
310	[BUG]  [BUGGY]  Node  var  =  parent.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  var  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  var  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    var    =    parent.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
311	[BUG]  [BUGGY]  Node  var  =  cond.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  var  =  cond.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  var  =  cond.getFirstChild();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    var    =    parent.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
312	[BUG]  [BUGGY]  Node  var  =  parent.getLastChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  var  =  parent.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  var  =  parent.getLastChild();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    var    =    parent.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
313	[BUG]  [BUGGY]  Node  assign  =  var.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  var.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assign  =  var.getFirstChild();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    var    =    parent.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	18	None	replace
314	[BUG]  [BUGGY]  Node  assign  =  parent.getParent();  return  Node.newString(Token.NAME,  assign.getString());  [CE]  invalid  method  declaration;  return  type  required  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent.getParent();  return  Node.newString(Token.NAME,  assign.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assign  =  parent.getParent();  return  Node.newString(Token.NAME,  assign.getString());	  return    Node.newString(Token.NAME,    cond.getString());    Node    assign    =    parent.getParent();    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	212	None	replace
315	[BUG]  [BUGGY]  Node  assignName  =  cond.getString();  return  Node.newString(Token.NAME,  assignName.getString());  [CE]  invalid  method  declaration;  return  type  required  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assignName  =  cond.getString();  return  Node.newString(Token.NAME,  assignName.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assignName  =  cond.getString();  return  Node.newString(Token.NAME,  assignName.getString());	  return    Node.newString(Token.NAME,    cond.getString());    Node    assign    =    parent.getParent();    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	212	None	replace
316	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  assign);  [CE]  invalid  method  declaration;  return  type  required  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  assign);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  assign);	  return    Node.newString(Token.NAME,    cond.getString());    Node    assign    =    parent.getParent();    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	212	None	replace
317	[BUG]  [BUGGY]  Node  assign  =  cond.getParent();  return  Node.newString(Token.NAME,  assign.getString());  [CE]  invalid  method  declaration;  return  type  required  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  cond.getParent();  return  Node.newString(Token.NAME,  assign.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assign  =  cond.getParent();  return  Node.newString(Token.NAME,  assign.getString());	  return    Node.newString(Token.NAME,    cond.getString());    Node    assign    =    parent.getParent();    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	212	None	replace
318	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent,  n,  cond);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent,  n,  cond);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent,  n,  cond);	  return    Node.newString(Token.NAME,    parent,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	118	None	replace
319	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent,  cond,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent,  cond,  n);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent,  cond,  n);	  return    Node.newString(Token.NAME,    parent,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	118	None	replace
320	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  name1,  parent,  n);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  name1,  parent,  n);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  name1,  parent,  n);	  return    Node.newString(Token.NAME,    parent,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	118	None	replace
321	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent,  n,  COND);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent,  n,  COND);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent,  n,  COND);	  return    Node.newString(Token.NAME,    parent,    n);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	118	None	replace
322	[BUG]  [BUGGY]  Preconditions.checkState(parent  ==  null);  Node  parent  =  parent.getNext();  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent  ==  null);  Node  parent  =  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent  ==  null);  Node  parent  =  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    Node    parent    =    parent.getNext();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	74	None	replace
323	[BUG]  [BUGGY]  Node  var  =  cond.getLastChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  var  =  cond.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  var  =  cond.getLastChild();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    var    =    cond.getLastChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	161	None	replace
324	[BUG]  [BUGGY]  Node  assign  =  cond.getLastChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  cond.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assign  =  cond.getLastChild();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    var    =    cond.getLastChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	161	None	replace
325	[BUG]  [BUGGY]  Node  cond  =  cond.getLastChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  cond  =  cond.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  cond  =  cond.getLastChild();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    var    =    cond.getLastChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	161	None	replace
326	[BUG]  [BUGGY]  Node  var  =  Cond.getLastChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  var  =  Cond.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  var  =  Cond.getLastChild();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    var    =    cond.getLastChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	161	None	replace
327	[BUG]  [BUGGY]  Node  parent  =  parent.getParent();  (parent  ==  null)?  null  :  parent.getParent();  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  parent.getParent();  (parent  ==  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  parent.getParent();  (parent  ==  null)?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    (parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
328	[BUG]  [BUGGY]  parent  =  parent.getParent();  (parent  ==  null)?  null  :  parent.getParent();  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  =  parent.getParent();  (parent  ==  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  =  parent.getParent();  (parent  ==  null)?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    (parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
329	[BUG]  [BUGGY]  parent  ==  null?  parent.getType()  ==  Token.FUNCTION  :  parent.getParent();  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  ==  null?  parent.getType()  ==  Token.FUNCTION  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  ==  null?  parent.getType()  ==  Token.FUNCTION  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    (parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
330	[BUG]  [BUGGY]  Node  parent  =  parent.getParent();  (parent  ==  null)?  null  :  parent.getNext();  [CE]  invalid  method  declaration;  return  type  required  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  parent.getParent();  (parent  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  parent.getParent();  (parent  ==  null)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getParent();    (parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	38	None	replace
331	[BUG]  [BUGGY]  return  cond  ==  null?  null  :  parent.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  cond  ==  null?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  cond  ==  null?  null  :  parent.getFirstChild();	  return    parent    ==    null?    null    :    parent.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	182	None	replace
332	[BUG]  [BUGGY]  Return(parent!=  null)?  null  :  parent.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Return(parent!=  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Return(parent!=  null)?  null  :  parent.getFirstChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    Return(parent!=    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	210	None	replace
333	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  assign  =  parent.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  assign  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  assign  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    assign    =    parent.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	103	None	replace
334	[BUG]  [BUGGY]  node  =  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  assign  =  parent.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  node  =  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  assign  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	node  =  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  assign  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    assign    =    parent.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	103	None	replace
335	[BUG]  [BUGGY]  node  =  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  assign  =  parent.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  node  =  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  assign  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	node  =  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  assign  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    assign    =    parent.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	103	None	replace
336	[BUG]  [BUGGY]  Assign.newString(Token.NAME,  n.getFirstChild().getString());  Node  assign  =  parent.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Assign.newString(Token.NAME,  n.getFirstChild().getString());  Node  assign  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Assign.newString(Token.NAME,  n.getFirstChild().getString());  Node  assign  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    assign    =    parent.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	103	None	replace
337	[BUG]  [BUGGY]  node  =  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  assign  =  parent.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  node  =  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  assign  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	node  =  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  assign  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    assign    =    parent.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	103	None	replace
338	[BUG]  [BUGGY]  parent  ==  null?  null  :  parent.getFirstChild();  Node  parent  =  parent.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  ==  null?  null  :  parent.getFirstChild();  Node  parent  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  ==  null?  null  :  parent.getFirstChild();  Node  parent  =  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	123	None	replace
339	[BUG]  [BUGGY]  parent!=  null?  null  :  parent.getFirstChild();  Node  parent  =  parent.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent!=  null?  null  :  parent.getFirstChild();  Node  parent  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent!=  null?  null  :  parent.getFirstChild();  Node  parent  =  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	123	None	replace
340	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  parent.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent!=  null);  Node  parent  =  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	123	None	replace
341	[BUG]  [BUGGY]  Preconditions.checkState(parent  ==  null);  Node  parent  =  parent.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent  ==  null);  Node  parent  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent  ==  null);  Node  parent  =  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	123	None	replace
342	[BUG]  [BUGGY]  Node  parent  =  parent.getParent();  return(parent!=  null)?  null  :  parent.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  parent.getParent();  return(parent!=  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  parent.getParent();  return(parent!=  null)?  null  :  parent.getFirstChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent.getParent();    return(parent!=    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	152	None	replace
343	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  INVALID_REGULAR_FLAGS,  parent);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  INVALID_REGULAR_FLAGS,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild(),  INVALID_REGULAR_FLAGS,  parent);	  return    Node.newString(Token.NAME,    cond.getFirstChild(),    INVALID_REGULAR_FLAGS);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	243	None	replace
344	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild(),  INVALID_REGULAR_FLAGS);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild(),  INVALID_REGULAR_FLAGS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild(),  INVALID_REGULAR_FLAGS);	  return    Node.newString(Token.NAME,    cond.getFirstChild(),    INVALID_REGULAR_FLAGS);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	243	None	replace
345	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getLastChild(),  INVALID_REGULAR_FLAGS);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getLastChild(),  INVALID_REGULAR_FLAGS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getLastChild(),  INVALID_REGULAR_FLAGS);	  return    Node.newString(Token.NAME,    cond.getFirstChild(),    INVALID_REGULAR_FLAGS);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	243	None	replace
346	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  INVALID_REGULAR_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  INVALID_REGULAR_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild(),  INVALID_REGULAR_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);	  return    Node.newString(Token.NAME,    cond.getFirstChild(),    INVALID_REGULAR_FLAGS);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	243	None	replace
347	[BUG]  [BUGGY]  Preconditions.checkState(parent  ==  null);  Node  parent  =  n.getParent();  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent  ==  null);  Node  parent  =  n.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent  ==  null);  Node  parent  =  n.getParent();	  return    parent;    Node    parent    =    n.getParent();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
348	[BUG]  [BUGGY]  Preconditions.checkArgument(parent!=  null);  Node  parent  =  n.getParent();  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent!=  null);  Node  parent  =  n.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent!=  null);  Node  parent  =  n.getParent();	  return    parent;    Node    parent    =    n.getParent();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
349	[BUG]  [BUGGY]  Preconditions.checkArgument(parent  ==  null);  Node  parent  =  n.getParent();  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent  ==  null);  Node  parent  =  n.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent  ==  null);  Node  parent  =  n.getParent();	  return    parent;    Node    parent    =    n.getParent();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	80	None	replace
350	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  parent!=  null?  null  :  parent.getNext();  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  parent!=  null?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent!=  null);  Node  parent  =  parent!=  null?  null  :  parent.getNext();	  return(parent!=    null)?    null    :    parent.getNext();    Node    parent    =    parent!=    null?    null    :    parent.getNext();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	139	None	replace
351	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  parent  ==  null?  null  :  parent.getNext();  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  parent  ==  null?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent!=  null);  Node  parent  =  parent  ==  null?  null  :  parent.getNext();	  return(parent!=    null)?    null    :    parent.getNext();    Node    parent    =    parent!=    null?    null    :    parent.getNext();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	139	None	replace
352	[BUG]  [BUGGY]  parent  ==  null?  null  :  parent.getNext();  Node  parent  =  parent.getParent();  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  ==  null?  null  :  parent.getNext();  Node  parent  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  ==  null?  null  :  parent.getNext();  Node  parent  =  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getNext();    Node    parent    =    parent.getParent();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	73	None	replace
353	[BUG]  [BUGGY]  parent!=  null?  null  :  parent.getNext();  Node  parent  =  parent.getParent();  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent!=  null?  null  :  parent.getNext();  Node  parent  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent!=  null?  null  :  parent.getNext();  Node  parent  =  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getNext();    Node    parent    =    parent.getParent();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	73	None	replace
354	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  parent.getParent();  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent!=  null);  Node  parent  =  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getNext();    Node    parent    =    parent.getParent();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	73	None	replace
355	[BUG]  [BUGGY]  Preconditions.checkState(parent  ==  null);  Node  parent  =  parent.getParent();  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent  ==  null);  Node  parent  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent  ==  null);  Node  parent  =  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getNext();    Node    parent    =    parent.getParent();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	73	None	replace
356	[BUG]  [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.NAME);  Node  assign  =  parent.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.NAME);  Node  assign  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(cond.getType()  ==  Token.NAME);  Node  assign  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    cond.getString());    Node    assign    =    parent.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
357	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n.getString());  Node  assign  =  parent.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n.getString());  Node  assign  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n.getString());  Node  assign  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    cond.getString());    Node    assign    =    parent.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
358	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  assignName);  [CE]  invalid  method  declaration;  return  type  required  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  assignName);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  assignName);	  return    Node.newString(Token.NAME,    cond.getString());    Node    assign    =    parent.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
359	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  null);  Node  assign  =  parent.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  null);  Node  assign  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  null);  Node  assign  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    cond.getString());    Node    assign    =    parent.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
360	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  false);  Node  assign  =  parent.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  false);  Node  assign  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  false);  Node  assign  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    cond.getString());    Node    assign    =    parent.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	50	None	replace
361	[BUG]  [BUGGY]  Node  toString  =  parent.getFirstChild().getString();  return  Token.newString(Token.NAME,  toString(parent.getFirstChild().getString()));  [CE]  invalid  method  declaration;  return  type  required  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  toString  =  parent.getFirstChild().getString();  return  Token.newString(Token.NAME,  toString(parent.getFirstChild().getString()));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  toString  =  parent.getFirstChild().getString();  return  Token.newString(Token.NAME,  toString(parent.getFirstChild().getString()));	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    toString    =    parent.getFirstChild().getString();    return    Token.newString(Token.NAME,    toString(parent.getFirstChild().getString()));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	173	None	replace
362	[BUG]  [BUGGY]  Node  toString  =  parent.getFirstChild().getString();  return  Token.newString(Token.NAME,  toString(n.getFirstChild().getString()));  [CE]  invalid  method  declaration;  return  type  required  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  toString  =  parent.getFirstChild().getString();  return  Token.newString(Token.NAME,  toString(n.getFirstChild().getString()));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  toString  =  parent.getFirstChild().getString();  return  Token.newString(Token.NAME,  toString(n.getFirstChild().getString()));	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    toString    =    parent.getFirstChild().getString();    return    Token.newString(Token.NAME,    toString(parent.getFirstChild().getString()));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	173	None	replace
363	[BUG]  [BUGGY]  Node  toString  =  n.getFirstChild().getString();  return  Token.newString(Token.NAME,  toString(parent.getFirstChild().getString()));  [CE]  invalid  method  declaration;  return  type  required  [FE]                        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  toString  =  n.getFirstChild().getString();  return  Token.newString(Token.NAME,  toString(parent.getFirstChild().getString()));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  toString  =  n.getFirstChild().getString();  return  Token.newString(Token.NAME,  toString(parent.getFirstChild().getString()));	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    toString    =    parent.getFirstChild().getString();    return    Token.newString(Token.NAME,    toString(parent.getFirstChild().getString()));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	173	None	replace
364	[BUG]  [BUGGY]  Node  toString  =  parent.getLastChild().getString();  return  Token.newString(Token.NAME,  toString(parent.getFirstChild().getString()));  [CE]  invalid  method  declaration;  return  type  required  [FE]                          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  toString  =  parent.getLastChild().getString();  return  Token.newString(Token.NAME,  toString(parent.getFirstChild().getString()));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  toString  =  parent.getLastChild().getString();  return  Token.newString(Token.NAME,  toString(parent.getFirstChild().getString()));	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    toString    =    parent.getFirstChild().getString();    return    Token.newString(Token.NAME,    toString(parent.getFirstChild().getString()));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	173	None	replace
365	[BUG]  [BUGGY]  Node  toString  =  parent.getFirstChild().getString();  return  Token.newString(Token.NAME,  toString(cond.getFirstChild().getString()));  [CE]  invalid  method  declaration;  return  type  required  [FE]                            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  toString  =  parent.getFirstChild().getString();  return  Token.newString(Token.NAME,  toString(cond.getFirstChild().getString()));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  toString  =  parent.getFirstChild().getString();  return  Token.newString(Token.NAME,  toString(cond.getFirstChild().getString()));	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    toString    =    parent.getFirstChild().getString();    return    Token.newString(Token.NAME,    toString(parent.getFirstChild().getString()));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	173	None	replace
366	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond,  parent.getFirstChild());  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond,  parent.getFirstChild());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond,  parent.getFirstChild());	  return    Node.newString(Token.NAME,    n,    cond.getFirstChild());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	201	None	replace
367	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent,  cond.getFirstChild());  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent,  cond.getFirstChild());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent,  cond.getFirstChild());	  return    Node.newString(Token.NAME,    n,    cond.getFirstChild());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	201	None	replace
368	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond,  n.getFirstChild());  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond,  n.getFirstChild());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond,  n.getFirstChild());	  return    Node.newString(Token.NAME,    n,    cond.getFirstChild());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	201	None	replace
369	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent,  n.getFirstChild());  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent,  n.getFirstChild());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent,  n.getFirstChild());	  return    Node.newString(Token.NAME,    n,    cond.getFirstChild());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	201	None	replace
370	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n,  parent,  cond.getFirstChild());  [CE]  invalid  method  declaration;  return  type  required  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n,  parent,  cond.getFirstChild());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n,  parent,  cond.getFirstChild());	  return    Node.newString(Token.NAME,    n,    cond.getFirstChild());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	201	None	replace
371	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n,  cond.getFirstChild(),  parent);  [CE]  invalid  method  declaration;  return  type  required  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n,  cond.getFirstChild(),  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n,  cond.getFirstChild(),  parent);	  return    Node.newString(Token.NAME,    n,    cond.getFirstChild());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	201	None	replace
372	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n,  parent.getFirstChild());  [CE]  invalid  method  declaration;  return  type  required  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n,  parent.getFirstChild());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n,  parent.getFirstChild());	  return    Node.newString(Token.NAME,    n,    cond.getFirstChild());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	201	None	replace
373	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  parent  ==  null)?  null  :  parent.getParent();  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  parent  ==  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getNext();  Node  parent  ==  null)?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    Node    parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	186	None	replace
374	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  parent!=  null)?  null  :  parent.getParent();  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  parent!=  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getParent();  Node  parent!=  null)?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    Node    parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	186	None	replace
375	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  ==  null)?  null  :  parent.getParent();  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  ==  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  ==  null)?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    Node    parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	186	None	replace
376	[BUG]  [BUGGY]  Node  assign  =  n.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  n.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assign  =  n.getFirstChild();	  return    Node.newString(Token.NAME,    cond.getString());    Node    var    =    cond.getNext();    return    Node.newString(Token.NAME,    var.getString());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	194	None	replace
377	[BUG]  [BUGGY]  Node  lhs  =  cond.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  lhs  =  cond.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  lhs  =  cond.getFirstChild();	  return    Node.newString(Token.NAME,    cond.getString());    Node    var    =    cond.getNext();    return    Node.newString(Token.NAME,    var.getString());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	194	None	replace
378	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  invalid  method  declaration;  return  type  required  [FE]    RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	add
379	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  assign  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  invalid  method  declaration;  return  type  required  [FE]      RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  assign  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()    ==    Token.NAME);    Node  assign  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	add
380	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  parent  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  invalid  method  declaration;  return  type  required  [FE]        RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  parent  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()    ==    Token.NAME);    Node  parent  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	add
381	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  parent  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  invalid  method  declaration;  return  type  required  [FE]          RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  parent  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()    ==    Token.NAME);    Node  parent  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	add
382	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()!=  Token.NAME);  [CE]  invalid  method  declaration;  return  type  required  [FE]            RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()!=  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()!=  Token.NAME);	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	add
383	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  }  else  {  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  invalid  method  declaration;  return  type  required  [FE]              RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  }  else  {  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  }  else  {  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	add
384	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  assign  =  parent.getFirstChild();  Preconditions.checkState(cond.getType()  ==  Token.NAME);  [CE]  invalid  method  declaration;  return  type  required  [FE]                RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  assign  =  parent.getFirstChild();  Preconditions.checkState(cond.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()    ==    Token.NAME);    Node  assign  =  parent.getFirstChild();  Preconditions.checkState(cond.getType()  ==  Token.NAME);	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	add
385	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()    ==    Token.NAME);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  preconditions.checkState(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  invalid  method  declaration;  return  type  required	9	None	add
386	[BUG]  [BUGGY]  return  parent!=  null?  parent.getLastChild()  :  NodeUtil.newLiteralValue(cond,  false));  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent!=  null?  parent.getLastChild()  :  NodeUtil.newLiteralValue(cond,  false));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null?  parent.getLastChild()  :  NodeUtil.newLiteralValue(cond,  false));	  return    parent!=    null?    parent.getFirstChild()    :    NodeUtil.newLiteralValue(cond,    false));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	238	None	replace
387	[BUG]  [BUGGY]  return  parent  ==  null?  parent.getFirstChild()  :  NodeUtil.newLiteralValue(cond,  true));  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent  ==  null?  parent.getFirstChild()  :  NodeUtil.newLiteralValue(cond,  true));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null?  parent.getFirstChild()  :  NodeUtil.newLiteralValue(cond,  true));	  return    parent!=    null?    parent.getFirstChild()    :    NodeUtil.newLiteralValue(cond,    false));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	238	None	replace
388	[BUG]  [BUGGY]  return  cond!=  null?  parent.getFirstChild()  :  NodeUtil.newLiteralValue(cond,  false));  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  cond!=  null?  parent.getFirstChild()  :  NodeUtil.newLiteralValue(cond,  false));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  cond!=  null?  parent.getFirstChild()  :  NodeUtil.newLiteralValue(cond,  false));	  return    parent!=    null?    parent.getFirstChild()    :    NodeUtil.newLiteralValue(cond,    false));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	238	None	replace
389	[BUG]  [BUGGY]  return  parent  ==  null?  parent.getFirstChild()  :  NodeUtil.newLiteralValue(cond,  false));  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent  ==  null?  parent.getFirstChild()  :  NodeUtil.newLiteralValue(cond,  false));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null?  parent.getFirstChild()  :  NodeUtil.newLiteralValue(cond,  false));	  return    parent!=    null?    parent.getFirstChild()    :    NodeUtil.newLiteralValue(cond,    false));    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	238	None	replace
390	[BUG]  [BUGGY]  NodeUtil.newLiteralValue(cond,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  NodeUtil.newLiteralValue(cond,  true);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	NodeUtil.newLiteralValue(cond,  true);	  ReturnNodeUtil.newLiteralValue(cond,    true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
391	[BUG]  [BUGGY]  NodeUtil.newLiteralValue(parent,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  NodeUtil.newLiteralValue(parent,  true);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	NodeUtil.newLiteralValue(parent,  true);	  ReturnNodeUtil.newLiteralValue(cond,    true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
392	[BUG]  [BUGGY]  NodeUtil.removeLiteralValue(cond,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  NodeUtil.removeLiteralValue(cond,  true);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	NodeUtil.removeLiteralValue(cond,  true);	  ReturnNodeUtil.newLiteralValue(cond,    true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
393	[BUG]  [BUGGY]  NodeUtil.newLiteralValue(cond,  false);  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  NodeUtil.newLiteralValue(cond,  false);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	NodeUtil.newLiteralValue(cond,  false);	  ReturnNodeUtil.newLiteralValue(cond,    true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
394	[BUG]  [BUGGY]  NodeUtil.setLiteralValue(cond,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  NodeUtil.setLiteralValue(cond,  true);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	NodeUtil.setLiteralValue(cond,  true);	  ReturnNodeUtil.newLiteralValue(cond,    true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
395	[BUG]  [BUGGY]  NodeUtil.removeLiteralValue(parent,  true);  [CE]  invalid  method  declaration;  return  type  required  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  NodeUtil.removeLiteralValue(parent,  true);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	NodeUtil.removeLiteralValue(parent,  true);	  ReturnNodeUtil.newLiteralValue(cond,    true);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	43	None	replace
396	[BUG]  [BUGGY]  return  cond.getNext();  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  cond.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  cond.getNext();	  return    parent.getNext();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	131	None	replace
397	[BUG]  [BUGGY]  return  parent.getLastChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent.getLastChild();	  return    parent.getNext();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	131	None	replace
398	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString( "string "));  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString( "string "));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString( "string "));	  return    parent.getNext();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	131	None	replace
399	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.VAR?  parent.getType()  :  Node.newString(Token.NAME);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent.getType()  ==  Token.VAR?  parent.getType()  :  Node.newString(Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent.getType()  ==  Token.VAR?  parent.getType()  :  Node.newString(Token.NAME);	  return    parent.getNext();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	131	None	replace
400	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  assign  =  parent.getParent();  [CE]  invalid  method  declaration;  return  type  required  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  assign  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  assign  =  parent.getParent();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    assign    =    parent.getParent();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
401	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString()  +  1);  Node  assign  =  parent.getParent();  [CE]  invalid  method  declaration;  return  type  required  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString()  +  1);  Node  assign  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString()  +  1);  Node  assign  =  parent.getParent();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    assign    =    parent.getParent();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
402	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  assignName);  Node  assign  =  parent.getParent();  [CE]  invalid  method  declaration;  return  type  required  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  assignName);  Node  assign  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  assignName);  Node  assign  =  parent.getParent();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    assign    =    parent.getParent();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
403	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  assignName);  [CE]  invalid  method  declaration;  return  type  required  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  assignName);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  assignName);	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    assign    =    parent.getParent();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
404	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString()  + "_ ");  Node  assign  =  parent.getParent();  [CE]  invalid  method  declaration;  return  type  required  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString()  + "_ ");  Node  assign  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString()  + "_ ");  Node  assign  =  parent.getParent();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    assign    =    parent.getParent();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	17	None	replace
405	[BUG]  [BUGGY]  Node  parent  =  parent  ==  null?  null  :  parent.getParent();  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  parent  ==  null?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  parent  ==  null?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    Node    parent    =    parent    ==    null?    null    :    parent.getParent();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
406	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  parent  ==  null?  null  :  parent.getParent();  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  parent  ==  null?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent!=  null);  Node  parent  =  parent  ==  null?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    Node    parent    =    parent    ==    null?    null    :    parent.getParent();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
407	[BUG]  [BUGGY]  parent  =  parent  ==  null?  null  :  parent.getParent();  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  =  parent  ==  null?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  =  parent  ==  null?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    Node    parent    =    parent    ==    null?    null    :    parent.getParent();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	35	None	replace
408	[BUG]  [BUGGY]  Node  assign  =  cond.getParent();  [CE]  invalid  method  declaration;  return  type  required  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  cond.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assign  =  cond.getParent();	  Node    assign    =    parent.getParent();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
409	[BUG]  [BUGGY]  Node  assign  =  parent.getLastChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assign  =  parent.getLastChild();	  Node    assign    =    parent.getParent();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
410	[BUG]  [BUGGY]  Node  assign  =  parent.getType()  ==  Token.CALL?  parent.getParent()  :  null;  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent.getType()  ==  Token.CALL?  parent.getParent()  :  null;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assign  =  parent.getType()  ==  Token.CALL?  parent.getParent()  :  null;	  Node    assign    =    parent.getParent();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	6	None	replace
411	[BUG]  [BUGGY]  Return(parent  ==  null)?  null  :  parent.getNext();  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Return(parent  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Return(parent  ==  null)?  null  :  parent.getNext();	  return(parent!=    null)?    null    :    parent.getNext();    Return(parent!=    null)?    null    :    parent.getNext();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	235	None	replace
412	[BUG]  [BUGGY]  Return(parent!=  null)?  null  :  parent.getNext();  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Return(parent!=  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Return(parent!=  null)?  null  :  parent.getNext();	  return(parent!=    null)?    null    :    parent.getNext();    Return(parent!=    null)?    null    :    parent.getNext();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	235	None	replace
413	[BUG]  [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.NAME);  return  parent;  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.NAME);  return  parent;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(cond.getType()  ==  Token.NAME);  return  parent;	          Preconditions.checkArgument(cond.getType()    ==    Token.NAME);    return    parent;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	244	None	replace
414	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  return  parent.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  return  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  return  parent.getFirstChild();	          Preconditions.checkArgument(cond.getType()    ==    Token.NAME);    return    parent;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	244	None	replace
415	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  return  parent.getParent();  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  return  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  return  parent.getParent();	          Preconditions.checkArgument(cond.getType()    ==    Token.NAME);    return    parent;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	244	None	replace
416	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  return  parent.getNext();  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  return  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  return  parent.getNext();	          Preconditions.checkArgument(cond.getType()    ==    Token.NAME);    return    parent;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	244	None	replace
417	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  return  cond;  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  return  cond;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  return  cond;	          Preconditions.checkArgument(cond.getType()    ==    Token.NAME);    return    parent;    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	244	None	replace
418	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getString();  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent!=  null)?  null  :  parent.getString();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=  null)?  null  :  parent.getString();	  return(parent    ==    null)?    null    :    parent.getString();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
419	[BUG]  [BUGGY]  return(n  ==  null)?  null  :  parent.getString();  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(n  ==  null)?  null  :  parent.getString();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(n  ==  null)?  null  :  parent.getString();	  return(parent    ==    null)?    null    :    parent.getString();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
420	[BUG]  [BUGGY]  Return(parent  ==  null)?  null  :  parent.getString();  [CE]  invalid  method  declaration;  return  type  required  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Return(parent  ==  null)?  null  :  parent.getString();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Return(parent  ==  null)?  null  :  parent.getString();	  return(parent    ==    null)?    null    :    parent.getString();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
421	[BUG]  [BUGGY]  return  parent  ==  null?  null  :  parent.getString();  [CE]  invalid  method  declaration;  return  type  required  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent  ==  null?  null  :  parent.getString();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null?  null  :  parent.getString();	  return(parent    ==    null)?    null    :    parent.getString();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	30	None	replace
422	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  if(parent!=  null)?  null  :  parent.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  if(parent!=  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getFirstChild();  if(parent!=  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    if(parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	245	None	replace
423	[BUG]  [BUGGY]  return  parent  ==  null?  null  :  parent.getFirstChild();  if(parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent  ==  null?  null  :  parent.getFirstChild();  if(parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null?  null  :  parent.getFirstChild();  if(parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    if(parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	245	None	replace
424	[BUG]  [BUGGY]  return  parent  ==  null?  null  :  parent.getFirstChild();  if(parent!=  null)?  null  :  parent.getFirstChild();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent  ==  null?  null  :  parent.getFirstChild();  if(parent!=  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null?  null  :  parent.getFirstChild();  if(parent!=  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    if(parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	245	None	replace
425	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getLastChild();  if(parent!=  null)?  null  :  parent.getFirstChild();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getLastChild();  if(parent!=  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getLastChild();  if(parent!=  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    if(parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	245	None	replace
426	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getLastChild();  if(parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getLastChild();  if(parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getLastChild();  if(parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    if(parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  type	245	None	replace
427	[BUG]  [BUGGY]  Node  assign  =  cond.getFirstChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  cond.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assign  =  cond.getFirstChild();	  Node    assign    =    parent.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
428	[BUG]  [BUGGY]  Node  assign  =  n.getLastChild();  [CE]  invalid  method  declaration;  return  type  required  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  n.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assign  =  n.getLastChild();	  Node    assign    =    parent.getFirstChild();    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	2	None	replace
429	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  return(parent!=  null)?  null  :  parent.getNext();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  n.getParent();  return(parent!=  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  n.getParent();  return(parent!=  null)?  null  :  parent.getNext();	  return(parent!=    null)?    null    :    parent.getNext();    Node    parent    =    n.getParent();    return(parent!=    null)?    null    :    parent.getNext();    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
430	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  return(parent  ==  null)?  null  :  parent.getNext();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  n.getParent();  return(parent  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  n.getParent();  return(parent  ==  null)?  null  :  parent.getNext();	  return(parent!=    null)?    null    :    parent.getNext();    Node    parent    =    n.getParent();    return(parent!=    null)?    null    :    parent.getNext();    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
431	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(parent,  true,  n);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.newLiteralValue(parent,  true,  n);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(parent,  true,  n);	  return    NodeUtil.newLiteralValue(cond,    true,    n);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
432	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(cond,  true,  n,  parent);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.newLiteralValue(cond,  true,  n,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(cond,  true,  n,  parent);	  return    NodeUtil.newLiteralValue(cond,    true,    n);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
433	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(cond,  false,  n);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.newLiteralValue(cond,  false,  n);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(cond,  false,  n);	  return    NodeUtil.newLiteralValue(cond,    true,    n);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
434	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(n,  false,  parent);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.newLiteralValue(n,  false,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(n,  false,  parent);	  return    NodeUtil.newLiteralValue(n,    false);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
435	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(n,  parent,  false);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.newLiteralValue(n,  parent,  false);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(n,  parent,  false);	  return    NodeUtil.newLiteralValue(n,    false);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
436	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(n,  false,  cond);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.newLiteralValue(n,  false,  cond);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(n,  false,  cond);	  return    NodeUtil.newLiteralValue(n,    false);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
437	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  STANDARD_OBJECT_STRUCTORS);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  STANDARD_OBJECT_STRUCTORS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild(),  STANDARD_OBJECT_STRUCTORS);	  return    Node.newString(Token.NAME,    cond.getFirstChild(),    SHORT_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  illegal  start  of  type	202	None	replace
438	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  SAFE_TO_FOLD_WITHOUT_ARGS);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  SAFE_TO_FOLD_WITHOUT_ARGS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild(),  SAFE_TO_FOLD_WITHOUT_ARGS);	  return    Node.newString(Token.NAME,    cond.getFirstChild(),    SHORT_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  illegal  start  of  type	202	None	replace
439	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  CONSTRUCTORS);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  CONSTRUCTORS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild(),  CONSTRUCTORS);	  return    Node.newString(Token.NAME,    cond.getFirstChild(),    SHORT_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  illegal  start  of  type	202	None	replace
440	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
441	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]      RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()!=  Token.FUNCTION);	  Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
442	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.EXPR_RESULT);  [CE]  <identifier>  expected  [FE]        RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
443	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);  [CE]  <identifier>  expected  [FE]          RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);	  Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
444	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]            RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.VAR);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.VAR);	  Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
445	[BUG]  [BUGGY]  return  parent!=  null?  null  :  parent.getParent();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent!=  null?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null?  null  :  parent.getParent();	  return(parent!=    null)?    null    :    parent.getParent();    parent!=    null)?    null    :    parent.getParent();    	non-compiled	[CE]  illegal  start  of  type	180	None	replace
446	[BUG]  [BUGGY]  parent!=  null)?  null  :  parent.getParent();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent!=  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent!=  null)?  null  :  parent.getParent();	  return(parent!=    null)?    null    :    parent.getParent();    parent!=    null)?    null    :    parent.getParent();    	non-compiled	[CE]  <identifier>  expected	180	None	replace
447	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  parent  ==  null)?  null  :  parent.getNext();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  parent  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getParent();  Node  parent  ==  null)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    Node    parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  illegal  start  of  type	190	None	replace
448	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  parent!=  null)?  null  :  parent.getNext();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  parent!=  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getNext();  Node  parent!=  null)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    Node    parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  illegal  start  of  type	190	None	replace
449	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  ==  null)?  null  :  parent.getNext();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  ==  null)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    Node    parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  illegal  start  of  type	190	None	replace
450	[BUG]  [BUGGY]  return  parent  ==  null?  parent.getParent()  :  NodeUtil.newLiteralValue(cond,  false));  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent  ==  null?  parent.getParent()  :  NodeUtil.newLiteralValue(cond,  false));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null?  parent.getParent()  :  NodeUtil.newLiteralValue(cond,  false));	  return    parent!=    null?    parent.getParent()    :    NodeUtil.newLiteralValue(cond,    true));    	non-compiled	[CE]  illegal  start  of  type	240	None	replace
451	[BUG]  [BUGGY]  return  parent!=  null?  parent.getNext()  :  NodeUtil.newLiteralValue(cond,  true));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent!=  null?  parent.getNext()  :  NodeUtil.newLiteralValue(cond,  true));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null?  parent.getNext()  :  NodeUtil.newLiteralValue(cond,  true));	  return    parent!=    null?    parent.getParent()    :    NodeUtil.newLiteralValue(cond,    true));    	non-compiled	[CE]  illegal  start  of  type	240	None	replace
452	[BUG]  [BUGGY]  return  parent!=  null?  parent.getType()  :  NodeUtil.newLiteralValue(cond,  true));  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent!=  null?  parent.getType()  :  NodeUtil.newLiteralValue(cond,  true));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null?  parent.getType()  :  NodeUtil.newLiteralValue(cond,  true));	  return    parent!=    null?    parent.getParent()    :    NodeUtil.newLiteralValue(cond,    true));    	non-compiled	[CE]  illegal  start  of  type	240	None	replace
453	[BUG]  [BUGGY]  return  cond!=  null?  parent.getParent()  :  NodeUtil.newLiteralValue(cond,  true));  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  cond!=  null?  parent.getParent()  :  NodeUtil.newLiteralValue(cond,  true));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  cond!=  null?  parent.getParent()  :  NodeUtil.newLiteralValue(cond,  true));	  return    parent!=    null?    parent.getParent()    :    NodeUtil.newLiteralValue(cond,    true));    	non-compiled	[CE]  illegal  start  of  type	240	None	replace
454	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  Preconditions.checkArgument(parent.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	231	None	replace
455	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR);	  Preconditions.checkArgument(parent.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	231	None	replace
456	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(parent.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	231	None	replace
457	[BUG]  [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.VAR);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(cond.getType()  ==  Token.VAR);	  Preconditions.checkArgument(parent.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	231	None	replace
458	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.NAME);	  Preconditions.checkArgument(parent.getType()    ==    Token.VAR);    	non-compiled	[CE]  <identifier>  expected	231	None	replace
459	[BUG]  [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.NAME,  n);  [CE]  <identifier>  expected  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.NAME,  n);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(cond.getType()  ==  Token.NAME,  n);	          Preconditions.checkState(cond.getType()    ==    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	166	None	replace
460	[BUG]  [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.NAME,  parent);  [CE]  <identifier>  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.NAME,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(cond.getType()  ==  Token.NAME,  parent);	          Preconditions.checkState(cond.getType()    ==    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	166	None	replace
461	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);	          Preconditions.checkState(cond.getType()    ==    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	166	None	replace
462	[BUG]  [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.NAME,  parent.getType());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.NAME,  parent.getType());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(cond.getType()  ==  Token.NAME,  parent.getType());	          Preconditions.checkState(cond.getType()    ==    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	166	None	replace
463	[BUG]  [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(cond.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);	          Preconditions.checkState(cond.getType()    ==    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	166	None	replace
464	[BUG]  [BUGGY]  Node  var  =  parent.getParent();  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  var  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  var  =  parent.getParent();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    var    =    parent.getParent();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
465	[BUG]  [BUGGY]  Node  var  =  cond.getParent();  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  var  =  cond.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  var  =  cond.getParent();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    var    =    parent.getParent();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
466	[BUG]  [BUGGY]  Node  var  =  parent.getType()  ==  Token.NAME;  [CE]  cannot  find  symbol  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  var  =  parent.getType()  ==  Token.NAME;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  var  =  parent.getType()  ==  Token.NAME;	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    var    =    parent.getParent();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
467	[BUG]  [BUGGY]  Node  thenBranch  =  cond.getFirstChild().getNext();  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  thenBranch  =  cond.getFirstChild().getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  thenBranch  =  cond.getFirstChild().getNext();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    thenBranch    =    cond.getFirstChild().getNext();    	non-compiled	[CE]  cannot  find  symbol	165	None	replace
468	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  thenBranch);  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  thenBranch);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  thenBranch);	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    thenBranch    =    cond.getFirstChild().getNext();    	non-compiled	[CE]  cannot  find  symbol	165	None	replace
469	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString()  + ", ");  Node  thenBranch  =  cond.getFirstChild().getNext();  [CE]  cannot  find  symbol  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString()  + ", ");  Node  thenBranch  =  cond.getFirstChild().getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString()  + ", ");  Node  thenBranch  =  cond.getFirstChild().getNext();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    thenBranch    =    cond.getFirstChild().getNext();    	non-compiled	[CE]  cannot  find  symbol	165	None	replace
470	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString()  + ") ");  Node  thenBranch  =  cond.getFirstChild().getNext();  [CE]  cannot  find  symbol  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString()  + ") ");  Node  thenBranch  =  cond.getFirstChild().getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString()  + ") ");  Node  thenBranch  =  cond.getFirstChild().getNext();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    thenBranch    =    cond.getFirstChild().getNext();    	non-compiled	[CE]  cannot  find  symbol	165	None	replace
471	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString()  +  1);  Node  thenBranch  =  cond.getFirstChild().getNext();  [CE]  cannot  find  symbol  [FE]                        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString()  +  1);  Node  thenBranch  =  cond.getFirstChild().getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString()  +  1);  Node  thenBranch  =  cond.getFirstChild().getNext();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    thenBranch    =    cond.getFirstChild().getNext();    	non-compiled	[CE]  cannot  find  symbol	165	None	replace
472	[BUG]  [BUGGY]  Node  assignName  =  cond.getFirstChild().getNext();  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assignName  =  cond.getFirstChild().getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assignName  =  cond.getFirstChild().getNext();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    assign    =    parent.getFirstChild().getNext();    return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol	218	None	replace
473	[BUG]  [BUGGY]  Node  nextBranch  =  cond.getNext();  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  nextBranch  =  cond.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  nextBranch  =  cond.getNext();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    nextBranch    =    cond.getNext();    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
474	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  nextBranch  =  cond.getNext();  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  nextBranch  =  cond.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  nextBranch  =  cond.getNext();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    nextBranch    =    cond.getNext();    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
475	[BUG]  [BUGGY]  Node  nextBranch  =  Cond.newString(Token.NAME,  cond.getFirstChild().getString());  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  nextBranch  =  Cond.newString(Token.NAME,  cond.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  nextBranch  =  Cond.newString(Token.NAME,  cond.getFirstChild().getString());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    nextBranch    =    cond.getNext();    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
476	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  false);  Node  nextBranch  =  cond.getNext();  [CE]  cannot  find  symbol  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  false);  Node  nextBranch  =  cond.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  false);  Node  nextBranch  =  cond.getNext();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    nextBranch    =    cond.getNext();    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
477	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  nextBranch  =  cond.getNext();  [CE]  cannot  find  symbol  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  nextBranch  =  cond.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  nextBranch  =  cond.getNext();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    nextBranch    =    cond.getNext();    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
478	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString()  +  1);  Node  nextBranch  =  cond.getNext();  [CE]  cannot  find  symbol  [FE]                        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString()  +  1);  Node  nextBranch  =  cond.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString()  +  1);  Node  nextBranch  =  cond.getNext();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    nextBranch    =    cond.getNext();    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
479	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent);  Node  nextBranch  =  cond.getNext();  [CE]  cannot  find  symbol  [FE]                          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent);  Node  nextBranch  =  cond.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent);  Node  nextBranch  =  cond.getNext();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    nextBranch    =    cond.getNext();    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
480	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  return(parent!=  null)?  null  :  parent.getParent();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  n.getParent();  return(parent!=  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  n.getParent();  return(parent!=  null)?  null  :  parent.getParent();	  return(parent!=    null)?    null    :    parent.getParent();    Node    parent    =    n.getParent();    return(parent!=    null)?    null    :    parent.getParent();    	non-compiled	[CE]  cannot  find  symbol	179	None	replace
481	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  return(parent  ==  null)?  null  :  parent.getParent();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  n.getParent();  return(parent  ==  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  n.getParent();  return(parent  ==  null)?  null  :  parent.getParent();	  return(parent!=    null)?    null    :    parent.getParent();    Node    parent    =    n.getParent();    return(parent!=    null)?    null    :    parent.getParent();    	non-compiled	[CE]  cannot  find  symbol	179	None	replace
482	[BUG]  [BUGGY]  parent!=  null?  null  :  parent.getParent();  return(parent!=  null)?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent!=  null?  null  :  parent.getParent();  return(parent!=  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent!=  null?  null  :  parent.getParent();  return(parent!=  null)?  null  :  parent.getParent();	  return(parent!=    null)?    null    :    parent.getParent();    Node    parent    =    n.getParent();    return(parent!=    null)?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	179	None	replace
483	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(cond,  true,  true);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.newLiteralValue(cond,  true,  true);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(cond,  true,  true);	  return    NodeUtil.newLiteralValue(cond,    true,    false);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
484	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(cond,  false,  true);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.newLiteralValue(cond,  false,  true);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(cond,  false,  true);	  return    NodeUtil.newLiteralValue(cond,    true,    false);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
485	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(cond,  false,  false);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.newLiteralValue(cond,  false,  false);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(cond,  false,  false);	  return    NodeUtil.newLiteralValue(cond,    true,    false);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
486	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(n,  true,  false);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.newLiteralValue(n,  true,  false);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(n,  true,  false);	  return    NodeUtil.newLiteralValue(cond,    true,    false);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
487	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(cond,  true,  false,  parent);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.newLiteralValue(cond,  true,  false,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(cond,  true,  false,  parent);	  return    NodeUtil.newLiteralValue(cond,    true,    false);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
488	[BUG]  [BUGGY]  Node  thenAssign  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  thenAssign  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  thenAssign  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    thenAssign    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol	215	None	replace
489	[BUG]  [BUGGY]  Node  thenAssign  =  cond.getFirstChild();  return  Node.newString(Token.NAME,  thenAssign.getFirstChild().getString());  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  thenAssign  =  cond.getFirstChild();  return  Node.newString(Token.NAME,  thenAssign.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  thenAssign  =  cond.getFirstChild();  return  Node.newString(Token.NAME,  thenAssign.getFirstChild().getString());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    thenAssign    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol	215	None	replace
490	[BUG]  [BUGGY]  Node  thenAssign  =  cond.getFirstChild().getString();  return  Node.newString(Token.NAME,  thenAssign.getFirstChild().getString());  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  thenAssign  =  cond.getFirstChild().getString();  return  Node.newString(Token.NAME,  thenAssign.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  thenAssign  =  cond.getFirstChild().getString();  return  Node.newString(Token.NAME,  thenAssign.getFirstChild().getString());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    thenAssign    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol	215	None	replace
491	[BUG]  [BUGGY]  Node  thenAssign  =  n.getFirstChild();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  thenAssign  =  n.getFirstChild();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  thenAssign  =  n.getFirstChild();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    thenAssign    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol	215	None	replace
492	[BUG]  [BUGGY]  Node  thenAssign  =  cond.getFirstChild();  return  Node.newString(Token.NAME,  thenAssign.getString());  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  thenAssign  =  cond.getFirstChild();  return  Node.newString(Token.NAME,  thenAssign.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  thenAssign  =  cond.getFirstChild();  return  Node.newString(Token.NAME,  thenAssign.getString());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    thenAssign    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    	non-compiled	[CE]  cannot  find  symbol	215	None	replace
493	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(parent,  false,  cond);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.newLiteralValue(parent,  false,  cond);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(parent,  false,  cond);	  return    NodeUtil.newLiteralValue(parent,    false);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
494	[BUG]  [BUGGY]  Return  parent  =  NodeUtil.newLiteralValue(parent,  false);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Return  parent  =  NodeUtil.newLiteralValue(parent,  false);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Return  parent  =  NodeUtil.newLiteralValue(parent,  false);	  return    NodeUtil.newLiteralValue(parent,    false);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
495	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(consd,  false);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.newLiteralValue(consd,  false);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(consd,  false);	  return    NodeUtil.newLiteralValue(parent,    false);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
496	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  n,  parent);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  n,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild(),  n,  parent);	  return    Node.newString(Token.NAME,    cond.getFirstChild(),    parent);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
497	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild(),  cond);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild(),  cond);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n.getFirstChild(),  cond);	  return    Node.newString(Token.NAME,    cond.getFirstChild(),    parent);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
498	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  parent,  n);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  parent,  n);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild(),  parent,  n);	  return    Node.newString(Token.NAME,    cond.getFirstChild(),    parent);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
499	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild(),  parent);  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild(),  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n.getFirstChild(),  parent);	  return    Node.newString(Token.NAME,    cond.getFirstChild(),    parent);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
500	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  name1,  parent);  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  name1,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild(),  name1,  parent);	  return    Node.newString(Token.NAME,    cond.getFirstChild(),    parent);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
501	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  n);  [CE]  cannot  find  symbol  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  n);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild(),  n);	  return    Node.newString(Token.NAME,    cond.getFirstChild(),    parent);    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
502	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  name,  n.getFirstChild());  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  name,  n.getFirstChild());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  name,  n.getFirstChild());	  return    Node.newString(Token.NAME,    n.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
503	[BUG]  [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.NAME,  cond.getFirstChild().getString());  Node  assign  =  parent.getNext();  [CE]  cannot  find  symbol  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.NAME,  cond.getFirstChild().getString());  Node  assign  =  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(cond.getType()  ==  Token.NAME,  cond.getFirstChild().getString());  Node  assign  =  parent.getNext();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    assign    =    parent.getNext();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
504	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  assign  =  parent.getNext();  [CE]  cannot  find  symbol  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  assign  =  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  assign  =  parent.getNext();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    assign    =    parent.getNext();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
505	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString()  +  1);  Node  assign  =  parent.getNext();  [CE]  cannot  find  symbol  [FE]                        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString()  +  1);  Node  assign  =  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString()  +  1);  Node  assign  =  parent.getNext();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    assign    =    parent.getNext();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
506	[BUG]  [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.NAME);  Node  assign  =  parent.getNext();  [CE]  cannot  find  symbol  [FE]                          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.NAME);  Node  assign  =  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(cond.getType()  ==  Token.NAME);  Node  assign  =  parent.getNext();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    assign    =    parent.getNext();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
507	[BUG]  [BUGGY]  Return  parent.getType()  ==  Token.CALL?  parent.getType()  :  Token.NAME;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Return  parent.getType()  ==  Token.CALL?  parent.getType()  :  Token.NAME;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Return  parent.getType()  ==  Token.CALL?  parent.getType()  :  Token.NAME;	  return    parent.getType()    ==    Token.CALL?    parent.getType()    :    Token.NAME;    	non-compiled	[CE]  ';'  expected	134	None	replace
508	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.CALL?  parent.getType()  :  Token.NAME  +  1;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent.getType()  ==  Token.CALL?  parent.getType()  :  Token.NAME  +  1;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent.getType()  ==  Token.CALL?  parent.getType()  :  Token.NAME  +  1;	  return    parent.getType()    ==    Token.CALL?    parent.getType()    :    Token.NAME;    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
509	[BUG]  [BUGGY]  return  parent.getType()!=  Token.CALL?  parent.getType()  :  Token.NAME;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent.getType()!=  Token.CALL?  parent.getType()  :  Token.NAME;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent.getType()!=  Token.CALL?  parent.getType()  :  Token.NAME;	  return    parent.getType()    ==    Token.CALL?    parent.getType()    :    Token.NAME;    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
510	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.CALL?  parent.getType()  :  Token.NAME,  true;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent.getType()  ==  Token.CALL?  parent.getType()  :  Token.NAME,  true;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent.getType()  ==  Token.CALL?  parent.getType()  :  Token.NAME,  true;	  return    parent.getType()    ==    Token.CALL?    parent.getType()    :    Token.NAME;    	non-compiled	[CE]  ';'  expected	134	None	replace
511	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.CALL?  parent.getType()  :  Token.NAME,  cond;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent.getType()  ==  Token.CALL?  parent.getType()  :  Token.NAME,  cond;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent.getType()  ==  Token.CALL?  parent.getType()  :  Token.NAME,  cond;	  return    parent.getType()    ==    Token.CALL?    parent.getType()    :    Token.NAME;    	non-compiled	[CE]  ';'  expected	134	None	replace
512	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.CALL?  parent.getType()  :  Token.NAME,  false;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent.getType()  ==  Token.CALL?  parent.getType()  :  Token.NAME,  false;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent.getType()  ==  Token.CALL?  parent.getType()  :  Token.NAME,  false;	  return    parent.getType()    ==    Token.CALL?    parent.getType()    :    Token.NAME;    	non-compiled	[CE]  ';'  expected	134	None	replace
513	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  if(parent!=  null)?  null  :  parent.getParent();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  if(parent!=  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getParent();  if(parent!=  null)?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    if(parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
514	[BUG]  [BUGGY]  return  parent  ==  null?  null  :  parent.getParent();  if(parent  ==  null)?  null  :  parent.getParent();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent  ==  null?  null  :  parent.getParent();  if(parent  ==  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null?  null  :  parent.getParent();  if(parent  ==  null)?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    if(parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
515	[BUG]  [BUGGY]  return  parent  ==  null?  null  :  parent.getParent();  if(parent!=  null)?  null  :  parent.getParent();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent  ==  null?  null  :  parent.getParent();  if(parent!=  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null?  null  :  parent.getParent();  if(parent!=  null)?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    if(parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
516	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  if(parent  ==  null)?  null  :  parent.getParent();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  if(parent  ==  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getNext();  if(parent  ==  null)?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    if(parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
517	[BUG]  [BUGGY]  Node  cond  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString());  [CE]  cannot  find  symbol  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  cond  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  cond  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString());	  return    Node.newString(Token.NAME,    cond.getString());    Node    cond    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
518	[BUG]  [BUGGY]  Node  cond  =  parent.getFirstChild();  [CE]  cannot  find  symbol  [FE]                        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  cond  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  cond  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    cond.getString());    Node    cond    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
519	[BUG]  [BUGGY]  Node  cond  =  parent.getFirstChild();  if(cond!=  null)  {  return  Node.newString(Token.NAME,  cond.getString());  }  [CE]  cannot  find  symbol  [FE]                          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  cond  =  parent.getFirstChild();  if(cond!=  null)  {  return  Node.newString(Token.NAME,  cond.getString());  }  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  cond  =  parent.getFirstChild();  if(cond!=  null)  {  return  Node.newString(Token.NAME,  cond.getString());  }	  return    Node.newString(Token.NAME,    cond.getString());    Node    cond    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
520	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n,  parent,  cond);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n,  parent,  cond);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n,  parent,  cond);	  return    Node.newString(Token.NAME,    parent,    cond);    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
521	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  name1,  cond);  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  name1,  cond);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  name1,  cond);	  return    Node.newString(Token.NAME,    parent,    cond);    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
522	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  n.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent!=  null);  Node  parent  =  n.getLastChild();	  return    parent;    Node    parent    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
523	[BUG]  [BUGGY]  Preconditions.checkState(parent  ==  null);  Node  parent  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent  ==  null);  Node  parent  =  n.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent  ==  null);  Node  parent  =  n.getLastChild();	  return    parent;    Node    parent    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
524	[BUG]  [BUGGY]  parent  =  n.getLastChild();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  =  n.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  =  n.getLastChild();	  return    parent;    Node    parent    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
525	[BUG]  [BUGGY]  parent  =  parent.getLastChild();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  =  parent.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  =  parent.getLastChild();	  return    parent;    Node    parent    =    n.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
526	[BUG]  [BUGGY]  Node  returnNode.newString(Token.NAME,  parent.getFirstChild().getString());  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  returnNode.newString(Token.NAME,  parent.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  returnNode.newString(Token.NAME,  parent.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    returnNode.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  ';'  expected	167	None	replace
527	[BUG]  [BUGGY]  Node  returnNode.newString(Token.NAME,  parent.getLastChild().getString());  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  returnNode.newString(Token.NAME,  parent.getLastChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  returnNode.newString(Token.NAME,  parent.getLastChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    returnNode.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  ';'  expected	167	None	replace
528	[BUG]  [BUGGY]  Node  returnNode.newString(Token.NAME,  n.getFirstChild().getString());  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  returnNode.newString(Token.NAME,  n.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  returnNode.newString(Token.NAME,  n.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    returnNode.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  ';'  expected	167	None	replace
529	[BUG]  [BUGGY]  Node  assign  =  cond.getFirstChild();  return  Node.newString(Token.NAME,  assign.getString());  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  cond.getFirstChild();  return  Node.newString(Token.NAME,  assign.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assign  =  cond.getFirstChild();  return  Node.newString(Token.NAME,  assign.getString());	  return    Node.newString(Token.NAME,    cond.getString());    Node    var    =    cond.getFirstChild();    return    Node.newString(Token.NAME,    var.getString());    	non-compiled	[CE]  cannot  find  symbol	198	None	replace
530	[BUG]  [BUGGY]  Node  assign  =  n.getFirstChild();  return  Node.newString(Token.NAME,  assign.getString());  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  n.getFirstChild();  return  Node.newString(Token.NAME,  assign.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assign  =  n.getFirstChild();  return  Node.newString(Token.NAME,  assign.getString());	  return    Node.newString(Token.NAME,    cond.getString());    Node    var    =    cond.getFirstChild();    return    Node.newString(Token.NAME,    var.getString());    	non-compiled	[CE]  cannot  find  symbol	198	None	replace
531	[BUG]  [BUGGY]  if(parent  ==  null)  {  return  parent.getParent();  }  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  if(parent  ==  null)  {  return  parent.getParent();  }  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	if(parent  ==  null)  {  return  parent.getParent();  }	  return(parent    ==    null)?    null    :    parent.getParent();    return(parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
532	[BUG]  [BUGGY]  Node  nscut  =  parent  ==  null)?  null  :  parent.getNext();  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  nscut  =  parent  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  nscut  =  parent  ==  null)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    Node    parent    născut    =    parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  ';'  expected	191	None	replace
533	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  parentscut  =  parent  ==  null)?  null  :  parent.getNext();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  parentscut  =  parent  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getNext();  Node  parentscut  =  parent  ==  null)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    Node    parent    născut    =    parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  ';'  expected	191	None	replace
534	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  nscut  =  parent  ==  null)?  null  :  parent.getNext();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  nscut  =  parent  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getNext();  Node  nscut  =  parent  ==  null)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    Node    parent    născut    =    parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  ';'  expected	191	None	replace
535	[BUG]  [BUGGY]  nscut  =  parent  ==  null)?  null  :  parent.getNext();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  nscut  =  parent  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	nscut  =  parent  ==  null)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    Node    parent    născut    =    parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  ';'  expected	191	None	replace
536	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  parentscut  =  parent  ==  null)?  null  :  parent.getParent();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  parentscut  =  parent  ==  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getNext();  Node  parentscut  =  parent  ==  null)?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getNext();    Node    parent    născut    =    parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  ';'  expected	191	None	replace
537	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  nscut  =  parent  ==  null)?  null  :  parent.getNext();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  nscut  =  parent  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getParent();  Node  nscut  =  parent  ==  null)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    Node    parent    născut    =    parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  ';'  expected	191	None	replace
538	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  nscut  =  parent!=  null)?  null  :  parent.getNext();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  nscut  =  parent!=  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getNext();  Node  nscut  =  parent!=  null)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    Node    parent    născut    =    parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  ';'  expected	191	None	replace
539	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  toString  =  parent.getFirstChild().getString();  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  toString  =  parent.getFirstChild().getString();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  toString  =  parent.getFirstChild().getString();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    toString    =    parent.getFirstChild().getString();    	non-compiled	[CE]  cannot  find  symbol	172	None	replace
540	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  ToString  toString  =  parent.getFirstChild().getString();  [CE]  cannot  find  symbol  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  ToString  toString  =  parent.getFirstChild().getString();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  ToString  toString  =  parent.getFirstChild().getString();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    toString    =    parent.getFirstChild().getString();    	non-compiled	[CE]  cannot  find  symbol	172	None	replace
541	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  toString  =  n.getFirstChild().getString();  [CE]  ';'  expected  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  toString  =  n.getFirstChild().getString();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  toString  =  n.getFirstChild().getString();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    toString    =    parent.getFirstChild().getString();    	non-compiled	[CE]  ';'  expected	172	None	replace
542	[BUG]  [BUGGY]  Node  toString  =  parent.getLastChild().getString();  [CE]  ';'  expected  [FE]                        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  toString  =  parent.getLastChild().getString();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  toString  =  parent.getLastChild().getString();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    toString    =    parent.getFirstChild().getString();    	non-compiled	[CE]  ';'  expected	172	None	replace
543	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  return  parent;  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  n.getParent();  return  parent;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  n.getParent();  return  parent;	  return    parent;    Node    parent    =    n.getParent();    return    parent;    	non-compiled	[CE]  ';'  expected	81	None	replace
544	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  n.getParent();  return  parent;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  n.getParent();  return  parent;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent!=  null);  Node  parent  =  n.getParent();  return  parent;	  return    parent;    Node    parent    =    n.getParent();    return    parent;    	non-compiled	[CE]  ';'  expected	81	None	replace
545	[BUG]  [BUGGY]  Preconditions.checkState(parent  ==  null);  Node  parent  =  n.getParent();  return  parent;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent  ==  null);  Node  parent  =  n.getParent();  return  parent;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent  ==  null);  Node  parent  =  n.getParent();  return  parent;	  return    parent;    Node    parent    =    n.getParent();    return    parent;    	non-compiled	[CE]  ';'  expected	81	None	replace
546	[BUG]  [BUGGY]  parent  =  n.getParent();  return  parent;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  =  n.getParent();  return  parent;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  =  n.getParent();  return  parent;	  return    parent;    Node    parent    =    n.getParent();    return    parent;    	non-compiled	[CE]  ';'  expected	81	None	replace
547	[BUG]  [BUGGY]  Node  parent  =  parent.getParent();  return(parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  parent.getParent();  return(parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  parent.getParent();  return(parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent.getParent();    return(parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  ';'  expected	129	None	replace
548	[BUG]  [BUGGY]  Node  return(n  ==  null)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  return(n  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  return(n  ==  null)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    Node    return(parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  not  a  statement	77	None	replace
549	[BUG]  [BUGGY]  Node  return  parent  ==  null?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  return  parent  ==  null?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  return  parent  ==  null?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    Node    return(parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  not  a  statement	77	None	replace
550	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n.getString());  Node  cond  =  parent.getFirstChild();  [CE]  ';'  expected  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n.getString());  Node  cond  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n.getString());  Node  cond  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    cond.getString());    Node    cond    =    parent.getFirstChild();    	non-compiled	[CE]  ';'  expected	55	None	replace
551	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  true);  Node  cond  =  parent.getFirstChild();  [CE]  ';'  expected  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  true);  Node  cond  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  true);  Node  cond  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    cond.getString());    Node    cond    =    parent.getFirstChild();    	non-compiled	[CE]  ';'  expected	55	None	replace
552	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  false);  Node  cond  =  parent.getFirstChild();  [CE]  ';'  expected  [FE]                        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  false);  Node  cond  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  false);  Node  cond  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    cond.getString());    Node    cond    =    parent.getFirstChild();    	non-compiled	[CE]  ';'  expected	55	None	replace
553	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  parent.getFirstChild());  [CE]  ';'  expected  [FE]                          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  parent.getFirstChild());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  parent.getFirstChild());	  return    Node.newString(Token.NAME,    cond.getString());    Node    cond    =    parent.getFirstChild();    	non-compiled	[CE]  ';'  expected	55	None	replace
554	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  parent.getLastChild());  [CE]  ';'  expected  [FE]                            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  parent.getLastChild());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  parent.getLastChild());	  return    Node.newString(Token.NAME,    cond.getString());    Node    cond    =    parent.getFirstChild();    	non-compiled	[CE]  ';'  expected	55	None	replace
555	[BUG]  [BUGGY]  Node  cond  =  n.getFirstChild();  [CE]  ';'  expected  [FE]                              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  cond  =  n.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  cond  =  n.getFirstChild();	  return    Node.newString(Token.NAME,    cond.getString());    Node    cond    =    parent.getFirstChild();    	non-compiled	[CE]  ';'  expected	55	None	replace
556	[BUG]  [BUGGY]  Node  nscut  =  parent  ==  null)?  null  :  parent.getParent();  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  nscut  =  parent  ==  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  nscut  =  parent  ==  null)?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    Node    parent    născut    =    parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  ';'  expected	187	None	replace
557	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  nscut  =  parent  ==  null)?  null  :  parent.getParent();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  nscut  =  parent  ==  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getParent();  Node  nscut  =  parent  ==  null)?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    Node    parent    născut    =    parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  ';'  expected	187	None	replace
558	[BUG]  [BUGGY]  nscut  =  parent  ==  null)?  null  :  parent.getParent();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  nscut  =  parent  ==  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	nscut  =  parent  ==  null)?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    Node    parent    născut    =    parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  ';'  expected	187	None	replace
559	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  parentscut  =  parent  ==  null)?  null  :  parent.getParent();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  parentscut  =  parent  ==  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getParent();  Node  parentscut  =  parent  ==  null)?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    Node    parent    născut    =    parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  ';'  expected	187	None	replace
560	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  nscut  =  parent  ==  null)?  null  :  parent.getParent();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  nscut  =  parent  ==  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getNext();  Node  nscut  =  parent  ==  null)?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    Node    parent    născut    =    parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  ';'  expected	187	None	replace
561	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  nscut  =  parent!=  null)?  null  :  parent.getParent();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  nscut  =  parent!=  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getParent();  Node  nscut  =  parent!=  null)?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    Node    parent    născut    =    parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  ';'  expected	187	None	replace
562	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  Node  return(parent  ==  null)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Node  return(parent  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent!=  null);  Node  return(parent  ==  null)?  null  :  parent.getNext();	  return(parent!=    null)?    null    :    parent.getNext();    Node    return(parent!=    null)?    null    :    parent.getNext();    	non-compiled	[CE]  not  a  statement	143	None	replace
563	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  Node  return(parent!=  null)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Node  return(parent!=  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent!=  null);  Node  return(parent!=  null)?  null  :  parent.getNext();	  return(parent!=    null)?    null    :    parent.getNext();    Node    return(parent!=    null)?    null    :    parent.getNext();    	non-compiled	[CE]  not  a  statement	143	None	replace
564	[BUG]  [BUGGY]  Node  var  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  var.getString());  [CE]  ';'  expected  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  var  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  var.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  var  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  var.getString());	  return    Node.newString(Token.NAME,    cond.getString());    Node    var    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    var.getString());    	non-compiled	[CE]  ';'  expected	199	None	replace
565	[BUG]  [BUGGY]  Node  lhs  =  cond.getFirstChild();  return  Node.newString(Token.NAME,  lhs.getString());  [CE]  ';'  expected  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  lhs  =  cond.getFirstChild();  return  Node.newString(Token.NAME,  lhs.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  lhs  =  cond.getFirstChild();  return  Node.newString(Token.NAME,  lhs.getString());	  return    Node.newString(Token.NAME,    cond.getString());    Node    var    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    var.getString());    	non-compiled	[CE]  ';'  expected	199	None	replace
566	[BUG]  [BUGGY]  Node  var  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString());  [CE]  ';'  expected  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  var  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  var  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString());	  return    Node.newString(Token.NAME,    cond.getString());    Node    var    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    var.getString());    	non-compiled	[CE]  ';'  expected	199	None	replace
567	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent!=  null)?  null  :  parent.getFirstChild();  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent!=  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent!=  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  ';'  expected	145	None	replace
568	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  Node  parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  Node  parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=  null)?  null  :  parent.getFirstChild();  Node  parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  ';'  expected	145	None	replace
569	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getLastChild();  Node  parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getLastChild();  Node  parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getLastChild();  Node  parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  ';'  expected	145	None	replace
570	[BUG]  [BUGGY]  return  parent!=  null?  parent.getLastChild()  :  NodeUtil.newLiteralValue(cond,  true));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent!=  null?  parent.getLastChild()  :  NodeUtil.newLiteralValue(cond,  true));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null?  parent.getLastChild()  :  NodeUtil.newLiteralValue(cond,  true));	  return    parent!=    null?    parent.getFirstChild()    :    NodeUtil.newLiteralValue(cond,    true));    	non-compiled	[CE]  ';'  expected	239	None	replace
571	[BUG]  [BUGGY]  return  cond!=  null?  parent.getFirstChild()  :  NodeUtil.newLiteralValue(cond,  true));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  cond!=  null?  parent.getFirstChild()  :  NodeUtil.newLiteralValue(cond,  true));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  cond!=  null?  parent.getFirstChild()  :  NodeUtil.newLiteralValue(cond,  true));	  return    parent!=    null?    parent.getFirstChild()    :    NodeUtil.newLiteralValue(cond,    true));    	non-compiled	[CE]  ';'  expected	239	None	replace
572	[BUG]  [BUGGY]  return  parent  ==  null?  parent.getLastChild()  :  NodeUtil.newLiteralValue(cond,  true));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent  ==  null?  parent.getLastChild()  :  NodeUtil.newLiteralValue(cond,  true));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null?  parent.getLastChild()  :  NodeUtil.newLiteralValue(cond,  true));	  return    parent!=    null?    parent.getFirstChild()    :    NodeUtil.newLiteralValue(cond,    true));    	non-compiled	[CE]  ';'  expected	239	None	replace
573	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction());  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction());	  NodeTraversal.traverse(compiler,    parent,    new    FoldArrayAction());    	non-compiled	[CE]  ';'  expected	156	None	replace
574	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cond,  new  FoldArrayAction());  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  NodeTraversal.traverse(compiler,  cond,  new  FoldArrayAction());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	NodeTraversal.traverse(compiler,  cond,  new  FoldArrayAction());	  NodeTraversal.traverse(compiler,    parent,    new    FoldArrayAction());    	non-compiled	[CE]  ';'  expected	156	None	replace
575	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  FoldArrayAction(),  cond);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  FoldArrayAction(),  cond);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	NodeTraversal.traverse(compiler,  parent,  new  FoldArrayAction(),  cond);	  NodeTraversal.traverse(compiler,    parent,    new    FoldArrayAction());    	non-compiled	[CE]  ';'  expected	156	None	replace
576	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  FoldArrayAction(),  false);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  FoldArrayAction(),  false);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	NodeTraversal.traverse(compiler,  parent,  new  FoldArrayAction(),  false);	  NodeTraversal.traverse(compiler,    parent,    new    FoldArrayAction());    	non-compiled	[CE]  ';'  expected	156	None	replace
577	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction());	  NodeTraversal.traverse(compiler,    parent,    new    FoldArrayAction());    	non-compiled	[CE]  ';'  expected	156	None	replace
578	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  FoldArrayAction(),  null);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  FoldArrayAction(),  null);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	NodeTraversal.traverse(compiler,  parent,  new  FoldArrayAction(),  null);	  NodeTraversal.traverse(compiler,    parent,    new    FoldArrayAction());    	non-compiled	[CE]  ';'  expected	156	None	replace
579	[BUG]  [BUGGY]  Node  toString  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  toString,  parent.getFirstChild().getString());  [CE]  ';'  expected  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  toString  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  toString,  parent.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  toString  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  toString,  parent.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    toString    =    parent.getFirstChild().getString();    return    Node.newString(Token.NAME,    toString,    parent.getFirstChild().getString());    	non-compiled	[CE]  ';'  expected	256	None	replace
580	[BUG]  [BUGGY]  Node  toString  =  n.getFirstChild().getString();  return  Node.newString(Token.NAME,  toString,  parent.getFirstChild().getString());  [CE]  ';'  expected  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  toString  =  n.getFirstChild().getString();  return  Node.newString(Token.NAME,  toString,  parent.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  toString  =  n.getFirstChild().getString();  return  Node.newString(Token.NAME,  toString,  parent.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    toString    =    parent.getFirstChild().getString();    return    Node.newString(Token.NAME,    toString,    parent.getFirstChild().getString());    	non-compiled	[CE]  ';'  expected	256	None	replace
581	[BUG]  [BUGGY]  Node  toString  =  parent.getLastChild().getString();  return  Node.newString(Token.NAME,  toString,  parent.getFirstChild().getString());  [CE]  ';'  expected  [FE]                        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  toString  =  parent.getLastChild().getString();  return  Node.newString(Token.NAME,  toString,  parent.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  toString  =  parent.getLastChild().getString();  return  Node.newString(Token.NAME,  toString,  parent.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    toString    =    parent.getFirstChild().getString();    return    Node.newString(Token.NAME,    toString,    parent.getFirstChild().getString());    	non-compiled	[CE]  ';'  expected	256	None	replace
582	[BUG]  [BUGGY]  Node  toString  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  toString,  parent.getLastChild().getString());  [CE]  ';'  expected  [FE]                          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  toString  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  toString,  parent.getLastChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  toString  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  toString,  parent.getLastChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    toString    =    parent.getFirstChild().getString();    return    Node.newString(Token.NAME,    toString,    parent.getFirstChild().getString());    	non-compiled	[CE]  ';'  expected	256	None	replace
583	[BUG]  [BUGGY]  Node  assignName  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  assignName,  parent.getFirstChild().getString());  [CE]  ';'  expected  [FE]                            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assignName  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  assignName,  parent.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assignName  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  assignName,  parent.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    toString    =    parent.getFirstChild().getString();    return    Node.newString(Token.NAME,    toString,    parent.getFirstChild().getString());    	non-compiled	[CE]  ';'  expected	256	None	replace
584	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.VAR,  parent);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.VAR,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.VAR,  parent);	  Preconditions.checkArgument(cond.getType()    ==    Token.VAR);    	non-compiled	[CE]  ';'  expected	160	None	replace
585	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.VAR,  n);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.VAR,  n);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.VAR,  n);	  Preconditions.checkArgument(cond.getType()    ==    Token.VAR);    	non-compiled	[CE]  ';'  expected	160	None	replace
586	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.VAR);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.VAR);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.VAR);	  Preconditions.checkArgument(cond.getType()    ==    Token.VAR);    	non-compiled	[CE]  ';'  expected	160	None	replace
587	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.VAR  ||  cond.getType()  ==  Token.VAR);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.VAR  ||  cond.getType()  ==  Token.VAR);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.VAR  ||  cond.getType()  ==  Token.VAR);	  Preconditions.checkArgument(cond.getType()    ==    Token.VAR);    	non-compiled	[CE]  ';'  expected	160	None	replace
588	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()!=  Token.VAR,  parent);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()!=  Token.VAR,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()!=  Token.VAR,  parent);	  Preconditions.checkArgument(cond.getType()    ==    Token.VAR);    	non-compiled	[CE]  ';'  expected	160	None	replace
589	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.VAR?  cond  :  Integer.toString(parent.getType());  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent.getType()  ==  Token.VAR?  cond  :  Integer.toString(parent.getType());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent.getType()  ==  Token.VAR?  cond  :  Integer.toString(parent.getType());	  return    cond;    	non-compiled	[CE]  ';'  expected	130	None	replace
590	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.VAR?  cond  :  Integer.toString(parent.getType()));  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent.getType()  ==  Token.VAR?  cond  :  Integer.toString(parent.getType()));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent.getType()  ==  Token.VAR?  cond  :  Integer.toString(parent.getType()));	  return    cond;    	non-compiled	[CE]  ';'  expected	130	None	replace
591	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.VAR?  cond  :  Integer.toString(parent.getLastChild());  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent.getType()  ==  Token.VAR?  cond  :  Integer.toString(parent.getLastChild());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent.getType()  ==  Token.VAR?  cond  :  Integer.toString(parent.getLastChild());	  return    cond;    	non-compiled	[CE]  ';'  expected	130	None	replace
592	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.VAR?  cond  :  Integer.MAX_VALUE;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent.getType()  ==  Token.VAR?  cond  :  Integer.MAX_VALUE;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent.getType()  ==  Token.VAR?  cond  :  Integer.MAX_VALUE;	  return    cond;    	non-compiled	[CE]  ';'  expected	130	None	replace
593	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.VAR?  cond  :  Integer.toString(parent.getFirstChild());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent.getType()  ==  Token.VAR?  cond  :  Integer.toString(parent.getFirstChild());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent.getType()  ==  Token.VAR?  cond  :  Integer.toString(parent.getFirstChild());	  return    cond;    	non-compiled	[CE]  ';'  expected	130	None	replace
594	[BUG]  [BUGGY]  parent  ==  null)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  ==  null)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  not  a  statement	221	None	replace
595	[BUG]  [BUGGY]  return  parent  ==  null)?  null  :  parent.getNext();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  ';'  expected	221	None	replace
596	[BUG]  [BUGGY]  parent  =  parent;  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  =  parent;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  =  parent;	  return    parent;    if(parent!=    null)    {    return    parent;    }    	non-compiled	[CE]  ';'  expected	224	None	replace
597	[BUG]  [BUGGY]  if(parent!=  null)  {  return  parent;  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  if(parent!=  null)  {  return  parent;  }  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	if(parent!=  null)  {  return  parent;  }	  return    parent;    if(parent!=    null)    {    return    parent;    }    	non-compiled	[CE]  ';'  expected	224	None	replace
598	[BUG]  [BUGGY]  Node  thenBranch  =  parent.getFirstChild();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  thenBranch  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  thenBranch  =  parent.getFirstChild();	  return    parent;    if(parent!=    null)    {    return    parent;    }    	non-compiled	[CE]  ';'  expected	224	None	replace
599	[BUG]  [BUGGY]  Node  parent  =  cond.getParent();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  cond.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  cond.getParent();	  return    parent;    if(parent!=    null)    {    return    parent;    }    	non-compiled	[CE]  ';'  expected	224	None	replace
600	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  1);  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  1);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  1);	  return    Node.newString(Token.NAME,    cond.getString()    +    1);    	non-compiled	[CE]  ';'  expected	46	None	replace
601	[BUG]  [BUGGY]  ReturnNode.newString(Token.NAME,  cond.getString());  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  ReturnNode.newString(Token.NAME,  cond.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	ReturnNode.newString(Token.NAME,  cond.getString());	  return    Node.newString(Token.NAME,    cond.getString()    +    1);    	non-compiled	[CE]  ';'  expected	46	None	replace
602	[BUG]  [BUGGY]  parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	248	None	replace
603	[BUG]  [BUGGY]  return  parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  ';'  expected	248	None	replace
604	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(cond.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	12	None	replace
605	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);	  Preconditions.checkArgument(cond.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	12	None	replace
606	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.GETPROP);  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.GETPROP);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(cond.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	12	None	replace
607	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME,  n);  [CE]  ';'  expected  [FE]          RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME,  n);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.NAME,  n);	  Preconditions.checkArgument(cond.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	12	None	replace
608	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME,  parent);  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.NAME,  parent);	  Preconditions.checkArgument(cond.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	12	None	replace
609	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  return(parent!=  null)?  null  :  parent.getFirstChild();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  n.getParent();  return(parent!=  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  n.getParent();  return(parent!=  null)?  null  :  parent.getFirstChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    Node    parent    =    n.getParent();    return(parent!=    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  ';'  expected	155	None	replace
610	[BUG]  [BUGGY]  parent  ==  null?  null  :  parent.getFirstChild();  return(parent!=  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  ==  null?  null  :  parent.getFirstChild();  return(parent!=  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  ==  null?  null  :  parent.getFirstChild();  return(parent!=  null)?  null  :  parent.getFirstChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    Node    parent    =    n.getParent();    return(parent!=    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	155	None	replace
611	[BUG]  [BUGGY]  parent  =  parent  ==  null?  null  :  parent.getNext();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  =  parent  ==  null?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  =  parent  ==  null?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    Node    parent    =    parent    ==    null?    null    :    parent.getNext();    	non-compiled	[CE]  ';'  expected	78	None	replace
612	[BUG]  [BUGGY]  Node  assignName  =  parent.getLastChild().getString();  return  Node.newString(Token.NAME,  assignName.getFirstChild().getString());  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assignName  =  parent.getLastChild().getString();  return  Node.newString(Token.NAME,  assignName.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assignName  =  parent.getLastChild().getString();  return  Node.newString(Token.NAME,  assignName.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    assignName    =    parent.getFirstChild().getString();    return    Node.newString(Token.NAME,    assignName.getFirstChild().getString());    	non-compiled	[CE]  ';'  expected	252	None	replace
613	[BUG]  [BUGGY]  Node  assignName  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  assignName.getLastChild().getString());  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assignName  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  assignName.getLastChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assignName  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  assignName.getLastChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    assignName    =    parent.getFirstChild().getString();    return    Node.newString(Token.NAME,    assignName.getFirstChild().getString());    	non-compiled	[CE]  ';'  expected	252	None	replace
614	[BUG]  [BUGGY]  return  parent  ==  null?  null  :  parent.getNext();  if(parent  ==  null)?  null  :  parent.getNext();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent  ==  null?  null  :  parent.getNext();  if(parent  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null?  null  :  parent.getNext();  if(parent  ==  null)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    if(parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  illegal  start  of  expression	219	None	replace
615	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  if(parent!=  null)?  null  :  parent.getNext();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  if(parent!=  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getParent();  if(parent!=  null)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    if(parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  illegal  start  of  expression	219	None	replace
616	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  if(parent  ==  null)?  null  :  parent.getNext();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  if(parent  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getParent();  if(parent  ==  null)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    if(parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  illegal  start  of  expression	219	None	replace
617	[BUG]  [BUGGY]  Node  thenAssign  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString());  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  thenAssign  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  thenAssign  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString());	  return    Node.newString(Token.NAME,    cond.getString());    Node    thenAssign    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  ';'  expected	211	None	replace
618	[BUG]  [BUGGY]  Node  thenAssign  =  n.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString());  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  thenAssign  =  n.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  thenAssign  =  n.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString());	  return    Node.newString(Token.NAME,    cond.getString());    Node    thenAssign    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  ';'  expected	211	None	replace
619	[BUG]  [BUGGY]  Node  thenAssign  =  cond.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString());  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  thenAssign  =  cond.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  thenAssign  =  cond.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString());	  return    Node.newString(Token.NAME,    cond.getString());    Node    thenAssign    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  ';'  expected	211	None	replace
620	[BUG]  [BUGGY]  Node  thenBranch  =  cond.getFirstChild();  return  Node.newString(Token.NAME,  thenBranch.getString());  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  thenBranch  =  cond.getFirstChild();  return  Node.newString(Token.NAME,  thenBranch.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  thenBranch  =  cond.getFirstChild();  return  Node.newString(Token.NAME,  thenBranch.getString());	  return    Node.newString(Token.NAME,    cond.getString());    Node    thenAssign    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  ';'  expected	211	None	replace
621	[BUG]  [BUGGY]  Node  thenAssign  =  cond.getFirstChild();  return  Node.newString(Token.NAME,  elseAssign.getString());  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  thenAssign  =  cond.getFirstChild();  return  Node.newString(Token.NAME,  elseAssign.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  thenAssign  =  cond.getFirstChild();  return  Node.newString(Token.NAME,  elseAssign.getString());	  return    Node.newString(Token.NAME,    cond.getString());    Node    thenAssign    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  ';'  expected	211	None	replace
622	[BUG]  [BUGGY]  parent!=  null?  null  :  parent.getNext();  Node  parent  =  n.getParent();  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent!=  null?  null  :  parent.getNext();  Node  parent  =  n.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent!=  null?  null  :  parent.getNext();  Node  parent  =  n.getParent();	  return(parent!=    null)?    null    :    parent.getNext();    Node    parent    =    n.getParent();    	non-compiled	[CE]  not  a  statement	148	None	replace
623	[BUG]  [BUGGY]  parent  ==  null?  null  :  parent.getNext();  Node  parent  =  n.getParent();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  ==  null?  null  :  parent.getNext();  Node  parent  =  n.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  ==  null?  null  :  parent.getNext();  Node  parent  =  n.getParent();	  return(parent!=    null)?    null    :    parent.getNext();    Node    parent    =    n.getParent();    	non-compiled	[CE]  not  a  statement	148	None	replace
624	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.FUNCTION,  parent);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.FUNCTION,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.FUNCTION,  parent);	  Preconditions.checkArgument(cond.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	158	None	replace
625	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(cond.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	158	None	replace
626	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.FUNCTION);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(cond.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	158	None	replace
627	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.FUNCTION,  n);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.FUNCTION,  n);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.FUNCTION,  n);	  Preconditions.checkArgument(cond.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	158	None	replace
628	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.EXPR_RESULT);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(cond.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	158	None	replace
629	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.VAR);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.VAR);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.VAR);	  Preconditions.checkArgument(cond.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  ';'  expected	158	None	replace
630	[BUG]  [BUGGY]  return  parent!=  null?  null  :  parent.getLastChild();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent!=  null?  null  :  parent.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null?  null  :  parent.getLastChild();	  return    parent!=    null?    null    :    parent.getFirstChild();    	non-compiled	[CE]  ';'  expected	185	None	replace
631	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS,  parent);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS,  parent);	  return    Node.newString(Token.NAME,    cond.getFirstChild(),    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ';'  expected	70	None	replace
632	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS);	  return    Node.newString(Token.NAME,    cond.getFirstChild(),    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ';'  expected	70	None	replace
633	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS,  immutableSet);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS,  immutableSet);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS,  immutableSet);	  return    Node.newString(Token.NAME,    cond.getFirstChild(),    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ';'  expected	70	None	replace
634	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  1);  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  1);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  1);	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString()    +    1);    	non-compiled	[CE]  ';'  expected	27	None	replace
635	[BUG]  [BUGGY]  Node  cond  =  parent.getParent();  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  cond  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  cond  =  parent.getParent();	  return    Node.newString(Token.NAME,    cond.getString());    Node    cond    =    parent.getParent();    	non-compiled	[CE]  ';'  expected	53	None	replace
636	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n.getString());  Node  cond  =  parent.getParent();  [CE]  ';'  expected  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n.getString());  Node  cond  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n.getString());  Node  cond  =  parent.getParent();	  return    Node.newString(Token.NAME,    cond.getString());    Node    cond    =    parent.getParent();    	non-compiled	[CE]  ';'  expected	53	None	replace
637	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  false);  Node  cond  =  parent.getParent();  [CE]  ';'  expected  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  false);  Node  cond  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  false);  Node  cond  =  parent.getParent();	  return    Node.newString(Token.NAME,    cond.getString());    Node    cond    =    parent.getParent();    	non-compiled	[CE]  ';'  expected	53	None	replace
638	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  true);  Node  cond  =  parent.getParent();  [CE]  ';'  expected  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  true);  Node  cond  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  true);  Node  cond  =  parent.getParent();	  return    Node.newString(Token.NAME,    cond.getString());    Node    cond    =    parent.getParent();    	non-compiled	[CE]  ';'  expected	53	None	replace
639	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getString());  Node  cond  =  parent.getParent();  [CE]  ';'  expected  [FE]                        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getString());  Node  cond  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getString());  Node  cond  =  parent.getParent();	  return    Node.newString(Token.NAME,    cond.getString());    Node    cond    =    parent.getParent();    	non-compiled	[CE]  ';'  expected	53	None	replace
640	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  parent.getType());  [CE]  ';'  expected  [FE]                          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  parent.getType());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  parent.getType());	  return    Node.newString(Token.NAME,    cond.getString());    Node    cond    =    parent.getParent();    	non-compiled	[CE]  ';'  expected	53	None	replace
641	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  parent.getParent());  [CE]  ';'  expected  [FE]                            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  parent.getParent());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  parent.getParent());	  return    Node.newString(Token.NAME,    cond.getString());    Node    cond    =    parent.getParent();    	non-compiled	[CE]  ';'  expected	53	None	replace
642	[BUG]  [BUGGY]  Node  return(n  ==  null)?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  return(n  ==  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  return(n  ==  null)?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    Node    return(parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	36	None	replace
643	[BUG]  [BUGGY]  Node  return  parent  ==  null?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  return  parent  ==  null?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  return  parent  ==  null?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    Node    return(parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	36	None	replace
644	[BUG]  [BUGGY]  return(parent  >=  null)?  null  :  parent.getParent();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  >=  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  >=  null)?  null  :  parent.getParent();	  return(parent!=    null)?    null    :    parent.getParent();    return(parent!=    null)?    null    :    parent.getParent();    	non-compiled	[CE]  ';'  expected	111	None	replace
645	[BUG]  [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.NAME);  Node  assign  =  parent.getParent();  [CE]  ';'  expected  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.NAME);  Node  assign  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(cond.getType()  ==  Token.NAME);  Node  assign  =  parent.getParent();	  return    Node.newString(Token.NAME,    cond.getString());    Node    assign    =    parent.getParent();    	non-compiled	[CE]  ';'  expected	54	None	replace
646	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  false);  Node  assign  =  parent.getParent();  [CE]  ';'  expected  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  false);  Node  assign  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  false);  Node  assign  =  parent.getParent();	  return    Node.newString(Token.NAME,    cond.getString());    Node    assign    =    parent.getParent();    	non-compiled	[CE]  ';'  expected	54	None	replace
647	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  true);  Node  assign  =  parent.getParent();  [CE]  ';'  expected  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  true);  Node  assign  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  true);  Node  assign  =  parent.getParent();	  return    Node.newString(Token.NAME,    cond.getString());    Node    assign    =    parent.getParent();    	non-compiled	[CE]  ';'  expected	54	None	replace
648	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n.getString());  Node  assign  =  parent.getParent();  [CE]  ';'  expected  [FE]                        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n.getString());  Node  assign  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n.getString());  Node  assign  =  parent.getParent();	  return    Node.newString(Token.NAME,    cond.getString());    Node    assign    =    parent.getParent();    	non-compiled	[CE]  ';'  expected	54	None	replace
649	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  null);  Node  assign  =  parent.getParent();  [CE]  ';'  expected  [FE]                          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  null);  Node  assign  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  null);  Node  assign  =  parent.getParent();	  return    Node.newString(Token.NAME,    cond.getString());    Node    assign    =    parent.getParent();    	non-compiled	[CE]  ';'  expected	54	None	replace
650	[BUG]  [BUGGY]  parent  ==  null?  null  :  parent.getFirstChild();  return(parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  ==  null?  null  :  parent.getFirstChild();  return(parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  ==  null?  null  :  parent.getFirstChild();  return(parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent.getFirstChild();    return(parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	128	None	replace
651	[BUG]  [BUGGY]  parent  =  parent.getFirstChild();  return(parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  =  parent.getFirstChild();  return(parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  =  parent.getFirstChild();  return(parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent.getFirstChild();    return(parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  ';'  expected	128	None	replace
652	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  parent  =  parent  ==  null)?  null  :  parent.getNext();  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  parent  =  parent  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getParent();  Node  parent  =  parent  ==  null)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    Node    parent    =    parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  ';'  expected	72	None	replace
653	[BUG]  [BUGGY]  Node  return  Node.newString(Token.NAME,  cond.getString());  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  return  Node.newString(Token.NAME,  cond.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  return  Node.newString(Token.NAME,  cond.getString());	  return    Node.newString(Token.NAME,    cond.getString());    Node    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  not  a  statement	49	None	replace
654	[BUG]  [BUGGY]  Node  return  Node.newString(Token.NAME,  cond.getFirstChild());  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  return  Node.newString(Token.NAME,  cond.getFirstChild());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  return  Node.newString(Token.NAME,  cond.getFirstChild());	  return    Node.newString(Token.NAME,    cond.getString());    Node    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  not  a  statement	49	None	replace
655	[BUG]  [BUGGY]  Node  return  Node.newString(Token.NAME,  cond.getString(),  parent.getType());  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  return  Node.newString(Token.NAME,  cond.getString(),  parent.getType());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  return  Node.newString(Token.NAME,  cond.getString(),  parent.getType());	  return    Node.newString(Token.NAME,    cond.getString());    Node    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  not  a  statement	49	None	replace
656	[BUG]  [BUGGY]  Node  return  Node.newString(Token.NAME,  parent.getString());  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  return  Node.newString(Token.NAME,  parent.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  return  Node.newString(Token.NAME,  parent.getString());	  return    Node.newString(Token.NAME,    cond.getString());    Node    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  not  a  statement	49	None	replace
657	[BUG]  [BUGGY]  Node  return  Node.newString(Token.NAME,  cond.getString(),  parent.getFirstChild());  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  return  Node.newString(Token.NAME,  cond.getString(),  parent.getFirstChild());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  return  Node.newString(Token.NAME,  cond.getString(),  parent.getFirstChild());	  return    Node.newString(Token.NAME,    cond.getString());    Node    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  not  a  statement	49	None	replace
658	[BUG]  [BUGGY]  Node  return  Node.newString(Token.NAME,  cond.getString(),  parent.getParent());  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  return  Node.newString(Token.NAME,  cond.getString(),  parent.getParent());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  return  Node.newString(Token.NAME,  cond.getString(),  parent.getParent());	  return    Node.newString(Token.NAME,    cond.getString());    Node    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  not  a  statement	49	None	replace
659	[BUG]  [BUGGY]  Node  return  Node.newString(Token.NAME,  cond.getString(),  parent);  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  return  Node.newString(Token.NAME,  cond.getString(),  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  return  Node.newString(Token.NAME,  cond.getString(),  parent);	  return    Node.newString(Token.NAME,    cond.getString());    Node    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  not  a  statement	49	None	replace
660	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond,  STANDARD_OBJECT_CONSTRUCTORS);	  return    Node.newString(Token.NAME,    cond);    	non-compiled	[CE]  ';'  expected	116	None	replace
661	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond,  var);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond,  var);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond,  var);	  return    Node.newString(Token.NAME,    cond);    	non-compiled	[CE]  ';'  expected	116	None	replace
662	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  var,  cond);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  var,  cond);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  var,  cond);	  return    Node.newString(Token.NAME,    cond);    	non-compiled	[CE]  ';'  expected	116	None	replace
663	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  parent  =  parent.getFirstChild();  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  parent  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  parent  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    parent    =    parent.getFirstChild();    	non-compiled	[CE]  ';'  expected	99	None	replace
664	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  parent  =  parent.getFirstChild();  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  parent  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  parent  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    parent    =    parent.getFirstChild();    	non-compiled	[CE]  ';'  expected	99	None	replace
665	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME,  parent.getFirstChild().getString());  Node  parent  =  parent.getFirstChild();  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME,  parent.getFirstChild().getString());  Node  parent  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME,  parent.getFirstChild().getString());  Node  parent  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    parent    =    parent.getFirstChild();    	non-compiled	[CE]  ';'  expected	99	None	replace
666	[BUG]  [BUGGY]  parent  ==  null?  null  :  parent.getFirstChild();  Node  parent  =  parent.getParent();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  ==  null?  null  :  parent.getFirstChild();  Node  parent  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  ==  null?  null  :  parent.getFirstChild();  Node  parent  =  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	127	None	replace
667	[BUG]  [BUGGY]  parent!=  null?  null  :  parent.getFirstChild();  Node  parent  =  parent.getParent();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent!=  null?  null  :  parent.getFirstChild();  Node  parent  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent!=  null?  null  :  parent.getFirstChild();  Node  parent  =  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	127	None	replace
668	[BUG]  [BUGGY]  parent  ==  null?  null  :  parent.getFirstChild();  node  =  parent.getParent();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  ==  null?  null  :  parent.getFirstChild();  node  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  ==  null?  null  :  parent.getFirstChild();  node  =  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	127	None	replace
669	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  n,  parent);  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  n,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  n,  parent);	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString(),    parent);    	non-compiled	[CE]  ';'  expected	26	None	replace
670	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString(),  parent);  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString(),  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n.getFirstChild().getString(),  parent);	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString(),    parent);    	non-compiled	[CE]  ';'  expected	26	None	replace
671	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  name1,  parent);  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  name1,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  name1,  parent);	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString(),    parent);    	non-compiled	[CE]  ';'  expected	26	None	replace
672	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  expr,  parent);  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  expr,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  expr,  parent);	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString(),    parent);    	non-compiled	[CE]  ';'  expected	26	None	replace
673	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent,  n);  [CE]  ';'  expected  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent,  n);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent,  n);	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString(),    parent);    	non-compiled	[CE]  ';'  expected	26	None	replace
674	[BUG]  [BUGGY]          Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]          Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	                Preconditions.checkArgument(parent.getType()    ==    Token.NAME);    Preconditions.checkArgument(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  not  a  statement	23	None	add
675	[BUG]  [BUGGY]          Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Node  parent  =  parent.getFirstChild();  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]          Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Node  parent  =  parent.getFirstChild();  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	                Preconditions.checkArgument(parent.getType()    ==    Token.NAME);    Node  parent  =  parent.getFirstChild();  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  not  a  statement	23	None	add
676	[BUG]  [BUGGY]          Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent.getType()!=  Token.NAME);  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]          Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent.getType()!=  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	                Preconditions.checkArgument(parent.getType()    ==    Token.NAME);    Preconditions.checkArgument(parent.getType()!=  Token.NAME);	  	non-compiled	[CE]  not  a  statement	23	None	add
677	[BUG]  [BUGGY]          Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Node  parent  =  parent.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]          RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]          Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Node  parent  =  parent.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	                Preconditions.checkArgument(parent.getType()    ==    Token.NAME);    Node  parent  =  parent.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  not  a  statement	23	None	add
678	[BUG]  [BUGGY]          Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Node  assign  =  parent.getFirstChild();  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]            RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]          Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Node  assign  =  parent.getFirstChild();  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	                Preconditions.checkArgument(parent.getType()    ==    Token.NAME);    Node  assign  =  parent.getFirstChild();  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  not  a  statement	23	None	add
679	[BUG]  [BUGGY]          Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Node  assign  =  parent.getFirstChild();  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]              RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]          Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Node  assign  =  parent.getFirstChild();  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	                Preconditions.checkArgument(parent.getType()    ==    Token.NAME);    Node  assign  =  parent.getFirstChild();  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);	  	non-compiled	[CE]  not  a  statement	23	None	add
680	[BUG]  [BUGGY]          Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent.getType()  >=  Token.NAME);  [CE]  not  a  statement  [FE]                RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]          Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent.getType()  >=  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	                Preconditions.checkArgument(parent.getType()    ==    Token.NAME);    Preconditions.checkArgument(parent.getType()  >=  Token.NAME);	  	non-compiled	[CE]  not  a  statement	23	None	add
681	[BUG]  [BUGGY]  Node  var  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  var.getFirstChild().getString());  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  var  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  var.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  var  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  var.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    var    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    var.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	171	None	replace
682	[BUG]  [BUGGY]  Node  parent  =  n.getFirstChild();  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  n.getFirstChild();  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  n.getFirstChild();  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    var    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    var.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	171	None	replace
683	[BUG]  [BUGGY]  Node  assign  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  assign.getFirstChild().getString());  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  assign.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assign  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  assign.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    var    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    var.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	171	None	replace
684	[BUG]  [BUGGY]  Node  var  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  var.getLastChild().getString());  [CE]  not  a  statement  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  var  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  var.getLastChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  var  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  var.getLastChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    var    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    var.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	171	None	replace
685	[BUG]  [BUGGY]  Return(parent  ==  null)?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Return(parent  ==  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Return(parent  ==  null)?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    Return(parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	233	None	replace
686	[BUG]  [BUGGY]  return  parent  ==  null?  null  :  parent.getType();  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent  ==  null?  null  :  parent.getType();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null?  null  :  parent.getType();	  return    parent    ==    null?    null    :    parent;    	non-compiled	[CE]  not  a  statement	181	None	replace
687	[BUG]  [BUGGY]  return  parent  ==  null?  parent.getParent()  :  NodeUtil.newLiteralValue(cond,  true));  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent  ==  null?  parent.getParent()  :  NodeUtil.newLiteralValue(cond,  true));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null?  parent.getParent()  :  NodeUtil.newLiteralValue(cond,  true));	  return    parent!=    null?    parent.getParent()    :    NodeUtil.newLiteralValue(cond,    false));    	non-compiled	[CE]  ';'  expected	237	None	replace
688	[BUG]  [BUGGY]  return  parent!=  null?  parent.getNext()  :  NodeUtil.newLiteralValue(cond,  false));  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent!=  null?  parent.getNext()  :  NodeUtil.newLiteralValue(cond,  false));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null?  parent.getNext()  :  NodeUtil.newLiteralValue(cond,  false));	  return    parent!=    null?    parent.getParent()    :    NodeUtil.newLiteralValue(cond,    false));    	non-compiled	[CE]  ';'  expected	237	None	replace
689	[BUG]  [BUGGY]  return  cond!=  null?  parent.getParent()  :  NodeUtil.newLiteralValue(cond,  false));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  cond!=  null?  parent.getParent()  :  NodeUtil.newLiteralValue(cond,  false));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  cond!=  null?  parent.getParent()  :  NodeUtil.newLiteralValue(cond,  false));	  return    parent!=    null?    parent.getParent()    :    NodeUtil.newLiteralValue(cond,    false));    	non-compiled	[CE]  ';'  expected	237	None	replace
690	[BUG]  [BUGGY]  return  parent!=  null?  parent.getType()  :  NodeUtil.newLiteralValue(cond,  false));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent!=  null?  parent.getType()  :  NodeUtil.newLiteralValue(cond,  false));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null?  parent.getType()  :  NodeUtil.newLiteralValue(cond,  false));	  return    parent!=    null?    parent.getParent()    :    NodeUtil.newLiteralValue(cond,    false));    	non-compiled	[CE]  ';'  expected	237	None	replace
691	[BUG]  [BUGGY]  Node  parent  =  parent.getParent();  return(parent  ==  null)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  parent.getParent();  return(parent  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  parent.getParent();  return(parent  ==  null)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    Node    parent    =    parent.getParent();    return(parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  not  a  statement	223	None	replace
692	[BUG]  [BUGGY]  parent  =  parent.getParent();  return(parent  ==  null)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  =  parent.getParent();  return(parent  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  =  parent.getParent();  return(parent  ==  null)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    Node    parent    =    parent.getParent();    return(parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  not  a  statement	223	None	replace
693	[BUG]  [BUGGY]  Node  parent  =  parent.getParent();  return(parent!=  null)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  parent.getParent();  return(parent!=  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  parent.getParent();  return(parent!=  null)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    Node    parent    =    parent.getParent();    return(parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  not  a  statement	223	None	replace
694	[BUG]  [BUGGY]  parent  =  parent.getParent();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  =  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getNext();    Node    parent    =    parent.getParent();    return(parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  not  a  statement	223	None	replace
695	[BUG]  [BUGGY]  return  parent!=  null?  parent.getNext()  :  null;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent!=  null?  parent.getNext()  :  null;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null?  parent.getNext()  :  null;	  return    parent!=    null?    parent.getParent()    :    null;    	non-compiled	[CE]  not  a  statement	241	None	replace
696	[BUG]  [BUGGY]  return  parent  ==  null?  parent.getParent()  :  null;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent  ==  null?  parent.getParent()  :  null;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null?  parent.getParent()  :  null;	  return    parent!=    null?    parent.getParent()    :    null;    	non-compiled	[CE]  not  a  statement	241	None	replace
697	[BUG]  [BUGGY]  return  parent!=  null?  parent.getLastChild()  :  null;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent!=  null?  parent.getLastChild()  :  null;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null?  parent.getLastChild()  :  null;	  return    parent!=    null?    parent.getParent()    :    null;    	non-compiled	[CE]  not  a  statement	241	None	replace
698	[BUG]  [BUGGY]  return  parent  ==  null?  parent.getNext()  :  null;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent  ==  null?  parent.getNext()  :  null;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null?  parent.getNext()  :  null;	  return    parent!=    null?    parent.getParent()    :    null;    	non-compiled	[CE]  not  a  statement	241	None	replace
699	[BUG]  [BUGGY]  return  parent!=  null?  parent.getFirstChild()  :  null;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent!=  null?  parent.getFirstChild()  :  null;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null?  parent.getFirstChild()  :  null;	  return    parent!=    null?    parent.getParent()    :    null;    	non-compiled	[CE]  not  a  statement	241	None	replace
700	[BUG]  [BUGGY]  return  parent!=  null?  parent.getType()  :  Node.newString(Token.NAME);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent!=  null?  parent.getType()  :  Node.newString(Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null?  parent.getType()  :  Node.newString(Token.NAME);	  return    parent!=    null?    parent.getParent()    :    null;    	non-compiled	[CE]  not  a  statement	241	None	replace
701	[BUG]  [BUGGY]  Node  parent  =  parent!=  null?  parent.getFirstChild()  :  parent.getParent();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  parent!=  null?  parent.getFirstChild()  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  parent!=  null?  parent.getFirstChild()  :  parent.getParent();	  return(parent!=    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	62	None	replace
702	[BUG]  [BUGGY]  Node  parent  =  parent!=  null?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  parent!=  null?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  parent!=  null?  null  :  parent.getFirstChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	62	None	replace
703	[BUG]  [BUGGY]  Node  var  =  cond.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString());  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  var  =  cond.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  var  =  cond.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString());	  return    Node.newString(Token.NAME,    cond.getString());    Node    var    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  not  a  statement	213	None	replace
704	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.EXPR_RESULT,  parent);  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.EXPR_RESULT,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.EXPR_RESULT,  parent);	  Preconditions.checkArgument(cond.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  not  a  statement	157	None	replace
705	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.EXPR_RESULT);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(cond.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  not  a  statement	157	None	replace
706	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(cond.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  not  a  statement	157	None	replace
707	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.EXPR_RESULT,  n);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.EXPR_RESULT,  n);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.EXPR_RESULT,  n);	  Preconditions.checkArgument(cond.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  not  a  statement	157	None	replace
708	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.EXPR_RESULT,  parent.getType());  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.EXPR_RESULT,  parent.getType());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.EXPR_RESULT,  parent.getType());	  Preconditions.checkArgument(cond.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  not  a  statement	157	None	replace
709	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.EXPR_RESULT);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(cond.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  not  a  statement	157	None	replace
710	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.EXPR_RESULT,  parent.getFirstChild());  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.EXPR_RESULT,  parent.getFirstChild());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.EXPR_RESULT,  parent.getFirstChild());	  Preconditions.checkArgument(cond.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  not  a  statement	157	None	replace
711	[BUG]  [BUGGY]  return  parent.getType()!=  Token.VAR?  parent.getType()  :  Token.NAME;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent.getType()!=  Token.VAR?  parent.getType()  :  Token.NAME;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent.getType()!=  Token.VAR?  parent.getType()  :  Token.NAME;	  return    parent.getType()    ==    Token.VAR?    parent.getType()    :    Token.NAME;    	non-compiled	[CE]  not  a  statement	135	None	replace
712	[BUG]  [BUGGY]  Return  parent.getType()  ==  Token.VAR?  parent.getType()  :  Token.NAME;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Return  parent.getType()  ==  Token.VAR?  parent.getType()  :  Token.NAME;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Return  parent.getType()  ==  Token.VAR?  parent.getType()  :  Token.NAME;	  return    parent.getType()    ==    Token.VAR?    parent.getType()    :    Token.NAME;    	non-compiled	[CE]  ';'  expected	135	None	replace
713	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.VAR?  parent.getType()  :  Token.NAME  +  1;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent.getType()  ==  Token.VAR?  parent.getType()  :  Token.NAME  +  1;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent.getType()  ==  Token.VAR?  parent.getType()  :  Token.NAME  +  1;	  return    parent.getType()    ==    Token.VAR?    parent.getType()    :    Token.NAME;    	non-compiled	[CE]  not  a  statement	135	None	replace
714	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.VAR?  cond.getType()  :  Token.NAME;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent.getType()  ==  Token.VAR?  cond.getType()  :  Token.NAME;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent.getType()  ==  Token.VAR?  cond.getType()  :  Token.NAME;	  return    parent.getType()    ==    Token.VAR?    parent.getType()    :    Token.NAME;    	non-compiled	[CE]  not  a  statement	135	None	replace
715	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.VAR?  parent.getType()  :  Token.NAME,  true;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent.getType()  ==  Token.VAR?  parent.getType()  :  Token.NAME,  true;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent.getType()  ==  Token.VAR?  parent.getType()  :  Token.NAME,  true;	  return    parent.getType()    ==    Token.VAR?    parent.getType()    :    Token.NAME;    	non-compiled	[CE]  ';'  expected	135	None	replace
716	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString()  +  1);  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString()  +  1);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n.getFirstChild().getString()  +  1);	  return    Node.newString(Token.NAME,    n.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	95	None	replace
717	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  cond.getParent();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  cond.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent!=  null);  Node  parent  =  cond.getParent();	  return    parent;    Node    parent    =    cond.getParent();    	non-compiled	[CE]  not  a  statement	84	None	replace
718	[BUG]  [BUGGY]  return  cond;  Node  parent  =  cond.getParent();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  cond;  Node  parent  =  cond.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  cond;  Node  parent  =  cond.getParent();	  return    parent;    Node    parent    =    cond.getParent();    	non-compiled	[CE]  not  a  statement	84	None	replace
719	[BUG]  [BUGGY]  return  parent;  Node  parent  =  cond.getNext();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent;  Node  parent  =  cond.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent;  Node  parent  =  cond.getNext();	  return    parent;    Node    parent    =    cond.getParent();    	non-compiled	[CE]  not  a  statement	84	None	replace
720	[BUG]  [BUGGY]  Node  assign  =  parent.getFirstChild();  Node  assign  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent.getFirstChild();  Node  assign  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node    assign    =    parent.getFirstChild();    Node  assign  =  parent.getFirstChild();	  	non-compiled	[CE]  not  a  statement	1	None	add
721	[BUG]  [BUGGY]  Node  assign  =  parent.getFirstChild();  Node  assign  =  parent.getLastChild();  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent.getFirstChild();  Node  assign  =  parent.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node    assign    =    parent.getFirstChild();    Node  assign  =  parent.getLastChild();	  	non-compiled	[CE]  not  a  statement	1	None	add
722	[BUG]  [BUGGY]  Node  assign  =  parent.getFirstChild();  AssertionFailedError  var  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent.getFirstChild();  AssertionFailedError  var  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node    assign    =    parent.getFirstChild();    AssertionFailedError  var  =  parent.getFirstChild();	  	non-compiled	[CE]  not  a  statement	1	None	add
723	[BUG]  [BUGGY]  Node  assign  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.REGEXP);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.REGEXP);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node    assign    =    parent.getFirstChild();    Preconditions.checkState(parent.getType()  ==  Token.REGEXP);	  	non-compiled	[CE]  not  a  statement	1	None	add
724	[BUG]  [BUGGY]  Node  assign  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.ASSIGN);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.ASSIGN);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node    assign    =    parent.getFirstChild();    Preconditions.checkState(parent.getType()  ==  Token.ASSIGN);	  	non-compiled	[CE]  not  a  statement	1	None	add
725	[BUG]  [BUGGY]  Node  assign  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node    assign    =    parent.getFirstChild();    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  not  a  statement	1	None	add
726	[BUG]  [BUGGY]  Node  assign  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node    assign    =    parent.getFirstChild();    Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  not  a  statement	1	None	add
727	[BUG]  [BUGGY]  Node  assign  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node    assign    =    parent.getFirstChild();    Preconditions.checkState(parent.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  not  a  statement	1	None	add
728	[BUG]  [BUGGY]  Node  parent  =  parent.getFirstChild();  (parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  parent.getFirstChild();  (parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  parent.getFirstChild();  (parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    (parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	246	None	replace
729	[BUG]  [BUGGY]  return  parent  ==  null?  null  :  parent.getFirstChild();  (parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent  ==  null?  null  :  parent.getFirstChild();  (parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null?  null  :  parent.getFirstChild();  (parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    (parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	246	None	replace
730	[BUG]  [BUGGY]  Node  parent  =  n.getFirstChild();  (parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  n.getFirstChild();  (parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  n.getFirstChild();  (parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    (parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	246	None	replace
731	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()    ==    Token.NAME);    Preconditions.checkArgument(cond.getType()  ==  Token.NAME);	  	non-compiled	[CE]  not  a  statement	11	None	add
732	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Node  assign  =  parent.getFirstChild();  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Node  assign  =  parent.getFirstChild();  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()    ==    Token.NAME);    Node  assign  =  parent.getFirstChild();  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);	  	non-compiled	[CE]  not  a  statement	11	None	add
733	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Preconditions.checkArgument(cond.getType()!=  Token.NAME);  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Preconditions.checkArgument(cond.getType()!=  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()    ==    Token.NAME);    Preconditions.checkArgument(cond.getType()!=  Token.NAME);	  	non-compiled	[CE]  not  a  statement	11	None	add
734	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Node  assign  =  parent.getParent();  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]          RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Node  assign  =  parent.getParent();  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()    ==    Token.NAME);    Node  assign  =  parent.getParent();  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);	  	non-compiled	[CE]  not  a  statement	11	None	add
735	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  }  else  {  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]            RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  }  else  {  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()    ==    Token.NAME);    Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  }  else  {  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);	  	non-compiled	[CE]  illegal  start  of  type	11	None	add
736	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  preconditions.checkArgument(cond.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]              RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  preconditions.checkArgument(cond.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()    ==    Token.NAME);    Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  preconditions.checkArgument(cond.getType()  ==  Token.NAME);	  	non-compiled	[CE]  illegal  start  of  type	11	None	add
737	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Preconditions.checkArgument(cond.getType()  >=  Token.NAME);  [CE]  not  a  statement  [FE]                RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Preconditions.checkArgument(cond.getType()  >=  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()    ==    Token.NAME);    Preconditions.checkArgument(cond.getType()  >=  Token.NAME);	  	non-compiled	[CE]  not  a  statement	11	None	add
738	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Preconditions.checkArgument(cond.getType()  >>  Token.NAME);  [CE]  not  a  statement  [FE]                  RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Preconditions.checkArgument(cond.getType()  >>  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()    ==    Token.NAME);    Preconditions.checkArgument(cond.getType()  >>  Token.NAME);	  	non-compiled	[CE]  not  a  statement	11	None	add
739	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  Cond.STANDARD_OBJECT_CONSTRUCTORS,  true);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  Cond.STANDARD_OBJECT_CONSTRUCTORS,  true);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  Cond.STANDARD_OBJECT_CONSTRUCTORS,  true);	  return    Node.newString(Token.NAME,    Cond.STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  not  a  statement	207	None	replace
740	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  Cond.STANDARD_OBJECT_CONSTRUCTORS,  false);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  Cond.STANDARD_OBJECT_CONSTRUCTORS,  false);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  Cond.STANDARD_OBJECT_CONSTRUCTORS,  false);	  return    Node.newString(Token.NAME,    Cond.STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  not  a  statement	207	None	replace
741	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  Cond.STANDARD_OBJECT_CONSTRUCTORS,  n);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  Cond.STANDARD_OBJECT_CONSTRUCTORS,  n);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  Cond.STANDARD_OBJECT_CONSTRUCTORS,  n);	  return    Node.newString(Token.NAME,    Cond.STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  not  a  statement	207	None	replace
742	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  Cond.STANDARD_OBJECT_CONSTRUCTORS,  cond);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  Cond.STANDARD_OBJECT_CONSTRUCTORS,  cond);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  Cond.STANDARD_OBJECT_CONSTRUCTORS,  cond);	  return    Node.newString(Token.NAME,    Cond.STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  not  a  statement	207	None	replace
743	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  Cond.INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  Cond.INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  Cond.INVALID_REGULAR_EXPRESSION_FLAGS);	  return    Node.newString(Token.NAME,    Cond.STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  not  a  statement	207	None	replace
744	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.FUNCTION;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent.getType()  ==  Token.FUNCTION;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent.getType()  ==  Token.FUNCTION;	  return    parent;    return    parent;    	non-compiled	[CE]  not  a  statement	226	None	replace
745	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  parent.getString()  :  Node.newString( "string "));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent.getType()  ==  Token.NAME?  parent.getString()  :  Node.newString( "string "));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent.getType()  ==  Token.NAME?  parent.getString()  :  Node.newString( "string "));	  return    parent;    return    parent;    	non-compiled	[CE]  	226	None	replace
746	[BUG]  [BUGGY]  Node  n  =  parent.getParent();  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  n  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  n  =  parent.getParent();	  return    Node.newString(Token.NAME,    cond.getString());    Node    var    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	52	None	replace
747	[BUG]  [BUGGY]  Node  v  =  parent.getParent();  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  v  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  v  =  parent.getParent();	  return    Node.newString(Token.NAME,    cond.getString());    Node    var    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	52	None	replace
748	[BUG]  [BUGGY]  Node  parent  =  parent  ==  null?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  parent  ==  null?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  parent  ==  null?  null  :  parent.getFirstChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent!=    null?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	59	None	replace
749	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  parent!=  null?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  parent!=  null?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent!=  null);  Node  parent  =  parent!=  null?  null  :  parent.getFirstChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent!=    null?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	59	None	replace
750	[BUG]  [BUGGY]  Node  assign  =  parent.getFirstChild().getNext();  [CE]  not  a  statement  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent.getFirstChild().getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assign  =  parent.getFirstChild().getNext();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    assign    =    parent.getFirstChild().getNext();    	non-compiled	[CE]  not  a  statement	106	None	replace
751	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  assign  =  parent.getFirstChild().getNext();  [CE]  not  a  statement  [FE]                        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  assign  =  parent.getFirstChild().getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  assign  =  parent.getFirstChild().getNext();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    assign    =    parent.getFirstChild().getNext();    	non-compiled	[CE]  not  a  statement	106	None	replace
752	[BUG]  [BUGGY]  node  =  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  assign  =  parent.getFirstChild().getNext();  [CE]  not  a  statement  [FE]                          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  node  =  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  assign  =  parent.getFirstChild().getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	node  =  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  assign  =  parent.getFirstChild().getNext();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    assign    =    parent.getFirstChild().getNext();    	non-compiled	[CE]  not  a  statement	106	None	replace
753	[BUG]  [BUGGY]  node  =  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  assign  =  parent.getFirstChild().getNext();  [CE]  not  a  statement  [FE]                            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  node  =  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  assign  =  parent.getFirstChild().getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	node  =  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  assign  =  parent.getFirstChild().getNext();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    assign    =    parent.getFirstChild().getNext();    	non-compiled	[CE]  not  a  statement	106	None	replace
754	[BUG]  [BUGGY]  Assign.newString(Token.NAME,  n.getFirstChild().getString());  Node  assign  =  parent.getFirstChild().getNext();  [CE]  not  a  statement  [FE]                              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Assign.newString(Token.NAME,  n.getFirstChild().getString());  Node  assign  =  parent.getFirstChild().getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Assign.newString(Token.NAME,  n.getFirstChild().getString());  Node  assign  =  parent.getFirstChild().getNext();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    assign    =    parent.getFirstChild().getNext();    	non-compiled	[CE]  not  a  statement	106	None	replace
755	[BUG]  [BUGGY]  node  =  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  assignName);  Node  assign  =  parent.getFirstChild().getNext();  [CE]  not  a  statement  [FE]                                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  node  =  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  assignName);  Node  assign  =  parent.getFirstChild().getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	node  =  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  assignName);  Node  assign  =  parent.getFirstChild().getNext();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    assign    =    parent.getFirstChild().getNext();    	non-compiled	[CE]  not  a  statement	106	None	replace
756	[BUG]  [BUGGY]  Node  assign  =  n.getFirstChild().getNext();  [CE]  not  a  statement  [FE]                                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  n.getFirstChild().getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assign  =  n.getFirstChild().getNext();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    assign    =    parent.getFirstChild().getNext();    	non-compiled	[CE]  not  a  statement	106	None	replace
757	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  Node  assign  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Node  assign  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent!=  null);  Node  assign  =  parent.getFirstChild();	  return    parent;    Node    assign    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	228	None	replace
758	[BUG]  [BUGGY]  return  assign;  Node  assign  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  assign;  Node  assign  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  assign;  Node  assign  =  parent.getFirstChild();	  return    parent;    Node    assign    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	228	None	replace
759	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  Node  assign  =  n.getFirstChild();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Node  assign  =  n.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent!=  null);  Node  assign  =  n.getFirstChild();	  return    parent;    Node    assign    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	228	None	replace
760	[BUG]  [BUGGY]  return(parent  >=  null)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  >=  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  >=  null)?  null  :  parent.getNext();	  return(parent!=    null)?    null    :    parent.getNext();    return(parent!=    null)?    null    :    parent.getNext();    	non-compiled	[CE]  not  a  statement	142	None	replace
761	[BUG]  [BUGGY]  Node  parent  =  n.getNext();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  n.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  n.getNext();	  return    parent;    Node    parent    =    n.getNext();    	non-compiled	[CE]  not  a  statement	87	None	replace
762	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  n.getNext();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  n.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent!=  null);  Node  parent  =  n.getNext();	  return    parent;    Node    parent    =    n.getNext();    	non-compiled	[CE]  not  a  statement	87	None	replace
763	[BUG]  [BUGGY]  Preconditions.checkState(parent  ==  null);  Node  parent  =  n.getNext();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent  ==  null);  Node  parent  =  n.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent  ==  null);  Node  parent  =  n.getNext();	  return    parent;    Node    parent    =    n.getNext();    	non-compiled	[CE]  not  a  statement	87	None	replace
764	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(parent,  null);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.newLiteralValue(parent,  null);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(parent,  null);	  return    NodeUtil.newLiteralValue(cond,    null);    	non-compiled	[CE]  not  a  statement	42	None	replace
765	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(cond,  parent);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.newLiteralValue(cond,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(cond,  parent);	  return    NodeUtil.newLiteralValue(cond,    null);    	non-compiled	[CE]  not  a  statement	42	None	replace
766	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(n,  null);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.newLiteralValue(n,  null);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(n,  null);	  return    NodeUtil.newLiteralValue(cond,    null);    	non-compiled	[CE]  not  a  statement	42	None	replace
767	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(cond,  null,  parent);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.newLiteralValue(cond,  null,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(cond,  null,  parent);	  return    NodeUtil.newLiteralValue(cond,    null);    	non-compiled	[CE]  not  a  statement	42	None	replace
768	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(cond,  n);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.newLiteralValue(cond,  n);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(cond,  n);	  return    NodeUtil.newLiteralValue(cond,    null);    	non-compiled	[CE]  not  a  statement	42	None	replace
769	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(n,  cond);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.newLiteralValue(n,  cond);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(n,  cond);	  return    NodeUtil.newLiteralValue(cond,    null);    	non-compiled	[CE]  not  a  statement	42	None	replace
770	[BUG]  [BUGGY]  return  parent!=  null?  null  :  parent.getType();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent!=  null?  null  :  parent.getType();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null?  null  :  parent.getType();	  return    parent!=    null?    null    :    parent;    	non-compiled	[CE]  not  a  statement	184	None	replace
771	[BUG]  [BUGGY]  Node  lhs  =  cond.getLastChild();  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  lhs  =  cond.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  lhs  =  cond.getLastChild();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    lhs    =    cond.getLastChild();    	non-compiled	[CE]  not  a  statement	20	None	replace
772	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent);  Node  lhs  =  cond.getLastChild();  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent);  Node  lhs  =  cond.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent);  Node  lhs  =  cond.getLastChild();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    lhs    =    cond.getLastChild();    	non-compiled	[CE]  not  a  statement	20	None	replace
773	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  null);  Node  lhs  =  cond.getLastChild();  [CE]  not  a  statement  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  null);  Node  lhs  =  cond.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  null);  Node  lhs  =  cond.getLastChild();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    lhs    =    cond.getLastChild();    	non-compiled	[CE]  not  a  statement	20	None	replace
774	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  n);  Node  lhs  =  cond.getLastChild();  [CE]  not  a  statement  [FE]                        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  n);  Node  lhs  =  cond.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  n);  Node  lhs  =  cond.getLastChild();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    lhs    =    cond.getLastChild();    	non-compiled	[CE]  not  a  statement	20	None	replace
775	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  Cond.STANDARD_OBJECT_CONSTRUCTORS);  [CE]  not  a  statement  [FE]                          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  Cond.STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  Cond.STANDARD_OBJECT_CONSTRUCTORS);	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    lhs    =    cond.getLastChild();    	non-compiled	[CE]  not  a  statement	20	None	replace
776	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.toString(),  parent);  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.toString(),  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.toString(),  parent);	  return    Node.newString(Token.NAME,    cond.toString());    	non-compiled	[CE]  not  a  statement	174	None	replace
777	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.toString());  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.toString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.toString());	  return    Node.newString(Token.NAME,    cond.toString());    	non-compiled	[CE]  not  a  statement	174	None	replace
778	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.toString(),  false);  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.toString(),  false);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.toString(),  false);	  return    Node.newString(Token.NAME,    cond.toString());    	non-compiled	[CE]  not  a  statement	174	None	replace
779	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n.toString());  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n.toString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n.toString());	  return    Node.newString(Token.NAME,    cond.toString());    	non-compiled	[CE]  not  a  statement	174	None	replace
780	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.toString(),  true);  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.toString(),  true);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.toString(),  true);	  return    Node.newString(Token.NAME,    cond.toString());    	non-compiled	[CE]  not  a  statement	174	None	replace
781	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.toString(),  n);  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.toString(),  n);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.toString(),  n);	  return    Node.newString(Token.NAME,    cond.toString());    	non-compiled	[CE]  not  a  statement	174	None	replace
782	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  n.getFirstChild();  return  parent;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  n.getFirstChild();  return  parent;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent!=  null);  Node  parent  =  n.getFirstChild();  return  parent;	  return    parent;    Node    parent    =    n.getFirstChild();    return    parent;    	non-compiled	[CE]  not  a  statement	85	None	replace
783	[BUG]  [BUGGY]  parent  =  n.getFirstChild();  return  parent;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  =  n.getFirstChild();  return  parent;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  =  n.getFirstChild();  return  parent;	  return    parent;    Node    parent    =    n.getFirstChild();    return    parent;    	non-compiled	[CE]  not  a  statement	85	None	replace
784	[BUG]  [BUGGY]  Preconditions.checkState(parent  ==  null);  Node  parent  =  n.getFirstChild();  return  parent;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent  ==  null);  Node  parent  =  n.getFirstChild();  return  parent;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent  ==  null);  Node  parent  =  n.getFirstChild();  return  parent;	  return    parent;    Node    parent    =    n.getFirstChild();    return    parent;    	non-compiled	[CE]  not  a  statement	85	None	replace
785	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  parent  =  n.getFirstChild();  return  parent;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent!=  null);  parent  =  n.getFirstChild();  return  parent;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent!=  null);  parent  =  n.getFirstChild();  return  parent;	  return    parent;    Node    parent    =    n.getFirstChild();    return    parent;    	non-compiled	[CE]  not  a  statement	85	None	replace
786	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.EXPR_RESULT);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(parent.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	14	None	replace
787	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);	  Preconditions.checkArgument(parent.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	14	None	replace
788	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.VAR);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.VAR);	  Preconditions.checkArgument(parent.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	14	None	replace
789	[BUG]  [BUGGY]  Node  assignName  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  assignName.getFirstChild().getString());  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assignName  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  assignName.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assignName  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  assignName.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    assign    =    parent.getFirstChild().getNext();    return    Node.newString(Token.NAME,    assign.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	254	None	replace
790	[BUG]  [BUGGY]  Node  assignName  =  parent.getFirstChild().getNext();  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assignName  =  parent.getFirstChild().getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assignName  =  parent.getFirstChild().getNext();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    assign    =    parent.getFirstChild().getNext();    return    Node.newString(Token.NAME,    assign.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	254	None	replace
791	[BUG]  [BUGGY]  Node  assignName  =  n.getFirstChild().getNext();  return  Node.newString(Token.NAME,  assignName.getFirstChild().getString());  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assignName  =  n.getFirstChild().getNext();  return  Node.newString(Token.NAME,  assignName.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assignName  =  n.getFirstChild().getNext();  return  Node.newString(Token.NAME,  assignName.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    assign    =    parent.getFirstChild().getNext();    return    Node.newString(Token.NAME,    assign.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	254	None	replace
792	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	10	None	replace
793	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.NAME);  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()!=  Token.NAME);	  Preconditions.checkState(parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	10	None	replace
794	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);	  Preconditions.checkState(parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	10	None	replace
795	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.GETPROP);  [CE]  not  a  statement  [FE]          RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.GETPROP);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.GETPROP);	  Preconditions.checkState(parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	10	None	replace
796	[BUG]  [BUGGY]  return  parent!=  null?  null  :  parent.getFirstChild();  if(parent!=  null)?  null  :  parent.getFirstChild();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent!=  null?  null  :  parent.getFirstChild();  if(parent!=  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null?  null  :  parent.getFirstChild();  if(parent!=  null)?  null  :  parent.getFirstChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    if(parent!=    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	208	None	replace
797	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  if(parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  if(parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=  null)?  null  :  parent.getFirstChild();  if(parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    if(parent!=    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	208	None	replace
798	[BUG]  [BUGGY]  parent  ==  null?  null  :  parent.getFirstChild();  if(parent!=  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  ==  null?  null  :  parent.getFirstChild();  if(parent!=  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  ==  null?  null  :  parent.getFirstChild();  if(parent!=  null)?  null  :  parent.getFirstChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    if(parent!=    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	208	None	replace
799	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getLastChild();  Node  parent  =  parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getLastChild();  Node  parent  =  parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getLastChild();  Node  parent  =  parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  ';'  expected	122	None	replace
800	[BUG]  [BUGGY]  Node  assign  =  parent.getParent();  Node  assign  =  parent.getParent();  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent.getParent();  Node  assign  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node    assign    =    parent.getParent();    Node  assign  =  parent.getParent();	  	non-compiled	[CE]  not  a  statement	5	None	add
801	[BUG]  [BUGGY]  Node  assign  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.REGEXP  ||  parent.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.REGEXP  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node    assign    =    parent.getParent();    Preconditions.checkState(parent.getType()  ==  Token.REGEXP  ||  parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  not  a  statement	5	None	add
802	[BUG]  [BUGGY]  Node  assign  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node    assign    =    parent.getParent();    Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  not  a  statement	5	None	add
803	[BUG]  [BUGGY]  Node  assign  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node    assign    =    parent.getParent();    Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  not  a  statement	5	None	add
804	[BUG]  [BUGGY]  Node  assign  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.REGEXP)  {  Node  assign  =  parent.getParent();  [CE]  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.REGEXP)  {  Node  assign  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node    assign    =    parent.getParent();    Preconditions.checkState(parent.getType()  ==  Token.REGEXP)  {  Node  assign  =  parent.getParent();	  	non-compiled	[CE]  	5	None	add
805	[BUG]  [BUGGY]  Node  assign  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.REGEXP  ||  parent.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.REGEXP  ||  parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node    assign    =    parent.getParent();    Preconditions.checkState(parent.getType()  ==  Token.REGEXP  ||  parent.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  not  a  statement	5	None	add
806	[BUG]  [BUGGY]  Node  assign  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node    assign    =    parent.getParent();    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  not  a  statement	5	None	add
807	[BUG]  [BUGGY]  Node  assign  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  assign  =  parent.getParent();  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  assign  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node    assign    =    parent.getParent();    Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  assign  =  parent.getParent();	  	non-compiled	[CE]  not  a  statement	5	None	add
808	[BUG]  [BUGGY]  return  assign;  Node  assign  =  n.getFirstChild();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  assign;  Node  assign  =  n.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  assign;  Node  assign  =  n.getFirstChild();	  return    parent;    Node    assign    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	227	None	replace
809	[BUG]  [BUGGY]  return  n;  Node  assign  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  n;  Node  assign  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  n;  Node  assign  =  parent.getFirstChild();	  return    parent;    Node    assign    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	227	None	replace
810	[BUG]  [BUGGY]  return  n.getFirstChild();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  n.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  n.getFirstChild();	  return    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	133	None	replace
811	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.CALL?  parent.getFirstChild()  :  Node.newString( "string "));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent.getType()  ==  Token.CALL?  parent.getFirstChild()  :  Node.newString( "string "));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent.getType()  ==  Token.CALL?  parent.getFirstChild()  :  Node.newString( "string "));	  return    parent.getFirstChild();    	non-compiled	[CE]  	133	None	replace
812	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  parent.getFirstChild()  :  Node.newString( "string "));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent.getType()  ==  Token.NAME?  parent.getFirstChild()  :  Node.newString( "string "));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent.getType()  ==  Token.NAME?  parent.getFirstChild()  :  Node.newString( "string "));	  return    parent.getFirstChild();    	non-compiled	[CE]  	133	None	replace
813	[BUG]  [BUGGY]  return  cond.getFirstChild();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  cond.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  cond.getFirstChild();	  return    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	133	None	replace
814	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.FUNCTION?  parent.getFirstChild()  :  Node.newString( "string "));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent.getType()  ==  Token.FUNCTION?  parent.getFirstChild()  :  Node.newString( "string "));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent.getType()  ==  Token.FUNCTION?  parent.getFirstChild()  :  Node.newString( "string "));	  return    parent.getFirstChild();    	non-compiled	[CE]  	133	None	replace
815	[BUG]  [BUGGY]  Node  parent  nscut  =  parent.getParent();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  nscut  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  nscut  =  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    Node    parent    născut    =    parent.getParent();    	non-compiled	[CE]  ';'  expected	188	None	replace
816	[BUG]  [BUGGY]  Node  nscut  =  parent.getParent();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  nscut  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  nscut  =  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    Node    parent    născut    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	188	None	replace
817	[BUG]  [BUGGY]  Node  parentscut  =  parent.getParent();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parentscut  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parentscut  =  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    Node    parent    născut    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	188	None	replace
818	[BUG]  [BUGGY]  nscut  =  parent.getParent();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  nscut  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	nscut  =  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    Node    parent    născut    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	188	None	replace
819	[BUG]  [BUGGY]  return  parent!=  null?  null  :  parent.getParent();  if(parent!=  null)?  null  :  parent.getParent();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent!=  null?  null  :  parent.getParent();  if(parent!=  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null?  null  :  parent.getParent();  if(parent!=  null)?  null  :  parent.getParent();	  return(parent!=    null)?    null    :    parent.getParent();    if(parent!=    null)?    null    :    parent.getParent();    	non-compiled	[CE]  illegal  start  of  expression	178	None	replace
820	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getParent();  if(parent  ==  null)?  null  :  parent.getParent();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent!=  null)?  null  :  parent.getParent();  if(parent  ==  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=  null)?  null  :  parent.getParent();  if(parent  ==  null)?  null  :  parent.getParent();	  return(parent!=    null)?    null    :    parent.getParent();    if(parent!=    null)?    null    :    parent.getParent();    	non-compiled	[CE]  illegal  start  of  expression	178	None	replace
821	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  (parent  ==  null)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  (parent  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getParent();  (parent  ==  null)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    (parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  not  a  statement	192	None	replace
822	[BUG]  [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.FUNCTION,  parent);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.FUNCTION,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(cond.getType()  ==  Token.FUNCTION,  parent);	  Preconditions.checkState(cond.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	159	None	replace
823	[BUG]  [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(cond.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(cond.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	159	None	replace
824	[BUG]  [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.FUNCTION,  n);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.FUNCTION,  n);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(cond.getType()  ==  Token.FUNCTION,  n);	  Preconditions.checkState(cond.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	159	None	replace
825	[BUG]  [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.EXPR_RESULT);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(cond.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(cond.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	159	None	replace
826	[BUG]  [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(cond.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME);	  Preconditions.checkState(cond.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	159	None	replace
827	[BUG]  [BUGGY]  parent!=  null)  {  return  parent.getNext();  }  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent!=  null)  {  return  parent.getNext();  }  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent!=  null)  {  return  parent.getNext();  }	  return(parent!=    null)?    null    :    parent.getNext();    Node    parent    =    parent.getParent();    if(parent!=    null)    {    return(parent!=    null)?    null    :    parent.getNext();    }    	non-compiled	[CE]  not  a  statement	147	None	replace
828	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent!=  null);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent!=  null);	  return(parent!=    null)?    null    :    parent.getNext();    Node    parent    =    parent.getParent();    if(parent!=    null)    {    return(parent!=    null)?    null    :    parent.getNext();    }    	non-compiled	[CE]  not  a  statement	147	None	replace
829	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  node.getLastChild().getString());  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  node.getLastChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  node.getLastChild().getString());	  return    Node.newString(Token.NAME,    parent.getLastChild().getString());    	non-compiled	[CE]  not  a  statement	97	None	replace
830	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  CondUtil.getLastChild().getString());  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  CondUtil.getLastChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  CondUtil.getLastChild().getString());	  return    Node.newString(Token.NAME,    parent.getLastChild().getString());    	non-compiled	[CE]  not  a  statement	97	None	replace
831	[BUG]  [BUGGY]  Node  parent  =  parent.getParent();  return(parent!=  null)?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  parent.getParent();  return(parent!=  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  parent.getParent();  return(parent!=  null)?  null  :  parent.getParent();	  return(parent!=    null)?    null    :    parent.getParent();    Node    parent    =    parent.getParent();    return(parent!=    null)?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	113	None	replace
832	[BUG]  [BUGGY]  Node  parent  =  parent.getParent();  return(parent  ==  null)?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  parent.getParent();  return(parent  ==  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  parent.getParent();  return(parent  ==  null)?  null  :  parent.getParent();	  return(parent!=    null)?    null    :    parent.getParent();    Node    parent    =    parent.getParent();    return(parent!=    null)?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	113	None	replace
833	[BUG]  [BUGGY]  Node  toString  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  toString(parent.getFirstChild().getString()));  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  toString  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  toString(parent.getFirstChild().getString()));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  toString  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  toString(parent.getFirstChild().getString()));	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    toString    =    parent.getFirstChild().getString();    return    Node.newString(Token.NAME,    toString(parent.getFirstChild().getString()));    	non-compiled	[CE]  not  a  statement	170	None	replace
834	[BUG]  [BUGGY]  Node  toString  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  toString(n.getFirstChild().getString()));  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  toString  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  toString(n.getFirstChild().getString()));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  toString  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  toString(n.getFirstChild().getString()));	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    toString    =    parent.getFirstChild().getString();    return    Node.newString(Token.NAME,    toString(parent.getFirstChild().getString()));    	non-compiled	[CE]  not  a  statement	170	None	replace
835	[BUG]  [BUGGY]  Node  toString  =  n.getFirstChild().getString();  return  Node.newString(Token.NAME,  toString(parent.getFirstChild().getString()));  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  toString  =  n.getFirstChild().getString();  return  Node.newString(Token.NAME,  toString(parent.getFirstChild().getString()));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  toString  =  n.getFirstChild().getString();  return  Node.newString(Token.NAME,  toString(parent.getFirstChild().getString()));	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    toString    =    parent.getFirstChild().getString();    return    Node.newString(Token.NAME,    toString(parent.getFirstChild().getString()));    	non-compiled	[CE]  not  a  statement	170	None	replace
836	[BUG]  [BUGGY]  Node  toString  =  parent.getLastChild().getString();  return  Node.newString(Token.NAME,  toString(parent.getFirstChild().getString()));  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  toString  =  parent.getLastChild().getString();  return  Node.newString(Token.NAME,  toString(parent.getFirstChild().getString()));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  toString  =  parent.getLastChild().getString();  return  Node.newString(Token.NAME,  toString(parent.getFirstChild().getString()));	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    toString    =    parent.getFirstChild().getString();    return    Node.newString(Token.NAME,    toString(parent.getFirstChild().getString()));    	non-compiled	[CE]  not  a  statement	170	None	replace
837	[BUG]  [BUGGY]  Node  toString  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  toString(cond.getFirstChild().getString()));  [CE]  not  a  statement  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  toString  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  toString(cond.getFirstChild().getString()));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  toString  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  toString(cond.getFirstChild().getString()));	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    toString    =    parent.getFirstChild().getString();    return    Node.newString(Token.NAME,    toString(parent.getFirstChild().getString()));    	non-compiled	[CE]  not  a  statement	170	None	replace
838	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  STANDARD_OBJECT_TYPE);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  STANDARD_OBJECT_TYPE);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild(),  STANDARD_OBJECT_TYPE);	  return    Node.newString(Token.NAME,    cond.getFirstChild(),    STRICT_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  not  a  statement	71	None	replace
839	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  PROPERTY);  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  PROPERTY);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild(),  PROPERTY);	  return    Node.newString(Token.NAME,    cond.getFirstChild(),    STRICT_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  not  a  statement	71	None	replace
840	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  parent  ==  null)?  null  :  parent.getParent();  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  parent  ==  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent!=  null);  Node  parent  =  parent  ==  null)?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    Node    parent    =    parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  ';'  expected	32	None	replace
841	[BUG]  [BUGGY]  Node  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent);  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent);	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	15	None	replace
842	[BUG]  [BUGGY]  Node  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent.getType());  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent.getType());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent.getType());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	15	None	replace
843	[BUG]  [BUGGY]  Node  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent.getLastChild());  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent.getLastChild());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent.getLastChild());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	15	None	replace
844	[BUG]  [BUGGY]  Node  v  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  v  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  v  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    var    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	101	None	replace
845	[BUG]  [BUGGY]  var  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  var  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	var  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    var    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	101	None	replace
846	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  parent!=  null?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  parent!=  null?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent!=  null);  Node  parent  =  parent!=  null?  null  :  parent.getParent();	  return(parent!=    null)?    null    :    parent.getParent();    Node    parent    =    parent!=    null?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	109	None	replace
847	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME);	          Preconditions.checkArgument(parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	24	None	replace
848	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.FUNCTION);	          Preconditions.checkArgument(parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	24	None	replace
849	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR);	          Preconditions.checkArgument(parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	24	None	replace
850	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond,  Cond.STANDARD_OBJECT_CONSTRUCTORS);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond,  Cond.STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond,  Cond.STANDARD_OBJECT_CONSTRUCTORS);	  return    Node.newString(Token.NAME,    Cond.STANDARD_OBJECT_CONSTRUCTORS,    parent);    	non-compiled	[CE]  not  a  statement	204	None	replace
851	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  Cond.STANDARD_OBJECT_CONSTRUCTORS,  parent,  n);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  Cond.STANDARD_OBJECT_CONSTRUCTORS,  parent,  n);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  Cond.STANDARD_OBJECT_CONSTRUCTORS,  parent,  n);	  return    Node.newString(Token.NAME,    Cond.STANDARD_OBJECT_CONSTRUCTORS,    parent);    	non-compiled	[CE]  not  a  statement	204	None	replace
852	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  Cond.STANDARD_OBJECT_CONSTRUCTORS,  expr);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  Cond.STANDARD_OBJECT_CONSTRUCTORS,  expr);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  Cond.STANDARD_OBJECT_CONSTRUCTORS,  expr);	  return    Node.newString(Token.NAME,    Cond.STANDARD_OBJECT_CONSTRUCTORS,    parent);    	non-compiled	[CE]  not  a  statement	204	None	replace
853	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  Cond.STANDARD_OBJECT_CONSTRUCTORS,  parent,  false);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  Cond.STANDARD_OBJECT_CONSTRUCTORS,  parent,  false);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  Cond.STANDARD_OBJECT_CONSTRUCTORS,  parent,  false);	  return    Node.newString(Token.NAME,    Cond.STANDARD_OBJECT_CONSTRUCTORS,    parent);    	non-compiled	[CE]  not  a  statement	204	None	replace
854	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  Cond.STANDARD_OBJECT_CONSTRUCTORS,  parent,  expr);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  Cond.STANDARD_OBJECT_CONSTRUCTORS,  parent,  expr);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  Cond.STANDARD_OBJECT_CONSTRUCTORS,  parent,  expr);	  return    Node.newString(Token.NAME,    Cond.STANDARD_OBJECT_CONSTRUCTORS,    parent);    	non-compiled	[CE]  not  a  statement	204	None	replace
855	[BUG]  [BUGGY]  Node  assign  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  assign.getFirstChild().getString());  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  assign.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assign  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  assign.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    thenAssign    =    parent.getFirstChild().getNext();    return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	250	None	replace
856	[BUG]  [BUGGY]  Node  thenAssign  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  assign.getFirstChild().getString());  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  thenAssign  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  assign.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  thenAssign  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  assign.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    thenAssign    =    parent.getFirstChild().getNext();    return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	250	None	replace
857	[BUG]  [BUGGY]  Node  thenBranch  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  thenBranch.getFirstChild().getString());  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  thenBranch  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  thenBranch.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  thenBranch  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  thenBranch.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    thenAssign    =    parent.getFirstChild().getNext();    return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	250	None	replace
858	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(cond,  false,  cond);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.newLiteralValue(cond,  false,  cond);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(cond,  false,  cond);	  return    NodeUtil.newLiteralValue(cond,    false,    parent);    	non-compiled	[CE]  not  a  statement	41	None	replace
859	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(cond,  false,  parent,  n);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.newLiteralValue(cond,  false,  parent,  n);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(cond,  false,  parent,  n);	  return    NodeUtil.newLiteralValue(cond,    false,    parent);    	non-compiled	[CE]  not  a  statement	41	None	replace
860	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(cond,  false,  parent,  true);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.newLiteralValue(cond,  false,  parent,  true);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(cond,  false,  parent,  true);	  return    NodeUtil.newLiteralValue(cond,    false,    parent);    	non-compiled	[CE]  not  a  statement	41	None	replace
861	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(cond,  false,  parent,  parent);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.newLiteralValue(cond,  false,  parent,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(cond,  false,  parent,  parent);	  return    NodeUtil.newLiteralValue(cond,    false,    parent);    	non-compiled	[CE]  not  a  statement	41	None	replace
862	[BUG]  [BUGGY]  Node  cond  =  cond.getFirstChild();  [CE]  not  a  statement  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  cond  =  cond.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  cond  =  cond.getFirstChild();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    var    =    cond.getFirstChild();    	non-compiled	[CE]  not  a  statement	22	None	replace
863	[BUG]  [BUGGY]  Node  thenOp  =  cond.getFirstChild();  [CE]  not  a  statement  [FE]                        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  thenOp  =  cond.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  thenOp  =  cond.getFirstChild();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    var    =    cond.getFirstChild();    	non-compiled	[CE]  not  a  statement	22	None	replace
864	[BUG]  [BUGGY]  Node  var  =  parent.getParent();  return  Node.newString(Token.NAME,  var.getString());  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  var  =  parent.getParent();  return  Node.newString(Token.NAME,  var.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  var  =  parent.getParent();  return  Node.newString(Token.NAME,  var.getString());	  return    Node.newString(Token.NAME,    cond.getString());    Node    var    =    parent.getParent();    return    Node.newString(Token.NAME,    var.getString());    	non-compiled	[CE]  not  a  statement	196	None	replace
865	[BUG]  [BUGGY]  Node  var  =  cond.getParent();  return  Node.newString(Token.NAME,  var.getString());  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  var  =  cond.getParent();  return  Node.newString(Token.NAME,  var.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  var  =  cond.getParent();  return  Node.newString(Token.NAME,  var.getString());	  return    Node.newString(Token.NAME,    cond.getString());    Node    var    =    parent.getParent();    return    Node.newString(Token.NAME,    var.getString());    	non-compiled	[CE]  not  a  statement	196	None	replace
866	[BUG]  [BUGGY]  Node  lhs  =  cond.getNext();  return  Node.newString(Token.NAME,  lhs.getString());  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  lhs  =  cond.getNext();  return  Node.newString(Token.NAME,  lhs.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  lhs  =  cond.getNext();  return  Node.newString(Token.NAME,  lhs.getString());	  return    Node.newString(Token.NAME,    cond.getString());    Node    var    =    parent.getParent();    return    Node.newString(Token.NAME,    var.getString());    	non-compiled	[CE]  not  a  statement	196	None	replace
867	[BUG]  [BUGGY]  Node  var  =  parent.getParent();  return  Node.newString(Token.NAME,  cond.getString());  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  var  =  parent.getParent();  return  Node.newString(Token.NAME,  cond.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  var  =  parent.getParent();  return  Node.newString(Token.NAME,  cond.getString());	  return    Node.newString(Token.NAME,    cond.getString());    Node    var    =    parent.getParent();    return    Node.newString(Token.NAME,    var.getString());    	non-compiled	[CE]  not  a  statement	196	None	replace
868	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  assign  =  parent.getLastChild();  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  assign  =  parent.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  assign  =  parent.getLastChild();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    assign    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	16	None	replace
869	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getLastChild().getString());  Node  assign  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getLastChild().getString());  Node  assign  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getLastChild().getString());  Node  assign  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    assign    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	16	None	replace
870	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  assign  =  n.getFirstChild();  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  assign  =  n.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  assign  =  n.getFirstChild();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    assign    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	16	None	replace
871	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString()  +  1);  Node  assign  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString()  +  1);  Node  assign  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString()  +  1);  Node  assign  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    assign    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	16	None	replace
872	[BUG]  [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.EXPR_RESULT);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(cond.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(parent.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  not  a  statement	4	None	replace
873	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(parent.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  not  a  statement	4	None	replace
874	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.EXPR_RESULT);  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.EXPR_RESULT);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(parent.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  not  a  statement	4	None	replace
875	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.EXPR_RESULT);  [CE]  not  a  statement  [FE]          RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(parent.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  not  a  statement	4	None	replace
876	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]            RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(parent.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  not  a  statement	4	None	replace
877	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null  ||  parent.getType()  ==  Token.EXPR_RESULT);  [CE]  not  a  statement  [FE]              RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent!=  null  ||  parent.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent!=  null  ||  parent.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(parent.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  not  a  statement	4	None	replace
878	[BUG]  [BUGGY]  parent  ==  null?  null  :  parent.getParent();  Node  parent  =  parent.getParent();  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  ==  null?  null  :  parent.getParent();  Node  parent  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  ==  null?  null  :  parent.getParent();  Node  parent  =  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    Node    parent    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	31	None	replace
879	[BUG]  [BUGGY]  parent!=  null?  null  :  parent.getParent();  Node  parent  =  parent.getParent();  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent!=  null?  null  :  parent.getParent();  Node  parent  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent!=  null?  null  :  parent.getParent();  Node  parent  =  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    Node    parent    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	31	None	replace
880	[BUG]  [BUGGY]  Node  parent  =  parent!=  null?  parent.getParent()  :  null;  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  parent!=  null?  parent.getParent()  :  null;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  parent!=  null?  parent.getParent()  :  null;	  return(parent!=    null)?    null    :    parent.getParent();    Node    parent    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	107	None	replace
881	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  name,  n);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  name,  n);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  name,  n);	  return    Node.newString(Token.NAME,    n);    	non-compiled	[CE]  not  a  statement	120	None	replace
882	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  var,  n);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  var,  n);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  var,  n);	  return    Node.newString(Token.NAME,    n);    	non-compiled	[CE]  not  a  statement	120	None	replace
883	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  n,  false);  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  n,  false);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  n,  false);	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString(),    false);    	non-compiled	[CE]  not  a  statement	200	None	replace
884	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  false,  cond);  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  false,  cond);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  false,  cond);	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString(),    false);    	non-compiled	[CE]  not  a  statement	200	None	replace
885	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  COND,  false);  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  COND,  false);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  COND,  false);	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString(),    false);    	non-compiled	[CE]  not  a  statement	200	None	replace
886	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  DEFAULT_CONSTRUCTORS,  false);  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  DEFAULT_CONSTRUCTORS,  false);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  DEFAULT_CONSTRUCTORS,  false);	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString(),    false);    	non-compiled	[CE]  not  a  statement	200	None	replace
887	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n.getString());  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n.getString());	  return    Node.newString(Token.NAME,    parent.getString());    	non-compiled	[CE]  not  a  statement	45	None	replace
888	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getType());  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getType());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getType());	  return    Node.newString(Token.NAME,    parent.getString());    	non-compiled	[CE]  not  a  statement	45	None	replace
889	[BUG]  [BUGGY]  return(n  ==  null)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(n  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(n  ==  null)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    return(parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  not  a  statement	75	None	replace
890	[BUG]  [BUGGY]  return(n  ==  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(n  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(n  ==  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    return(parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	125	None	replace
891	[BUG]  [BUGGY]  return  parent.getType()!=  Token.NAME?  parent.getType()  :  Token.FUNCTION;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent.getType()!=  Token.NAME?  parent.getType()  :  Token.FUNCTION;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent.getType()!=  Token.NAME?  parent.getType()  :  Token.FUNCTION;	  return    parent.getType()    ==    Token.NAME?    parent.getType()    :    Token.FUNCTION;    	non-compiled	[CE]  not  a  statement	136	None	replace
892	[BUG]  [BUGGY]  Return  parent.getType()  ==  Token.NAME?  parent.getType()  :  Token.FUNCTION;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Return  parent.getType()  ==  Token.NAME?  parent.getType()  :  Token.FUNCTION;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Return  parent.getType()  ==  Token.NAME?  parent.getType()  :  Token.FUNCTION;	  return    parent.getType()    ==    Token.NAME?    parent.getType()    :    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	136	None	replace
893	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  parent.getType()  :  Token.FUNCTION_TYPE;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent.getType()  ==  Token.NAME?  parent.getType()  :  Token.FUNCTION_TYPE;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent.getType()  ==  Token.NAME?  parent.getType()  :  Token.FUNCTION_TYPE;	  return    parent.getType()    ==    Token.NAME?    parent.getType()    :    Token.FUNCTION;    	non-compiled	[CE]  not  a  statement	136	None	replace
894	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  parent.getType()  :  Token.FUNCTION;  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  n.getType()  ==  Token.NAME?  parent.getType()  :  Token.FUNCTION;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  n.getType()  ==  Token.NAME?  parent.getType()  :  Token.FUNCTION;	  return    parent.getType()    ==    Token.NAME?    parent.getType()    :    Token.FUNCTION;    	non-compiled	[CE]  not  a  statement	136	None	replace
895	[BUG]  [BUGGY]  return  parent!=  null?  parent.getType()  :  Token.NAME  :  Token.FUNCTION;  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent!=  null?  parent.getType()  :  Token.NAME  :  Token.FUNCTION;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null?  parent.getType()  :  Token.NAME  :  Token.FUNCTION;	  return    parent.getType()    ==    Token.NAME?    parent.getType()    :    Token.FUNCTION;    	non-compiled	[CE]  ';'  expected	136	None	replace
896	[BUG]  [BUGGY]  parent  ==  null?  null  :  parent.getNext();  Node  parent  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  ==  null?  null  :  parent.getNext();  Node  parent  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  ==  null?  null  :  parent.getNext();  Node  parent  =  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getNext();    Node    parent    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	79	None	replace
897	[BUG]  [BUGGY]  parent!=  null?  null  :  parent.getNext();  Node  parent  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent!=  null?  null  :  parent.getNext();  Node  parent  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent!=  null?  null  :  parent.getNext();  Node  parent  =  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getNext();    Node    parent    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	79	None	replace
898	[BUG]  [BUGGY]  return  parent  ==  null?  null  :  parent.getNext();  Node  parent  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent  ==  null?  null  :  parent.getNext();  Node  parent  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null?  null  :  parent.getNext();  Node  parent  =  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getNext();    Node    parent    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	79	None	replace
899	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.BLOCK);  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.BLOCK);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.BLOCK);	  Preconditions.checkArgument(cond.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  not  a  statement	230	None	replace
900	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.BLOCK  ||  CondUtil.isLiteralValue(cond));  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.BLOCK  ||  CondUtil.isLiteralValue(cond));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.BLOCK  ||  CondUtil.isLiteralValue(cond));	  Preconditions.checkArgument(cond.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  not  a  statement	230	None	replace
901	[BUG]  [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.BLOCK);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.BLOCK);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(cond.getType()  ==  Token.BLOCK);	  Preconditions.checkArgument(cond.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  not  a  statement	230	None	replace
902	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.BLOCK  ||  cond.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.BLOCK  ||  cond.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.BLOCK  ||  cond.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(cond.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  not  a  statement	230	None	replace
903	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.BLOCK  ||  parent.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.BLOCK  ||  parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.BLOCK  ||  parent.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(cond.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  not  a  statement	230	None	replace
904	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.BLOCK  ||  cond.getType()  ==  Token.GETPROP);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.BLOCK  ||  cond.getType()  ==  Token.GETPROP);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.BLOCK  ||  cond.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(cond.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  not  a  statement	230	None	replace
905	[BUG]  [BUGGY]  Node  assignName  =  cond.getLastChild().getString();  return  Node.newString(Token.NAME,  assignName.getFirstChild().getString());  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assignName  =  cond.getLastChild().getString();  return  Node.newString(Token.NAME,  assignName.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assignName  =  cond.getLastChild().getString();  return  Node.newString(Token.NAME,  assignName.getFirstChild().getString());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    assignName    =    cond.getFirstChild().getString();    return    Node.newString(Token.NAME,    assignName.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	217	None	replace
906	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  assignName.getFirstChild().getString());  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  assignName.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  assignName.getFirstChild().getString());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    assignName    =    cond.getFirstChild().getString();    return    Node.newString(Token.NAME,    assignName.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	217	None	replace
907	[BUG]  [BUGGY]  Node  assignName  =  cond.getFirstChild().getString();  return  Node.newString(Token.NAME,  assignName.getLastChild().getString());  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assignName  =  cond.getFirstChild().getString();  return  Node.newString(Token.NAME,  assignName.getLastChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assignName  =  cond.getFirstChild().getString();  return  Node.newString(Token.NAME,  assignName.getLastChild().getString());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    assignName    =    cond.getFirstChild().getString();    return    Node.newString(Token.NAME,    assignName.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	217	None	replace
908	[BUG]  [BUGGY]  Name  assignName  =  cond.getFirstChild().getString();  return  Node.newString(Token.NAME,  assignName.getFirstChild().getString());  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Name  assignName  =  cond.getFirstChild().getString();  return  Node.newString(Token.NAME,  assignName.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Name  assignName  =  cond.getFirstChild().getString();  return  Node.newString(Token.NAME,  assignName.getFirstChild().getString());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    assignName    =    cond.getFirstChild().getString();    return    Node.newString(Token.NAME,    assignName.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	217	None	replace
909	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n,  cond,  parent);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n,  cond,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n,  cond,  parent);	  return    Node.newString(Token.NAME,    n,    parent);    	non-compiled	[CE]  not  a  statement	115	None	replace
910	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n,  parent,  predicate);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n,  parent,  predicate);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n,  parent,  predicate);	  return    Node.newString(Token.NAME,    n,    parent);    	non-compiled	[CE]  not  a  statement	115	None	replace
911	[BUG]  [BUGGY]  return  parent!=  null?  parent.getNext()  :  NodeUtil.newLiteralValue(cond);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent!=  null?  parent.getNext()  :  NodeUtil.newLiteralValue(cond);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null?  parent.getNext()  :  NodeUtil.newLiteralValue(cond);	  return    parent!=    null?    parent.getParent()    :    NodeUtil.newLiteralValue(cond);    	non-compiled	[CE]  not  a  statement	242	None	replace
912	[BUG]  [BUGGY]  return  parent  ==  null?  parent.getParent()  :  NodeUtil.newLiteralValue(cond);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent  ==  null?  parent.getParent()  :  NodeUtil.newLiteralValue(cond);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null?  parent.getParent()  :  NodeUtil.newLiteralValue(cond);	  return    parent!=    null?    parent.getParent()    :    NodeUtil.newLiteralValue(cond);    	non-compiled	[CE]  not  a  statement	242	None	replace
913	[BUG]  [BUGGY]  return  parent!=  null?  parent.getParent()  :  NodeUtil.newLiteralValue(cond,  true);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent!=  null?  parent.getParent()  :  NodeUtil.newLiteralValue(cond,  true);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null?  parent.getParent()  :  NodeUtil.newLiteralValue(cond,  true);	  return    parent!=    null?    parent.getParent()    :    NodeUtil.newLiteralValue(cond);    	non-compiled	[CE]  not  a  statement	242	None	replace
914	[BUG]  [BUGGY]  return  parent!=  null?  parent.getParent()  :  NodeUtil.newLiteralValue(cond,  false);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent!=  null?  parent.getParent()  :  NodeUtil.newLiteralValue(cond,  false);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null?  parent.getParent()  :  NodeUtil.newLiteralValue(cond,  false);	  return    parent!=    null?    parent.getParent()    :    NodeUtil.newLiteralValue(cond);    	non-compiled	[CE]  not  a  statement	242	None	replace
915	[BUG]  [BUGGY]  return  parent!=  null?  parent.getType()  :  NodeUtil.newLiteralValue(cond);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent!=  null?  parent.getType()  :  NodeUtil.newLiteralValue(cond);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null?  parent.getType()  :  NodeUtil.newLiteralValue(cond);	  return    parent!=    null?    parent.getParent()    :    NodeUtil.newLiteralValue(cond);    	non-compiled	[CE]  not  a  statement	242	None	replace
916	[BUG]  [BUGGY]  return  cond!=  null?  parent.getParent()  :  NodeUtil.newLiteralValue(cond);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  cond!=  null?  parent.getParent()  :  NodeUtil.newLiteralValue(cond);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  cond!=  null?  parent.getParent()  :  NodeUtil.newLiteralValue(cond);	  return    parent!=    null?    parent.getParent()    :    NodeUtil.newLiteralValue(cond);    	non-compiled	[CE]  not  a  statement	242	None	replace
917	[BUG]  [BUGGY]  Node  nscut  =  parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  nscut  =  parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  nscut  =  parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    parent    născut    =    parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  ';'  expected	146	None	replace
918	[BUG]  [BUGGY]  nscut  =  parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  nscut  =  parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	nscut  =  parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    parent    născut    =    parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  ';'  expected	146	None	replace
919	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parentscut  =  parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parentscut  =  parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parentscut  =  parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    parent    născut    =    parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  ';'  expected	146	None	replace
920	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  nscut  =  parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  nscut  =  parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  nscut  =  parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    parent    născut    =    parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  ';'  expected	146	None	replace
921	[BUG]  [BUGGY]  Node  assign  =  parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assign  =  parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    parent    născut    =    parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  ';'  expected	146	None	replace
922	[BUG]  [BUGGY]  parent  =  parent.getFirstChild();  Node  nscut  =  parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  =  parent.getFirstChild();  Node  nscut  =  parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  =  parent.getFirstChild();  Node  nscut  =  parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    parent    născut    =    parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  ';'  expected	146	None	replace
923	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.cloneTree().getString());  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.cloneTree().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.cloneTree().getString());	  return    Node.newString(Token.NAME,    cond.getLastChild().getString());    	non-compiled	[CE]  not  a  statement	25	None	replace
924	[BUG]  [BUGGY]          Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Node  var  =  parent.getParent();  Preconditions.checkArgument(var.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]          Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Node  var  =  parent.getParent();  Preconditions.checkArgument(var.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	                Preconditions.checkArgument(parent.getType()    ==    Token.NAME);    Node  var  =  parent.getParent();  Preconditions.checkArgument(var.getType()  ==  Token.NAME);	  	non-compiled	[CE]  not  a  statement	23	None	add
925	[BUG]  [BUGGY]          Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  }  else  {  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]          Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  }  else  {  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	                Preconditions.checkArgument(parent.getType()    ==    Token.NAME);    Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  }  else  {  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  illegal  start  of  type	23	None	add
926	[BUG]  [BUGGY]          Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]          Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	                Preconditions.checkArgument(parent.getType()    ==    Token.NAME);    Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  preconditions.checkArgument(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  not  a  statement	23	None	add
927	[BUG]  [BUGGY]  return  parent!=  null?  null  :  parent.parent;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent!=  null?  null  :  parent.parent;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null?  null  :  parent.parent;	  return    parent!=    null?    null    :    parent;    	non-compiled	[CE]  not  a  statement	184	None	replace
928	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(n,  parent);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.newLiteralValue(n,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(n,  parent);	  return    NodeUtil.newLiteralValue(n,    true);    	non-compiled	[CE]  not  a  statement	93	None	replace
929	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  COND,  parent,  n);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  COND,  parent,  n);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  COND,  parent,  n);	  return    Node.newString(Token.NAME,    COND,    parent);    	non-compiled	[CE]  not  a  statement	203	None	replace
930	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent,  COND);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent,  COND);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent,  COND);	  return    Node.newString(Token.NAME,    COND,    parent);    	non-compiled	[CE]  not  a  statement	203	None	replace
931	[BUG]  [BUGGY]  if(parent!=  null)  {  return  parent;  Node  parent  =  n.getParent();  return  parent;  }  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  if(parent!=  null)  {  return  parent;  Node  parent  =  n.getParent();  return  parent;  }  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	if(parent!=  null)  {  return  parent;  Node  parent  =  n.getParent();  return  parent;  }	  return    parent;    Node    parent    =    n.getParent();    return    parent;    	non-compiled	[CE]  not  a  statement	81	None	replace
932	[BUG]  [BUGGY]  Preconditions.checkArgument(parent!=  null);  Node  parent  =  n.getParent();  return  parent;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent!=  null);  Node  parent  =  n.getParent();  return  parent;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent!=  null);  Node  parent  =  n.getParent();  return  parent;	  return    parent;    Node    parent    =    n.getParent();    return    parent;    	non-compiled	[CE]  not  a  statement	81	None	replace
933	[BUG]  [BUGGY]  parent  =  n.getParent();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  =  n.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  =  n.getParent();	  return    parent;    Node    parent    =    n.getParent();    return    parent;    	non-compiled	[CE]  not  a  statement	81	None	replace
934	[BUG]  [BUGGY]  Node  nextBranch  =  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  nextBranch  =  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  nextBranch  =  Node.newString(Token.NAME,  cond.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    newExpr    =    Node.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	168	None	replace
935	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent,  cond.getString();  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent,  cond.getString();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent,  cond.getString();	  return(parent    ==    null)?    null    :    parent.getString();    	non-compiled	[CE]  ';'  expected	30	None	replace
936	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  assignName.getLastChild().getString());  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  assignName.getLastChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  assignName.getLastChild().getString());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    assignName    =    cond.getFirstChild().getString();    return    Node.newString(Token.NAME,    assignName.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	217	None	replace
937	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(cond,  false)?  parent  :  cond;  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.newLiteralValue(cond,  false)?  parent  :  cond;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(cond,  false)?  parent  :  cond;	  return    cond;    	non-compiled	[CE]  not  a  statement	130	None	replace
938	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(cond,  false)?  cond  :  parent;  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.newLiteralValue(cond,  false)?  cond  :  parent;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(cond,  false)?  cond  :  parent;	  return    cond;    	non-compiled	[CE]  not  a  statement	130	None	replace
939	[BUG]  [BUGGY]  parent!=  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent.getParent();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent!=  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent!=  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent.getParent();	  return(parent!=    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	62	None	replace
940	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n,  parent,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n,  parent,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n,  parent,  INVALID_REGULAR_EXPRESSION_FLAGS);	  return    Node.newString(Token.NAME,    n,    parent);    	non-compiled	[CE]  not  a  statement	115	None	replace
941	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n,  parent,  REGEXP_FLAGS_RE);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n,  parent,  REGEXP_FLAGS_RE);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n,  parent,  REGEXP_FLAGS_RE);	  return    Node.newString(Token.NAME,    n,    parent);    	non-compiled	[CE]  not  a  statement	115	None	replace
942	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n,  parent,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n,  parent,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n,  parent,  STANDARD_OBJECT_CONSTRUCTORS);	  return    Node.newString(Token.NAME,    n,    parent);    	non-compiled	[CE]  not  a  statement	115	None	replace
943	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  (parent  ==  null)?  null  :  parent.getLastChild();  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  (parent  ==  null)?  null  :  parent.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getFirstChild();  (parent  ==  null)?  null  :  parent.getLastChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    (parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	246	None	replace
944	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getLastChild();  (parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getLastChild();  (parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getLastChild();  (parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    (parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	246	None	replace
945	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  (parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  n.getParent();  (parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  n.getParent();  (parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    (parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	246	None	replace
946	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.VAR  ||  CondUtil.isLiteralValue(cond));  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.VAR  ||  CondUtil.isLiteralValue(cond));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.VAR  ||  CondUtil.isLiteralValue(cond));	  Preconditions.checkArgument(cond.getType()    ==    Token.VAR);    	non-compiled	[CE]  not  a  statement	160	None	replace
947	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(cond.getType()    ==    Token.VAR);    	non-compiled	[CE]  not  a  statement	160	None	replace
948	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  parent  ==  null)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  parent  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getFirstChild();  parent  ==  null)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  not  a  statement	221	None	replace
949	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  parent  ==  null)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  parent  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getParent();  parent  ==  null)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  not  a  statement	221	None	replace
950	[BUG]  [BUGGY]  return  parent  ==  null)?  null  :  parent.getParent();  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent  ==  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null)?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    Node    parent    =    parent.getParent();    	non-compiled	[CE]  ';'  expected	31	None	replace
951	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  var);  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  var);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  var);	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    var    =    cond.getLastChild();    	non-compiled	[CE]  not  a  statement	161	None	replace
952	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  n);  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  n);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  n);	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    var    =    cond.getLastChild();    	non-compiled	[CE]  not  a  statement	161	None	replace
953	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  parent  =  parent  ==  null?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  parent  =  parent  ==  null?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getNext();  Node  parent  =  parent  ==  null?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getNext();    Node    parent    =    parent    ==    null?    null    :    parent.getNext();    	non-compiled	[CE]  not  a  statement	78	None	replace
954	[BUG]  [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.FUNCTION  ||  CondUtil.isLiteralValue(cond));  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.FUNCTION  ||  CondUtil.isLiteralValue(cond));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(cond.getType()  ==  Token.FUNCTION  ||  CondUtil.isLiteralValue(cond));	  Preconditions.checkState(cond.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	159	None	replace
955	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  &&  NodeUtil.isLiteralValue(cond));  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  &&  NodeUtil.isLiteralValue(cond));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME  &&  NodeUtil.isLiteralValue(cond));	  Preconditions.checkState(parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	10	None	replace
956	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.EXPR_RESULT);  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	10	None	replace
957	[BUG]  [BUGGY]  return  parent!=  null?  null  :  parent.getNext();  Node  parent  =  n.getParent();  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent!=  null?  null  :  parent.getNext();  Node  parent  =  n.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null?  null  :  parent.getNext();  Node  parent  =  n.getParent();	  return(parent!=    null)?    null    :    parent.getNext();    Node    parent    =    n.getParent();    	non-compiled	[CE]  not  a  statement	148	None	replace
958	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  parent  >=  null)?  null  :  parent.getParent();  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  parent  >=  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getParent();  Node  parent  >=  null)?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    Node    parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  ';'  expected	186	None	replace
959	[BUG]  [BUGGY]  Node  var  =  cond.getFirstChild();  return  Node.newString(Token.NAME,  var.getString());  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  var  =  cond.getFirstChild();  return  Node.newString(Token.NAME,  var.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  var  =  cond.getFirstChild();  return  Node.newString(Token.NAME,  var.getString());	  return    Node.newString(Token.NAME,    cond.getString());    Node    var    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    var.getString());    	non-compiled	[CE]  not  a  statement	199	None	replace
960	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  n.getString());  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  n  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  n.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  n  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  n.getString());	  return    Node.newString(Token.NAME,    cond.getString());    Node    var    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    var.getString());    	non-compiled	[CE]  not  a  statement	199	None	replace
961	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  var);  [CE]  not  a  statement  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  var);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  var);	  return    Node.newString(Token.NAME,    cond.getString());    Node    var    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    var.getString());    	non-compiled	[CE]  not  a  statement	199	None	replace
962	[BUG]  [BUGGY]  Node  cond  =  n.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString());  [CE]  not  a  statement  [FE]                        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  cond  =  n.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  cond  =  n.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString());	  return    Node.newString(Token.NAME,    cond.getString());    Node    var    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    var.getString());    	non-compiled	[CE]  not  a  statement	199	None	replace
963	[BUG]  [BUGGY]  Node  return  Node.newString(Token.NAME,  cond.getName());  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  return  Node.newString(Token.NAME,  cond.getName());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  return  Node.newString(Token.NAME,  cond.getName());	  return    Node.newString(Token.NAME,    cond.getString());    Node    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  not  a  statement	49	None	replace
964	[BUG]  [BUGGY]  Node  return  Node.newString(Token.NAME,  cond.getLocalName());  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  return  Node.newString(Token.NAME,  cond.getLocalName());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  return  Node.newString(Token.NAME,  cond.getLocalName());	  return    Node.newString(Token.NAME,    cond.getString());    Node    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  not  a  statement	49	None	replace
965	[BUG]  [BUGGY]  Node  var  =  cond.getNext();  return  Node.newString(Token.NAME,  var.getString());  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  var  =  cond.getNext();  return  Node.newString(Token.NAME,  var.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  var  =  cond.getNext();  return  Node.newString(Token.NAME,  var.getString());	  return    Node.newString(Token.NAME,    cond.getString());    Node    var    =    cond.getNext();    return    Node.newString(Token.NAME,    var.getString());    	non-compiled	[CE]  not  a  statement	194	None	replace
966	[BUG]  [BUGGY]  Node  cond  =  cond.getNext();  return  Node.newString(Token.NAME,  cond.getString());  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  cond  =  cond.getNext();  return  Node.newString(Token.NAME,  cond.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  cond  =  cond.getNext();  return  Node.newString(Token.NAME,  cond.getString());	  return    Node.newString(Token.NAME,    cond.getString());    Node    var    =    cond.getNext();    return    Node.newString(Token.NAME,    var.getString());    	non-compiled	[CE]  not  a  statement	194	None	replace
967	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  return(parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  n.getParent();  return(parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  n.getParent();  return(parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent.getParent();    return(parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	129	None	replace
968	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getName());  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getName());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getName());	  return    Node.newString(Token.NAME,    cond.getString());    Node    assign    =    parent.getParent();    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  not  a  statement	212	None	replace
969	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  FoldArrayAction(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  FoldArrayAction(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	NodeTraversal.traverse(compiler,  parent,  new  FoldArrayAction(),  INVALID_REGULAR_EXPRESSION_FLAGS);	  NodeTraversal.traverse(compiler,    parent,    new    FoldArrayAction());    	non-compiled	[CE]  not  a  statement	156	None	replace
970	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  FoldArrayAction(),  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  FoldArrayAction(),  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	NodeTraversal.traverse(compiler,  parent,  new  FoldArrayAction(),  STANDARD_OBJECT_CONSTRUCTORS);	  NodeTraversal.traverse(compiler,    parent,    new    FoldArrayAction());    	non-compiled	[CE]  not  a  statement	156	None	replace
971	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  Context.STANDARD_OBJECT_CONSTRUCTORS,  parent,  new  FoldArrayAction());  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  NodeTraversal.traverse(compiler,  Context.STANDARD_OBJECT_CONSTRUCTORS,  parent,  new  FoldArrayAction());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	NodeTraversal.traverse(compiler,  Context.STANDARD_OBJECT_CONSTRUCTORS,  parent,  new  FoldArrayAction());	  NodeTraversal.traverse(compiler,    parent,    new    FoldArrayAction());    	non-compiled	[CE]  not  a  statement	156	None	replace
972	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  Context.STANDARD_OBJECT_CONSTRUCTORS,  new  FoldArrayAction());  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  NodeTraversal.traverse(compiler,  Context.STANDARD_OBJECT_CONSTRUCTORS,  new  FoldArrayAction());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	NodeTraversal.traverse(compiler,  Context.STANDARD_OBJECT_CONSTRUCTORS,  new  FoldArrayAction());	  NodeTraversal.traverse(compiler,    parent,    new    FoldArrayAction());    	non-compiled	[CE]  not  a  statement	156	None	replace
973	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  n);  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  n);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  n);	  return    Node.newString(Token.NAME,    cond.getString());    Node    var    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  not  a  statement	213	None	replace
974	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  parent!=  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  parent!=  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getFirstChild();  parent!=  null)?  null  :  parent.getFirstChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    parent!=    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	209	None	replace
975	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  parent!=  null)?  null  :  parent.getLastChild();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  parent!=  null)?  null  :  parent.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getFirstChild();  parent!=  null)?  null  :  parent.getLastChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    parent!=    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	209	None	replace
976	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  parent!=  null)?  null  :  parent.getLastChild();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  parent!=  null)?  null  :  parent.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=  null)?  null  :  parent.getFirstChild();  parent!=  null)?  null  :  parent.getLastChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    parent!=    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	209	None	replace
977	[BUG]  [BUGGY]  if(parent!=  null)  {  return  parent;  Node  parent  =  n.getFirstChild();  return  parent;  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  if(parent!=  null)  {  return  parent;  Node  parent  =  n.getFirstChild();  return  parent;  }  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	if(parent!=  null)  {  return  parent;  Node  parent  =  n.getFirstChild();  return  parent;  }	  return    parent;    Node    parent    =    n.getFirstChild();    return    parent;    	non-compiled	[CE]  not  a  statement	85	None	replace
978	[BUG]  [BUGGY]  Preconditions.checkArgument(parent!=  null);  Node  parent  =  n.getFirstChild();  return  parent;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent!=  null);  Node  parent  =  n.getFirstChild();  return  parent;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent!=  null);  Node  parent  =  n.getFirstChild();  return  parent;	  return    parent;    Node    parent    =    n.getFirstChild();    return    parent;    	non-compiled	[CE]  not  a  statement	85	None	replace
979	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  INVALID_REGULAR_EXPRESSION_FLAGS,  false);  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  INVALID_REGULAR_EXPRESSION_FLAGS,  false);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  INVALID_REGULAR_EXPRESSION_FLAGS,  false);	  return    Node.newString(Token.NAME,    cond.getString(),    false);    	non-compiled	[CE]  not  a  statement	47	None	replace
980	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  STANDARD_OBJECT_CONSTRUCTORS,  false);  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  STANDARD_OBJECT_CONSTRUCTORS,  false);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  STANDARD_OBJECT_CONSTRUCTORS,  false);	  return    Node.newString(Token.NAME,    cond.getString(),    false);    	non-compiled	[CE]  not  a  statement	47	None	replace
981	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  INVALID_REGULAR_FLAGS,  false);  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  INVALID_REGULAR_FLAGS,  false);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  INVALID_REGULAR_FLAGS,  false);	  return    Node.newString(Token.NAME,    cond.getString(),    false);    	non-compiled	[CE]  not  a  statement	47	None	replace
982	[BUG]  [BUGGY]  Node  thenBranch  =  cond.getFirstChild().getNext();  return  Node.newString(Token.NAME,  thenBranch.getFirstChild().getString());  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  thenBranch  =  cond.getFirstChild().getNext();  return  Node.newString(Token.NAME,  thenBranch.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  thenBranch  =  cond.getFirstChild().getNext();  return  Node.newString(Token.NAME,  thenBranch.getFirstChild().getString());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    thenAssign    =    parent.getFirstChild().getNext();    return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	216	None	replace
983	[BUG]  [BUGGY]  Node  thenBranchIsVar  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  thenBranchIsVar  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  thenBranchIsVar  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    thenAssign    =    parent.getFirstChild().getNext();    return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	216	None	replace
984	[BUG]  [BUGGY]  parent  ==  null?  null  :  parent.getParent();  Node  nscut  =  parent.getParent();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  ==  null?  null  :  parent.getParent();  Node  nscut  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  ==  null?  null  :  parent.getParent();  Node  nscut  =  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    Node    parent    născut    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	188	None	replace
985	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  nscut  =  parent.getParent();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  nscut  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getParent();  Node  nscut  =  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    Node    parent    născut    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	188	None	replace
986	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  parent  nscut  =  parent.getParent();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  parent  nscut  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getParent();  Node  parent  nscut  =  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    Node    parent    născut    =    parent.getParent();    	non-compiled	[CE]  ';'  expected	188	None	replace
987	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  nscut  =  parent.getNext();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  nscut  =  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getParent();  Node  nscut  =  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getParent();    Node    parent    născut    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	188	None	replace
988	[BUG]  [BUGGY]  return  n;  Node  parent  =  n.getFirstChild();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  n;  Node  parent  =  n.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  n;  Node  parent  =  n.getFirstChild();	  return    parent;    Node    parent    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	82	None	replace
989	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  child  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  child  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  child  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    child    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	105	None	replace
990	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  JSError.make(n,  INVALID_REGULAR_EXPRESSION_FLAGS));  [CE]  not  a  statement  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  JSError.make(n,  INVALID_REGULAR_EXPRESSION_FLAGS));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  JSError.make(n,  INVALID_REGULAR_EXPRESSION_FLAGS));	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    child    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	105	None	replace
991	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent);  Node  child  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]                        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent);  Node  child  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent);  Node  child  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    child    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	105	None	replace
992	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  child);  [CE]  not  a  statement  [FE]                          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  child);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  child);	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    child    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	105	None	replace
993	[BUG]  [BUGGY]  Node  returnNode  =  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  child  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]                            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  returnNode  =  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  child  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  returnNode  =  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  child  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    child    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	105	None	replace
994	[BUG]  [BUGGY]  Node  returnNode  =  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  cond);  Node  child  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]                              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  returnNode  =  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  cond);  Node  child  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  returnNode  =  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  cond);  Node  child  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    child    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	105	None	replace
995	[BUG]  [BUGGY]  Node  elseBranch  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  assignName.getFirstChild().getString());  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  elseBranch  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  assignName.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  elseBranch  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  assignName.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    assign    =    parent.getFirstChild().getNext();    return    Node.newString(Token.NAME,    assign.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	254	None	replace
996	[BUG]  [BUGGY]  Node  elseBranch  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  assign.getFirstChild().getString());  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  elseBranch  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  assign.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  elseBranch  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  assign.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    assign    =    parent.getFirstChild().getNext();    return    Node.newString(Token.NAME,    assign.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	254	None	replace
997	[BUG]  [BUGGY]  Node  elseBranch  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  elseBranch  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  elseBranch  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    assign    =    parent.getFirstChild().getNext();    return    Node.newString(Token.NAME,    assign.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	254	None	replace
998	[BUG]  [BUGGY]  Node  parent  =  n.getFirstChild();  return(parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  n.getFirstChild();  return(parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  n.getFirstChild();  return(parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent.getFirstChild();    return(parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	128	None	replace
999	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()!=  Token.FUNCTION);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()!=  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()!=  Token.FUNCTION);	  Preconditions.checkArgument(parent.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	14	None	replace
1000	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.isLiteralValue(cond));  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.isLiteralValue(cond));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.isLiteralValue(cond));	  Preconditions.checkArgument(parent.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	14	None	replace
1001	[BUG]  [BUGGY]  return  n;  Node  parent  =  n.getNext();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  n;  Node  parent  =  n.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  n;  Node  parent  =  n.getNext();	  return    parent;    Node    parent    =    n.getNext();    	non-compiled	[CE]  not  a  statement	87	None	replace
1002	[BUG]  [BUGGY]  return  parent;  Node  n  =  n.getNext();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent;  Node  n  =  n.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent;  Node  n  =  n.getNext();	  return    parent;    Node    parent    =    n.getNext();    	non-compiled	[CE]  not  a  statement	87	None	replace
1003	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  if(parent  ==  null)?  null  :  parent.getParent();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  if(parent  ==  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getFirstChild();  if(parent  ==  null)?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    if(parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
1004	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME  ||  CondUtil.isLiteralValue(cond));  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME  ||  CondUtil.isLiteralValue(cond));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.NAME  ||  CondUtil.isLiteralValue(cond));	  Preconditions.checkArgument(cond.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	12	None	replace
1005	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME  &&  NodeUtil.isLiteralValue(cond));  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME  &&  NodeUtil.isLiteralValue(cond));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.NAME  &&  NodeUtil.isLiteralValue(cond));	  Preconditions.checkArgument(cond.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	12	None	replace
1006	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME  ||!NodeUtil.isLiteralValue(cond));  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME  ||!NodeUtil.isLiteralValue(cond));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.NAME  ||!NodeUtil.isLiteralValue(cond));	  Preconditions.checkArgument(cond.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	12	None	replace
1007	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent,  true);  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent,  true);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent,  true);	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString(),    true);    	non-compiled	[CE]  not  a  statement	28	None	replace
1008	[BUG]  [BUGGY]  return  parent;  Node  cond  =  cond.getParent();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent;  Node  cond  =  cond.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent;  Node  cond  =  cond.getParent();	  return    parent;    Node    parent    =    cond.getParent();    	non-compiled	[CE]  not  a  statement	84	None	replace
1009	[BUG]  [BUGGY]  return  n;  Node  parent  =  cond.getParent();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  n;  Node  parent  =  cond.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  n;  Node  parent  =  cond.getParent();	  return    parent;    Node    parent    =    cond.getParent();    	non-compiled	[CE]  not  a  statement	84	None	replace
1010	[BUG]  [BUGGY]  return  parent;  Node  cond  =  cond.getNext();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent;  Node  cond  =  cond.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent;  Node  cond  =  cond.getNext();	  return    parent;    Node    parent    =    cond.getParent();    	non-compiled	[CE]  not  a  statement	84	None	replace
1011	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  null);  Node  assign  =  parent.getFirstChild().getNext();  [CE]  not  a  statement  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  null);  Node  assign  =  parent.getFirstChild().getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  null);  Node  assign  =  parent.getFirstChild().getNext();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    assign    =    parent.getFirstChild().getNext();    	non-compiled	[CE]  not  a  statement	106	None	replace
1012	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  assign  =  parent.getFirstChild().getNext();  [CE]  not  a  statement  [FE]                        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  assign  =  parent.getFirstChild().getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  assign  =  parent.getFirstChild().getNext();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    assign    =    parent.getFirstChild().getNext();    	non-compiled	[CE]  not  a  statement	106	None	replace
1013	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent);  Node  assign  =  parent.getFirstChild().getNext();  [CE]  not  a  statement  [FE]                          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent);  Node  assign  =  parent.getFirstChild().getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent);  Node  assign  =  parent.getFirstChild().getNext();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    assign    =    parent.getFirstChild().getNext();    	non-compiled	[CE]  not  a  statement	106	None	replace
1014	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  node);  Node  assign  =  parent.getFirstChild().getNext();  [CE]  not  a  statement  [FE]                            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  node);  Node  assign  =  parent.getFirstChild().getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  node);  Node  assign  =  parent.getFirstChild().getNext();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    assign    =    parent.getFirstChild().getNext();    	non-compiled	[CE]  not  a  statement	106	None	replace
1015	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  assign);  Node  assign  =  parent.getFirstChild().getNext();  [CE]  not  a  statement  [FE]                              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  assign);  Node  assign  =  parent.getFirstChild().getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  assign);  Node  assign  =  parent.getFirstChild().getNext();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    assign    =    parent.getFirstChild().getNext();    	non-compiled	[CE]  not  a  statement	106	None	replace
1016	[BUG]  [BUGGY]  Node  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  cond.getLastChild());  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  cond.getLastChild());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  cond.getLastChild());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	15	None	replace
1017	[BUG]  [BUGGY]  Node  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  cond.getLastChild().getString());  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  cond.getLastChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  cond.getLastChild().getString());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	15	None	replace
1018	[BUG]  [BUGGY]  Node  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  cond.getFirstChild().getString());  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  cond.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  cond.getFirstChild().getString());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	15	None	replace
1019	[BUG]  [BUGGY]  return  Token.newString(Token.NAME,  parent.getFirstChild().getString());  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Token.newString(Token.NAME,  parent.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Token.newString(Token.NAME,  parent.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    toString    =    parent.getFirstChild().getString();    return    Token.newString(Token.NAME,    toString(parent.getFirstChild().getString()));    	non-compiled	[CE]  not  a  statement	173	None	replace
1020	[BUG]  [BUGGY]  return  Token.newString(Token.NAME,  cond.getFirstChild().getString());  [CE]  not  a  statement  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Token.newString(Token.NAME,  cond.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Token.newString(Token.NAME,  cond.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    toString    =    parent.getFirstChild().getString();    return    Token.newString(Token.NAME,    toString(parent.getFirstChild().getString()));    	non-compiled	[CE]  not  a  statement	173	None	replace
1021	[BUG]  [BUGGY]  return  Token.newString(Token.NAME,  parent.getFirstChild().getString(),  toString(parent.getFirstChild().getString()));  [CE]  not  a  statement  [FE]                        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Token.newString(Token.NAME,  parent.getFirstChild().getString(),  toString(parent.getFirstChild().getString()));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Token.newString(Token.NAME,  parent.getFirstChild().getString(),  toString(parent.getFirstChild().getString()));	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    toString    =    parent.getFirstChild().getString();    return    Token.newString(Token.NAME,    toString(parent.getFirstChild().getString()));    	non-compiled	[CE]  not  a  statement	173	None	replace
1022	[BUG]  [BUGGY]  return  parent  ==  null?  null  :  parent.parent;  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent  ==  null?  null  :  parent.parent;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null?  null  :  parent.parent;	  return    parent    ==    null?    null    :    parent;    	non-compiled	[CE]  not  a  statement	181	None	replace
1023	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  Node  return(parent  ==  null)?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Node  return(parent  ==  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent!=  null);  Node  return(parent  ==  null)?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    Node    return(parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	36	None	replace
1024	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Node  return(parent  ==  null)?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Node  return(parent  ==  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Node  return(parent  ==  null)?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    Node    return(parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	36	None	replace
1025	[BUG]  [BUGGY]  Preconditions.checkArgument(parent!=  null);  Node  return(parent  ==  null)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent!=  null);  Node  return(parent  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent!=  null);  Node  return(parent  ==  null)?  null  :  parent.getNext();	  return(parent!=    null)?    null    :    parent.getNext();    Node    return(parent!=    null)?    null    :    parent.getNext();    	non-compiled	[CE]  not  a  statement	143	None	replace
1026	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME  &&  NodeUtil.isLiteralValue(cond));  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME  &&  NodeUtil.isLiteralValue(cond));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.NAME  &&  NodeUtil.isLiteralValue(cond));	          Preconditions.checkArgument(parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	24	None	replace
1027	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME  &&  NodeUtil.isLiteralValue(cond,  false));  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME  &&  NodeUtil.isLiteralValue(cond,  false));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.NAME  &&  NodeUtil.isLiteralValue(cond,  false));	          Preconditions.checkArgument(parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	24	None	replace
1028	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME  &&  CondUtil.isLiteralValue(cond));  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME  &&  CondUtil.isLiteralValue(cond));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.NAME  &&  CondUtil.isLiteralValue(cond));	          Preconditions.checkArgument(parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	24	None	replace
1029	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()!=  Token.NAME);  [CE]  not  a  statement  [FE]          RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()!=  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()!=  Token.NAME);	          Preconditions.checkArgument(parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	24	None	replace
1030	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent!=  null?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent!=  null?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent!=  null?  null  :  parent.getFirstChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent!=    null?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	59	None	replace
1031	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  SHORT_OBJECT_CONSTRUCTORS,  parent);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  SHORT_OBJECT_CONSTRUCTORS,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild(),  SHORT_OBJECT_CONSTRUCTORS,  parent);	  return    Node.newString(Token.NAME,    cond.getFirstChild(),    parent);    	non-compiled	[CE]  not  a  statement	65	None	replace
1032	[BUG]  [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.FUNCTION);  Node  return(parent  ==  null)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.FUNCTION);  Node  return(parent  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(cond.getType()  ==  Token.FUNCTION);  Node  return(parent  ==  null)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    Node    return(parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  not  a  statement	77	None	replace
1033	[BUG]  [BUGGY]  return  parent  ==  null?  parent.getNext()  :  NodeUtil.newLiteralValue(cond);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent  ==  null?  parent.getNext()  :  NodeUtil.newLiteralValue(cond);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null?  parent.getNext()  :  NodeUtil.newLiteralValue(cond);	  return    parent!=    null?    parent.getParent()    :    NodeUtil.newLiteralValue(cond);    	non-compiled	[CE]  not  a  statement	242	None	replace
1034	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  INVALID_REGULAR_EXPRESSION_FLAGS,  parent);  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  INVALID_REGULAR_EXPRESSION_FLAGS,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  INVALID_REGULAR_EXPRESSION_FLAGS,  parent);	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString(),    parent);    	non-compiled	[CE]  not  a  statement	26	None	replace
1035	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  INVALID_REGULAR_EXPRESSION_FLAGS);	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString(),    parent);    	non-compiled	[CE]  not  a  statement	26	None	replace
1036	[BUG]  [BUGGY]  return  parent;  Node  assign  =  cond.getFirstChild();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent;  Node  assign  =  cond.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent;  Node  assign  =  cond.getFirstChild();	  return    parent;    Node    assign    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	228	None	replace
1037	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  INVALID_REGULAR_EXPRESSION_FLAGS,  true);  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  INVALID_REGULAR_EXPRESSION_FLAGS,  true);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  INVALID_REGULAR_EXPRESSION_FLAGS,  true);	  return    Node.newString(Token.NAME,    cond.getString(),    true);    	non-compiled	[CE]  not  a  statement	48	None	replace
1038	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  INVALID_REGULAR_FLAGS,  true);  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  INVALID_REGULAR_FLAGS,  true);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  INVALID_REGULAR_FLAGS,  true);	  return    Node.newString(Token.NAME,    cond.getString(),    true);    	non-compiled	[CE]  not  a  statement	48	None	replace
1039	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  false);  Node  assign  =  parent.getParent();  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  false);  Node  assign  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  false);  Node  assign  =  parent.getParent();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    assign    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	17	None	replace
1040	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true))  {  return(parent!=  null)?  null  :  parent.getFirstChild();  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true))  {  return(parent!=  null)?  null  :  parent.getFirstChild();  }  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	if(NodeUtil.isLiteralValue(cond,  true))  {  return(parent!=  null)?  null  :  parent.getFirstChild();  }	  return(parent!=    null)?    null    :    parent.getFirstChild();    return(parent!=    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	61	None	replace
1041	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false))  {  return(parent!=  null)?  null  :  parent.getFirstChild();  }  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false))  {  return(parent!=  null)?  null  :  parent.getFirstChild();  }  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	if(NodeUtil.isLiteralValue(cond,  false))  {  return(parent!=  null)?  null  :  parent.getFirstChild();  }	  return(parent!=    null)?    null    :    parent.getFirstChild();    return(parent!=    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	61	None	replace
1042	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false))  {  return  parent!=  null?  null  :  parent.getFirstChild();  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false))  {  return  parent!=  null?  null  :  parent.getFirstChild();  }  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	if(NodeUtil.isLiteralValue(cond,  false))  {  return  parent!=  null?  null  :  parent.getFirstChild();  }	  return(parent!=    null)?    null    :    parent.getFirstChild();    return(parent!=    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	61	None	replace
1043	[BUG]  [BUGGY]  return  n.getNext();  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  n.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  n.getNext();	  return    parent.getNext();    	non-compiled	[CE]  not  a  statement	131	None	replace
1044	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n,  cond.getLastChild());  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n,  cond.getLastChild());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n,  cond.getLastChild());	  return    Node.newString(Token.NAME,    cond.getLastChild());    	non-compiled	[CE]  not  a  statement	68	None	replace
1045	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getLastChild(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getLastChild(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getLastChild(),  INVALID_REGULAR_EXPRESSION_FLAGS);	  return    Node.newString(Token.NAME,    cond.getLastChild());    	non-compiled	[CE]  not  a  statement	68	None	replace
1046	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  MISSING_OBJECT_CONSTRUCTORS);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  MISSING_OBJECT_CONSTRUCTORS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild(),  MISSING_OBJECT_CONSTRUCTORS);	  return    Node.newString(Token.NAME,    cond.getLastChild());    	non-compiled	[CE]  not  a  statement	68	None	replace
1047	[BUG]  [BUGGY]  Node  returnNode  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  returnNode  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  returnNode  =  parent.getFirstChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    Return(parent!=    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	210	None	replace
1048	[BUG]  [BUGGY]  return  parent  ==  null?  null  :  parent.getNext();  ||(parent  ==  null)?  null  :  parent.getNext();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent  ==  null?  null  :  parent.getNext();  ||(parent  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null?  null  :  parent.getNext();  ||(parent  ==  null)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    ||(parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  illegal  start  of  expression	222	None	replace
1049	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  ||(parent!=  null)?  null  :  parent.getNext();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  ||(parent!=  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getNext();  ||(parent!=  null)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    ||(parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  illegal  start  of  expression	222	None	replace
1050	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  ||(parent  ==  null)?  null  :  parent.getParent();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  ||(parent  ==  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getNext();  ||(parent  ==  null)?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getNext();    ||(parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  illegal  start  of  expression	222	None	replace
1051	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  parent  ==  null)?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  parent  ==  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getFirstChild();  parent  ==  null)?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	232	None	replace
1052	[BUG]  [BUGGY]  return  parent!=  null?  parent.getParent()  :  cond;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent!=  null?  parent.getParent()  :  cond;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null?  parent.getParent()  :  cond;	  return    parent!=    null?    parent.getParent()    :    null;    	non-compiled	[CE]  not  a  statement	241	None	replace
1053	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent,  n,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent,  n,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent,  n,  INVALID_REGULAR_EXPRESSION_FLAGS);	  return    Node.newString(Token.NAME,    parent,    n);    	non-compiled	[CE]  not  a  statement	118	None	replace
1054	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent,  n,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent,  n,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent,  n,  STANDARD_OBJECT_CONSTRUCTORS);	  return    Node.newString(Token.NAME,    parent,    n);    	non-compiled	[CE]  not  a  statement	118	None	replace
1055	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent,  n,  STANDARD_OBJECT_SYNTHETIC);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent,  n,  STANDARD_OBJECT_SYNTHETIC);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent,  n,  STANDARD_OBJECT_SYNTHETIC);	  return    Node.newString(Token.NAME,    parent,    n);    	non-compiled	[CE]  not  a  statement	118	None	replace
1056	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  true);  Node  assign  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  true);  Node  assign  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  true);  Node  assign  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    cond.getString());    Node    assign    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	50	None	replace
1057	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  SHORT_OBJECT_CONSTRUCTORS);  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  SHORT_OBJECT_CONSTRUCTORS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  SHORT_OBJECT_CONSTRUCTORS);	  return    Node.newString(Token.NAME,    cond.getString());    Node    assign    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	50	None	replace
1058	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  toString(parent.getFirstChild().getString()));  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  toString(parent.getFirstChild().getString()));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  toString(parent.getFirstChild().getString()));	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    toString    =    parent.getFirstChild().getString();    return    Node.newString(Token.NAME,    toString(parent.getFirstChild().getString()));    	non-compiled	[CE]  not  a  statement	170	None	replace
1059	[BUG]  [BUGGY]  return  parent  ==  null?  null  :  parent.getParent();  Node  nscut  =  parent  ==  null)?  null  :  parent.getParent();  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent  ==  null?  null  :  parent.getParent();  Node  nscut  =  parent  ==  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null?  null  :  parent.getParent();  Node  nscut  =  parent  ==  null)?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    Node    parent    născut    =    parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  ';'  expected	187	None	replace
1060	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  parent  nscut  =  parent  ==  null)?  null  :  parent.getParent();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  parent  nscut  =  parent  ==  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getParent();  Node  parent  nscut  =  parent  ==  null)?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    Node    parent    născut    =    parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  ';'  expected	187	None	replace
1061	[BUG]  [BUGGY]  parent  ==  null?  null  :  parent.getParent();  Node  nscut  =  parent  ==  null)?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  ==  null?  null  :  parent.getParent();  Node  nscut  =  parent  ==  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  ==  null?  null  :  parent.getParent();  Node  nscut  =  parent  ==  null)?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    Node    parent    născut    =    parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	187	None	replace
1062	[BUG]  [BUGGY]  Node  newExpr  =  Node.newString(Token.NAME,  cond.getFirstChild().getString());  return  Node.newString(Token.NAME,  parent.getLastChild().getString());  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  newExpr  =  Node.newString(Token.NAME,  cond.getFirstChild().getString());  return  Node.newString(Token.NAME,  parent.getLastChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  newExpr  =  Node.newString(Token.NAME,  cond.getFirstChild().getString());  return  Node.newString(Token.NAME,  parent.getLastChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    newExpr    =    Node.newString(Token.NAME,    parent.getFirstChild().getString());    return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	169	None	replace
1063	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  Node  return(parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Node  return(parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent!=  null);  Node  return(parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    return(parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	126	None	replace
1064	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Node  return(parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Node  return(parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Node  return(parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    return(parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	126	None	replace
1065	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  parent  ==  null)?  null  :  parent.getLastChild();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  parent  ==  null)?  null  :  parent.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getFirstChild();  parent  ==  null)?  null  :  parent.getLastChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	248	None	replace
1066	[BUG]  [BUGGY]  Node  toString  =  n.getLastChild().getString();  return  Node.newString(Token.NAME,  toString);  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  toString  =  n.getLastChild().getString();  return  Node.newString(Token.NAME,  toString);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  toString  =  n.getLastChild().getString();  return  Node.newString(Token.NAME,  toString);	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    toString    =    parent.getFirstChild().getString();    return    Node.newString(Token.NAME,    toString);    	non-compiled	[CE]  not  a  statement	255	None	replace
1067	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent,  cond,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent,  cond,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent,  cond,  INVALID_REGULAR_EXPRESSION_FLAGS);	  return    Node.newString(Token.NAME,    parent,    cond);    	non-compiled	[CE]  not  a  statement	119	None	replace
1068	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent,  cond,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent,  cond,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent,  cond,  STANDARD_OBJECT_CONSTRUCTORS);	  return    Node.newString(Token.NAME,    parent,    cond);    	non-compiled	[CE]  not  a  statement	119	None	replace
1069	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  Cond.REGEXP_FLAGS,  cond);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  Cond.REGEXP_FLAGS,  cond);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  Cond.REGEXP_FLAGS,  cond);	  return    Node.newString(Token.NAME,    parent,    cond);    	non-compiled	[CE]  not  a  statement	119	None	replace
1070	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  Cond.INVALID_REGULAR_EXPRESSION_FLAGS,  parent);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  Cond.INVALID_REGULAR_EXPRESSION_FLAGS,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  Cond.INVALID_REGULAR_EXPRESSION_FLAGS,  parent);	  return    Node.newString(Token.NAME,    Cond.STANDARD_OBJECT_CONSTRUCTORS,    parent);    	non-compiled	[CE]  not  a  statement	204	None	replace
1071	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent,  Cond.STANDARD_OBJECT_CONSTRUCTORS);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent,  Cond.STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent,  Cond.STANDARD_OBJECT_CONSTRUCTORS);	  return    Node.newString(Token.NAME,    Cond.STANDARD_OBJECT_CONSTRUCTORS,    parent);    	non-compiled	[CE]  not  a  statement	204	None	replace
1072	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getfirstChild().getString());  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getfirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getfirstChild().getString());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString()    +    1);    	non-compiled	[CE]  not  a  statement	27	None	replace
1073	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.CALL?  cond.getType()  :  Token.NAME;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent.getType()  ==  Token.CALL?  cond.getType()  :  Token.NAME;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent.getType()  ==  Token.CALL?  cond.getType()  :  Token.NAME;	  return    parent.getType()    ==    Token.CALL?    parent.getType()    :    Token.NAME;    	non-compiled	[CE]  not  a  statement	134	None	replace
1074	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  ==  null)?  null  :  parent.getLastChild();  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  ==  null)?  null  :  parent.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  ==  null)?  null  :  parent.getLastChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  ';'  expected	145	None	replace
1075	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent!=  null)?  null  :  parent.getLastChild();  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent!=  null)?  null  :  parent.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent!=  null)?  null  :  parent.getLastChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  ';'  expected	145	None	replace
1076	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  STANDARD_OBJECT_CONSTRUCTORS,  parent);  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  STANDARD_OBJECT_CONSTRUCTORS,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  STANDARD_OBJECT_CONSTRUCTORS,  parent);	  return    Node.newString(Token.NAME,    cond.getString(),    parent);    	non-compiled	[CE]  not  a  statement	44	None	replace
1077	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  INVALID_REGULAR_EXPRESSION_FLAGS);	  return    Node.newString(Token.NAME,    cond.getString(),    parent);    	non-compiled	[CE]  not  a  statement	44	None	replace
1078	[BUG]  [BUGGY]  parent  ==  null?  null  :  parent.getParent();  return(parent  ==  null)?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  ==  null?  null  :  parent.getParent();  return(parent  ==  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  ==  null?  null  :  parent.getParent();  return(parent  ==  null)?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    return(parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	34	None	replace
1079	[BUG]  [BUGGY]  parent  ==  null  ||  parent.getType()  ==  Token.FUNCTION;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  ==  null  ||  parent.getType()  ==  Token.FUNCTION;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  ==  null  ||  parent.getType()  ==  Token.FUNCTION;	  return(parent    ==    null)?    null    :    parent.getParent();    return(parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	34	None	replace
1080	[BUG]  [BUGGY]  return  n;  Node  parent  =  n.getParent();  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  n;  Node  parent  =  n.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  n;  Node  parent  =  n.getParent();	  return    parent;    Node    parent    =    n.getParent();    	non-compiled	[CE]  not  a  statement	80	None	replace
1081	[BUG]  [BUGGY]  return  parent;  Node  n  =  n.getParent();  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent;  Node  n  =  n.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent;  Node  n  =  n.getParent();	  return    parent;    Node    parent    =    n.getParent();    	non-compiled	[CE]  not  a  statement	80	None	replace
1082	[BUG]  [BUGGY]  return  parent;  n  =  n.getParent();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent;  n  =  n.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent;  n  =  n.getParent();	  return    parent;    Node    parent    =    n.getParent();    	non-compiled	[CE]  not  a  statement	80	None	replace
1083	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  Node  parent  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  Node  parent  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()    ==    Token.EXPR_RESULT);    Node  parent  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  not  a  statement	3	None	add
1084	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  Node  returnNode  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  Node  returnNode  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()    ==    Token.EXPR_RESULT);    Node  returnNode  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  not  a  statement	3	None	add
1085	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent.getLastChild();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent.getLastChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent.getLastChild();    	non-compiled	[CE]  not  a  statement	63	None	replace
1086	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.EXPR_RESULT);  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(parent.getType()    ==    Token.VAR);    	non-compiled	[CE]  not  a  statement	231	None	replace
1087	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  nextBranch);  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  nextBranch);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  nextBranch);	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    nextBranch    =    cond.getNext();    	non-compiled	[CE]  not  a  statement	164	None	replace
1088	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  firstBranch);  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  firstBranch);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  firstBranch);	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    nextBranch    =    cond.getNext();    	non-compiled	[CE]  not  a  statement	164	None	replace
1089	[BUG]  [BUGGY]  ReturnNodeUtil.newLiteralValue(cond,  false);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  ReturnNodeUtil.newLiteralValue(cond,  false);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	ReturnNodeUtil.newLiteralValue(cond,  false);	  ReturnNodeUtil.newLiteralValue(cond,    true);    	non-compiled	[CE]  not  a  statement	43	None	replace
1090	[BUG]  [BUGGY]  ReturnNodeUtil.newLiteralValue(parent,  true);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  ReturnNodeUtil.newLiteralValue(parent,  true);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	ReturnNodeUtil.newLiteralValue(parent,  true);	  ReturnNodeUtil.newLiteralValue(cond,    true);    	non-compiled	[CE]  not  a  statement	43	None	replace
1091	[BUG]  [BUGGY]  ReturnNodeUtil.newLiteralValue(cond,  true,  parent);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  ReturnNodeUtil.newLiteralValue(cond,  true,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	ReturnNodeUtil.newLiteralValue(cond,  true,  parent);	  ReturnNodeUtil.newLiteralValue(cond,    true);    	non-compiled	[CE]  not  a  statement	43	None	replace
1092	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  return  n;  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  return  n;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  return  n;	          Preconditions.checkArgument(cond.getType()    ==    Token.NAME);    return    parent;    	non-compiled	[CE]  not  a  statement	244	None	replace
1093	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  return  cond;  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  return  cond;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  return  cond;	          Preconditions.checkArgument(cond.getType()    ==    Token.NAME);    return    parent;    	non-compiled	[CE]  not  a  statement	244	None	replace
1094	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  return  null;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  return  null;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  return  null;	          Preconditions.checkArgument(cond.getType()    ==    Token.NAME);    return    parent;    	non-compiled	[CE]  not  a  statement	244	None	replace
1095	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  parent  =  parent!=  null?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  parent  =  parent!=  null?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getNext();  Node  parent  =  parent!=  null?  null  :  parent.getNext();	  return(parent!=    null)?    null    :    parent.getNext();    Node    parent    =    parent!=    null?    null    :    parent.getNext();    	non-compiled	[CE]  not  a  statement	139	None	replace
1096	[BUG]  [BUGGY]  Node  assign  =  parent.getFirstChild();  Preconditions.checkArgument(parent.getType()  ==  Token.ASSIGN);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent.getFirstChild();  Preconditions.checkArgument(parent.getType()  ==  Token.ASSIGN);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node    assign    =    parent.getFirstChild();    Preconditions.checkArgument(parent.getType()  ==  Token.ASSIGN);	  	non-compiled	[CE]  not  a  statement	1	None	add
1097	[BUG]  [BUGGY]  Node  assign  =  parent.getFirstChild();  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent.getFirstChild();  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node    assign    =    parent.getFirstChild();    Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  not  a  statement	1	None	add
1098	[BUG]  [BUGGY]  Node  assign  =  parent.getFirstChild();  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent.getFirstChild();  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node    assign    =    parent.getFirstChild();    Preconditions.checkArgument(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  not  a  statement	1	None	add
1099	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  cond.getLastChild().getString());  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  cond.getLastChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  cond.getLastChild().getString());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    returnNode.newString(Token.NAME,    cond.getLastChild().getString());    	non-compiled	[CE]  not  a  statement	163	None	replace
1100	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.VAR?  parent.getType()  :  Token.NAME  ||  parent.hasChildren();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent.getType()  ==  Token.VAR?  parent.getType()  :  Token.NAME  ||  parent.hasChildren();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent.getType()  ==  Token.VAR?  parent.getType()  :  Token.NAME  ||  parent.hasChildren();	  return    parent.getType()    ==    Token.VAR?    parent.getType()    :    Token.NAME;    	non-compiled	[CE]  not  a  statement	135	None	replace
1101	[BUG]  [BUGGY]  Node  assignName  =  cond.getFirstChild().getNext();  return  Node.newString(Token.NAME,  assignName.getFirstChild().getString());  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assignName  =  cond.getFirstChild().getNext();  return  Node.newString(Token.NAME,  assignName.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assignName  =  cond.getFirstChild().getNext();  return  Node.newString(Token.NAME,  assignName.getFirstChild().getString());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    assign    =    parent.getFirstChild().getNext();    return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	218	None	replace
1102	[BUG]  [BUGGY]  return  parent  ==  null?  parent.getNext()  :  NodeUtil.newLiteralValue(cond,  false));  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent  ==  null?  parent.getNext()  :  NodeUtil.newLiteralValue(cond,  false));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null?  parent.getNext()  :  NodeUtil.newLiteralValue(cond,  false));	  return    parent!=    null?    parent.getParent()    :    NodeUtil.newLiteralValue(cond,    false));    	non-compiled	[CE]  ';'  expected	237	None	replace
1103	[BUG]  [BUGGY]  parent  ==  null?  null  :  parent.getFirstChild();  Node  nscut  =  parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  ==  null?  null  :  parent.getFirstChild();  Node  nscut  =  parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  ==  null?  null  :  parent.getFirstChild();  Node  nscut  =  parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    parent    născut    =    parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	146	None	replace
1104	[BUG]  [BUGGY]  parent!=  null?  null  :  parent.getFirstChild();  Node  nscut  =  parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent!=  null?  null  :  parent.getFirstChild();  Node  nscut  =  parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent!=  null?  null  :  parent.getFirstChild();  Node  nscut  =  parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    parent    născut    =    parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	146	None	replace
1105	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getLastChild();  Node  nscut  =  parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getLastChild();  Node  nscut  =  parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getLastChild();  Node  nscut  =  parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    parent    născut    =    parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  ';'  expected	146	None	replace
1106	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  nscut  =  parent  ==  null)?  null  :  parent.getLastChild();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  nscut  =  parent  ==  null)?  null  :  parent.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  nscut  =  parent  ==  null)?  null  :  parent.getLastChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    parent    născut    =    parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  ';'  expected	146	None	replace
1107	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  nscut  =  parent!=  null)?  null  :  parent.getFirstChild();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  nscut  =  parent!=  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  nscut  =  parent!=  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    parent    născut    =    parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  ';'  expected	146	None	replace
1108	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond,  cond.getFirstChild());  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond,  cond.getFirstChild());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond,  cond.getFirstChild());	  return    Node.newString(Token.NAME,    n,    cond.getFirstChild());    	non-compiled	[CE]  not  a  statement	201	None	replace
1109	[BUG]  [BUGGY]  Node  elseAssign  =  parent.getFirstChild().getString();  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  elseAssign  =  parent.getFirstChild().getString();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  elseAssign  =  parent.getFirstChild().getString();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    thenAssign    =    parent.getFirstChild().getString();    return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	251	None	replace
1110	[BUG]  [BUGGY]  Node  thenBranch  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  thenBranch  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  thenBranch  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    thenAssign    =    parent.getFirstChild().getString();    return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	251	None	replace
1111	[BUG]  [BUGGY]  Node  elseAssign  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  elseAssign  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  elseAssign  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    thenAssign    =    parent.getFirstChild().getString();    return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	251	None	replace
1112	[BUG]  [BUGGY]  Node  var  =  n.getFirstChild();  return  Node.newString(Token.NAME,  var.getFirstChild().getString());  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  var  =  n.getFirstChild();  return  Node.newString(Token.NAME,  var.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  var  =  n.getFirstChild();  return  Node.newString(Token.NAME,  var.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    var    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    var.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	171	None	replace
1113	[BUG]  [BUGGY]  Node  var  =  cond.getFirstChild();  return  Node.newString(Token.NAME,  var.getFirstChild().getString());  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  var  =  cond.getFirstChild();  return  Node.newString(Token.NAME,  var.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  var  =  cond.getFirstChild();  return  Node.newString(Token.NAME,  var.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    var    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    var.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	171	None	replace
1114	[BUG]  [BUGGY]  parent  ==  null?  null  :  parent.getParent();  if(parent!=  null)?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  ==  null?  null  :  parent.getParent();  if(parent!=  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  ==  null?  null  :  parent.getParent();  if(parent!=  null)?  null  :  parent.getParent();	  return(parent!=    null)?    null    :    parent.getParent();    if(parent!=    null)?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	178	None	replace
1115	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Node  var  =  parent.getParent();  Preconditions.checkArgument(var.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Node  var  =  parent.getParent();  Preconditions.checkArgument(var.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()    ==    Token.NAME);    Node  var  =  parent.getParent();  Preconditions.checkArgument(var.getType()  ==  Token.NAME);	  	non-compiled	[CE]  not  a  statement	11	None	add
1116	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Node  var  =  parent.getParent();  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Node  var  =  parent.getParent();  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()    ==    Token.NAME);    Node  var  =  parent.getParent();  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);	  	non-compiled	[CE]  not  a  statement	11	None	add
1117	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Node  assign  =  parent.getParent();  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  preconditions.checkArgument(cond.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Node  assign  =  parent.getParent();  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  preconditions.checkArgument(cond.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()    ==    Token.NAME);    Node  assign  =  parent.getParent();  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  preconditions.checkArgument(cond.getType()  ==  Token.NAME);	  	non-compiled	[CE]  not  a  statement	11	None	add
1118	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  thenAssign);  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  thenAssign);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  thenAssign);	  return    Node.newString(Token.NAME,    cond.getString());    Node    thenAssign    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  not  a  statement	211	None	replace
1119	[BUG]  [BUGGY]  return  n;  Node  parent  =  n.getLastChild();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  n;  Node  parent  =  n.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  n;  Node  parent  =  n.getLastChild();	  return    parent;    Node    parent    =    n.getLastChild();    	non-compiled	[CE]  not  a  statement	83	None	replace
1120	[BUG]  [BUGGY]  return  parent;  Node  n  =  n.getLastChild();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent;  Node  n  =  n.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent;  Node  n  =  n.getLastChild();	  return    parent;    Node    parent    =    n.getLastChild();    	non-compiled	[CE]  not  a  statement	83	None	replace
1121	[BUG]  [BUGGY]  return  parent;  node  =  n.getLastChild();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent;  node  =  n.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent;  node  =  n.getLastChild();	  return    parent;    Node    parent    =    n.getLastChild();    	non-compiled	[CE]  not  a  statement	83	None	replace
1122	[BUG]  [BUGGY]  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  parent  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  parent  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  parent  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    parent    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	99	None	replace
1123	[BUG]  [BUGGY]  ReturnNode.newString(Token.NAME,  cond.getFirstChild().getString());  Node  parent  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  ReturnNode.newString(Token.NAME,  cond.getFirstChild().getString());  Node  parent  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	ReturnNode.newString(Token.NAME,  cond.getFirstChild().getString());  Node  parent  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    parent    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	99	None	replace
1124	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  toString  =  parent.getFirstChild().getString();  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  toString  =  parent.getFirstChild().getString();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  toString  =  parent.getFirstChild().getString();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    toString    =    parent.getFirstChild().getString();    	non-compiled	[CE]  not  a  statement	172	None	replace
1125	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  toString);  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  toString);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  toString);	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    toString    =    parent.getFirstChild().getString();    	non-compiled	[CE]  not  a  statement	172	None	replace
1126	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  cond);  Node  toString  =  parent.getFirstChild().getString();  [CE]  not  a  statement  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  cond);  Node  toString  =  parent.getFirstChild().getString();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  cond);  Node  toString  =  parent.getFirstChild().getString();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    toString    =    parent.getFirstChild().getString();    	non-compiled	[CE]  not  a  statement	172	None	replace
1127	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  (parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  (parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=  null)?  null  :  parent.getFirstChild();  (parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    (parent!=    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	153	None	replace
1128	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getLastChild();  (parent!=  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent!=  null)?  null  :  parent.getLastChild();  (parent!=  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=  null)?  null  :  parent.getLastChild();  (parent!=  null)?  null  :  parent.getFirstChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    (parent!=    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	153	None	replace
1129	[BUG]  [BUGGY]  return  parent;  Node  thenAssign  =  n.getFirstChild();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent;  Node  thenAssign  =  n.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent;  Node  thenAssign  =  n.getFirstChild();	  return    parent;    Node    thenAssign    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	229	None	replace
1130	[BUG]  [BUGGY]  return  thenAssign;  Node  thenAssign  =  n.getFirstChild();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  thenAssign;  Node  thenAssign  =  n.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  thenAssign;  Node  thenAssign  =  n.getFirstChild();	  return    parent;    Node    thenAssign    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	229	None	replace
1131	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null  ||  parent.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent!=  null  ||  parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent!=  null  ||  parent.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	8	None	replace
1132	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.GETPROP);  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.GETPROP);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.GETPROP);	  Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	8	None	replace
1133	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  thenBranch);  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  thenBranch);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  thenBranch);	  return    Node.newString(Token.NAME,    cond.getString());    Node    thenBranch    =    cond.getNext();    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  not  a  statement	197	None	replace
1134	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  n.getLastChild();  return  parent;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  =  n.getLastChild();  return  parent;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent!=  null);  Node  parent  =  n.getLastChild();  return  parent;	  return    parent;    Node    parent    =    n.getLastChild();    return    parent;    	non-compiled	[CE]  not  a  statement	86	None	replace
1135	[BUG]  [BUGGY]  if(parent!=  null)  {  return  parent;  Node  parent  =  n.getLastChild();  return  parent;  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  if(parent!=  null)  {  return  parent;  Node  parent  =  n.getLastChild();  return  parent;  }  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	if(parent!=  null)  {  return  parent;  Node  parent  =  n.getLastChild();  return  parent;  }	  return    parent;    Node    parent    =    n.getLastChild();    return    parent;    	non-compiled	[CE]  not  a  statement	86	None	replace
1136	[BUG]  [BUGGY]  return  parent  ==  null  ||  parent.getType()  ==  Token.FUNCTION;  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent  ==  null  ||  parent.getType()  ==  Token.FUNCTION;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null  ||  parent.getType()  ==  Token.FUNCTION;	  return(parent    ==    null)?    null    :    parent.getParent();    Return(parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	233	None	replace
1137	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild(),  COND);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild(),  COND);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n.getFirstChild(),  COND);	  return    Node.newString(Token.NAME,    n.getFirstChild());    	non-compiled	[CE]  not  a  statement	67	None	replace
1138	[BUG]  [BUGGY]  Node  assign  =  parent.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node    assign    =    parent.getParent();    Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  not  a  statement	5	None	add
1139	[BUG]  [BUGGY]  Node  assign  =  parent.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node    assign    =    parent.getParent();    Preconditions.checkArgument(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  not  a  statement	5	None	add
1140	[BUG]  [BUGGY]  Node  assign  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node    assign    =    parent.getParent();    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  not  a  statement	5	None	add
1141	[BUG]  [BUGGY]  Node  assign  =  parent.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node    assign    =    parent.getParent();    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);	  	non-compiled	[CE]  not  a  statement	5	None	add
1142	[BUG]  [BUGGY]  Node  assign  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node    assign    =    parent.getParent();    Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  not  a  statement	5	None	add
1143	[BUG]  [BUGGY]  Node  assign  =  parent.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.CALL);  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.CALL);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node    assign    =    parent.getParent();    Preconditions.checkArgument(parent.getType()  ==  Token.CALL);	  	non-compiled	[CE]  not  a  statement	5	None	add
1144	[BUG]  [BUGGY]  Node  assign  =  parent.getParent();  AssertionFailedError  var  =  parent.getParent();  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent.getParent();  AssertionFailedError  var  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node    assign    =    parent.getParent();    AssertionFailedError  var  =  parent.getParent();	  	non-compiled	[CE]  not  a  statement	5	None	add
1145	[BUG]  [BUGGY]  return  parent  ==  null?  null  :  parent.getNext();  Node  parent  =  n.getParent();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent  ==  null?  null  :  parent.getNext();  Node  parent  =  n.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null?  null  :  parent.getNext();  Node  parent  =  n.getParent();	  return(parent    ==    null)?    null    :    parent.getNext();    Node    parent    =    n.getParent();    	non-compiled	[CE]  not  a  statement	193	None	replace
1146	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  INVALID_REGULAR_EXPRESSION_FLAGS,  false);  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  INVALID_REGULAR_EXPRESSION_FLAGS,  false);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  INVALID_REGULAR_EXPRESSION_FLAGS,  false);	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString(),    false);    	non-compiled	[CE]  not  a  statement	29	None	replace
1147	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getLastChild().getString(),  false);  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getLastChild().getString(),  false);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getLastChild().getString(),  false);	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString(),    false);    	non-compiled	[CE]  not  a  statement	29	None	replace
1148	[BUG]  [BUGGY]  Node  cond  =  cond.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString());  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  cond  =  cond.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  cond  =  cond.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString());	  return    Node.newString(Token.NAME,    cond.getString());    Node    var    =    cond.getFirstChild();    return    Node.newString(Token.NAME,    var.getString());    	non-compiled	[CE]  not  a  statement	198	None	replace
1149	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  Cond.INSTANCE);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  Cond.INSTANCE);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  Cond.INSTANCE);	  return    Node.newString(Token.NAME,    Cond.STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  not  a  statement	207	None	replace
1150	[BUG]  [BUGGY]  return  parent  ==  null?  parent.getLastChild()  :  NodeUtil.newLiteralValue(cond,  false));  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent  ==  null?  parent.getLastChild()  :  NodeUtil.newLiteralValue(cond,  false));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null?  parent.getLastChild()  :  NodeUtil.newLiteralValue(cond,  false));	  return    parent!=    null?    parent.getFirstChild()    :    NodeUtil.newLiteralValue(cond,    false));    	non-compiled	[CE]  ';'  expected	238	None	replace
1151	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Node  returnNode  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Node  returnNode  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    Node  returnNode  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  not  a  statement	7	None	add
1152	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  not  a  statement	7	None	add
1153	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  NodeUtil.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  NodeUtil.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    NodeUtil.checkState(parent.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  not  a  statement	7	None	add
1154	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  NodeTraversal.traverse(compiler,  parent,  new  FoldArrayAction());  [CE]  not  a  statement  [FE]          RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  NodeTraversal.traverse(compiler,  parent,  new  FoldArrayAction());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    NodeTraversal.traverse(compiler,  parent,  new  FoldArrayAction());	  	non-compiled	[CE]  not  a  statement	7	None	add
1155	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  cond,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  cond,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  cond,  INVALID_REGULAR_EXPRESSION_FLAGS);	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString(),    cond);    	non-compiled	[CE]  not  a  statement	96	None	replace
1156	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  cond,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  cond,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  cond,  STANDARD_OBJECT_CONSTRUCTORS);	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString(),    cond);    	non-compiled	[CE]  not  a  statement	96	None	replace
1157	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  name1,  parent.getFirstChild().getString(),  cond);  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  name1,  parent.getFirstChild().getString(),  cond);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  name1,  parent.getFirstChild().getString(),  cond);	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString(),    cond);    	non-compiled	[CE]  not  a  statement	96	None	replace
1158	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  null);  Node  assign  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  null);  Node  assign  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  null);  Node  assign  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    assign    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	103	None	replace
1159	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent);  Node  assign  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent);  Node  assign  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent);  Node  assign  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    assign    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	103	None	replace
1160	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  assign);  Node  assign  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  assign);  Node  assign  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  assign);  Node  assign  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    assign    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	103	None	replace
1161	[BUG]  [BUGGY]  parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent.getParent();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	127	None	replace
1162	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent.getParent();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent!=  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent!=  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	127	None	replace
1163	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.EXPR_RESULT);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(parent.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  not  a  statement	4	None	replace
1164	[BUG]  [BUGGY]  return  parent  <  null?  null  :  parent;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent  <  null?  null  :  parent;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  <  null?  null  :  parent;	  return    parent;    return    parent;    	non-compiled	[CE]  not  a  statement	226	None	replace
1165	[BUG]  [BUGGY]  return  n.getParent();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  n.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  n.getParent();	  return    parent.getParent();    	non-compiled	[CE]  not  a  statement	132	None	replace
1166	[BUG]  [BUGGY]  parent!=  null?  null  :  parent.getFirstChild();  if(parent!=  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent!=  null?  null  :  parent.getFirstChild();  if(parent!=  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent!=  null?  null  :  parent.getFirstChild();  if(parent!=  null)?  null  :  parent.getFirstChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    if(parent!=    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	208	None	replace
1167	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  if(parent!=  null)?  null  :  parent.getLastChild();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  if(parent!=  null)?  null  :  parent.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getFirstChild();  if(parent!=  null)?  null  :  parent.getLastChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    if(parent!=    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	208	None	replace
1168	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(lhs,  false);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.newLiteralValue(lhs,  false);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(lhs,  false);	  return    NodeUtil.newLiteralValue(parent,    false);    	non-compiled	[CE]  not  a  statement	39	None	replace
1169	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  thenBranch  =  cond.getFirstChild().getNext();  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  thenBranch  =  cond.getFirstChild().getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  thenBranch  =  cond.getFirstChild().getNext();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    thenBranch    =    cond.getFirstChild().getNext();    	non-compiled	[CE]  not  a  statement	165	None	replace
1170	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getLastChild().getString());  Node  thenBranch  =  cond.getFirstChild().getNext();  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getLastChild().getString());  Node  thenBranch  =  cond.getFirstChild().getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getLastChild().getString());  Node  thenBranch  =  cond.getFirstChild().getNext();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    thenBranch    =    cond.getFirstChild().getNext();    	non-compiled	[CE]  not  a  statement	165	None	replace
1171	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  thenBranch);  node  =  cond.getFirstChild().getNext();  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  thenBranch);  node  =  cond.getFirstChild().getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  thenBranch);  node  =  cond.getFirstChild().getNext();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    thenBranch    =    cond.getFirstChild().getNext();    	non-compiled	[CE]  not  a  statement	165	None	replace
1172	[BUG]  [BUGGY]  Node  assign  =  node.getFirstChild();  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  node.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assign  =  node.getFirstChild();	  Node    assign    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	2	None	replace
1173	[BUG]  [BUGGY]  return  parent  ==  null?  null  :  parent.getParent();  (parent  ==  null)?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent  ==  null?  null  :  parent.getParent();  (parent  ==  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null?  null  :  parent.getParent();  (parent  ==  null)?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    (parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	38	None	replace
1174	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  (parent  ==  null)?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  (parent  ==  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getNext();  (parent  ==  null)?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    (parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	38	None	replace
1175	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  (parent!=  null)?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  (parent!=  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getParent();  (parent!=  null)?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    (parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	38	None	replace
1176	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  returnNode  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  returnNode  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()    ==    Token.NAME);    Node  returnNode  =  parent.getFirstChild();  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  not  a  statement	9	None	add
1177	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()    ==    Token.NAME);    Node  parent  =  n.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  not  a  statement	9	None	add
1178	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()    ==    Token.NAME);    Preconditions.checkArgument(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  not  a  statement	9	None	add
1179	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkNotNull(parent.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]          RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkNotNull(parent.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()    ==    Token.NAME);    Preconditions.checkNotNull(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  not  a  statement	9	None	add
1180	[BUG]  [BUGGY]  return  parent  ==  null?  parent.getNext()  :  NodeUtil.newLiteralValue(cond,  true));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent  ==  null?  parent.getNext()  :  NodeUtil.newLiteralValue(cond,  true));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null?  parent.getNext()  :  NodeUtil.newLiteralValue(cond,  true));	  return    parent!=    null?    parent.getParent()    :    NodeUtil.newLiteralValue(cond,    true));    	non-compiled	[CE]  ';'  expected	240	None	replace
1181	[BUG]  [BUGGY]  parent  ==  null?  null  :  parent.getParent();  return(parent!=  null)?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  ==  null?  null  :  parent.getParent();  return(parent!=  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  ==  null?  null  :  parent.getParent();  return(parent!=  null)?  null  :  parent.getParent();	  return(parent!=    null)?    null    :    parent.getParent();    Node    parent    =    n.getParent();    return(parent!=    null)?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	179	None	replace
1182	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getfirstChild().getString());  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getfirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getfirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString()    +    1);    	non-compiled	[CE]  not  a  statement	98	None	replace
1183	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  lhs  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  lhs  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  lhs  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    lhs    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	104	None	replace
1184	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString(),  parent);  Node  lhs  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString(),  parent);  Node  lhs  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n.getFirstChild().getString(),  parent);  Node  lhs  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    lhs    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	104	None	replace
1185	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent);  Node  lhs  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent);  Node  lhs  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent);  Node  lhs  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    lhs    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	104	None	replace
1186	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  n);  Node  lhs  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]                        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  n);  Node  lhs  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  n);  Node  lhs  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    lhs    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	104	None	replace
1187	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  lhs);  [CE]  not  a  statement  [FE]                          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  lhs);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  lhs);	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    lhs    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	104	None	replace
1188	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString(),  lhs);  [CE]  not  a  statement  [FE]                            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString(),  lhs);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n.getFirstChild().getString(),  lhs);	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    lhs    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	104	None	replace
1189	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS,  NOT_SAFE_TO_FOLD_WITHOUT_ARGS);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS,  NOT_SAFE_TO_FOLD_WITHOUT_ARGS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS,  NOT_SAFE_TO_FOLD_WITHOUT_ARGS);	  return    Node.newString(Token.NAME,    cond.getFirstChild(),    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  not  a  statement	69	None	replace
1190	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  parent  =  parent!=  null?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  parent  =  parent!=  null?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getParent();  Node  parent  =  parent!=  null?  null  :  parent.getParent();	  return(parent!=    null)?    null    :    parent.getParent();    Node    parent    =    parent!=    null?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	109	None	replace
1191	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.EXPR_RESULT,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.EXPR_RESULT,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.EXPR_RESULT,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Preconditions.checkArgument(cond.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  not  a  statement	157	None	replace
1192	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS);	  Preconditions.checkArgument(cond.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  not  a  statement	157	None	replace
1193	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.EXPR_RESULT,  COND);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.EXPR_RESULT,  COND);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.EXPR_RESULT,  COND);	  Preconditions.checkArgument(cond.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  not  a  statement	157	None	replace
1194	[BUG]  [BUGGY]  return(n  ==  null)?  null  :  parent.getNext();  Node  parent  nscut  =  parent  ==  null)?  null  :  parent.getNext();  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(n  ==  null)?  null  :  parent.getNext();  Node  parent  nscut  =  parent  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(n  ==  null)?  null  :  parent.getNext();  Node  parent  nscut  =  parent  ==  null)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    Node    parent    născut    =    parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  ';'  expected	191	None	replace
1195	[BUG]  [BUGGY]  return  parent  ==  null?  null  :  parent.getNext();  Node  nscut  =  parent  ==  null)?  null  :  parent.getNext();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent  ==  null?  null  :  parent.getNext();  Node  nscut  =  parent  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null?  null  :  parent.getNext();  Node  nscut  =  parent  ==  null)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    Node    parent    născut    =    parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  ';'  expected	191	None	replace
1196	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  (parent!=  null)?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  n.getParent();  (parent!=  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  n.getParent();  (parent!=  null)?  null  :  parent.getParent();	  return(parent!=    null)?    null    :    parent.getParent();    (parent!=    null)?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	114	None	replace
1197	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getNext();  (parent!=  null)?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent!=  null)?  null  :  parent.getNext();  (parent!=  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=  null)?  null  :  parent.getNext();  (parent!=  null)?  null  :  parent.getParent();	  return(parent!=    null)?    null    :    parent.getParent();    (parent!=    null)?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	114	None	replace
1198	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  var  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  var  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  var  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    var    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	101	None	replace
1199	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  var);  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  var);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  var);	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    var    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	101	None	replace
1200	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  null);  Node  var  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  null);  Node  var  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  null);  Node  var  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    var    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	101	None	replace
1201	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString(),  var);  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString(),  var);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n.getFirstChild().getString(),  var);	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    var    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	101	None	replace
1202	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  parent  =  parent.getNext();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  parent  =  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getParent();  Node  parent  =  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    Node    parent    =    parent.getNext();    	non-compiled	[CE]  not  a  statement	74	None	replace
1203	[BUG]  [BUGGY]  Node  cond  =  parent.getLastChild();  return  Node.newString(Token.NAME,  cond.getString());  [CE]  not  a  statement  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  cond  =  parent.getLastChild();  return  Node.newString(Token.NAME,  cond.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  cond  =  parent.getLastChild();  return  Node.newString(Token.NAME,  cond.getString());	  return    Node.newString(Token.NAME,    cond.getString());    Node    cond    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  not  a  statement	56	None	replace
1204	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getLastChild(),  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getLastChild(),  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getLastChild(),  STANDARD_OBJECT_CONSTRUCTORS);	  return    Node.newString(Token.NAME,    cond.getFirstChild(),    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  not  a  statement	70	None	replace
1205	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS,  NOT_SAFE_TO_FOLD_WITHOUT_ARGS);  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS,  NOT_SAFE_TO_FOLD_WITHOUT_ARGS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS,  NOT_SAFE_TO_FOLD_WITHOUT_ARGS);	  return    Node.newString(Token.NAME,    cond.getFirstChild(),    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  not  a  statement	70	None	replace
1206	[BUG]  [BUGGY]  ReturnNode.newString(Token.NAME,  cond.getFirstChild().getString());  Node  parent  =  parent.getParent();  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  ReturnNode.newString(Token.NAME,  cond.getFirstChild().getString());  Node  parent  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	ReturnNode.newString(Token.NAME,  cond.getFirstChild().getString());  Node  parent  =  parent.getParent();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    parent    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	100	None	replace
1207	[BUG]  [BUGGY]  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  parent  =  parent.getLastChild();  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  parent  =  parent.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  parent  =  parent.getLastChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    parent    =    parent.getLastChild();    	non-compiled	[CE]  not  a  statement	102	None	replace
1208	[BUG]  [BUGGY]  ReturnNode.newString(Token.NAME,  cond.getFirstChild().getString());  Node  parent  =  parent.getLastChild();  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  ReturnNode.newString(Token.NAME,  cond.getFirstChild().getString());  Node  parent  =  parent.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	ReturnNode.newString(Token.NAME,  cond.getFirstChild().getString());  Node  parent  =  parent.getLastChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    parent    =    parent.getLastChild();    	non-compiled	[CE]  not  a  statement	102	None	replace
1209	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  null,  false);  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  null,  false);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  null,  false);	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString(),    false);    	non-compiled	[CE]  not  a  statement	200	None	replace
1210	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  DEFAULT_EXPRESSION_FLAGS,  false);  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  DEFAULT_EXPRESSION_FLAGS,  false);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  DEFAULT_EXPRESSION_FLAGS,  false);	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString(),    false);    	non-compiled	[CE]  not  a  statement	200	None	replace
1211	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  null);  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  null);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  null);	  return    Node.newString(Token.NAME,    cond.getString());    Node    cond    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	55	None	replace
1212	[BUG]  [BUGGY]  return  parent;  Node  assign  =  parent.getNext();  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent;  Node  assign  =  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent;  Node  assign  =  parent.getNext();	  return    parent;    Node    assign    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	225	None	replace
1213	[BUG]  [BUGGY]  return  parent;  Node  assign  =  n.getParent();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent;  Node  assign  =  n.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent;  Node  assign  =  n.getParent();	  return    parent;    Node    assign    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	225	None	replace
1214	[BUG]  [BUGGY]  return  n;  Node  assign  =  parent.getParent();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  n;  Node  assign  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  n;  Node  assign  =  parent.getParent();	  return    parent;    Node    assign    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	225	None	replace
1215	[BUG]  [BUGGY]  return  assign;  Node  assign  =  n.getParent();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  assign;  Node  assign  =  n.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  assign;  Node  assign  =  n.getParent();	  return    parent;    Node    assign    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	225	None	replace
1216	[BUG]  [BUGGY]  return  parent;  Node  assign  =  n.getLastChild();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent;  Node  assign  =  n.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent;  Node  assign  =  n.getLastChild();	  return    parent;    Node    assign    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	227	None	replace
1217	[BUG]  [BUGGY]  return  n;  Node  assign  =  n.getFirstChild();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  n;  Node  assign  =  n.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  n;  Node  assign  =  n.getFirstChild();	  return    parent;    Node    assign    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	227	None	replace
1218	[BUG]  [BUGGY]  return  assign;  Node  assign  =  n.getLastChild();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  assign;  Node  assign  =  n.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  assign;  Node  assign  =  n.getLastChild();	  return    parent;    Node    assign    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	227	None	replace
1219	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  var.getString());  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  var.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  var.getString());	  return    Node.newString(Token.NAME,    cond.getString());    Node    var    =    cond.getNext();    	non-compiled	[CE]  not  a  statement	195	None	replace
1220	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond,  INVALID_REGULAR_EXPRESSION_FLAGS);	  return    Node.newString(Token.NAME,    cond,    parent);    	non-compiled	[CE]  not  a  statement	117	None	replace
1221	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond,  INVALID_REGULAR_EXPRESSION_FLAGS,  parent);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond,  INVALID_REGULAR_EXPRESSION_FLAGS,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond,  INVALID_REGULAR_EXPRESSION_FLAGS,  parent);	  return    Node.newString(Token.NAME,    cond,    parent);    	non-compiled	[CE]  not  a  statement	117	None	replace
1222	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  INVALID_REGULAR_FLAGS);  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  INVALID_REGULAR_FLAGS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  INVALID_REGULAR_FLAGS);	  return    Node.newString(Token.NAME,    cond.getString());    Node    var    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	52	None	replace
1223	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  if(parent!=  null)?  null  :  parent.getParent();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  if(parent!=  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getNext();  if(parent!=  null)?  null  :  parent.getParent();	  return(parent!=    null)?    null    :    parent.getNext();    if(parent!=    null)?    null    :    parent.getNext();    	non-compiled	[CE]  illegal  start  of  expression	234	None	replace
1224	[BUG]  [BUGGY]  Node  returnNode  =  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [CE]  not  a  statement  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  returnNode  =  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  returnNode  =  Node.newString(Token.NAME,  cond.getFirstChild().getString());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    var    =    cond.getFirstChild();    	non-compiled	[CE]  not  a  statement	22	None	replace
1225	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  NON_OBJECT_CONSTRUCTORS);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  NON_OBJECT_CONSTRUCTORS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild(),  NON_OBJECT_CONSTRUCTORS);	  return    Node.newString(Token.NAME,    cond.getFirstChild(),    SHORT_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  not  a  statement	202	None	replace
1226	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.FUNCTION  ||  CondUtil.isLiteralValue(cond));  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.FUNCTION  ||  CondUtil.isLiteralValue(cond));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.FUNCTION  ||  CondUtil.isLiteralValue(cond));	  Preconditions.checkArgument(cond.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	158	None	replace
1227	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.FUNCTION  ||  NodeUtil.isLiteralValue(cond));  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.FUNCTION  ||  NodeUtil.isLiteralValue(cond));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.FUNCTION  ||  NodeUtil.isLiteralValue(cond));	  Preconditions.checkArgument(cond.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	158	None	replace
1228	[BUG]  [BUGGY]  return  parent  ==  null?  null  :  parent.getNext();  (parent  ==  null)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent  ==  null?  null  :  parent.getNext();  (parent  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null?  null  :  parent.getNext();  (parent  ==  null)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    (parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  not  a  statement	192	None	replace
1229	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  parent.getType()  :  Token.FUNCTION_EXPR_RESULT;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent.getType()  ==  Token.NAME?  parent.getType()  :  Token.FUNCTION_EXPR_RESULT;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent.getType()  ==  Token.NAME?  parent.getType()  :  Token.FUNCTION_EXPR_RESULT;	  return    parent.getType()    ==    Token.NAME?    parent.getType()    :    Token.FUNCTION;    	non-compiled	[CE]  not  a  statement	136	None	replace
1230	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  parent.getType()  :  Token.FUNCTION_SIGNATURE;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent.getType()  ==  Token.NAME?  parent.getType()  :  Token.FUNCTION_SIGNATURE;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent.getType()  ==  Token.NAME?  parent.getType()  :  Token.FUNCTION_SIGNATURE;	  return    parent.getType()    ==    Token.NAME?    parent.getType()    :    Token.FUNCTION;    	non-compiled	[CE]  not  a  statement	136	None	replace
1231	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  cond.getType()  :  Token.FUNCTION;  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent.getType()  ==  Token.NAME?  cond.getType()  :  Token.FUNCTION;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent.getType()  ==  Token.NAME?  cond.getType()  :  Token.FUNCTION;	  return    parent.getType()    ==    Token.NAME?    parent.getType()    :    Token.FUNCTION;    	non-compiled	[CE]  not  a  statement	136	None	replace
1232	[BUG]  [BUGGY]  Node  elseAssign  =  parent.getFirstChild().getNext();  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  elseAssign  =  parent.getFirstChild().getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  elseAssign  =  parent.getFirstChild().getNext();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    thenAssign    =    parent.getFirstChild().getNext();    return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	250	None	replace
1233	[BUG]  [BUGGY]  Node  thenBranch  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  thenBranch  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  thenBranch  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    thenAssign    =    parent.getFirstChild().getNext();    return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	250	None	replace
1234	[BUG]  [BUGGY]  Node  thenBranch  =  parent.getFirstChild().getNext();  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  thenBranch  =  parent.getFirstChild().getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  thenBranch  =  parent.getFirstChild().getNext();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    thenAssign    =    parent.getFirstChild().getNext();    return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	250	None	replace
1235	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(cond,  true,  null);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.newLiteralValue(cond,  true,  null);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(cond,  true,  null);	  return    NodeUtil.newLiteralValue(cond,    true,    false);    	non-compiled	[CE]  not  a  statement	92	None	replace
1236	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.cloneTree(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.cloneTree(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.cloneTree(),  INVALID_REGULAR_EXPRESSION_FLAGS);	  return    Node.newString(Token.NAME,    cond.cloneTree());    	non-compiled	[CE]  not  a  statement	206	None	replace
1237	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.cloneTree(),  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.cloneTree(),  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.cloneTree(),  STANDARD_OBJECT_CONSTRUCTORS);	  return    Node.newString(Token.NAME,    cond.cloneTree());    	non-compiled	[CE]  not  a  statement	206	None	replace
1238	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.cloneTree(),  STANDARD_OBJECT_SYNTHETIC);  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.cloneTree(),  STANDARD_OBJECT_SYNTHETIC);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.cloneTree(),  STANDARD_OBJECT_SYNTHETIC);	  return    Node.newString(Token.NAME,    cond.cloneTree());    	non-compiled	[CE]  not  a  statement	206	None	replace
1239	[BUG]  [BUGGY]  return  parent  ==  null?  null  :  parent.getParent();  Node  parent  =  parent  ==  null)?  null  :  parent.getParent();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent  ==  null?  null  :  parent.getParent();  Node  parent  =  parent  ==  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null?  null  :  parent.getParent();  Node  parent  =  parent  ==  null)?  null  :  parent.getParent();	  return(parent!=    null)?    null    :    parent.getParent();    Node    parent    =    parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  ';'  expected	110	None	replace
1240	[BUG]  [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.NAME  &&  NodeUtil.isLiteralValue(cond));  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.NAME  &&  NodeUtil.isLiteralValue(cond));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(cond.getType()  ==  Token.NAME  &&  NodeUtil.isLiteralValue(cond));	          Preconditions.checkState(cond.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	166	None	replace
1241	[BUG]  [BUGGY]  Node  thenAssign  =  cond.getFirstChild().getFirstChild();  return  Node.newString(Token.NAME,  thenAssign.getString());  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  thenAssign  =  cond.getFirstChild().getFirstChild();  return  Node.newString(Token.NAME,  thenAssign.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  thenAssign  =  cond.getFirstChild().getFirstChild();  return  Node.newString(Token.NAME,  thenAssign.getString());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    thenAssign    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	215	None	replace
1242	[BUG]  [BUGGY]  Node  thenBranch  =  cond.getFirstChild();  return  Node.newString(Token.NAME,  thenBranch.getFirstChild().getString());  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  thenBranch  =  cond.getFirstChild();  return  Node.newString(Token.NAME,  thenBranch.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  thenBranch  =  cond.getFirstChild();  return  Node.newString(Token.NAME,  thenBranch.getFirstChild().getString());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    thenAssign    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	215	None	replace
1243	[BUG]  [BUGGY]  parent  ==  null?  null  :  parent.getFirstChild();  if(parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  ==  null?  null  :  parent.getFirstChild();  if(parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  ==  null?  null  :  parent.getFirstChild();  if(parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    if(parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	245	None	replace
1244	[BUG]  [BUGGY]  if(parent!=  null)  {  return  parent;  Node  return  parent;  }  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  if(parent!=  null)  {  return  parent;  Node  return  parent;  }  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	if(parent!=  null)  {  return  parent;  Node  return  parent;  }	  return    parent;    Node    return    parent;    	non-compiled	[CE]  not  a  statement	175	None	replace
1245	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.FUNCTION)  {  return  parent;  Node  return  parent;  }  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  if(cond.getType()  ==  Token.FUNCTION)  {  return  parent;  Node  return  parent;  }  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	if(cond.getType()  ==  Token.FUNCTION)  {  return  parent;  Node  return  parent;  }	  return    parent;    Node    return    parent;    	non-compiled	[CE]  not  a  statement	175	None	replace
1246	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.FUNCTION);  Node  return  parent;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.FUNCTION);  Node  return  parent;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.FUNCTION);  Node  return  parent;	  return    parent;    Node    return    parent;    	non-compiled	[CE]  not  a  statement	175	None	replace
1247	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond,  REGEXP_FLAGS_RE);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond,  REGEXP_FLAGS_RE);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond,  REGEXP_FLAGS_RE);	  return    Node.newString(Token.NAME,    cond);    	non-compiled	[CE]  not  a  statement	116	None	replace
1248	[BUG]  [BUGGY]  ReturnNodeUtil.newLiteralValue(parent,  false);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  ReturnNodeUtil.newLiteralValue(parent,  false);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	ReturnNodeUtil.newLiteralValue(parent,  false);	  return    NodeUtil.newLiteralValue(n,    false);    	non-compiled	[CE]  not  a  statement	40	None	replace
1249	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  null);  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  null);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  null);	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    var    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	19	None	replace
1250	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.BLOCK,  parent);  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.BLOCK,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.BLOCK,  parent);	  Preconditions.checkArgument(cond.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  not  a  statement	230	None	replace
1251	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.BLOCK  ||!NodeUtil.isLiteralValue(cond));  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.BLOCK  ||!NodeUtil.isLiteralValue(cond));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.BLOCK  ||!NodeUtil.isLiteralValue(cond));	  Preconditions.checkArgument(cond.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  not  a  statement	230	None	replace
1252	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.BLOCK  &&  NodeUtil.isLiteralValue(cond));  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.BLOCK  &&  NodeUtil.isLiteralValue(cond));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.BLOCK  &&  NodeUtil.isLiteralValue(cond));	  Preconditions.checkArgument(cond.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  not  a  statement	230	None	replace
1253	[BUG]  [BUGGY]  return  parent  ==  null?  null  :  parent.getNext();  (parent!=  null)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent  ==  null?  null  :  parent.getNext();  (parent!=  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null?  null  :  parent.getNext();  (parent!=  null)?  null  :  parent.getNext();	  return(parent!=    null)?    null    :    parent.getNext();    (parent!=    null)?    null    :    parent.getNext();    	non-compiled	[CE]  not  a  statement	149	None	replace
1254	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getNext();  (parent  ==  null)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent!=  null)?  null  :  parent.getNext();  (parent  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=  null)?  null  :  parent.getNext();  (parent  ==  null)?  null  :  parent.getNext();	  return(parent!=    null)?    null    :    parent.getNext();    (parent!=    null)?    null    :    parent.getNext();    	non-compiled	[CE]  not  a  statement	149	None	replace
1255	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  parent  =  parent!=  null)?  null  :  parent.getNext();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  parent  =  parent!=  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getParent();  Node  parent  =  parent!=  null)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    Node    parent    =    parent!=    null)?    null    :    parent.getNext();    	non-compiled	[CE]  ';'  expected	76	None	replace
1256	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Node  returnNode  =  parent.getFirstChild();  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Node  returnNode  =  parent.getFirstChild();  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()    ==    Token.FUNCTION);    Node  returnNode  =  parent.getFirstChild();  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  not  a  statement	13	None	add
1257	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  NodeUtil.checkArgument(parent.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  NodeUtil.checkArgument(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()    ==    Token.FUNCTION);    NodeUtil.checkArgument(parent.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  not  a  statement	13	None	add
1258	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  NodeTraversal.traverse(compiler,  parent,  new  FoldArrayAction());  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  NodeTraversal.traverse(compiler,  parent,  new  FoldArrayAction());  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()    ==    Token.FUNCTION);    NodeTraversal.traverse(compiler,  parent,  new  FoldArrayAction());  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  not  a  statement	13	None	add
1259	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Node  assign  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Node  assign  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    Node  assign  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  not  a  statement	7	None	add
1260	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  not  a  statement	7	None	add
1261	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  not  a  statement	7	None	add
1262	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Node  assign  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]          RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Node  assign  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    Node  assign  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  not  a  statement	7	None	add
1263	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.CATCH);  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.CATCH);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.CATCH);	  Preconditions.checkArgument(parent.getType()    ==    Token.VAR);    	non-compiled	[CE]  not  a  statement	231	None	replace
1264	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.BLOCK);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.BLOCK);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.BLOCK);	  Preconditions.checkArgument(parent.getType()    ==    Token.VAR);    	non-compiled	[CE]  not  a  statement	231	None	replace
1265	[BUG]  [BUGGY]  return(parent  ==  null  ||  parent.getType()  ==  Token.NAME)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null  ||  parent.getType()  ==  Token.NAME)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null  ||  parent.getType()  ==  Token.NAME)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    return(parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	125	None	replace
1266	[BUG]  [BUGGY]  if(parent!=  null)  {  return  parent.getFirstChild();  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  if(parent!=  null)  {  return  parent.getFirstChild();  }  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	if(parent!=  null)  {  return  parent.getFirstChild();  }	  return(parent!=    null)?    null    :    parent.getFirstChild();    Return(parent!=    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	210	None	replace
1267	[BUG]  [BUGGY]  Preconditions.checkState(parent  ==  null);  Node  parent  =  parent  ==  null?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent  ==  null);  Node  parent  =  parent  ==  null?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent  ==  null);  Node  parent  =  parent  ==  null?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    Node    parent    =    parent    ==    null?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	35	None	replace
1268	[BUG]  [BUGGY]  return  parent!=  null?  null  :  parent.cloneTree();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent!=  null?  null  :  parent.cloneTree();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null?  null  :  parent.cloneTree();	  return    parent!=    null?    null    :    parent;    	non-compiled	[CE]  not  a  statement	184	None	replace
1269	[BUG]  [BUGGY]  return  parent!=  null?  null  :  parent.child;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent!=  null?  null  :  parent.child;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null?  null  :  parent.child;	  return    parent!=    null?    null    :    parent;    	non-compiled	[CE]  not  a  statement	184	None	replace
1270	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent.getFirstChild().getString());  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    toString    =    parent.getFirstChild().getString();    return    Node.newString(Token.NAME,    toString,    parent.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	256	None	replace
1271	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false))  {  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  }  [CE]  not  a  statement  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false))  {  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  }  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	if(NodeUtil.isLiteralValue(cond,  false))  {  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  }	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    toString    =    parent.getFirstChild().getString();    return    Node.newString(Token.NAME,    toString,    parent.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	256	None	replace
1272	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true))  {  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  }  [CE]  not  a  statement  [FE]                        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true))  {  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  }  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	if(NodeUtil.isLiteralValue(cond,  true))  {  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  }	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    toString    =    parent.getFirstChild().getString();    return    Node.newString(Token.NAME,    toString,    parent.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	256	None	replace
1273	[BUG]  [BUGGY]  if(parent!=  null)return  null;  if(parent!=  null)return  null;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  if(parent!=  null)return  null;  if(parent!=  null)return  null;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	if(parent!=  null)return  null;  if(parent!=  null)return  null;	  return(parent!=    null)?    null    :    parent.getParent();    if(parent!=    null)?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	178	None	replace
1274	[BUG]  [BUGGY]  if(parent!=  null)return  null;  if(parent  ==  null)return  null;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  if(parent!=  null)return  null;  if(parent  ==  null)return  null;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	if(parent!=  null)return  null;  if(parent  ==  null)return  null;	  return(parent!=    null)?    null    :    parent.getParent();    if(parent!=    null)?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	178	None	replace
1275	[BUG]  [BUGGY]  if(parent!=  null)return  null;  if(parent!=  null)?  null  :  parent.getParent();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  if(parent!=  null)return  null;  if(parent!=  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	if(parent!=  null)return  null;  if(parent!=  null)?  null  :  parent.getParent();	  return(parent!=    null)?    null    :    parent.getParent();    if(parent!=    null)?    null    :    parent.getParent();    	non-compiled	[CE]  illegal  start  of  expression	178	None	replace
1276	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  NON_GLOBAL_VALUE);  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  NON_GLOBAL_VALUE);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  NON_GLOBAL_VALUE);	  return    Node.newString(Token.NAME,    cond.getString());    Node    var    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	52	None	replace
1277	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  PROPERTY);  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  PROPERTY);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  PROPERTY);	  return    Node.newString(Token.NAME,    cond.getString());    Node    var    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	52	None	replace
1278	[BUG]  [BUGGY]  parent!=  null?  parent.getFirstChild()  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent!=  null?  parent.getFirstChild()  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent!=  null?  parent.getFirstChild()  :  parent.getFirstChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent.getFirstChild();    return(parent!=    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	154	None	replace
1279	[BUG]  [BUGGY]  parent!=  null?  parent.getFirstChild()  :  parent.getFirstChild();  return(parent!=  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent!=  null?  parent.getFirstChild()  :  parent.getFirstChild();  return(parent!=  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent!=  null?  parent.getFirstChild()  :  parent.getFirstChild();  return(parent!=  null)?  null  :  parent.getFirstChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent.getFirstChild();    return(parent!=    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	154	None	replace
1280	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  COND_OBJECT_CONSTRUCTORS,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  COND_OBJECT_CONSTRUCTORS,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild(),  COND_OBJECT_CONSTRUCTORS,  INVALID_REGULAR_EXPRESSION_FLAGS);	  return    Node.newString(Token.NAME,    cond.getFirstChild(),    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  not  a  statement	70	None	replace
1281	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS,  SAFE_TO_FOLD_WITHOUT_ARGS);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS,  SAFE_TO_FOLD_WITHOUT_ARGS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS,  SAFE_TO_FOLD_WITHOUT_ARGS);	  return    Node.newString(Token.NAME,    cond.getFirstChild(),    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  not  a  statement	69	None	replace
1282	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  lhs  =  cond.getLastChild();  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  lhs  =  cond.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  lhs  =  cond.getLastChild();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    lhs    =    cond.getLastChild();    	non-compiled	[CE]  not  a  statement	20	None	replace
1283	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Node  lhs  =  cond.getLastChild();  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Node  lhs  =  cond.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Node  lhs  =  cond.getLastChild();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    lhs    =    cond.getLastChild();    	non-compiled	[CE]  not  a  statement	20	None	replace
1284	[BUG]  [BUGGY]  if(parent  ==  null)?  null  :  parent.getParent();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  if(parent  ==  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	if(parent  ==  null)?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    if(parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
1285	[BUG]  [BUGGY]  if(parent  ==  null)return  null;  if(parent!=  null)return  null;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  if(parent  ==  null)return  null;  if(parent!=  null)return  null;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	if(parent  ==  null)return  null;  if(parent!=  null)return  null;	  return(parent    ==    null)?    null    :    parent.getParent();    if(parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	37	None	replace
1286	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  Node  assign  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  Node  assign  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()    ==    Token.EXPR_RESULT);    Node  assign  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  not  a  statement	3	None	add
1287	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  not  a  statement	3	None	add
1288	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(cond.getType()  ==  Token.EXPR_RESULT);  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkState(cond.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkState(cond.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  not  a  statement	3	None	add
1289	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(parent.getType()  ==  Token.EXPR_RESULT);  [CE]  not  a  statement  [FE]          RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  Preconditions.checkArgument(parent.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()    ==    Token.EXPR_RESULT);    Preconditions.checkArgument(parent.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  not  a  statement	3	None	add
1290	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=  null)?  null  :  parent.getFirstChild();  parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	248	None	replace
1291	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent.getLastChild().getString());  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent.getLastChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent.getLastChild().getString());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    returnNode.newString(Token.NAME,    cond.getLastChild().getString());    	non-compiled	[CE]  not  a  statement	163	None	replace
1292	[BUG]  [BUGGY]  return  parent!=  null?  parent.getFirstChild()  :  NodeUtil.newLiteralValue(cond,  false),  cond);  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent!=  null?  parent.getFirstChild()  :  NodeUtil.newLiteralValue(cond,  false),  cond);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null?  parent.getFirstChild()  :  NodeUtil.newLiteralValue(cond,  false),  cond);	  return    parent!=    null?    parent.getFirstChild()    :    NodeUtil.newLiteralValue(cond,    false));    	non-compiled	[CE]  ';'  expected	238	None	replace
1293	[BUG]  [BUGGY]  Node  assignName  =  n.getFirstChild().getNext();  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assignName  =  n.getFirstChild().getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assignName  =  n.getFirstChild().getNext();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    assign    =    parent.getFirstChild().getNext();    return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	218	None	replace
1294	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  var  =  cond.getNext();  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  var  =  cond.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  var  =  cond.getNext();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    var    =    cond.getNext();    	non-compiled	[CE]  not  a  statement	162	None	replace
1295	[BUG]  [BUGGY]  Return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Return  Node.newString(Token.NAME,  parent.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString()    +    1);    	non-compiled	[CE]  ';'  expected	98	None	replace
1296	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  NodeUtil.mayHaveSideEffects(n);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	NodeUtil.mayHaveSideEffects(n);	  ReturnNodeUtil.newLiteralValue(cond,    true);    	non-compiled	[CE]  not  a  statement	43	None	replace
1297	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  cond);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  NodeUtil.removeChild(parent,  cond);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	NodeUtil.removeChild(parent,  cond);	  ReturnNodeUtil.newLiteralValue(cond,    true);    	non-compiled	[CE]  not  a  statement	43	None	replace
1298	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  var  =  cond.getLastChild();  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  var  =  cond.getLastChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  var  =  cond.getLastChild();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    var    =    cond.getLastChild();    	non-compiled	[CE]  not  a  statement	161	None	replace
1299	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  var  =  cond.getLastChild());  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  var  =  cond.getLastChild());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  var  =  cond.getLastChild());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    var    =    cond.getLastChild();    	non-compiled	[CE]  not  a  statement	161	None	replace
1300	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  var)?  cond.getLastChild()  :  var;  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  var)?  cond.getLastChild()  :  var;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  var)?  cond.getLastChild()  :  var;	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    var    =    cond.getLastChild();    	non-compiled	[CE]  not  a  statement	161	None	replace
1301	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  toString(n.getFirstChild().getString()));  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  toString(n.getFirstChild().getString()));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  toString(n.getFirstChild().getString()));	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    toString    =    parent.getFirstChild().getString();    return    Node.newString(Token.NAME,    toString(parent.getFirstChild().getString()));    	non-compiled	[CE]  not  a  statement	170	None	replace
1302	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  toString(parent.getFirstChild().getString()));  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  toString(parent.getFirstChild().getString()));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  toString(parent.getFirstChild().getString()));	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    toString    =    parent.getFirstChild().getString();    return    Node.newString(Token.NAME,    toString(parent.getFirstChild().getString()));    	non-compiled	[CE]  not  a  statement	170	None	replace
1303	[BUG]  [BUGGY]  parent!=  null?  parent.getNext()  :  null;  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent!=  null?  parent.getNext()  :  null;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent!=  null?  parent.getNext()  :  null;	  return(parent!=    null)?    null    :    parent.getNext();    Node    parent    =    parent.getParent();    if(parent!=    null)    {    return(parent!=    null)?    null    :    parent.getNext();    }    	non-compiled	[CE]  not  a  statement	147	None	replace
1304	[BUG]  [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.VAR;  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent!=  null  &&  parent.getType()  ==  Token.VAR;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent!=  null  &&  parent.getType()  ==  Token.VAR;	  return(parent!=    null)?    null    :    parent.getNext();    Node    parent    =    parent.getParent();    if(parent!=    null)    {    return(parent!=    null)?    null    :    parent.getNext();    }    	non-compiled	[CE]  not  a  statement	147	None	replace
1305	[BUG]  [BUGGY]  parent!=  null?  parent.getParent()  :  null;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent!=  null?  parent.getParent()  :  null;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent!=  null?  parent.getParent()  :  null;	  return(parent!=    null)?    null    :    parent.getNext();    Node    parent    =    parent.getParent();    if(parent!=    null)    {    return(parent!=    null)?    null    :    parent.getNext();    }    	non-compiled	[CE]  not  a  statement	147	None	replace
1306	[BUG]  [BUGGY]  parent!=  null?  parent.getParent()  :  parent.getNext();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent!=  null?  parent.getParent()  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent!=  null?  parent.getParent()  :  parent.getNext();	  return(parent!=    null)?    null    :    parent.getNext();    Node    parent    =    parent.getParent();    if(parent!=    null)    {    return(parent!=    null)?    null    :    parent.getNext();    }    	non-compiled	[CE]  not  a  statement	147	None	replace
1307	[BUG]  [BUGGY]  Return  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  parent  =  parent.getFirstChild();  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Return  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  parent  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Return  Node.newString(Token.NAME,  n.getFirstChild().getString());  Node  parent  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    parent    =    parent.getFirstChild();    	non-compiled	[CE]  ';'  expected	99	None	replace
1308	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Node  return(parent  ==  null)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Node  return(parent  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Node  return(parent  ==  null)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    Node    return(parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  not  a  statement	77	None	replace
1309	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Node  return(parent  ==  null)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Node  return(parent  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Node  return(parent  ==  null)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    Node    return(parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  not  a  statement	77	None	replace
1310	[BUG]  [BUGGY]  parent!=  null?  parent.getParent()  :  null;  Node  parent  =  parent.getParent();  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent!=  null?  parent.getParent()  :  null;  Node  parent  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent!=  null?  parent.getParent()  :  null;  Node  parent  =  parent.getParent();	  return(parent!=    null)?    null    :    parent.getParent();    Node    parent    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	107	None	replace
1311	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  name.getString());  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  name.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  name.getString());	  return    Node.newString(Token.NAME,    parent.getString());    	non-compiled	[CE]  not  a  statement	45	None	replace
1312	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  INVALID_REGULAR_FLAGS);  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  INVALID_REGULAR_FLAGS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  INVALID_REGULAR_FLAGS);	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString(),    parent);    	non-compiled	[CE]  not  a  statement	26	None	replace
1313	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  INVALID_REGULAR_FLAGS,  parent);  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  INVALID_REGULAR_FLAGS,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  INVALID_REGULAR_FLAGS,  parent);	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString(),    parent);    	non-compiled	[CE]  not  a  statement	26	None	replace
1314	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent,  expr);  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent,  expr);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent,  expr);	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString(),    parent);    	non-compiled	[CE]  not  a  statement	26	None	replace
1315	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Node  var  =  cond.getNext();  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Node  var  =  cond.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Node  var  =  cond.getNext();	  return    Node.newString(Token.NAME,    cond.getString());    Node    var    =    cond.getNext();    	non-compiled	[CE]  not  a  statement	195	None	replace
1316	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  var  =  cond.getNext());  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  var  =  cond.getNext());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  var  =  cond.getNext());	  return    Node.newString(Token.NAME,    cond.getString());    Node    var    =    cond.getNext();    	non-compiled	[CE]  not  a  statement	195	None	replace
1317	[BUG]  [BUGGY]  parent!=  null?  parent.getParent()  :  null;  return(parent!=  null)?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent!=  null?  parent.getParent()  :  null;  return(parent!=  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent!=  null?  parent.getParent()  :  null;  return(parent!=  null)?  null  :  parent.getParent();	  return(parent!=    null)?    null    :    parent.getParent();    Node    parent    =    n.getParent();    return(parent!=    null)?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	179	None	replace
1318	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()    ==    Token.NAME);    Preconditions.checkState(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  not  a  statement	9	None	add
1319	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  assign  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  assign  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()    ==    Token.NAME);    Node  assign  =  parent.getFirstChild();  Preconditions.checkState(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  not  a  statement	9	None	add
1320	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(cond.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Preconditions.checkState(cond.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()    ==    Token.NAME);    Preconditions.checkState(cond.getType()  ==  Token.NAME);	  	non-compiled	[CE]  not  a  statement	9	None	add
1321	[BUG]  [BUGGY]  Preconditions.checkArgument(parent!=  null);  Node  parent  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent!=  null);  Node  parent  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent!=  null);  Node  parent  =  parent.getFirstChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	60	None	replace
1322	[BUG]  [BUGGY]  Preconditions.checkArgument(parent!=  null);  Node  parent  =  parent!=  null?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent!=  null);  Node  parent  =  parent!=  null?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent!=  null);  Node  parent  =  parent!=  null?  null  :  parent.getFirstChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent!=    null?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	59	None	replace
1323	[BUG]  [BUGGY]          Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Node  assign  =  parent.getParent();  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]          Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Node  assign  =  parent.getParent();  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	                Preconditions.checkArgument(parent.getType()    ==    Token.NAME);    Node  assign  =  parent.getParent();  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);	  	non-compiled	[CE]  not  a  statement	23	None	add
1324	[BUG]  [BUGGY]          Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]          Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	                Preconditions.checkArgument(parent.getType()    ==    Token.NAME);    Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  	non-compiled	[CE]  not  a  statement	23	None	add
1325	[BUG]  [BUGGY]  if(parent!=  null)return  null;  if(parent!=  null)?  null  :  parent.getFirstChild();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  if(parent!=  null)return  null;  if(parent!=  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	if(parent!=  null)return  null;  if(parent!=  null)?  null  :  parent.getFirstChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    if(parent!=    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	208	None	replace
1326	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(cond,  false,  parent,  expr);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.newLiteralValue(cond,  false,  parent,  expr);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(cond,  false,  parent,  expr);	  return    NodeUtil.newLiteralValue(cond,    false,    parent);    	non-compiled	[CE]  not  a  statement	41	None	replace
1327	[BUG]  [BUGGY]  return  NodeUtil.newLLiteralValue(parent,  true);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.newLLiteralValue(parent,  true);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLLiteralValue(parent,  true);	  return    NodeUtil.newLiteralValue(n,    true);    	non-compiled	[CE]  not  a  statement	93	None	replace
1328	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Node  return(parent  ==  null)?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Node  return(parent  ==  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Node  return(parent  ==  null)?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    Node    return(parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	36	None	replace
1329	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Node  return  parent  ==  null?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Node  return  parent  ==  null?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Node  return  parent  ==  null?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    Node    return(parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	36	None	replace
1330	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.CATCH);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.CATCH);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.CATCH);	  Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	8	None	replace
1331	[BUG]  [BUGGY]  parent!=  null?  parent.getFirstChild()  :  n.getFirstChild();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent!=  null?  parent.getFirstChild()  :  n.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent!=  null?  parent.getFirstChild()  :  n.getFirstChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    Node    parent    =    n.getParent();    return(parent!=    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	155	None	replace
1332	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.cloneTree(),  INVALID_REGULAR_FLAGS);  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.cloneTree(),  INVALID_REGULAR_FLAGS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.cloneTree(),  INVALID_REGULAR_FLAGS);	  return    Node.newString(Token.NAME,    cond.cloneTree());    	non-compiled	[CE]  not  a  statement	206	None	replace
1333	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.cloneTree(),  STANDARD_OBJECT_FLAGS);  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.cloneTree(),  STANDARD_OBJECT_FLAGS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.cloneTree(),  STANDARD_OBJECT_FLAGS);	  return    Node.newString(Token.NAME,    cond.cloneTree());    	non-compiled	[CE]  not  a  statement	206	None	replace
1334	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString()  +  1);  Node  assign  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString()  +  1);  Node  assign  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString()  +  1);  Node  assign  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    cond.getString());    Node    assign    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	50	None	replace
1335	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString());  Node  assign  =  n.getFirstChild();  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString());  Node  assign  =  n.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString());  Node  assign  =  n.getFirstChild();	  return    Node.newString(Token.NAME,    cond.getString());    Node    assign    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	50	None	replace
1336	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  =  n.getParent();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  =  n.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  =  n.getParent();	  return(parent    ==    null)?    null    :    parent.getNext();    Node    parent    =    n.getParent();    	non-compiled	[CE]  not  a  statement	193	None	replace
1337	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  SHORT_OBJECT_CONSTRUCTORS,  parent);  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  SHORT_OBJECT_CONSTRUCTORS,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  SHORT_OBJECT_CONSTRUCTORS,  parent);	  return    Node.newString(Token.NAME,    cond.getString(),    parent);    	non-compiled	[CE]  not  a  statement	44	None	replace
1338	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  NAME_TO_FOLD_WITHOUT_ARGS,  parent);  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  NAME_TO_FOLD_WITHOUT_ARGS,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  NAME_TO_FOLD_WITHOUT_ARGS,  parent);	  return    Node.newString(Token.NAME,    cond.getString(),    parent);    	non-compiled	[CE]  not  a  statement	44	None	replace
1339	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME)  {  return  parent  ==  null?  null  :  parent.getFirstChild();  }  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  if(parent.getType()  ==  Token.NAME)  {  return  parent  ==  null?  null  :  parent.getFirstChild();  }  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	if(parent.getType()  ==  Token.NAME)  {  return  parent  ==  null?  null  :  parent.getFirstChild();  }	  return(parent    ==    null)?    null    :    parent.getFirstChild();    return(parent    ==    null)?    null    :    parent.getLastChild();    	non-compiled	[CE]  not  a  statement	249	None	replace
1340	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.VAR);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.VAR);	  Preconditions.checkState(parent.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  not  a  statement	4	None	replace
1341	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  Node  thenAssign  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Node  thenAssign  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent!=  null);  Node  thenAssign  =  parent.getFirstChild();	  return    parent;    Node    thenAssign    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	229	None	replace
1342	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.EXPR_RESULT);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.EXPR_RESULT);	          Preconditions.checkArgument(parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	24	None	replace
1343	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.CALL);  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.CALL);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.CALL);	          Preconditions.checkArgument(parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	24	None	replace
1344	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME  &&  parent.getFirstChild()  ==  n);  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME  &&  parent.getFirstChild()  ==  n);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.NAME  &&  parent.getFirstChild()  ==  n);	          Preconditions.checkArgument(parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	24	None	replace
1345	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  return  NodeUtil.isLiteralValue(cond);  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  return  NodeUtil.isLiteralValue(cond);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  return  NodeUtil.isLiteralValue(cond);	          Preconditions.checkArgument(cond.getType()    ==    Token.NAME);    return    parent;    	non-compiled	[CE]  not  a  statement	244	None	replace
1346	[BUG]  [BUGGY]  parent  ==  null?  null  :  parent.getFirstChild();  (parent!=  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  ==  null?  null  :  parent.getFirstChild();  (parent!=  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  ==  null?  null  :  parent.getFirstChild();  (parent!=  null)?  null  :  parent.getFirstChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    (parent!=    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	153	None	replace
1347	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.VAR?  parent.getType()  :  Token.NAME,  cond;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent.getType()  ==  Token.VAR?  parent.getType()  :  Token.NAME,  cond;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent.getType()  ==  Token.VAR?  parent.getType()  :  Token.NAME,  cond;	  return    parent.getType()    ==    Token.VAR?    parent.getType()    :    Token.NAME;    	non-compiled	[CE]  ';'  expected	135	None	replace
1348	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.VAR?  parent.getType()  :  Token.NAME,  n;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent.getType()  ==  Token.VAR?  parent.getType()  :  Token.NAME,  n;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent.getType()  ==  Token.VAR?  parent.getType()  :  Token.NAME,  n;	  return    parent.getType()    ==    Token.VAR?    parent.getType()    :    Token.NAME;    	non-compiled	[CE]  ';'  expected	135	None	replace
1349	[BUG]  [BUGGY]  return  parent!=  null?  parent.getType()  :  Token.FUNCTION;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent!=  null?  parent.getType()  :  Token.FUNCTION;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null?  parent.getType()  :  Token.FUNCTION;	  return    parent!=    null?    parent.getParent()    :    null;    	non-compiled	[CE]  not  a  statement	241	None	replace
1350	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  name,  cond.getFirstChild());  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  name,  cond.getFirstChild());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  name,  cond.getFirstChild());	  return    Node.newString(Token.NAME,    n,    cond.getFirstChild());    	non-compiled	[CE]  not  a  statement	201	None	replace
1351	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n,  cond.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n,  cond.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n,  cond.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS);	  return    Node.newString(Token.NAME,    n,    cond.getFirstChild());    	non-compiled	[CE]  not  a  statement	201	None	replace
1352	[BUG]  [BUGGY]  Node  parentscut  =  parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parentscut  =  parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parentscut  =  parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    parent    născut    =    parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  ';'  expected	146	None	replace
1353	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parentscut  =  parent!=  null)?  null  :  parent.getFirstChild();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parentscut  =  parent!=  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parentscut  =  parent!=  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    parent    născut    =    parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  ';'  expected	146	None	replace
1354	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Node  var  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Node  var  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Node  var  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    var    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	101	None	replace
1355	[BUG]  [BUGGY]  parent  ==  null?  null  :  parent.getParent();  (parent!=  null)?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  ==  null?  null  :  parent.getParent();  (parent!=  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  ==  null?  null  :  parent.getParent();  (parent!=  null)?  null  :  parent.getParent();	  return(parent!=    null)?    null    :    parent.getParent();    (parent!=    null)?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	114	None	replace
1356	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getParent();  (parent  ==  null)?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent!=  null)?  null  :  parent.getParent();  (parent  ==  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=  null)?  null  :  parent.getParent();  (parent  ==  null)?  null  :  parent.getParent();	  return(parent!=    null)?    null    :    parent.getParent();    (parent!=    null)?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	114	None	replace
1357	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.CATCH);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.CATCH);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.VAR  ||  parent.getType()  ==  Token.CATCH);	  Preconditions.checkArgument(cond.getType()    ==    Token.VAR);    	non-compiled	[CE]  not  a  statement	160	None	replace
1358	[BUG]  [BUGGY]  Preconditions.checkArgument(parent!=  null);  Node  return(parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent!=  null);  Node  return(parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent!=  null);  Node  return(parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    Node    return(parent!=    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	151	None	replace
1359	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getParent();  if(parent!=  null)?  null  :  parent.getNext();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent!=  null)?  null  :  parent.getParent();  if(parent!=  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=  null)?  null  :  parent.getParent();  if(parent!=  null)?  null  :  parent.getNext();	  return(parent!=    null)?    null    :    parent.getNext();    if(parent!=    null)?    null    :    parent.getNext();    	non-compiled	[CE]  illegal  start  of  expression	234	None	replace
1360	[BUG]  [BUGGY]  return  NodeUtil.isLiteralValue(cond,  false)?  parent  :  cond;  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.isLiteralValue(cond,  false)?  parent  :  cond;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.isLiteralValue(cond,  false)?  parent  :  cond;	  return    cond;    	non-compiled	[CE]  not  a  statement	130	None	replace
1361	[BUG]  [BUGGY]  return  NodeUtil.isLiteralValue(cond,  false);  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.isLiteralValue(cond,  false);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.isLiteralValue(cond,  false);	  return    cond;    	non-compiled	[CE]  not  a  statement	130	None	replace
1362	[BUG]  [BUGGY]  return  cond  ==  null?  parent.getFirstChild()  :  cond;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  cond  ==  null?  parent.getFirstChild()  :  cond;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  cond  ==  null?  parent.getFirstChild()  :  cond;	  return    cond;    	non-compiled	[CE]  not  a  statement	130	None	replace
1363	[BUG]  [BUGGY]  return  NodeUtil.isLiteralValue(cond,  true);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.isLiteralValue(cond,  true);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.isLiteralValue(cond,  true);	  return    cond;    	non-compiled	[CE]  not  a  statement	130	None	replace
1364	[BUG]  [BUGGY]  if(parent!=  null)  {  return  parent;  parent  =  n.getLastChild();  return  parent;  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  if(parent!=  null)  {  return  parent;  parent  =  n.getLastChild();  return  parent;  }  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	if(parent!=  null)  {  return  parent;  parent  =  n.getLastChild();  return  parent;  }	  return    parent;    Node    parent    =    n.getLastChild();    return    parent;    	non-compiled	[CE]  not  a  statement	86	None	replace
1365	[BUG]  [BUGGY]  Preconditions.checkArgument(parent!=  null);  Node  parent  =  n.getLastChild();  return  parent;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent!=  null);  Node  parent  =  n.getLastChild();  return  parent;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent!=  null);  Node  parent  =  n.getLastChild();  return  parent;	  return    parent;    Node    parent    =    n.getLastChild();    return    parent;    	non-compiled	[CE]  not  a  statement	86	None	replace
1366	[BUG]  [BUGGY]  if(parent  ==  null)  {  return  parent.getFirstChild();  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  if(parent  ==  null)  {  return  parent.getFirstChild();  }  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	if(parent  ==  null)  {  return  parent.getFirstChild();  }	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent.getFirstChild();    return(parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	128	None	replace
1367	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  Cond.STANDARD_OBJECT_CONSTRUCTORS,  parent,  cond);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  Cond.STANDARD_OBJECT_CONSTRUCTORS,  parent,  cond);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  Cond.STANDARD_OBJECT_CONSTRUCTORS,  parent,  cond);	  return    Node.newString(Token.NAME,    Cond.STANDARD_OBJECT_CONSTRUCTORS,    parent);    	non-compiled	[CE]  not  a  statement	204	None	replace
1368	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  cond.getFirstChild().getString());  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  cond.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  cond.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    toString    =    parent.getFirstChild().getString();    	non-compiled	[CE]  not  a  statement	172	None	replace
1369	[BUG]  [BUGGY]  Node  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent.getFirstChild().getString());  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent.getFirstChild().getString());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	15	None	replace
1370	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString()  +  1);  Node  cond  =  parent.getParent();  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString()  +  1);  Node  cond  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString()  +  1);  Node  cond  =  parent.getParent();	  return    Node.newString(Token.NAME,    cond.getString());    Node    cond    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	53	None	replace
1371	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  parent.cloneTree());  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  parent.cloneTree());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  parent.cloneTree());	  return    Node.newString(Token.NAME,    cond.getString());    Node    cond    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	53	None	replace
1372	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond,  INVALID_REGULAR_FLAGS);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond,  INVALID_REGULAR_FLAGS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond,  INVALID_REGULAR_FLAGS);	  return    Node.newString(Token.NAME,    cond,    parent);    	non-compiled	[CE]  not  a  statement	117	None	replace
1373	[BUG]  [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.CALL);  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.CALL);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(cond.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.CALL);	          Preconditions.checkState(cond.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	166	None	replace
1374	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  parentscut  =  parent!=  null)?  null  :  parent.getNext();  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  parentscut  =  parent!=  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getNext();  Node  parentscut  =  parent!=  null)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    Node    parent    născut    =    parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  ';'  expected	191	None	replace
1375	[BUG]  [BUGGY]  Node  parentscut  =  parent  ==  null)?  null  :  parent.getNext();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parentscut  =  parent  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parentscut  =  parent  ==  null)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    Node    parent    născut    =    parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  ';'  expected	191	None	replace
1376	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  parentscut  =  parent  ==  null)?  null  :  parent.getNext();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  parentscut  =  parent  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getParent();  Node  parentscut  =  parent  ==  null)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    Node    parent    născut    =    parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  ';'  expected	191	None	replace
1377	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  Cond.STANDARD_OBJECT_CONSTRUCTORS,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  Cond.STANDARD_OBJECT_CONSTRUCTORS,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  Cond.STANDARD_OBJECT_CONSTRUCTORS,  INVALID_REGULAR_EXPRESSION_FLAGS);	  return    Node.newString(Token.NAME,    Cond.STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  not  a  statement	207	None	replace
1378	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent,  cond,  INVALID_REGULAR_FLAGS);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent,  cond,  INVALID_REGULAR_FLAGS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent,  cond,  INVALID_REGULAR_FLAGS);	  return    Node.newString(Token.NAME,    parent,    cond);    	non-compiled	[CE]  not  a  statement	119	None	replace
1379	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.VAR);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.VAR);	  Preconditions.checkArgument(cond.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  not  a  statement	157	None	replace
1380	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.EXPR_RESULT  ||  cond.getType()  ==  Token.EXPR_RESULT);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.EXPR_RESULT  ||  cond.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.EXPR_RESULT  ||  cond.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(cond.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  not  a  statement	157	None	replace
1381	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.EXPR_RESULT  ||  parent.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(cond.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  not  a  statement	157	None	replace
1382	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.EXPR_RESULT  ||  CondUtil.isLiteralValue(cond));  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.EXPR_RESULT  ||  CondUtil.isLiteralValue(cond));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.EXPR_RESULT  ||  CondUtil.isLiteralValue(cond));	  Preconditions.checkArgument(cond.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  not  a  statement	157	None	replace
1383	[BUG]  [BUGGY]  return  parent  ==  null  ||  parent.getFirstChild()!=  n;  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent  ==  null  ||  parent.getFirstChild()!=  n;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null  ||  parent.getFirstChild()!=  n;	  return    parent    ==    null?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	182	None	replace
1384	[BUG]  [BUGGY]  return  parent  ==  null?  null  :  parent.getFirstChild()  +  1;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent  ==  null?  null  :  parent.getFirstChild()  +  1;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null?  null  :  parent.getFirstChild()  +  1;	  return    parent    ==    null?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	182	None	replace
1385	[BUG]  [BUGGY]  Node  assignName  =  n.getFirstChild();  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assignName  =  n.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assignName  =  n.getFirstChild();	  return    Node.newString(Token.NAME,    cond.getString());    Node    assign    =    parent.getParent();    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  not  a  statement	212	None	replace
1386	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  INVALID_REGULAR_FLAGS,  false);  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  INVALID_REGULAR_FLAGS,  false);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  INVALID_REGULAR_FLAGS,  false);	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString(),    false);    	non-compiled	[CE]  not  a  statement	29	None	replace
1387	[BUG]  [BUGGY]  Node  var  =  parent.getNext();  return  Node.newString(Token.NAME,  var.getString());  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  var  =  parent.getNext();  return  Node.newString(Token.NAME,  var.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  var  =  parent.getNext();  return  Node.newString(Token.NAME,  var.getString());	  return    Node.newString(Token.NAME,    cond.getString());    Node    var    =    cond.getNext();    return    Node.newString(Token.NAME,    var.getString());    	non-compiled	[CE]  not  a  statement	194	None	replace
1388	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  INVALID_REGULAR_FLAGS,  expr);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  INVALID_REGULAR_FLAGS,  expr);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild(),  INVALID_REGULAR_FLAGS,  expr);	  return    Node.newString(Token.NAME,    cond.getFirstChild(),    INVALID_REGULAR_FLAGS);    	non-compiled	[CE]  not  a  statement	243	None	replace
1389	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  STANDARD_FLAGS_WITHOUT_ARGS);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  STANDARD_FLAGS_WITHOUT_ARGS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild(),  STANDARD_FLAGS_WITHOUT_ARGS);	  return    Node.newString(Token.NAME,    cond.getFirstChild(),    INVALID_REGULAR_FLAGS);    	non-compiled	[CE]  not  a  statement	243	None	replace
1390	[BUG]  [BUGGY]  if(parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  if(parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	if(parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    if(parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	245	None	replace
1391	[BUG]  [BUGGY]  if(parent!=  null)return  null;  if(parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  if(parent!=  null)return  null;  if(parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	if(parent!=  null)return  null;  if(parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    if(parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	245	None	replace
1392	[BUG]  [BUGGY]  if(parent  ==  null)return  null;  if(parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  if(parent  ==  null)return  null;  if(parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	if(parent  ==  null)return  null;  if(parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    if(parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	245	None	replace
1393	[BUG]  [BUGGY]  return  parent!=  null?  parent  :  cond;  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent!=  null?  parent  :  cond;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null?  parent  :  cond;	  return    parent;    return    parent;    	non-compiled	[CE]  not  a  statement	226	None	replace
1394	[BUG]  [BUGGY]  return  parent!=  null  &&  parent.getType()  ==  Token.VAR;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent!=  null  &&  parent.getType()  ==  Token.VAR;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null  &&  parent.getType()  ==  Token.VAR;	  return    parent;    return    parent;    	non-compiled	[CE]  not  a  statement	226	None	replace
1395	[BUG]  [BUGGY]  return  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION;	  return    parent;    return    parent;    	non-compiled	[CE]  not  a  statement	226	None	replace
1396	[BUG]  [BUGGY]  Node  assign  =  n.getNext();  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  n.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assign  =  n.getNext();	  Node    assign    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	6	None	replace
1397	[BUG]  [BUGGY]  return  parent  ==  null  ||  parent.getType()  ==  Token.VAR;  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent  ==  null  ||  parent.getType()  ==  Token.VAR;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null  ||  parent.getType()  ==  Token.VAR;	  return(parent    ==    null)?    null    :    parent.getParent();    Return(parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	233	None	replace
1398	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  SHORT_OBJECT_CONSTRUCTORS,  false);  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  SHORT_OBJECT_CONSTRUCTORS,  false);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  SHORT_OBJECT_CONSTRUCTORS,  false);	  return    Node.newString(Token.NAME,    cond.getString(),    false);    	non-compiled	[CE]  not  a  statement	47	None	replace
1399	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  STRICT_OBJECT_CONSTRUCTORS,  false);  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  STRICT_OBJECT_CONSTRUCTORS,  false);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  STRICT_OBJECT_CONSTRUCTORS,  false);	  return    Node.newString(Token.NAME,    cond.getString(),    false);    	non-compiled	[CE]  not  a  statement	47	None	replace
1400	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  nscut  =  parent.getParent();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parent  nscut  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent!=  null);  Node  parent  nscut  =  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    Node    parent    născut    =    parent.getParent();    	non-compiled	[CE]  ';'  expected	188	None	replace
1401	[BUG]  [BUGGY]  Preconditions.checkState(parent  ==  null);  Node  parent  nscut  =  parent.getParent();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent  ==  null);  Node  parent  nscut  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent  ==  null);  Node  parent  nscut  =  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    Node    parent    născut    =    parent.getParent();    	non-compiled	[CE]  ';'  expected	188	None	replace
1402	[BUG]  [BUGGY]  Preconditions.checkState(parent  ==  null);  Node  parentscut  =  parent.getParent();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent  ==  null);  Node  parentscut  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent  ==  null);  Node  parentscut  =  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    Node    parent    născut    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	188	None	replace
1403	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parentscut  =  parent.getParent();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Node  parentscut  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent!=  null);  Node  parentscut  =  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    Node    parent    născut    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	188	None	replace
1404	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.CALL);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.CALL);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.CALL);	  Preconditions.checkState(parent.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	10	None	replace
1405	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  SHORT_OBJECT_CONSTRUCTORS,  true);  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  SHORT_OBJECT_CONSTRUCTORS,  true);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  SHORT_OBJECT_CONSTRUCTORS,  true);	  return    Node.newString(Token.NAME,    cond.getString(),    true);    	non-compiled	[CE]  not  a  statement	48	None	replace
1406	[BUG]  [BUGGY]  if(parent  ==  null)return  null;  if(parent  ==  null  ||  parent.getType()  ==  Token.NAME)  {  return  null;  }  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  if(parent  ==  null)return  null;  if(parent  ==  null  ||  parent.getType()  ==  Token.NAME)  {  return  null;  }  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	if(parent  ==  null)return  null;  if(parent  ==  null  ||  parent.getType()  ==  Token.NAME)  {  return  null;  }	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	145	None	replace
1407	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent,  n,  INVALID_REGULAR_FLAGS);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent,  n,  INVALID_REGULAR_FLAGS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent,  n,  INVALID_REGULAR_FLAGS);	  return    Node.newString(Token.NAME,    parent,    n);    	non-compiled	[CE]  not  a  statement	118	None	replace
1408	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  var  =  parent.getFirstChild());  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  var  =  parent.getFirstChild());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  var  =  parent.getFirstChild());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    var    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	18	None	replace
1409	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString()  + ", "  +  var.getFirstChild());  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString()  + ", "  +  var.getFirstChild());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString()  + ", "  +  var.getFirstChild());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    var    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	18	None	replace
1410	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond,  SHORT_OBJECT_CONSTRUCTORS);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond,  SHORT_OBJECT_CONSTRUCTORS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond,  SHORT_OBJECT_CONSTRUCTORS);	  return    Node.newString(Token.NAME,    cond);    	non-compiled	[CE]  not  a  statement	116	None	replace
1411	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  cond,  INVALID_REGULAR_FLAGS);  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  cond,  INVALID_REGULAR_FLAGS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  cond,  INVALID_REGULAR_FLAGS);	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString(),    cond);    	non-compiled	[CE]  not  a  statement	96	None	replace
1412	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  cond,  Integer.MAX_VALUE);  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  cond,  Integer.MAX_VALUE);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  cond,  Integer.MAX_VALUE);	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString(),    cond);    	non-compiled	[CE]  not  a  statement	96	None	replace
1413	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  CondUtil.getLiteralValue(cond),  parent.getLastChild().getString());  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  CondUtil.getLiteralValue(cond),  parent.getLastChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  CondUtil.getLiteralValue(cond),  parent.getLastChild().getString());	  return    Node.newString(Token.NAME,    parent.getLastChild().getString());    	non-compiled	[CE]  not  a  statement	97	None	replace
1414	[BUG]  [BUGGY]  Preconditions.checkArgument(parent!=  null);  Node  parent  =  parent!=  null?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent!=  null);  Node  parent  =  parent!=  null?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent!=  null);  Node  parent  =  parent!=  null?  null  :  parent.getParent();	  return(parent!=    null)?    null    :    parent.getParent();    Node    parent    =    parent!=    null?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	109	None	replace
1415	[BUG]  [BUGGY]  parent  =  parent!=  null?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  =  parent!=  null?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  =  parent!=  null?  null  :  parent.getParent();	  return(parent!=    null)?    null    :    parent.getParent();    Node    parent    =    parent!=    null?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	109	None	replace
1416	[BUG]  [BUGGY]  Preconditions.checkArgument(parent!=  null);  Node  parent  =  n.getFirstChild();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent!=  null);  Node  parent  =  n.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent!=  null);  Node  parent  =  n.getFirstChild();	  return    parent;    Node    parent    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	82	None	replace
1417	[BUG]  [BUGGY]  Preconditions.checkArgument(parent!=  null);  Preconditions.checkArgument(parent.getType()  ==  Token.BLOCK);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent!=  null);  Preconditions.checkArgument(parent.getType()  ==  Token.BLOCK);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent!=  null);  Preconditions.checkArgument(parent.getType()  ==  Token.BLOCK);	  return    parent;    Node    parent    =    n.getFirstChild();    	non-compiled	[CE]  not  a  statement	82	None	replace
1418	[BUG]  [BUGGY]  Node  assignName  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  assignName);  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assignName  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  assignName);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assignName  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  assignName);	  return    Node.newString(Token.NAME,    cond.getString());    Node    assign    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  not  a  statement	51	None	replace
1419	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  Cond.VAR,  parent);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  Cond.VAR,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  Cond.VAR,  parent);	  return    Node.newString(Token.NAME,    var,    parent);    	non-compiled	[CE]  not  a  statement	121	None	replace
1420	[BUG]  [BUGGY]  if(parent  ==  null)return  null;  if(parent!=  null)  {  return  parent.getParent();  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  if(parent  ==  null)return  null;  if(parent!=  null)  {  return  parent.getParent();  }  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	if(parent  ==  null)return  null;  if(parent!=  null)  {  return  parent.getParent();  }	  return(parent    ==    null)?    null    :    parent.getParent();    (parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	38	None	replace
1421	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Node  assign  =  parent.getFirstChild();  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Node  assign  =  parent.getFirstChild();  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()    ==    Token.FUNCTION);    Node  assign  =  parent.getFirstChild();  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  not  a  statement	13	None	add
1422	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Node  assign  =  parent.getFirstChild();  Preconditions.checkArgument(cond.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Node  assign  =  parent.getFirstChild();  Preconditions.checkArgument(cond.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()    ==    Token.FUNCTION);    Node  assign  =  parent.getFirstChild();  Preconditions.checkArgument(cond.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  not  a  statement	13	None	add
1423	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Node  assign  =  parent.getParent();  Preconditions.checkArgument(cond.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Node  assign  =  parent.getParent();  Preconditions.checkArgument(cond.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()    ==    Token.FUNCTION);    Node  assign  =  parent.getParent();  Preconditions.checkArgument(cond.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  not  a  statement	13	None	add
1424	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]          RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  not  a  statement	13	None	add
1425	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(cond.getType()  ==  Token.FUNCTION);  [CE]  not  a  statement  [FE]            RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  Preconditions.checkArgument(cond.getType()  ==  Token.FUNCTION);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()    ==    Token.FUNCTION);    Preconditions.checkArgument(cond.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  not  a  statement	13	None	add
1426	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(cond,  null,  true);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  NodeUtil.newLiteralValue(cond,  null,  true);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(cond,  null,  true);	  return    NodeUtil.newLiteralValue(cond,    null);    	non-compiled	[CE]  not  a  statement	42	None	replace
1427	[BUG]  [BUGGY]  return  parent  ==  null?  null  :  parent.cloneTree();  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent  ==  null?  null  :  parent.cloneTree();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null?  null  :  parent.cloneTree();	  return    parent    ==    null?    null    :    parent;    	non-compiled	[CE]  not  a  statement	181	None	replace
1428	[BUG]  [BUGGY]  return  parent  ==  null?  null  :  parent.child;  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent  ==  null?  null  :  parent.child;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null?  null  :  parent.child;	  return    parent    ==    null?    null    :    parent;    	non-compiled	[CE]  not  a  statement	181	None	replace
1429	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  FoldArrayAction(),  INVALID_REGULAR_FLAGS_RE);  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  FoldArrayAction(),  INVALID_REGULAR_FLAGS_RE);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	NodeTraversal.traverse(compiler,  parent,  new  FoldArrayAction(),  INVALID_REGULAR_FLAGS_RE);	  NodeTraversal.traverse(compiler,    parent,    new    FoldArrayAction());    	non-compiled	[CE]  not  a  statement	156	None	replace
1430	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  FoldArrayAction(),  INVALID_REGULAR_FLAGS);  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  FoldArrayAction(),  INVALID_REGULAR_FLAGS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	NodeTraversal.traverse(compiler,  parent,  new  FoldArrayAction(),  INVALID_REGULAR_FLAGS);	  NodeTraversal.traverse(compiler,    parent,    new    FoldArrayAction());    	non-compiled	[CE]  not  a  statement	156	None	replace
1431	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  Node  return  parent  =  parent.getParent();  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Node  return  parent  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent!=  null);  Node  return  parent  =  parent.getParent();	  return(parent!=    null)?    null    :    parent.getParent();    Node    return(parent!=    null)?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	176	None	replace
1432	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false))  {  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  }  else  {  return  Node.newString(Token.NAME,  parent.  [CE]  <identifier>  expected  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false))  {  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  }  else  {  return  Node.newString(Token.NAME,  parent.  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	if(NodeUtil.isLiteralValue(cond,  false))  {  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  }  else  {  return  Node.newString(Token.NAME,  parent.	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    nextBranch    =    parent.getFirstChild().getNext();    return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  <identifier>  expected	253	None	replace
1433	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true))  {  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  }  else  {  return  Node.newString(Token.NAME,  parent.  [CE]  <identifier>  expected  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true))  {  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  }  else  {  return  Node.newString(Token.NAME,  parent.  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	if(NodeUtil.isLiteralValue(cond,  true))  {  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  }  else  {  return  Node.newString(Token.NAME,  parent.	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    nextBranch    =    parent.getFirstChild().getNext();    return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  <identifier>  expected	253	None	replace
1434	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Node  assign  =  getBlockExpression(cond.getType()  ==  Token.NAME);  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Node  assign  =  getBlockExpression(cond.getType()  ==  Token.NAME);  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()    ==    Token.NAME);    Node  assign  =  getBlockExpression(cond.getType()  ==  Token.NAME);  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);	  	non-compiled	[CE]  not  a  statement	11	None	add
1435	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Node  assign  =  getBlockExpression(cond);  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Node  assign  =  getBlockExpression(cond);  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()    ==    Token.NAME);    Node  assign  =  getBlockExpression(cond);  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);	  	non-compiled	[CE]  not  a  statement	11	None	add
1436	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Node  assign  =  getBlockExpression(cond.getType()  ==  Token.NAME);  Preconditions.checkArgument(cond.getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Node  assign  =  getBlockExpression(cond.getType()  ==  Token.NAME);  Preconditions.checkArgument(cond.getType()  ==  Token.VAR);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()    ==    Token.NAME);    Node  assign  =  getBlockExpression(cond.getType()  ==  Token.NAME);  Preconditions.checkArgument(cond.getType()  ==  Token.VAR);	  	non-compiled	[CE]  not  a  statement	11	None	add
1437	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  parent.getType()  :  Token.VAR;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent.getType()  ==  Token.NAME?  parent.getType()  :  Token.VAR;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent.getType()  ==  Token.NAME?  parent.getType()  :  Token.VAR;	  return    parent.getType()    ==    Token.NAME?    parent.getType()    :    Token.FUNCTION;    	non-compiled	[CE]  not  a  statement	136	None	replace
1438	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  parent.getType()  :  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent.getType()  ==  Token.NAME?  parent.getType()  :  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent.getType()  ==  Token.NAME?  parent.getType()  :  Token.FUNCTION  ||  parent.getType()  ==  Token.NAME;	  return    parent.getType()    ==    Token.NAME?    parent.getType()    :    Token.FUNCTION;    	non-compiled	[CE]  not  a  statement	136	None	replace
1439	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  return  Node.newString(Token.NAME,  parent.getString());  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  n.getParent();  return  Node.newString(Token.NAME,  parent.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  n.getParent();  return  Node.newString(Token.NAME,  parent.getString());	  return    Node.newString(Token.NAME,    cond.getString());    Node    var    =    parent.getParent();    return    Node.newString(Token.NAME,    var.getString());    	non-compiled	[CE]  not  a  statement	196	None	replace
1440	[BUG]  [BUGGY]  Node  cond  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString(),  cond);  [CE]  not  a  statement  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  cond  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString(),  cond);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  cond  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString(),  cond);	  return    Node.newString(Token.NAME,    cond.getString());    Node    cond    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  not  a  statement	56	None	replace
1441	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  cond.getString());  [CE]  not  a  statement  [FE]                        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  cond.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild(),  cond.getString());	  return    Node.newString(Token.NAME,    cond.getString());    Node    cond    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  not  a  statement	56	None	replace
1442	[BUG]  [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.NAME);  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.NAME);  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(cond.getType()  ==  Token.NAME);  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    assign    =    parent.getNext();    	non-compiled	[CE]  not  a  statement	21	None	replace
1443	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  assignName);  Node  assign  =  parent.getNext();  [CE]  not  a  statement  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  assignName);  Node  assign  =  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  assignName);  Node  assign  =  parent.getNext();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    assign    =    parent.getNext();    	non-compiled	[CE]  not  a  statement	21	None	replace
1444	[BUG]  [BUGGY]  Preconditions.checkState(parent  ==  null);  Node  return(parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent  ==  null);  Node  return(parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent  ==  null);  Node  return(parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    return(parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	126	None	replace
1445	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Node  return(parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Node  return(parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  Node  return(parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    return(parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	126	None	replace
1446	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Node  return(parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Node  return(parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  Node  return(parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    return(parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	126	None	replace
1447	[BUG]  [BUGGY]  Node  return  Node.newString(Token.NAME,  cond.getLastChild());  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  return  Node.newString(Token.NAME,  cond.getLastChild());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  return  Node.newString(Token.NAME,  cond.getLastChild());	  return    Node.newString(Token.NAME,    cond.getString());    Node    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  not  a  statement	49	None	replace
1448	[BUG]  [BUGGY]  Node  return  Node.newString(Token.NAME,  cond.cloneTree());  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  return  Node.newString(Token.NAME,  cond.cloneTree());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  return  Node.newString(Token.NAME,  cond.cloneTree());	  return    Node.newString(Token.NAME,    cond.getString());    Node    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  not  a  statement	49	None	replace
1449	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.CATCH);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.CATCH);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.CATCH);	  Preconditions.checkArgument(cond.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	158	None	replace
1450	[BUG]  [BUGGY]  return  parent!=  null?  parent.getFirstChild()  :  NodeUtil.newLiteralValue(cond);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent!=  null?  parent.getFirstChild()  :  NodeUtil.newLiteralValue(cond);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null?  parent.getFirstChild()  :  NodeUtil.newLiteralValue(cond);	  return    parent!=    null?    parent.getParent()    :    NodeUtil.newLiteralValue(cond);    	non-compiled	[CE]  not  a  statement	242	None	replace
1451	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.BLOCK  ||  cond.getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.BLOCK  ||  cond.getType()  ==  Token.VAR);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.BLOCK  ||  cond.getType()  ==  Token.VAR);	  Preconditions.checkArgument(cond.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  not  a  statement	230	None	replace
1452	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.BLOCK  ||  cond.getType()  ==  Token.EXPR_RESULT);  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.BLOCK  ||  cond.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.BLOCK  ||  cond.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(cond.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  not  a  statement	230	None	replace
1453	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.BLOCK  ||  cond.getType()  ==  Token.CATCH);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.BLOCK  ||  cond.getType()  ==  Token.CATCH);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.BLOCK  ||  cond.getType()  ==  Token.CATCH);	  Preconditions.checkArgument(cond.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  not  a  statement	230	None	replace
1454	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getNext();  Node  parent  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent!=  null)?  null  :  parent.getNext();  Node  parent  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=  null)?  null  :  parent.getNext();  Node  parent  =  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getNext();    Node    parent    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	79	None	replace
1455	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.removeFirstChild().getString());  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.removeFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.removeFirstChild().getString());	  return    Node.newString(Token.NAME,    cond.getLastChild().getString());    	non-compiled	[CE]  not  a  statement	25	None	replace
1456	[BUG]  [BUGGY]  if(parent  ==  null)  {  return(parent!=  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent  ==  null)?  null  :  parent.getFirstChild();  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  if(parent  ==  null)  {  return(parent!=  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent  ==  null)?  null  :  parent.getFirstChild();  }  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	if(parent  ==  null)  {  return(parent!=  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent  ==  null)?  null  :  parent.getFirstChild();  }	  return(parent!=    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  ';'  expected	58	None	replace
1457	[BUG]  [BUGGY]  Preconditions.checkArgument(parent!=  null);  Node  assign  =  parent.getParent();  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent!=  null);  Node  assign  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent!=  null);  Node  assign  =  parent.getParent();	  return    parent;    Node    assign    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	225	None	replace
1458	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  INVALID_REGULAR_FLAGS,  true);  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  INVALID_REGULAR_FLAGS,  true);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  INVALID_REGULAR_FLAGS,  true);	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString(),    true);    	non-compiled	[CE]  not  a  statement	28	None	replace
1459	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  expr);  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  expr);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  expr);	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    nextBranch    =    cond.getNext();    	non-compiled	[CE]  not  a  statement	164	None	replace
1460	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  (parent  ==  null)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  (parent  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getFirstChild();  (parent  ==  null)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    (parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  not  a  statement	192	None	replace
1461	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  STRICT_OBJECT_CONSTRUCTORS);  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  STRICT_OBJECT_CONSTRUCTORS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  STRICT_OBJECT_CONSTRUCTORS);	  return    Node.newString(Token.NAME,    cond.getString());    Node    cond    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	55	None	replace
1462	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString()  +  1);  Node  assign  =  parent.getParent();  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString()  +  1);  Node  assign  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString()  +  1);  Node  assign  =  parent.getParent();	  return    Node.newString(Token.NAME,    cond.getString());    Node    assign    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	54	None	replace
1463	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild());  Node  assign  =  parent.getParent();  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild());  Node  assign  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild());  Node  assign  =  parent.getParent();	  return    Node.newString(Token.NAME,    cond.getString());    Node    assign    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	54	None	replace
1464	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  assignName);  Node  assign  =  parent.getParent();  [CE]  not  a  statement  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  assignName);  Node  assign  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  assignName);  Node  assign  =  parent.getParent();	  return    Node.newString(Token.NAME,    cond.getString());    Node    assign    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	54	None	replace
1465	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Node  assign  =  parent.getParent();  [CE]  not  a  statement  [FE]                        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Node  assign  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Node  assign  =  parent.getParent();	  return    Node.newString(Token.NAME,    cond.getString());    Node    assign    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	54	None	replace
1466	[BUG]  [BUGGY]  Preconditions.checkArgument(parent!=  null);  Node  parent  =  parent.getParent();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent!=  null);  Node  parent  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent!=  null);  Node  parent  =  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	127	None	replace
1467	[BUG]  [BUGGY]  String  assignName  =  cond.getFirstChild().getString();  return  Node.newString(Token.NAME,  assignName.getFirstChild().getString());  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  String  assignName  =  cond.getFirstChild().getString();  return  Node.newString(Token.NAME,  assignName.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	String  assignName  =  cond.getFirstChild().getString();  return  Node.newString(Token.NAME,  assignName.getFirstChild().getString());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    assignName    =    cond.getFirstChild().getString();    return    Node.newString(Token.NAME,    assignName.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	217	None	replace
1468	[BUG]  [BUGGY]  return  parent!=  null?  parent.getParent()  :  NodeUtil.newLiteralValue(cond,  false),  cond);  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent!=  null?  parent.getParent()  :  NodeUtil.newLiteralValue(cond,  false),  cond);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null?  parent.getParent()  :  NodeUtil.newLiteralValue(cond,  false),  cond);	  return    parent!=    null?    parent.getParent()    :    NodeUtil.newLiteralValue(cond,    false));    	non-compiled	[CE]  not  a  statement	237	None	replace
1469	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  thenBranch,  cond.getFirstChild().getNext());  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  thenBranch,  cond.getFirstChild().getNext());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  thenBranch,  cond.getFirstChild().getNext());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    thenBranch    =    cond.getFirstChild().getNext();    	non-compiled	[CE]  not  a  statement	165	None	replace
1470	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Node  thenBranch  =  cond.getFirstChild().getNext();  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Node  thenBranch  =  cond.getFirstChild().getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Node  thenBranch  =  cond.getFirstChild().getNext();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    thenBranch    =    cond.getFirstChild().getNext();    	non-compiled	[CE]  not  a  statement	165	None	replace
1471	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  thenBranch);  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  thenBranch);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  thenBranch);	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    thenBranch    =    cond.getFirstChild().getNext();    	non-compiled	[CE]  not  a  statement	165	None	replace
1472	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild().getString();  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild().getString();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getFirstChild().getString();	  return(parent    ==    null)?    null    :    parent.getString();    	non-compiled	[CE]  not  a  statement	30	None	replace
1473	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getQualifiedName());  Node  assign  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getQualifiedName());  Node  assign  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getQualifiedName());  Node  assign  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node    assign    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	16	None	replace
1474	[BUG]  [BUGGY]  Node  assign  =  parent.getFirstChild();  Preconditions.checkArgument(parent.getType()  ==  Token.RETURN);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent.getFirstChild();  Preconditions.checkArgument(parent.getType()  ==  Token.RETURN);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node    assign    =    parent.getFirstChild();    Preconditions.checkArgument(parent.getType()  ==  Token.RETURN);	  	non-compiled	[CE]  not  a  statement	1	None	add
1475	[BUG]  [BUGGY]  Node  assign  =  parent.getFirstChild();  Preconditions.checkArgument(parent.getType()  ==  Token.BLOCK);  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent.getFirstChild();  Preconditions.checkArgument(parent.getType()  ==  Token.BLOCK);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node    assign    =    parent.getFirstChild();    Preconditions.checkArgument(parent.getType()  ==  Token.BLOCK);	  	non-compiled	[CE]  not  a  statement	1	None	add
1476	[BUG]  [BUGGY]  Node  assign  =  parent.getFirstChild();  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent.getFirstChild();  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node    assign    =    parent.getFirstChild();    Preconditions.checkArgument(parent.getType()  ==  Token.VAR);	  	non-compiled	[CE]  not  a  statement	1	None	add
1477	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.toString()  +  1);  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.toString()  +  1);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.toString()  +  1);	  return    Node.newString(Token.NAME,    cond.toString());    	non-compiled	[CE]  not  a  statement	174	None	replace
1478	[BUG]  [BUGGY]  if(parent!=  null)  {  return  parent.getParent();  }  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  if(parent!=  null)  {  return  parent.getParent();  }  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	if(parent!=  null)  {  return  parent.getParent();  }	  return(parent!=    null)?    null    :    parent.getParent();    Node    parent    =    parent.getParent();    return(parent!=    null)?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	113	None	replace
1479	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.CATCH);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.CATCH);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.CATCH);	  Preconditions.checkArgument(parent.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	14	None	replace
1480	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  INVALID_REGULAR_FLAGS);  Node  lhs  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  INVALID_REGULAR_FLAGS);  Node  lhs  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  INVALID_REGULAR_FLAGS);  Node  lhs  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    lhs    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	104	None	replace
1481	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  lhs  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  lhs  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  lhs  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    lhs    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	104	None	replace
1482	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  COND);  Node  lhs  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  COND);  Node  lhs  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  COND);  Node  lhs  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    lhs    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	104	None	replace
1483	[BUG]  [BUGGY]  parent!=  null?  parent.getParent()  :  n.getParent();  return(parent!=  null)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent!=  null?  parent.getParent()  :  n.getParent();  return(parent!=  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent!=  null?  parent.getParent()  :  n.getParent();  return(parent!=  null)?  null  :  parent.getNext();	  return(parent!=    null)?    null    :    parent.getNext();    Node    parent    =    n.getParent();    return(parent!=    null)?    null    :    parent.getNext();    	non-compiled	[CE]  not  a  statement	150	None	replace
1484	[BUG]  [BUGGY]  parent  ==  null?  null  :  parent.getNext();  return(parent!=  null)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  ==  null?  null  :  parent.getNext();  return(parent!=  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  ==  null?  null  :  parent.getNext();  return(parent!=  null)?  null  :  parent.getNext();	  return(parent!=    null)?    null    :    parent.getNext();    Node    parent    =    n.getParent();    return(parent!=    null)?    null    :    parent.getNext();    	non-compiled	[CE]  not  a  statement	150	None	replace
1485	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString(),  assign);  Node  assign  =  parent.getFirstChild().getNext();  [CE]  not  a  statement  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString(),  assign);  Node  assign  =  parent.getFirstChild().getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n.getFirstChild().getString(),  assign);  Node  assign  =  parent.getFirstChild().getNext();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    assign    =    parent.getFirstChild().getNext();    	non-compiled	[CE]  not  a  statement	106	None	replace
1486	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  assignName);  Node  assign  =  parent.getFirstChild().getNext();  [CE]  not  a  statement  [FE]                        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  assignName);  Node  assign  =  parent.getFirstChild().getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  assignName);  Node  assign  =  parent.getFirstChild().getNext();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    assign    =    parent.getFirstChild().getNext();    	non-compiled	[CE]  not  a  statement	106	None	replace
1487	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.VAR);  Node  parent  =  cond.getParent();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.VAR);  Node  parent  =  cond.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.VAR);  Node  parent  =  cond.getParent();	  return    parent;    Node    parent    =    cond.getParent();    	non-compiled	[CE]  not  a  statement	84	None	replace
1488	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Node  parent  =  cond.getParent();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Node  parent  =  cond.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Node  parent  =  cond.getParent();	  return    parent;    Node    parent    =    cond.getParent();    	non-compiled	[CE]  not  a  statement	84	None	replace
1489	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild(),  INVALID_REGULAR_FLAGS);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild(),  INVALID_REGULAR_FLAGS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n.getFirstChild(),  INVALID_REGULAR_FLAGS);	  return    Node.newString(Token.NAME,    n.getFirstChild());    	non-compiled	[CE]  not  a  statement	67	None	replace
1490	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent  ==  null)?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent  ==  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent  ==  null)?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	122	None	replace
1491	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  assignName);  Node  assign  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  assignName);  Node  assign  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  assignName);  Node  assign  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    assign    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	103	None	replace
1492	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  assign);  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  assign);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  assign);	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    assign    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	103	None	replace
1493	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  parent.getParent()  :  Node.newString(Token.NAME,  String.valueOf(cond));  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent.getType()  ==  Token.NAME?  parent.getParent()  :  Node.newString(Token.NAME,  String.valueOf(cond));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent.getType()  ==  Token.NAME?  parent.getParent()  :  Node.newString(Token.NAME,  String.valueOf(cond));	  return    parent.getParent();    	non-compiled	[CE]  not  a  statement	132	None	replace
1494	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.VAR?  parent.getParent()  :  Node.newString(Token.NAME,  String.valueOf(cond));  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent.getType()  ==  Token.VAR?  parent.getParent()  :  Node.newString(Token.NAME,  String.valueOf(cond));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent.getType()  ==  Token.VAR?  parent.getParent()  :  Node.newString(Token.NAME,  String.valueOf(cond));	  return    parent.getParent();    	non-compiled	[CE]  not  a  statement	132	None	replace
1495	[BUG]  [BUGGY]  return(parent  ==  null  ||  parent.getType()  ==  Token.NAME)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null  ||  parent.getType()  ==  Token.NAME)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null  ||  parent.getType()  ==  Token.NAME)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    return(parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  not  a  statement	75	None	replace
1496	[BUG]  [BUGGY]  return(parent  ==  null  ||  parent.getType()  ==  Token.VAR)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null  ||  parent.getType()  ==  Token.VAR)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null  ||  parent.getType()  ==  Token.VAR)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    return(parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  not  a  statement	75	None	replace
1497	[BUG]  [BUGGY]  if(parent!=  null)  {  return  parent.getNext();  }  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  if(parent!=  null)  {  return  parent.getNext();  }  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	if(parent!=  null)  {  return  parent.getNext();  }	  return(parent!=    null)?    null    :    parent.getNext();    Node    parent    =    parent.getParent();    return(parent!=    null)?    null    :    parent.getNext();    	non-compiled	[CE]  not  a  statement	144	None	replace
1498	[BUG]  [BUGGY]  Node  newExpr  =  Node.newString(Token.NAME,  Cond.getFirstChild().getString());  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  newExpr  =  Node.newString(Token.NAME,  Cond.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  newExpr  =  Node.newString(Token.NAME,  Cond.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    newExpr    =    Node.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	168	None	replace
1499	[BUG]  [BUGGY]  parent  ==  null?  parent.getFirstChild()  :  parent.getFirstChild();  return(parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  parent  ==  null?  parent.getFirstChild()  :  parent.getFirstChild();  return(parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	parent  ==  null?  parent.getFirstChild()  :  parent.getFirstChild();  return(parent  ==  null)?  null  :  parent.getFirstChild();	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent.getParent();    return(parent    ==    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	129	None	replace
1500	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getParent();  Node  parent  =  parent  ==  null)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent!=  null)?  null  :  parent.getParent();  Node  parent  =  parent  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=  null)?  null  :  parent.getParent();  Node  parent  =  parent  ==  null)?  null  :  parent.getNext();	  return(parent!=    null)?    null    :    parent.getNext();    Node    parent    =    parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  not  a  statement	140	None	replace
1501	[BUG]  [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.VAR);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.VAR);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(cond.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.VAR);	  Preconditions.checkState(cond.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	159	None	replace
1502	[BUG]  [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.CATCH);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.CATCH);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(cond.getType()  ==  Token.FUNCTION  ||  parent.getType()  ==  Token.CATCH);	  Preconditions.checkState(cond.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  not  a  statement	159	None	replace
1503	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.CALL?  parent.getType()  :  Token.NAME  ||  parent.getType()  ==  Token.VAR;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent.getType()  ==  Token.CALL?  parent.getType()  :  Token.NAME  ||  parent.getType()  ==  Token.VAR;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent.getType()  ==  Token.CALL?  parent.getType()  :  Token.NAME  ||  parent.getType()  ==  Token.VAR;	  return    parent.getType()    ==    Token.CALL?    parent.getType()    :    Token.NAME;    	non-compiled	[CE]  not  a  statement	134	None	replace
1504	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.CALL?  parent.getType()  :  Token.NAME,  n;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent.getType()  ==  Token.CALL?  parent.getType()  :  Token.NAME,  n;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent.getType()  ==  Token.CALL?  parent.getType()  :  Token.NAME,  n;	  return    parent.getType()    ==    Token.CALL?    parent.getType()    :    Token.NAME;    	non-compiled	[CE]  not  a  statement	134	None	replace
1505	[BUG]  [BUGGY]  Node  assign  =  parent.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.ASSIGN);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.ASSIGN);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node    assign    =    parent.getParent();    Preconditions.checkArgument(parent.getType()  ==  Token.ASSIGN);	  	non-compiled	[CE]  not  a  statement	5	None	add
1506	[BUG]  [BUGGY]  Node  assign  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.ASSIGN);  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.ASSIGN);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node    assign    =    parent.getParent();    Preconditions.checkState(parent.getType()  ==  Token.ASSIGN);	  	non-compiled	[CE]  not  a  statement	5	None	add
1507	[BUG]  [BUGGY]  Node  assign  =  parent.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.RETURN);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.RETURN);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node    assign    =    parent.getParent();    Preconditions.checkArgument(parent.getType()  ==  Token.RETURN);	  	non-compiled	[CE]  not  a  statement	5	None	add
1508	[BUG]  [BUGGY]  Node  assign  =  parent.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.CATCH);  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  assign  =  parent.getParent();  Preconditions.checkArgument(parent.getType()  ==  Token.CATCH);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node    assign    =    parent.getParent();    Preconditions.checkArgument(parent.getType()  ==  Token.CATCH);	  	non-compiled	[CE]  not  a  statement	5	None	add
1509	[BUG]  [BUGGY]  Node  var  =  n.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString());  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  var  =  n.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  var  =  n.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString());	  return    Node.newString(Token.NAME,    cond.getString());    Node    var    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  not  a  statement	213	None	replace
1510	[BUG]  [BUGGY]  return  parent!=  null?  parent.getParent()  :  n;  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent!=  null?  parent.getParent()  :  n;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null?  parent.getParent()  :  n;	  return    parent.getNext();    	non-compiled	[CE]  not  a  statement	131	None	replace
1511	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Node  return  parent;  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Node  return  parent;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  Node  return  parent;	  return    parent;    Node    return    parent;    	non-compiled	[CE]  not  a  statement	175	None	replace
1512	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.VAR);  Node  return  parent;  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.VAR);  Node  return  parent;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.VAR);  Node  return  parent;	  return    parent;    Node    return    parent;    	non-compiled	[CE]  not  a  statement	175	None	replace
1513	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  JSError.make(n,  INVALID_REGULAR_FLAGS_RE));  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  JSError.make(n,  INVALID_REGULAR_FLAGS_RE));  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  JSError.make(n,  INVALID_REGULAR_FLAGS_RE));	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    child    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	105	None	replace
1514	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  INVALID_REGULAR_FLAGS);  [CE]  not  a  statement  [FE]                      RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  INVALID_REGULAR_FLAGS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  INVALID_REGULAR_FLAGS);	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    child    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	105	None	replace
1515	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  INVALID_REGULAR_FLAGS);  Node  child  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]                        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  INVALID_REGULAR_FLAGS);  Node  child  =  parent.getFirstChild();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  INVALID_REGULAR_FLAGS);  Node  child  =  parent.getFirstChild();	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    child    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	105	None	replace
1516	[BUG]  [BUGGY]  return  parent!=  null?  parent.getFirstChild()  :  n;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent!=  null?  parent.getFirstChild()  :  n;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null?  parent.getFirstChild()  :  n;	  return    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	133	None	replace
1517	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  DEFAULT_LITERAL_EXPRESSION_FLAGS,  false);  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  DEFAULT_LITERAL_EXPRESSION_FLAGS,  false);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  DEFAULT_LITERAL_EXPRESSION_FLAGS,  false);	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString(),    false);    	non-compiled	[CE]  not  a  statement	200	None	replace
1518	[BUG]  [BUGGY]  Preconditions.checkArgument(parent!=  null);  Node  parent  =  parent  ==  null?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent!=  null);  Node  parent  =  parent  ==  null?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent!=  null);  Node  parent  =  parent  ==  null?  null  :  parent.getParent();	  return(parent!=    null)?    null    :    parent.getParent();    Node    parent    =    parent    ==    null?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	112	None	replace
1519	[BUG]  [BUGGY]  return  parent!=  null?  null  :  parent.getFirstChild()  +  1;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  parent!=  null?  null  :  parent.getFirstChild()  +  1;  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null?  null  :  parent.getFirstChild()  +  1;	  return    parent!=    null?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	185	None	replace
1520	[BUG]  [BUGGY]  Preconditions.checkArgument(parent!=  null);  Node  parent  =  n.getNext();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent!=  null);  Node  parent  =  n.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent!=  null);  Node  parent  =  n.getNext();	  return    parent;    Node    parent    =    n.getNext();    	non-compiled	[CE]  not  a  statement	87	None	replace
1521	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent  ==  null)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent  ==  null)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    Node    parent    =    parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  not  a  statement	72	None	replace
1522	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  SHORT,  parent);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  SHORT,  parent);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  SHORT,  parent);	  return    Node.newString(Token.NAME,    COND,    parent);    	non-compiled	[CE]  not  a  statement	203	None	replace
1523	[BUG]  [BUGGY]  Preconditions.checkArgument(parent  ==  null);  Node  parent  =  parent.getParent();  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(parent  ==  null);  Node  parent  =  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent  ==  null);  Node  parent  =  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    Node    parent    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	31	None	replace
1524	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getParent();  (parent!=  null)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent!=  null)?  null  :  parent.getParent();  (parent!=  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=  null)?  null  :  parent.getParent();  (parent!=  null)?  null  :  parent.getNext();	  return(parent!=    null)?    null    :    parent.getNext();    (parent!=    null)?    null    :    parent.getNext();    	non-compiled	[CE]  not  a  statement	149	None	replace
1525	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  (parent!=  null)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  (parent!=  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=  null)?  null  :  parent.getFirstChild();  (parent!=  null)?  null  :  parent.getNext();	  return(parent!=    null)?    null    :    parent.getNext();    (parent!=    null)?    null    :    parent.getNext();    	non-compiled	[CE]  not  a  statement	149	None	replace
1526	[BUG]  [BUGGY]  Node  parentscut  =  parent  ==  null)?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parentscut  =  parent  ==  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parentscut  =  parent  ==  null)?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    Node    parent    născut    =    parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	187	None	replace
1527	[BUG]  [BUGGY]  Node  parent  nscut  =  parent  ==  null)?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  nscut  =  parent  ==  null)?  null  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  nscut  =  parent  ==  null)?  null  :  parent.getParent();	  return(parent    ==    null)?    null    :    parent.getParent();    Node    parent    născut    =    parent    ==    null)?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	187	None	replace
1528	[BUG]  [BUGGY]  if(parent  ==  null)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  if(parent  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	if(parent  ==  null)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    if(parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  not  a  statement	219	None	replace
1529	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  if(parent  ==  null)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  if(parent  ==  null)?  null  :  parent.getNext();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getFirstChild();  if(parent  ==  null)?  null  :  parent.getNext();	  return(parent    ==    null)?    null    :    parent.getNext();    if(parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  not  a  statement	219	None	replace
1530	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.EXPR_RESULT);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(cond.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	12	None	replace
1531	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.CATCH);  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.CATCH);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.CATCH);	  Preconditions.checkArgument(cond.getType()    ==    Token.NAME);    	non-compiled	[CE]  not  a  statement	12	None	replace
1532	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n,  parent,  INVALID_REGULAR_FLAGS);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n,  parent,  INVALID_REGULAR_FLAGS);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n,  parent,  INVALID_REGULAR_FLAGS);	  return    Node.newString(Token.NAME,    n,    parent);    	non-compiled	[CE]  not  a  statement	115	None	replace
1533	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n,  parent,  expr);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return  Node.newString(Token.NAME,  n,  parent,  expr);  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n,  parent,  expr);	  return    Node.newString(Token.NAME,    n,    parent);    	non-compiled	[CE]  not  a  statement	115	None	replace
1534	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Node  parent  =  n.getParent();  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  parent  =  n.getParent();  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    var    =    parent.getFirstChild();    return    Node.newString(Token.NAME,    var.getFirstChild().getString());    	non-compiled	[CE]  not  a  statement	171	None	replace
1535	[BUG]  [BUGGY]  return(parent!=  null)?  parent  :  parent.getParent();  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  return(parent!=  null)?  parent  :  parent.getParent();  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=  null)?  parent  :  parent.getParent();	  return(parent!=    null)?    null    :    parent.getParent();    return(parent!=    null)?    null    :    parent.getParent();    	non-compiled	[CE]  not  a  statement	111	None	replace
1536	[BUG]  [BUGGY]  if(parent!=  null)  {  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent!=  null)?  null  :  parent.getFirstChild();  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  if(parent!=  null)  {  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent!=  null)?  null  :  parent.getFirstChild();  }  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	if(parent!=  null)  {  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent!=  null)?  null  :  parent.getFirstChild();  }	  return(parent    ==    null)?    null    :    parent.getFirstChild();    Node    parent    =    parent!=    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	124	None	replace
1537	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  [BUGGY]      }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node    parent    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	100	None	replace
