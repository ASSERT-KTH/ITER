bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  Node  assign  =  parent.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	add	Node  assign  =  parent.getFirstChild();	      	compilable	  [FE]  AssertionFailedError  	16	1	replace
2	[BUG]  [BUGGY]  Node  assign  =  parent.getFirstChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  Node  assign  =  parent.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assign  =  parent.getFirstChild();	      	compilable	  [FE]  AssertionFailedError  	16	1	replace
3	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	add	Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);	      	compilable	  [FE]  RuntimeException  	16	1	replace
4	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);	      	compilable	  [FE]  RuntimeException  	16	1	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  Node  assign  =  parent.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	add	Node  assign  =  parent.getParent();	      	compilable	  [FE]  AssertionFailedError  	16	1	replace
6	[BUG]  [BUGGY]  Node  assign  =  parent.getParent();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  Node  assign  =  parent.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Node  assign  =  parent.getParent();	      	compilable	  [FE]  AssertionFailedError  	16	1	replace
7	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	add	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	      	compilable	  [FE]  RuntimeException  	16	1	replace
8	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	      	compilable	  [FE]  RuntimeException  	16	1	replace
9	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	add	Preconditions.checkState(parent.getType()  ==  Token.NAME);	      	compilable	  [FE]  RuntimeException  	16	1	replace
10	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);	      	compilable	  [FE]  RuntimeException  	16	1	replace
11	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	add	Preconditions.checkArgument(cond.getType()  ==  Token.NAME);	      	compilable	  [FE]  RuntimeException  	16	1	replace
12	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.NAME);	      	compilable	  [FE]  RuntimeException  	16	1	replace
13	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	add	Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);	      	compilable	  [FE]  RuntimeException  	16	1	replace
14	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.FUNCTION);	      	compilable	  [FE]  RuntimeException  	16	1	replace
15	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());	  	non-compiled	[CE]  not  a  statement	18	None	add
16	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  assign  =  parent.getFirstChild();  [CE]  unreachable  statement  [FE]      RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  assign  =  parent.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node  assign  =  parent.getFirstChild();	  	non-compiled	[CE]  unreachable  statement	18	None	add
17	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  assign  =  parent.getParent();  [CE]  variable  assign  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]        RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  assign  =  parent.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node  assign  =  parent.getParent();	  	non-compiled	[CE]  variable  assign  is  already  defined  in  method  tryMinimizeIf(Node)	18	None	add
18	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  var  =  parent.getFirstChild();  [CE]  variable  assign  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]          RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  var  =  parent.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node  var  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  assign  is  already  defined  in  method  tryMinimizeIf(Node)	18	None	add
19	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  var  =  parent.getParent();  [CE]  variable  var  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]            RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  var  =  parent.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node  var  =  parent.getParent();	  	non-compiled	[CE]  variable  var  is  already  defined  in  method  tryMinimizeIf(Node)	18	None	add
20	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  lhs  =  cond.getLastChild();  [CE]  variable  lhs  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]              RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  lhs  =  cond.getLastChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node  lhs  =  cond.getLastChild();	  	non-compiled	[CE]  variable  lhs  is  already  defined  in  method  tryMinimizeIf(Node)	18	None	add
21	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  assign  =  parent.getNext();  [CE]  variable  assign  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]                RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  assign  =  parent.getNext();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node  assign  =  parent.getNext();	  	non-compiled	[CE]  variable  assign  is  already  defined  in  method  tryMinimizeIf(Node)	18	None	add
22	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  var  =  cond.getFirstChild();  [CE]  variable  var  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]                  RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  var  =  cond.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node  var  =  cond.getFirstChild();	  	non-compiled	[CE]  variable  var  is  already  defined  in  method  tryMinimizeIf(Node)	18	None	add
23	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]      Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	add	        Preconditions.checkArgument(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	15	12	add
24	[BUG]  [BUGGY]      Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]      Preconditions.checkArgument(parent.getType()  ==  Token.NAME);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	        Preconditions.checkArgument(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	15	12	add
25	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getLastChild().getString());  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getLastChild().getString());  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getLastChild().getString());	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    	non-compiled	[CE]  unreachable  statement	19	None	replace
26	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent);  [CE]  no  suitable  method  found  for  newString(int,String,Node)  [FE]      RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  parent);	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,String,Node)	19	None	replace
27	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString()  +  1);  [CE]  unreachable  statement  [FE]        RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString()  +  1);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString()  +  1);	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    	non-compiled	[CE]  unreachable  statement	19	None	replace
28	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  true);  [CE]  no  suitable  method  found  for  newString(int,String,boolean)  [FE]          RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  true);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  true);	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,String,boolean)	19	None	replace
29	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  false);  [CE]  no  suitable  method  found  for  newString(int,String,boolean)  [FE]            RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  false);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild().getString(),  false);	  return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,String,boolean)	19	None	replace
30	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getString();  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getString();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getString();	  return(parent    ==    null)?    null    :    parent.getNext();    	non-compiled	[CE]  incompatible  types	12	None	replace
31	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  parent  =  parent.getParent();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  parent  =  parent.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getParent();    Node  parent  =  parent.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	5	None	add
32	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  parent  =  parent  ==  null)?  null  :  parent.getParent();  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  parent  =  parent  ==  null)?  null  :  parent.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getParent();    Node  parent  =  parent  ==  null)?  null  :  parent.getParent();	  	non-compiled	[CE]  ';'  expected	5	None	add
33	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  parent  =  parent!=  null)?  null  :  parent.getParent();  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  parent  =  parent!=  null)?  null  :  parent.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getParent();    Node  parent  =  parent!=  null)?  null  :  parent.getParent();	  	non-compiled	[CE]  ';'  expected	5	None	add
34	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  return(parent  ==  null)?  null  :  parent.getParent();  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  return(parent  ==  null)?  null  :  parent.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getParent();    return(parent  ==  null)?  null  :  parent.getParent();	  	non-compiled	[CE]  unreachable  statement	5	None	add
35	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  parent  =  parent  ==  null?  null  :  parent.getParent();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  parent  =  parent  ==  null?  null  :  parent.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getParent();    Node  parent  =  parent  ==  null?  null  :  parent.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	5	None	add
36	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  return(parent  ==  null)?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  return(parent  ==  null)?  null  :  parent.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getParent();    Node  return(parent  ==  null)?  null  :  parent.getParent();	  	non-compiled	[CE]  not  a  statement	5	None	add
37	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  if(parent  ==  null)?  null  :  parent.getParent();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  if(parent  ==  null)?  null  :  parent.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getParent();    if(parent  ==  null)?  null  :  parent.getParent();	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
38	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  (parent  ==  null)?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  (parent  ==  null)?  null  :  parent.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getParent();    (parent  ==  null)?  null  :  parent.getParent();	  	non-compiled	[CE]  not  a  statement	5	None	add
39	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(parent,  false);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  NodeUtil.newLiteralValue(parent,  false);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(parent,  false);	  return    NodeUtil.newLiteralValue(cond,    false);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
40	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(n,  false);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  NodeUtil.newLiteralValue(n,  false);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(n,  false);	  return    NodeUtil.newLiteralValue(cond,    false);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
41	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(cond,  false,  parent);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  NodeUtil.newLiteralValue(cond,  false,  parent);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(cond,  false,  parent);	  return    NodeUtil.newLiteralValue(cond,    false);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
42	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(cond,  null);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  NodeUtil.newLiteralValue(cond,  null);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(cond,  null);	  return    NodeUtil.newLiteralValue(cond,    false);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
43	[BUG]  [BUGGY]  ReturnNodeUtil.newLiteralValue(cond,  true);  [CE]  cannot  find  symbol  ReturnNodeUtil  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  ReturnNodeUtil.newLiteralValue(cond,  true);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	ReturnNodeUtil.newLiteralValue(cond,  true);	  return    NodeUtil.newLiteralValue(cond,    false);    	non-compiled	[CE]  cannot  find  symbol  ReturnNodeUtil	17	None	replace
44	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  parent);  [CE]  no  suitable  method  found  for  newString(int,String,Node)  [FE]    RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  parent);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  parent);	  return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,String,Node)	25	None	replace
45	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getString());  [CE]  unreachable  statement  [FE]      RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  parent.getString());  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getString());	  return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  unreachable  statement	25	None	replace
46	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString()  +  1);  [CE]  unreachable  statement  [FE]        RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getString()  +  1);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString()  +  1);	  return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  unreachable  statement	25	None	replace
47	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  false);  [CE]  no  suitable  method  found  for  newString(int,String,boolean)  [FE]          RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  false);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  false);	  return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,String,boolean)	25	None	replace
48	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  true);  [CE]  no  suitable  method  found  for  newString(int,String,boolean)  [FE]            RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getString(),  true);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getString(),  true);	  return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,String,boolean)	25	None	replace
49	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString());  Node  return  Node.newString(Token.NAME,  cond.getString());  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getString());  Node  return  Node.newString(Token.NAME,  cond.getString());  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    cond.getString());    Node  return  Node.newString(Token.NAME,  cond.getString());	  	non-compiled	[CE]  not  a  statement	24	None	add
50	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString());  Node  assign  =  parent.getFirstChild();  [CE]  variable  assign  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]      RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getString());  Node  assign  =  parent.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    cond.getString());    Node  assign  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  assign  is  already  defined  in  method  tryMinimizeIf(Node)	24	None	add
51	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString());  Node  assign  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString());  [CE]  variable  assign  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]        RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getString());  Node  assign  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString());  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    cond.getString());    Node  assign  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString());	  	non-compiled	[CE]  variable  assign  is  already  defined  in  method  tryMinimizeIf(Node)	24	None	add
52	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString());  Node  var  =  parent.getParent();  [CE]  variable  var  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]          RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getString());  Node  var  =  parent.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    cond.getString());    Node  var  =  parent.getParent();	  	non-compiled	[CE]  variable  var  is  already  defined  in  method  tryMinimizeIf(Node)	24	None	add
53	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString());  Node  cond  =  parent.getParent();  [CE]  variable  cond  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]            RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getString());  Node  cond  =  parent.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    cond.getString());    Node  cond  =  parent.getParent();	  	non-compiled	[CE]  variable  cond  is  already  defined  in  method  tryMinimizeIf(Node)	24	None	add
54	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString());  Node  assign  =  parent.getParent();  [CE]  variable  assign  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]              RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getString());  Node  assign  =  parent.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    cond.getString());    Node  assign  =  parent.getParent();	  	non-compiled	[CE]  variable  assign  is  already  defined  in  method  tryMinimizeIf(Node)	24	None	add
55	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString());  Node  cond  =  parent.getFirstChild();  [CE]  variable  cond  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]                RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getString());  Node  cond  =  parent.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    cond.getString());    Node  cond  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  cond  is  already  defined  in  method  tryMinimizeIf(Node)	24	None	add
56	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString());  Node  cond  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString());  [CE]  variable  cond  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]                  RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getString());  Node  cond  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString());  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    cond.getString());    Node  cond  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString());	  	non-compiled	[CE]  variable  cond  is  already  defined  in  method  tryMinimizeIf(Node)	24	None	add
57	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent!=  null)?  null  :  parent.getFirstChild();  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent!=  null)?  null  :  parent.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=    null)?    null    :    parent.getFirstChild();    Node  parent  =  parent!=  null)?  null  :  parent.getFirstChild();	  	non-compiled	[CE]  ';'  expected	7	None	add
58	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=    null)?    null    :    parent.getFirstChild();    Node  parent  =  parent  ==  null)?  null  :  parent.getFirstChild();	  	non-compiled	[CE]  ';'  expected	7	None	add
59	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent!=  null?  null  :  parent.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent!=  null?  null  :  parent.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=    null)?    null    :    parent.getFirstChild();    Node  parent  =  parent!=  null?  null  :  parent.getFirstChild();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	7	None	add
60	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=    null)?    null    :    parent.getFirstChild();    Node  parent  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	7	None	add
61	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  return(parent!=  null)?  null  :  parent.getFirstChild();  [CE]  unreachable  statement  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  return(parent!=  null)?  null  :  parent.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=    null)?    null    :    parent.getFirstChild();    return(parent!=  null)?  null  :  parent.getFirstChild();	  	non-compiled	[CE]  unreachable  statement	7	None	add
62	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent.getParent();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=    null)?    null    :    parent.getFirstChild();    Node  parent  =  parent.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	7	None	add
63	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent.getLastChild();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent.getLastChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=    null)?    null    :    parent.getFirstChild();    Node  parent  =  parent.getLastChild();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	7	None	add
64	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent!=  null)?  null  :  parent.getLastChild();  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent!=  null)?  null  :  parent.getLastChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=    null)?    null    :    parent.getFirstChild();    Node  parent  =  parent!=  null)?  null  :  parent.getLastChild();	  	non-compiled	[CE]  ';'  expected	7	None	add
65	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  parent);  [CE]  no  suitable  method  found  for  newString(int,Node,Node)  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  parent);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild(),  parent);	  return    Node.newString(Token.NAME,    cond.getFirstChild());    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,Node,Node)	23	None	replace
66	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild());  [CE]  no  suitable  method  found  for  newString(int,Node)  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild());  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild());	  return    Node.newString(Token.NAME,    cond.getFirstChild());    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,Node)	23	None	replace
67	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild());  [CE]  no  suitable  method  found  for  newString(int,Node)  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild());  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n.getFirstChild());	  return    Node.newString(Token.NAME,    cond.getFirstChild());    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,Node)	23	None	replace
68	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getLastChild());  [CE]  no  suitable  method  found  for  newString(int,Node)  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getLastChild());  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getLastChild());	  return    Node.newString(Token.NAME,    cond.getFirstChild());    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,Node)	23	None	replace
69	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  no  suitable  method  found  for  newString(int,Node,DiagnosticType)  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild(),  INVALID_REGULAR_EXPRESSION_FLAGS);	  return    Node.newString(Token.NAME,    cond.getFirstChild());    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,Node,DiagnosticType)	23	None	replace
70	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  no  suitable  method  found  for  newString(int,Node,ImmutableSet<String>)  [FE]                          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS);	  return    Node.newString(Token.NAME,    cond.getFirstChild());    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,Node,ImmutableSet<String>)	23	None	replace
71	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  STRICT_OBJECT_CONSTRUCTORS);  [CE]  cannot  find  symbol  STRICT_OBJECT_CONSTRUCTORS  [FE]                            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  STRICT_OBJECT_CONSTRUCTORS);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild(),  STRICT_OBJECT_CONSTRUCTORS);	  return    Node.newString(Token.NAME,    cond.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol  STRICT_OBJECT_CONSTRUCTORS	23	None	replace
72	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  parent  =  parent  ==  null)?  null  :  parent.getNext();  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  parent  =  parent  ==  null)?  null  :  parent.getNext();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getNext();    Node  parent  =  parent  ==  null)?  null  :  parent.getNext();	  	non-compiled	[CE]  ';'  expected	11	None	add
73	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  parent  =  parent.getParent();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  parent  =  parent.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getNext();    Node  parent  =  parent.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	11	None	add
74	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  parent  =  parent.getNext();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  parent  =  parent.getNext();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getNext();    Node  parent  =  parent.getNext();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	11	None	add
75	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  return(parent  ==  null)?  null  :  parent.getNext();  [CE]  no  suitable  method  found  for  newString(int,Node)  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  return(parent  ==  null)?  null  :  parent.getNext();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getNext();    return(parent  ==  null)?  null  :  parent.getNext();	  	non-compiled	[CE]  no  suitable  method  found  for  newString(int,Node)	11	None	add
76	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  parent  =  parent!=  null)?  null  :  parent.getNext();  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  parent  =  parent!=  null)?  null  :  parent.getNext();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getNext();    Node  parent  =  parent!=  null)?  null  :  parent.getNext();	  	non-compiled	[CE]  ';'  expected	11	None	add
77	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  return(parent  ==  null)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  return(parent  ==  null)?  null  :  parent.getNext();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getNext();    Node  return(parent  ==  null)?  null  :  parent.getNext();	  	non-compiled	[CE]  not  a  statement	11	None	add
78	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  parent  =  parent  ==  null?  null  :  parent.getNext();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  parent  =  parent  ==  null?  null  :  parent.getNext();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getNext();    Node  parent  =  parent  ==  null?  null  :  parent.getNext();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	11	None	add
79	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  parent  =  parent.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  parent  =  parent.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getNext();    Node  parent  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	11	None	add
80	[BUG]  [BUGGY]  return  parent;  Node  parent  =  n.getParent();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  parent;  Node  parent  =  n.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    parent;    Node  parent  =  n.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	1	None	add
81	[BUG]  [BUGGY]  return  parent;  Node  parent  =  n.getParent();  return  parent;  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  parent;  Node  parent  =  n.getParent();  return  parent;  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    parent;    Node  parent  =  n.getParent();  return  parent;	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	1	None	add
82	[BUG]  [BUGGY]  return  parent;  Node  parent  =  n.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  parent;  Node  parent  =  n.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    parent;    Node  parent  =  n.getFirstChild();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	1	None	add
83	[BUG]  [BUGGY]  return  parent;  Node  parent  =  n.getLastChild();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  parent;  Node  parent  =  n.getLastChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    parent;    Node  parent  =  n.getLastChild();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	1	None	add
84	[BUG]  [BUGGY]  return  parent;  Node  parent  =  cond.getParent();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  parent;  Node  parent  =  cond.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    parent;    Node  parent  =  cond.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	1	None	add
85	[BUG]  [BUGGY]  return  parent;  Node  parent  =  n.getFirstChild();  return  parent;  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  parent;  Node  parent  =  n.getFirstChild();  return  parent;  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    parent;    Node  parent  =  n.getFirstChild();  return  parent;	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	1	None	add
86	[BUG]  [BUGGY]  return  parent;  Node  parent  =  n.getLastChild();  return  parent;  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  parent;  Node  parent  =  n.getLastChild();  return  parent;  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    parent;    Node  parent  =  n.getLastChild();  return  parent;	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	1	None	add
87	[BUG]  [BUGGY]  return  parent;  Node  parent  =  n.getNext();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  parent;  Node  parent  =  n.getNext();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    parent;    Node  parent  =  n.getNext();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	1	None	add
88	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getLastChild();  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getLastChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent  ==  null)?  null  :  parent.getLastChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  unreachable  statement	8	None	replace
89	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getLastChild();  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getLastChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=  null)?  null  :  parent.getLastChild();	  return(parent!=    null)?    null    :    parent.getFirstChild();    	non-compiled	[CE]  unreachable  statement	8	None	replace
90	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(parent,  true);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  NodeUtil.newLiteralValue(parent,  true);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(parent,  true);	  return    NodeUtil.newLiteralValue(cond,    true);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
91	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(cond,  true,  parent);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  NodeUtil.newLiteralValue(cond,  true,  parent);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(cond,  true,  parent);	  return    NodeUtil.newLiteralValue(cond,    true);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
92	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(cond,  true,  false);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  NodeUtil.newLiteralValue(cond,  true,  false);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(cond,  true,  false);	  return    NodeUtil.newLiteralValue(cond,    true);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
93	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(n,  true);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  NodeUtil.newLiteralValue(n,  true);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(n,  true);	  return    NodeUtil.newLiteralValue(cond,    true);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
94	[BUG]  [BUGGY]  return  NodeUtil.newLiteralValue(cond,  true,  n);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  NodeUtil.newLiteralValue(cond,  true,  n);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLiteralValue(cond,  true,  n);	  return    NodeUtil.newLiteralValue(cond,    true);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
95	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString());  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  n.getFirstChild().getString());  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n.getFirstChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  unreachable  statement	22	None	replace
96	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  cond);  [CE]  no  suitable  method  found  for  newString(int,String,Node)  [FE]      RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  cond);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  cond);	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,String,Node)	22	None	replace
97	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getLastChild().getString());  [CE]  unreachable  statement  [FE]        RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  parent.getLastChild().getString());  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getLastChild().getString());	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  unreachable  statement	22	None	replace
98	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString()  +  1);  [CE]  unreachable  statement  [FE]          RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString()  +  1);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild().getString()  +  1);	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  unreachable  statement	22	None	replace
99	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  parent  =  parent.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]    RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  parent  =  parent.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node  parent  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	21	None	add
100	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  parent  =  parent.getParent();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]      RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  parent  =  parent.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node  parent  =  parent.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	21	None	add
101	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  var  =  parent.getFirstChild();  [CE]  no  suitable  method  found  for  newString(int,Node)  [FE]        RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  var  =  parent.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node  var  =  parent.getFirstChild();	  	non-compiled	[CE]  no  suitable  method  found  for  newString(int,Node)	21	None	add
102	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  parent  =  parent.getLastChild();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]          RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  parent  =  parent.getLastChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node  parent  =  parent.getLastChild();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	21	None	add
103	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  assign  =  parent.getFirstChild();  [CE]  no  suitable  method  found  for  newString(int,Node)  [FE]            RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  assign  =  parent.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node  assign  =  parent.getFirstChild();	  	non-compiled	[CE]  no  suitable  method  found  for  newString(int,Node)	21	None	add
104	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  lhs  =  parent.getFirstChild();  [CE]  no  suitable  method  found  for  newString(int,Node)  [FE]              RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  lhs  =  parent.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node  lhs  =  parent.getFirstChild();	  	non-compiled	[CE]  no  suitable  method  found  for  newString(int,Node)	21	None	add
105	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  child  =  parent.getFirstChild();  [CE]  no  suitable  method  found  for  newString(int,Node)  [FE]                RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  child  =  parent.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node  child  =  parent.getFirstChild();	  	non-compiled	[CE]  no  suitable  method  found  for  newString(int,Node)	21	None	add
106	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  assign  =  parent.getFirstChild().getNext();  [CE]  no  suitable  method  found  for  newString(int,Node)  [FE]                  RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  assign  =  parent.getFirstChild().getNext();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node  assign  =  parent.getFirstChild().getNext();	  	non-compiled	[CE]  no  suitable  method  found  for  newString(int,Node)	21	None	add
107	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getParent();  Node  parent  =  parent.getParent();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getParent();  Node  parent  =  parent.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=    null)?    null    :    parent.getParent();    Node  parent  =  parent.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	9	None	add
108	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getParent();  Node  parent  =  parent!=  null)?  null  :  parent.getParent();  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getParent();  Node  parent  =  parent!=  null)?  null  :  parent.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=    null)?    null    :    parent.getParent();    Node  parent  =  parent!=  null)?  null  :  parent.getParent();	  	non-compiled	[CE]  ';'  expected	9	None	add
109	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getParent();  Node  parent  =  parent!=  null?  null  :  parent.getParent();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getParent();  Node  parent  =  parent!=  null?  null  :  parent.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=    null)?    null    :    parent.getParent();    Node  parent  =  parent!=  null?  null  :  parent.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	9	None	add
110	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getParent();  Node  parent  =  parent  ==  null)?  null  :  parent.getParent();  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getParent();  Node  parent  =  parent  ==  null)?  null  :  parent.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=    null)?    null    :    parent.getParent();    Node  parent  =  parent  ==  null)?  null  :  parent.getParent();	  	non-compiled	[CE]  ';'  expected	9	None	add
111	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getParent();  return(parent!=  null)?  null  :  parent.getParent();  [CE]  no  suitable  method  found  for  newString(int,Node)  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getParent();  return(parent!=  null)?  null  :  parent.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=    null)?    null    :    parent.getParent();    return(parent!=  null)?  null  :  parent.getParent();	  	non-compiled	[CE]  no  suitable  method  found  for  newString(int,Node)	9	None	add
112	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getParent();  Node  parent  =  parent  ==  null?  null  :  parent.getParent();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getParent();  Node  parent  =  parent  ==  null?  null  :  parent.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=    null)?    null    :    parent.getParent();    Node  parent  =  parent  ==  null?  null  :  parent.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	9	None	add
113	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getParent();  Node  parent  =  parent.getParent();  return(parent!=  null)?  null  :  parent.getParent();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getParent();  Node  parent  =  parent.getParent();  return(parent!=  null)?  null  :  parent.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=    null)?    null    :    parent.getParent();    Node  parent  =  parent.getParent();  return(parent!=  null)?  null  :  parent.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	9	None	add
114	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getParent();  (parent!=  null)?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getParent();  (parent!=  null)?  null  :  parent.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=    null)?    null    :    parent.getParent();    (parent!=  null)?  null  :  parent.getParent();	  	non-compiled	[CE]  not  a  statement	9	None	add
115	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n,  parent);  [CE]  no  suitable  method  found  for  newString(int,Node,Node)  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  n,  parent);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n,  parent);	  return    Node.newString(Token.NAME,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,Node,Node)	26	None	replace
116	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond);  [CE]  no  suitable  method  found  for  newString(int,Node)  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond);	  return    Node.newString(Token.NAME,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,Node)	26	None	replace
117	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond,  parent);  [CE]  no  suitable  method  found  for  newString(int,Node,Node)  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond,  parent);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond,  parent);	  return    Node.newString(Token.NAME,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,Node,Node)	26	None	replace
118	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent,  n);  [CE]  no  suitable  method  found  for  newString(int,Node,Node)  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  parent,  n);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent,  n);	  return    Node.newString(Token.NAME,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,Node,Node)	26	None	replace
119	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent,  cond);  [CE]  no  suitable  method  found  for  newString(int,Node,Node)  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  parent,  cond);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent,  cond);	  return    Node.newString(Token.NAME,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,Node,Node)	26	None	replace
120	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n);  [CE]  no  suitable  method  found  for  newString(int,Node)  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  n);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n);	  return    Node.newString(Token.NAME,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,Node)	26	None	replace
121	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  var,  parent);  [CE]  cannot  find  symbol  var  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  var,  parent);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  var,  parent);	  return    Node.newString(Token.NAME,    parent);    	non-compiled	[CE]  cannot  find  symbol  var	26	None	replace
122	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getFirstChild();    Node  parent  =  parent  ==  null)?  null  :  parent.getFirstChild();	  	non-compiled	[CE]  ';'  expected	3	None	add
123	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getFirstChild();    Node  parent  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	3	None	add
124	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent!=  null)?  null  :  parent.getFirstChild();  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent!=  null)?  null  :  parent.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getFirstChild();    Node  parent  =  parent!=  null)?  null  :  parent.getFirstChild();	  	non-compiled	[CE]  ';'  expected	3	None	add
125	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  return(parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  no  suitable  method  found  for  newString(int,Node)  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  return(parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getFirstChild();    return(parent  ==  null)?  null  :  parent.getFirstChild();	  	non-compiled	[CE]  no  suitable  method  found  for  newString(int,Node)	3	None	add
126	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  return(parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  return(parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getFirstChild();    Node  return(parent  ==  null)?  null  :  parent.getFirstChild();	  	non-compiled	[CE]  not  a  statement	3	None	add
127	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent.getParent();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getFirstChild();    Node  parent  =  parent.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	3	None	add
128	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent.getFirstChild();  return(parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent.getFirstChild();  return(parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getFirstChild();    Node  parent  =  parent.getFirstChild();  return(parent  ==  null)?  null  :  parent.getFirstChild();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	3	None	add
129	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent.getParent();  return(parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent.getParent();  return(parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getFirstChild();    Node  parent  =  parent.getParent();  return(parent  ==  null)?  null  :  parent.getFirstChild();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	3	None	add
130	[BUG]  [BUGGY]  return  cond;  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  cond;  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  cond;	  return    parent;    	non-compiled	[CE]  unreachable  statement	2	None	replace
131	[BUG]  [BUGGY]  return  parent.getNext();  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  parent.getNext();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent.getNext();	  return    parent;    	non-compiled	[CE]  unreachable  statement	2	None	replace
132	[BUG]  [BUGGY]  return  parent.getParent();  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  parent.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent.getParent();	  return    parent;    	non-compiled	[CE]  unreachable  statement	2	None	replace
133	[BUG]  [BUGGY]  return  parent.getFirstChild();  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  parent.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent.getFirstChild();	  return    parent;    	non-compiled	[CE]  unreachable  statement	2	None	replace
134	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.CALL?  parent.getType()  :  Token.NAME;  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  parent.getType()  ==  Token.CALL?  parent.getType()  :  Token.NAME;  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent.getType()  ==  Token.CALL?  parent.getType()  :  Token.NAME;	  return    parent;    	non-compiled	[CE]  incompatible  types	2	None	replace
135	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.VAR?  parent.getType()  :  Token.NAME;  [CE]  incompatible  types  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  parent.getType()  ==  Token.VAR?  parent.getType()  :  Token.NAME;  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent.getType()  ==  Token.VAR?  parent.getType()  :  Token.NAME;	  return    parent;    	non-compiled	[CE]  incompatible  types	2	None	replace
136	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  parent.getType()  :  Token.FUNCTION;  [CE]  incompatible  types  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  parent.getType()  ==  Token.NAME?  parent.getType()  :  Token.FUNCTION;  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent.getType()  ==  Token.NAME?  parent.getType()  :  Token.FUNCTION;	  return    parent;    	non-compiled	[CE]  incompatible  types	2	None	replace
137	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getNext();  Node  parent  =  parent!=  null)?  null  :  parent.getNext();  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getNext();  Node  parent  =  parent!=  null)?  null  :  parent.getNext();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=    null)?    null    :    parent.getNext();    Node  parent  =  parent!=  null)?  null  :  parent.getNext();	  	non-compiled	[CE]  ';'  expected	13	None	add
138	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getNext();  Node  parent  =  parent.getParent();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getNext();  Node  parent  =  parent.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=    null)?    null    :    parent.getNext();    Node  parent  =  parent.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	13	None	add
139	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getNext();  Node  parent  =  parent!=  null?  null  :  parent.getNext();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getNext();  Node  parent  =  parent!=  null?  null  :  parent.getNext();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=    null)?    null    :    parent.getNext();    Node  parent  =  parent!=  null?  null  :  parent.getNext();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	13	None	add
140	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getNext();  Node  parent  =  parent  ==  null)?  null  :  parent.getNext();  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getNext();  Node  parent  =  parent  ==  null)?  null  :  parent.getNext();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=    null)?    null    :    parent.getNext();    Node  parent  =  parent  ==  null)?  null  :  parent.getNext();	  	non-compiled	[CE]  ';'  expected	13	None	add
141	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getNext();  Node  parent  =  parent.getNext();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getNext();  Node  parent  =  parent.getNext();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=    null)?    null    :    parent.getNext();    Node  parent  =  parent.getNext();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	13	None	add
142	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getNext();  return(parent!=  null)?  null  :  parent.getNext();  [CE]  no  suitable  method  found  for  newString(int,Node)  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getNext();  return(parent!=  null)?  null  :  parent.getNext();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=    null)?    null    :    parent.getNext();    return(parent!=  null)?  null  :  parent.getNext();	  	non-compiled	[CE]  no  suitable  method  found  for  newString(int,Node)	13	None	add
143	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getNext();  Node  return(parent!=  null)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getNext();  Node  return(parent!=  null)?  null  :  parent.getNext();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=    null)?    null    :    parent.getNext();    Node  return(parent!=  null)?  null  :  parent.getNext();	  	non-compiled	[CE]  not  a  statement	13	None	add
144	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getNext();  Node  parent  =  parent.getParent();  return(parent!=  null)?  null  :  parent.getNext();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getNext();  Node  parent  =  parent.getParent();  return(parent!=  null)?  null  :  parent.getNext();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=    null)?    null    :    parent.getNext();    Node  parent  =  parent.getParent();  return(parent!=  null)?  null  :  parent.getNext();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	13	None	add
145	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getFirstChild();    Node  parent  ==  null)?  null  :  parent.getFirstChild();	  	non-compiled	[CE]  ';'  expected	3	None	add
146	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  născut  =  parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Node  parent  născut  =  parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getFirstChild();    Node  parent  născut  =  parent  ==  null)?  null  :  parent.getFirstChild();	  	non-compiled	[CE]  ';'  expected	3	None	add
147	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getNext();  Node  parent  =  parent.getParent();  if(parent!=  null)  {  return(parent!=  null)?  null  :  parent.getNext();  }  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getNext();  Node  parent  =  parent.getParent();  if(parent!=  null)  {  return(parent!=  null)?  null  :  parent.getNext();  }  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=    null)?    null    :    parent.getNext();    Node  parent  =  parent.getParent();  if(parent!=  null)  {  return(parent!=  null)?  null  :  parent.getNext();  }	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	13	None	add
148	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getNext();  Node  parent  =  n.getParent();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getNext();  Node  parent  =  n.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=    null)?    null    :    parent.getNext();    Node  parent  =  n.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	13	None	add
149	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getNext();  (parent!=  null)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getNext();  (parent!=  null)?  null  :  parent.getNext();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=    null)?    null    :    parent.getNext();    (parent!=  null)?  null  :  parent.getNext();	  	non-compiled	[CE]  not  a  statement	13	None	add
150	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getNext();  Node  parent  =  n.getParent();  return(parent!=  null)?  null  :  parent.getNext();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getNext();  Node  parent  =  n.getParent();  return(parent!=  null)?  null  :  parent.getNext();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=    null)?    null    :    parent.getNext();    Node  parent  =  n.getParent();  return(parent!=  null)?  null  :  parent.getNext();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	13	None	add
151	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  Node  return(parent!=  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  Node  return(parent!=  null)?  null  :  parent.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=    null)?    null    :    parent.getFirstChild();    Node  return(parent!=  null)?  null  :  parent.getFirstChild();	  	non-compiled	[CE]  not  a  statement	7	None	add
152	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent.getParent();  return(parent!=  null)?  null  :  parent.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent.getParent();  return(parent!=  null)?  null  :  parent.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=    null)?    null    :    parent.getFirstChild();    Node  parent  =  parent.getParent();  return(parent!=  null)?  null  :  parent.getFirstChild();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	7	None	add
153	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  (parent!=  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  (parent!=  null)?  null  :  parent.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=    null)?    null    :    parent.getFirstChild();    (parent!=  null)?  null  :  parent.getFirstChild();	  	non-compiled	[CE]  not  a  statement	7	None	add
154	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent.getFirstChild();  return(parent!=  null)?  null  :  parent.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  Node  parent  =  parent.getFirstChild();  return(parent!=  null)?  null  :  parent.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=    null)?    null    :    parent.getFirstChild();    Node  parent  =  parent.getFirstChild();  return(parent!=  null)?  null  :  parent.getFirstChild();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	7	None	add
155	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  Node  parent  =  n.getParent();  return(parent!=  null)?  null  :  parent.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  Node  parent  =  n.getParent();  return(parent!=  null)?  null  :  parent.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=    null)?    null    :    parent.getFirstChild();    Node  parent  =  n.getParent();  return(parent!=  null)?  null  :  parent.getFirstChild();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	7	None	add
156	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  FoldArrayAction());  [CE]  cannot  find  symbol  compiler  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  FoldArrayAction());  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	NodeTraversal.traverse(compiler,  parent,  new  FoldArrayAction());	      	non-compiled	[CE]  cannot  find  symbol  compiler	16	None	replace
157	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.EXPR_RESULT);  [CE]  no  suitable  method  found  for  newString(int,Node)  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.EXPR_RESULT);	      	non-compiled	[CE]  no  suitable  method  found  for  newString(int,Node)	16	None	replace
158	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.FUNCTION);  [CE]  no  suitable  method  found  for  newString(int,Node)  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.FUNCTION);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.FUNCTION);	      	non-compiled	[CE]  no  suitable  method  found  for  newString(int,Node)	16	None	replace
159	[BUG]  [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.FUNCTION);  [CE]  no  suitable  method  found  for  newString(int,Node)  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  Preconditions.checkState(cond.getType()  ==  Token.FUNCTION);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkState(cond.getType()  ==  Token.FUNCTION);	      	non-compiled	[CE]  no  suitable  method  found  for  newString(int,Node)	16	None	replace
160	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.VAR);  [CE]  no  suitable  method  found  for  newString(int,Node)  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.VAR);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.VAR);	      	non-compiled	[CE]  no  suitable  method  found  for  newString(int,Node)	16	None	replace
161	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  var  =  cond.getLastChild();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]    RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  var  =  cond.getLastChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node  var  =  cond.getLastChild();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	18	None	add
162	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  var  =  cond.getNext();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]      RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  var  =  cond.getNext();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node  var  =  cond.getNext();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	18	None	add
163	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  returnNode.newString(Token.NAME,  cond.getLastChild().getString());  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  returnNode.newString(Token.NAME,  cond.getLastChild().getString());  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node  returnNode.newString(Token.NAME,  cond.getLastChild().getString());	  	non-compiled	[CE]  ';'  expected	18	None	add
164	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  nextBranch  =  cond.getNext();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]          RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  nextBranch  =  cond.getNext();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node  nextBranch  =  cond.getNext();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	18	None	add
165	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  thenBranch  =  cond.getFirstChild().getNext();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]            RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  thenBranch  =  cond.getFirstChild().getNext();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node  thenBranch  =  cond.getFirstChild().getNext();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	18	None	add
166	[BUG]  [BUGGY]      Preconditions.checkState(cond.getType()  ==  Token.NAME);  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]      Preconditions.checkState(cond.getType()  ==  Token.NAME);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	        Preconditions.checkState(cond.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	15	None	add
167	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  returnNode.newString(Token.NAME,  parent.getFirstChild().getString());  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  returnNode.newString(Token.NAME,  parent.getFirstChild().getString());  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node  returnNode.newString(Token.NAME,  parent.getFirstChild().getString());	  	non-compiled	[CE]  ';'  expected	21	None	add
168	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  newExpr  =  Node.newString(Token.NAME,  parent.getFirstChild().getString());  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]      RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  newExpr  =  Node.newString(Token.NAME,  parent.getFirstChild().getString());  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node  newExpr  =  Node.newString(Token.NAME,  parent.getFirstChild().getString());	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	21	None	add
169	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  newExpr  =  Node.newString(Token.NAME,  parent.getFirstChild().getString());  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]        RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  newExpr  =  Node.newString(Token.NAME,  parent.getFirstChild().getString());  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node  newExpr  =  Node.newString(Token.NAME,  parent.getFirstChild().getString());  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	21	None	add
170	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  toString  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  toString(parent.getFirstChild().getString()));  [CE]  incompatible  types  [FE]          RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  toString  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  toString(parent.getFirstChild().getString()));  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node  toString  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  toString(parent.getFirstChild().getString()));	  	non-compiled	[CE]  incompatible  types	21	None	add
171	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  var  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  var.getFirstChild().getString());  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]            RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  var  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  var.getFirstChild().getString());  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node  var  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  var.getFirstChild().getString());	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	21	None	add
172	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  toString  =  parent.getFirstChild().getString();  [CE]  incompatible  types  [FE]              RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  toString  =  parent.getFirstChild().getString();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node  toString  =  parent.getFirstChild().getString();	  	non-compiled	[CE]  incompatible  types	21	None	add
173	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  toString  =  parent.getFirstChild().getString();  return  Token.newString(Token.NAME,  toString(parent.getFirstChild().getString()));  [CE]  incompatible  types  [FE]                RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  toString  =  parent.getFirstChild().getString();  return  Token.newString(Token.NAME,  toString(parent.getFirstChild().getString()));  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node  toString  =  parent.getFirstChild().getString();  return  Token.newString(Token.NAME,  toString(parent.getFirstChild().getString()));	  	non-compiled	[CE]  incompatible  types	21	None	add
174	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.toString());  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]    RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.toString());  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.toString());	  return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	25	None	replace
175	[BUG]  [BUGGY]  return  parent;  Node  return  parent;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  parent;  Node  return  parent;  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    parent;    Node  return  parent;	  	non-compiled	[CE]  not  a  statement	1	None	add
176	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getParent();  Node  return(parent!=  null)?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getParent();  Node  return(parent!=  null)?  null  :  parent.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=    null)?    null    :    parent.getParent();    Node  return(parent!=  null)?  null  :  parent.getParent();	  	non-compiled	[CE]  not  a  statement	9	None	add
177	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getParent();  Node  parent  =  n.getParent();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getParent();  Node  parent  =  n.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=    null)?    null    :    parent.getParent();    Node  parent  =  n.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	9	None	add
178	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getParent();  if(parent!=  null)?  null  :  parent.getParent();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getParent();  if(parent!=  null)?  null  :  parent.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=    null)?    null    :    parent.getParent();    if(parent!=  null)?  null  :  parent.getParent();	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
179	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getParent();  Node  parent  =  n.getParent();  return(parent!=  null)?  null  :  parent.getParent();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getParent();  Node  parent  =  n.getParent();  return(parent!=  null)?  null  :  parent.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=    null)?    null    :    parent.getParent();    Node  parent  =  n.getParent();  return(parent!=  null)?  null  :  parent.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	9	None	add
180	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getParent();  parent!=  null)?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getParent();  parent!=  null)?  null  :  parent.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=    null)?    null    :    parent.getParent();    parent!=  null)?  null  :  parent.getParent();	  	non-compiled	[CE]  not  a  statement	9	None	add
181	[BUG]  [BUGGY]  return  parent  ==  null?  null  :  parent;  [CE]  no  suitable  method  found  for  newString(int,Node)  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  parent  ==  null?  null  :  parent;  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null?  null  :  parent;	  return    parent;    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,Node)	2	None	replace
182	[BUG]  [BUGGY]  return  parent  ==  null?  null  :  parent.getFirstChild();  [CE]  no  suitable  method  found  for  newString(int,Node)  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  parent  ==  null?  null  :  parent.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null?  null  :  parent.getFirstChild();	  return    parent;    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,Node)	2	None	replace
183	[BUG]  [BUGGY]  return  parent  ==  null?  null  :  parent.getParent();  [CE]  no  suitable  method  found  for  newString(int,Node)  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  parent  ==  null?  null  :  parent.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent  ==  null?  null  :  parent.getParent();	  return    parent;    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,Node)	2	None	replace
184	[BUG]  [BUGGY]  return  parent!=  null?  null  :  parent;  [CE]  no  suitable  method  found  for  newString(int,Node)  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  parent!=  null?  null  :  parent;  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null?  null  :  parent;	  return    parent;    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,Node)	2	None	replace
185	[BUG]  [BUGGY]  return  parent!=  null?  null  :  parent.getFirstChild();  [CE]  no  suitable  method  found  for  newString(int,Node)  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  parent!=  null?  null  :  parent.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null?  null  :  parent.getFirstChild();	  return    parent;    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,Node)	2	None	replace
186	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  parent  ==  null)?  null  :  parent.getParent();  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  parent  ==  null)?  null  :  parent.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getParent();    Node  parent  ==  null)?  null  :  parent.getParent();	  	non-compiled	[CE]  ';'  expected	5	None	add
187	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  parent  născut  =  parent  ==  null)?  null  :  parent.getParent();  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  parent  născut  =  parent  ==  null)?  null  :  parent.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getParent();    Node  parent  născut  =  parent  ==  null)?  null  :  parent.getParent();	  	non-compiled	[CE]  ';'  expected	5	None	add
188	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  parent  născut  =  parent.getParent();  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  parent  născut  =  parent.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getParent();    Node  parent  născut  =  parent.getParent();	  	non-compiled	[CE]  ';'  expected	5	None	add
189	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  parent  =  n.getParent();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Node  parent  =  n.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getParent();    Node  parent  =  n.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	5	None	add
190	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  parent  ==  null)?  null  :  parent.getNext();  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  parent  ==  null)?  null  :  parent.getNext();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getNext();    Node  parent  ==  null)?  null  :  parent.getNext();	  	non-compiled	[CE]  ';'  expected	11	None	add
191	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  parent  născut  =  parent  ==  null)?  null  :  parent.getNext();  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  parent  născut  =  parent  ==  null)?  null  :  parent.getNext();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getNext();    Node  parent  născut  =  parent  ==  null)?  null  :  parent.getNext();	  	non-compiled	[CE]  ';'  expected	11	None	add
192	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  (parent  ==  null)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  (parent  ==  null)?  null  :  parent.getNext();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getNext();    (parent  ==  null)?  null  :  parent.getNext();	  	non-compiled	[CE]  not  a  statement	11	None	add
193	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  parent  =  n.getParent();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  parent  =  n.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getNext();    Node  parent  =  n.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	11	None	add
194	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString());  Node  var  =  cond.getNext();  return  Node.newString(Token.NAME,  var.getString());  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]    RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getString());  Node  var  =  cond.getNext();  return  Node.newString(Token.NAME,  var.getString());  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    cond.getString());    Node  var  =  cond.getNext();  return  Node.newString(Token.NAME,  var.getString());	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	24	None	add
195	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString());  Node  var  =  cond.getNext();  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]      RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getString());  Node  var  =  cond.getNext();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    cond.getString());    Node  var  =  cond.getNext();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	24	None	add
196	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString());  Node  var  =  parent.getParent();  return  Node.newString(Token.NAME,  var.getString());  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]        RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getString());  Node  var  =  parent.getParent();  return  Node.newString(Token.NAME,  var.getString());  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    cond.getString());    Node  var  =  parent.getParent();  return  Node.newString(Token.NAME,  var.getString());	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	24	None	add
197	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString());  Node  thenBranch  =  cond.getNext();  return  Node.newString(Token.NAME,  cond.getString());  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]          RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getString());  Node  thenBranch  =  cond.getNext();  return  Node.newString(Token.NAME,  cond.getString());  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    cond.getString());    Node  thenBranch  =  cond.getNext();  return  Node.newString(Token.NAME,  cond.getString());	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	24	None	add
198	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString());  Node  var  =  cond.getFirstChild();  return  Node.newString(Token.NAME,  var.getString());  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]            RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getString());  Node  var  =  cond.getFirstChild();  return  Node.newString(Token.NAME,  var.getString());  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    cond.getString());    Node  var  =  cond.getFirstChild();  return  Node.newString(Token.NAME,  var.getString());	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	24	None	add
199	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString());  Node  var  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  var.getString());  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]              RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getString());  Node  var  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  var.getString());  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    cond.getString());    Node  var  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  var.getString());	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	24	None	add
200	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  false);  [CE]  no  suitable  method  found  for  newString(int,String,boolean)  [FE]    RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  false);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  parent.getFirstChild().getString(),  false);	  return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,String,boolean)	22	None	replace
201	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  n,  cond.getFirstChild());  [CE]  no  suitable  method  found  for  newString(int,Node,Node)  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  n,  cond.getFirstChild());  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  n,  cond.getFirstChild());	  return    Node.newString(Token.NAME,    cond.getFirstChild());    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,Node,Node)	23	None	replace
202	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  SHORT_OBJECT_CONSTRUCTORS);  [CE]  cannot  find  symbol  SHORT_OBJECT_CONSTRUCTORS  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  SHORT_OBJECT_CONSTRUCTORS);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild(),  SHORT_OBJECT_CONSTRUCTORS);	  return    Node.newString(Token.NAME,    cond.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol  SHORT_OBJECT_CONSTRUCTORS	23	None	replace
203	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  COND,  parent);  [CE]  cannot  find  symbol  COND  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  COND,  parent);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  COND,  parent);	  return    Node.newString(Token.NAME,    parent);    	non-compiled	[CE]  cannot  find  symbol  COND	26	None	replace
204	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  Cond.STANDARD_OBJECT_CONSTRUCTORS,  parent);  [CE]  cannot  find  symbol  Cond  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  Cond.STANDARD_OBJECT_CONSTRUCTORS,  parent);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  Cond.STANDARD_OBJECT_CONSTRUCTORS,  parent);	  return    Node.newString(Token.NAME,    parent);    	non-compiled	[CE]  cannot  find  symbol  Cond	26	None	replace
205	[BUG]  [BUGGY]  return  NodeUtil.newLLiteralValue(cond,  false);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  NodeUtil.newLLiteralValue(cond,  false);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  NodeUtil.newLLiteralValue(cond,  false);	  return    NodeUtil.newLiteralValue(cond,    false);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
206	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.cloneTree());  [CE]  no  suitable  method  found  for  newString(int,Node)  [FE]    RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.cloneTree());  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.cloneTree());	  return    Node.newString(Token.NAME,    cond.getString());    	non-compiled	[CE]  no  suitable  method  found  for  newString(int,Node)	25	None	replace
207	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  Cond.STANDARD_OBJECT_CONSTRUCTORS);  [CE]  cannot  find  symbol  Cond  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  Cond.STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  Cond.STANDARD_OBJECT_CONSTRUCTORS);	  return    Node.newString(Token.NAME,    parent);    	non-compiled	[CE]  cannot  find  symbol  Cond	26	None	replace
208	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  if(parent!=  null)?  null  :  parent.getFirstChild();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  if(parent!=  null)?  null  :  parent.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=    null)?    null    :    parent.getFirstChild();    if(parent!=  null)?  null  :  parent.getFirstChild();	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
209	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  parent!=  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  parent!=  null)?  null  :  parent.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=    null)?    null    :    parent.getFirstChild();    parent!=  null)?  null  :  parent.getFirstChild();	  	non-compiled	[CE]  not  a  statement	7	None	add
210	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  Return(parent!=  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getFirstChild();  Return(parent!=  null)?  null  :  parent.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=    null)?    null    :    parent.getFirstChild();    Return(parent!=  null)?  null  :  parent.getFirstChild();	  	non-compiled	[CE]  not  a  statement	7	None	add
211	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString());  Node  thenAssign  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString());  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]    RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getString());  Node  thenAssign  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString());  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    cond.getString());    Node  thenAssign  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString());	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	24	None	add
212	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString());  Node  assign  =  parent.getParent();  return  Node.newString(Token.NAME,  cond.getString());  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]      RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getString());  Node  assign  =  parent.getParent();  return  Node.newString(Token.NAME,  cond.getString());  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    cond.getString());    Node  assign  =  parent.getParent();  return  Node.newString(Token.NAME,  cond.getString());	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	24	None	add
213	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getString());  Node  var  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString());  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]        RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getString());  Node  var  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString());  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    cond.getString());    Node  var  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  cond.getString());	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	24	None	add
214	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  assign  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]    RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  assign  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node  assign  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	18	None	add
215	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  thenAssign  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]      RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  thenAssign  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node  thenAssign  =  parent.getFirstChild();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	18	None	add
216	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  thenAssign  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]        RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  thenAssign  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node  thenAssign  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	18	None	add
217	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  assignName  =  cond.getFirstChild().getString();  return  Node.newString(Token.NAME,  assignName.getFirstChild().getString());  [CE]  incompatible  types  [FE]          RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  assignName  =  cond.getFirstChild().getString();  return  Node.newString(Token.NAME,  assignName.getFirstChild().getString());  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node  assignName  =  cond.getFirstChild().getString();  return  Node.newString(Token.NAME,  assignName.getFirstChild().getString());	  	non-compiled	[CE]  incompatible  types	18	None	add
218	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  assign  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)  [FE]            RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  Node  assign  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    cond.getFirstChild().getString());    Node  assign  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  cond.getFirstChild().getString());	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  tryMinimizeIf(Node)	18	None	add
219	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  if(parent  ==  null)?  null  :  parent.getNext();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  if(parent  ==  null)?  null  :  parent.getNext();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getNext();    if(parent  ==  null)?  null  :  parent.getNext();	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
220	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Return(parent  ==  null)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Return(parent  ==  null)?  null  :  parent.getNext();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getNext();    Return(parent  ==  null)?  null  :  parent.getNext();	  	non-compiled	[CE]  not  a  statement	11	None	add
221	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  parent  ==  null)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  parent  ==  null)?  null  :  parent.getNext();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getNext();    parent  ==  null)?  null  :  parent.getNext();	  	non-compiled	[CE]  not  a  statement	11	None	add
222	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  ||(parent  ==  null)?  null  :  parent.getNext();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  ||(parent  ==  null)?  null  :  parent.getNext();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getNext();    ||(parent  ==  null)?  null  :  parent.getNext();	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
223	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  parent  =  parent.getParent();  return(parent  ==  null)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getNext();  Node  parent  =  parent.getParent();  return(parent  ==  null)?  null  :  parent.getNext();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getNext();    Node  parent  =  parent.getParent();  return(parent  ==  null)?  null  :  parent.getNext();	  	non-compiled	[CE]  not  a  statement	11	None	add
224	[BUG]  [BUGGY]  return  parent;  if(parent!=  null)  {  return  parent;  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  parent;  if(parent!=  null)  {  return  parent;  }  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    parent;    if(parent!=  null)  {  return  parent;  }	  	non-compiled	[CE]  not  a  statement	1	None	add
225	[BUG]  [BUGGY]  return  parent;  Node  assign  =  parent.getParent();  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  parent;  Node  assign  =  parent.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    parent;    Node  assign  =  parent.getParent();	  	non-compiled	[CE]  not  a  statement	1	None	add
226	[BUG]  [BUGGY]  return  parent;  return  parent;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  parent;  return  parent;  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    parent;    return  parent;	  	non-compiled	[CE]  not  a  statement	1	None	add
227	[BUG]  [BUGGY]  return  parent;  Node  assign  =  n.getFirstChild();  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  parent;  Node  assign  =  n.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    parent;    Node  assign  =  n.getFirstChild();	  	non-compiled	[CE]  not  a  statement	1	None	add
228	[BUG]  [BUGGY]  return  parent;  Node  assign  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  parent;  Node  assign  =  parent.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    parent;    Node  assign  =  parent.getFirstChild();	  	non-compiled	[CE]  not  a  statement	1	None	add
229	[BUG]  [BUGGY]  return  parent;  Node  thenAssign  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  parent;  Node  thenAssign  =  parent.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    parent;    Node  thenAssign  =  parent.getFirstChild();	  	non-compiled	[CE]  not  a  statement	1	None	add
230	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.BLOCK);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.BLOCK);	      	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
231	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.VAR);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	Preconditions.checkArgument(parent.getType()  ==  Token.VAR);	      	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
232	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  parent  ==  null)?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  parent  ==  null)?  null  :  parent.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getParent();    parent  ==  null)?  null  :  parent.getParent();	  	non-compiled	[CE]  not  a  statement	5	None	add
233	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Return(parent  ==  null)?  null  :  parent.getParent();  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getParent();  Return(parent  ==  null)?  null  :  parent.getParent();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getParent();    Return(parent  ==  null)?  null  :  parent.getParent();	  	non-compiled	[CE]  not  a  statement	5	None	add
234	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getNext();  if(parent!=  null)?  null  :  parent.getNext();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getNext();  if(parent!=  null)?  null  :  parent.getNext();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=    null)?    null    :    parent.getNext();    if(parent!=  null)?  null  :  parent.getNext();	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
235	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getNext();  Return(parent!=  null)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getNext();  Return(parent!=  null)?  null  :  parent.getNext();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=    null)?    null    :    parent.getNext();    Return(parent!=  null)?  null  :  parent.getNext();	  	non-compiled	[CE]  not  a  statement	13	None	add
236	[BUG]  [BUGGY]  return(parent!=  null)?  null  :  parent.getNext();  parent!=  null)?  null  :  parent.getNext();  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent!=  null)?  null  :  parent.getNext();  parent!=  null)?  null  :  parent.getNext();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent!=    null)?    null    :    parent.getNext();    parent!=  null)?  null  :  parent.getNext();	  	non-compiled	[CE]  not  a  statement	13	None	add
237	[BUG]  [BUGGY]  return  parent!=  null?  parent.getParent()  :  NodeUtil.newLiteralValue(cond,  false));  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  parent!=  null?  parent.getParent()  :  NodeUtil.newLiteralValue(cond,  false));  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null?  parent.getParent()  :  NodeUtil.newLiteralValue(cond,  false));	  return    parent;    	non-compiled	[CE]  ';'  expected	2	None	replace
238	[BUG]  [BUGGY]  return  parent!=  null?  parent.getFirstChild()  :  NodeUtil.newLiteralValue(cond,  false));  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  parent!=  null?  parent.getFirstChild()  :  NodeUtil.newLiteralValue(cond,  false));  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null?  parent.getFirstChild()  :  NodeUtil.newLiteralValue(cond,  false));	  return    parent;    	non-compiled	[CE]  ';'  expected	2	None	replace
239	[BUG]  [BUGGY]  return  parent!=  null?  parent.getFirstChild()  :  NodeUtil.newLiteralValue(cond,  true));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  parent!=  null?  parent.getFirstChild()  :  NodeUtil.newLiteralValue(cond,  true));  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null?  parent.getFirstChild()  :  NodeUtil.newLiteralValue(cond,  true));	  return    parent;    	non-compiled	[CE]  ';'  expected	2	None	replace
240	[BUG]  [BUGGY]  return  parent!=  null?  parent.getParent()  :  NodeUtil.newLiteralValue(cond,  true));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  parent!=  null?  parent.getParent()  :  NodeUtil.newLiteralValue(cond,  true));  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null?  parent.getParent()  :  NodeUtil.newLiteralValue(cond,  true));	  return    parent;    	non-compiled	[CE]  ';'  expected	2	None	replace
241	[BUG]  [BUGGY]  return  parent!=  null?  parent.getParent()  :  null;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  parent!=  null?  parent.getParent()  :  null;  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null?  parent.getParent()  :  null;	  return    parent;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
242	[BUG]  [BUGGY]  return  parent!=  null?  parent.getParent()  :  NodeUtil.newLiteralValue(cond);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  parent!=  null?  parent.getParent()  :  NodeUtil.newLiteralValue(cond);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  parent!=  null?  parent.getParent()  :  NodeUtil.newLiteralValue(cond);	  return    parent;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
243	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  INVALID_REGULAR_FLAGS);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  cond.getFirstChild(),  INVALID_REGULAR_FLAGS);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return  Node.newString(Token.NAME,  cond.getFirstChild(),  INVALID_REGULAR_FLAGS);	  return    Node.newString(Token.NAME,    cond.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
244	[BUG]  [BUGGY]      Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  return  parent;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]      Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  return  parent;  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	        Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  return  parent;	  	non-compiled	[CE]  ';'  expected	15	None	add
245	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  if(parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  if(parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getFirstChild();    if(parent  ==  null)?  null  :  parent.getFirstChild();	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
246	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  (parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  (parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getFirstChild();    (parent  ==  null)?  null  :  parent.getFirstChild();	  	non-compiled	[CE]  not  a  statement	3	None	add
247	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Return(parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  Return(parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getFirstChild();    Return(parent  ==  null)?  null  :  parent.getFirstChild();	  	non-compiled	[CE]  not  a  statement	3	None	add
248	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  parent  ==  null)?  null  :  parent.getFirstChild();  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  parent  ==  null)?  null  :  parent.getFirstChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getFirstChild();    parent  ==  null)?  null  :  parent.getFirstChild();	  	non-compiled	[CE]  not  a  statement	3	None	add
249	[BUG]  [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  return(parent  ==  null)?  null  :  parent.getLastChild();  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return(parent  ==  null)?  null  :  parent.getFirstChild();  return(parent  ==  null)?  null  :  parent.getLastChild();  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return(parent    ==    null)?    null    :    parent.getFirstChild();    return(parent  ==  null)?  null  :  parent.getLastChild();	  	non-compiled	[CE]  not  a  statement	3	None	add
250	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  thenAssign  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  thenAssign  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node  thenAssign  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());	  	non-compiled	[CE]  not  a  statement	21	None	add
251	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  thenAssign  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  thenAssign  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node  thenAssign  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());	  	non-compiled	[CE]  not  a  statement	21	None	add
252	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  assignName  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  assignName.getFirstChild().getString());  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  assignName  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  assignName.getFirstChild().getString());  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node  assignName  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  assignName.getFirstChild().getString());	  	non-compiled	[CE]  not  a  statement	21	None	add
253	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  nextBranch  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  [CE]  not  a  statement  [FE]          RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  nextBranch  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node  nextBranch  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());	  	non-compiled	[CE]  not  a  statement	21	None	add
254	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  assign  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  assign.getFirstChild().getString());  [CE]  not  a  statement  [FE]            RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  assign  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  assign.getFirstChild().getString());  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node  assign  =  parent.getFirstChild().getNext();  return  Node.newString(Token.NAME,  assign.getFirstChild().getString());	  	non-compiled	[CE]  not  a  statement	21	None	add
255	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  toString  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  toString);  [CE]  not  a  statement  [FE]              RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  toString  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  toString);  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node  toString  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  toString);	  	non-compiled	[CE]  not  a  statement	21	None	add
256	[BUG]  [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  toString  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  toString,  parent.getFirstChild().getString());  [CE]  not  a  statement  [FE]                RuntimeException    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {    [BUGGY]  return  Node.newString(Token.NAME,  parent.getFirstChild().getString());  Node  toString  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  toString,  parent.getFirstChild().getString());  [BUGGY]    }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	1.0	268	268	1	replace	return    Node.newString(Token.NAME,    parent.getFirstChild().getString());    Node  toString  =  parent.getFirstChild().getString();  return  Node.newString(Token.NAME,  toString,  parent.getFirstChild().getString());	  	non-compiled	[CE]  not  a  statement	21	None	add
