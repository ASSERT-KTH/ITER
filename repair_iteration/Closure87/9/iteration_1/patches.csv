bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(expr  ==  null  &&  isPropertyAssignmentInExpression(expr))  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(expr  ==  null  &&  isPropertyAssignmentInExpression(expr))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(expr  ==  null  &&  isPropertyAssignmentInExpression(expr))  {	  if(expr!=    null    ||    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	11	None	replace
2	[BUG]  [BUGGY]  if(expr!=  null  ||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(expr!=  null  ||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(expr!=  null  ||  isPropertyAssignmentInExpression(elseBranch))  {	  if(expr!=    null    ||    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	11	None	replace
3	[BUG]  [BUGGY]  if(expr  ==  null  ||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(expr  ==  null  ||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(expr  ==  null  ||  isPropertyAssignmentInExpression(elseBranch))  {	  if(expr!=    null    ||    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	11	None	replace
4	[BUG]  [BUGGY]  if(expr!=  null  ||  isPropertyAssignmentInExpression(expr)&&  expr.getType()  ==  Token.FUNCTION)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(expr!=  null  ||  isPropertyAssignmentInExpression(expr)&&  expr.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(expr!=  null  ||  isPropertyAssignmentInExpression(expr)&&  expr.getType()  ==  Token.FUNCTION)  {	  if(expr!=    null    ||    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	11	None	replace
5	[BUG]  [BUGGY]  if(expr!=  null  &&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(expr!=  null  &&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(expr!=  null  &&  isPropertyAssignmentInExpression(elseBranch))  {	  if(expr!=    null    &&    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	9	None	replace
6	[BUG]  [BUGGY]  if(expr  ==  null  &&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(expr  ==  null  &&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(expr  ==  null  &&  isPropertyAssignmentInExpression(elseBranch))  {	  if(expr!=    null    &&    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	9	None	replace
7	[BUG]  [BUGGY]  if(expr!=  null  &&  isPropertyAssignmentInExpression(expr)||  expr.getType()  ==  Token.FUNCTION)  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(expr!=  null  &&  isPropertyAssignmentInExpression(expr)||  expr.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(expr!=  null  &&  isPropertyAssignmentInExpression(expr)||  expr.getType()  ==  Token.FUNCTION)  {	  if(expr!=    null    &&    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	9	None	replace
8	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr))  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr))  {	  if(!isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	19	None	replace
9	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr))  {	  if(!isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	19	None	replace
10	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(expr))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(expr))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(expr))  {	  if(!isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	19	None	replace
11	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr))  {	  if(!isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	19	None	replace
12	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(expr))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(!isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(expr))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(!isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(expr))  {	  if(!isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	19	None	replace
13	[BUG]  [BUGGY]  Node  elseBranch  =  expr.getFirstChild();  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  Node  elseBranch  =  expr.getFirstChild();  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	Node  elseBranch  =  expr.getFirstChild();	      	non-compiled	[CE]  ')'  expected	8	None	replace
14	[BUG]  [BUGGY]  Node  elseBranch  =  expr.getNext();  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  Node  elseBranch  =  expr.getNext();  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	Node  elseBranch  =  expr.getNext();	      	non-compiled	[CE]  ')'  expected	8	None	replace
15	[BUG]  [BUGGY]  Node  elseBranchIsExpressionBlock  =  expr.getFirstChild();  [CE]  ')'  expected  [FE]                          AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  Node  elseBranchIsExpressionBlock  =  expr.getFirstChild();  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	Node  elseBranchIsExpressionBlock  =  expr.getFirstChild();	      	non-compiled	[CE]  ')'  expected	8	None	replace
16	[BUG]  [BUGGY]  Node  elseBranch  =  expr.getLastChild();  [CE]  ')'  expected  [FE]                            AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  Node  elseBranch  =  expr.getLastChild();  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	Node  elseBranch  =  expr.getLastChild();	      	non-compiled	[CE]  ')'  expected	8	None	replace
17	[BUG]  [BUGGY]  Node  lhs  =  expr.getLastChild();  [CE]  ')'  expected  [FE]                              AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  Node  lhs  =  expr.getLastChild();  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	Node  lhs  =  expr.getLastChild();	      	non-compiled	[CE]  ')'  expected	8	None	replace
18	[BUG]  [BUGGY]  Node  elseBranchIsExpressionBlock  =  expr.getNext();  [CE]  ')'  expected  [FE]                                AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  Node  elseBranchIsExpressionBlock  =  expr.getNext();  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	Node  elseBranchIsExpressionBlock  =  expr.getNext();	      	non-compiled	[CE]  ')'  expected	8	None	replace
19	[BUG]  [BUGGY]  Node  lhs  =  expr.getFirstChild();  [CE]  ')'  expected  [FE]                                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  Node  lhs  =  expr.getFirstChild();  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	Node  lhs  =  expr.getFirstChild();	      	non-compiled	[CE]  ')'  expected	8	None	replace
20	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)||    isPropertyAssignmentInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	4	None	replace
21	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(expr,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isPropertyAssignmentInExpression(expr,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isPropertyAssignmentInExpression(expr,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)||    isPropertyAssignmentInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	4	None	replace
22	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)||    isPropertyAssignmentInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	4	None	replace
23	[BUG]  [BUGGY]  if(isFoldableExpressBlock(expr,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isFoldableExpressBlock(expr,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isFoldableExpressBlock(expr,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)||    isPropertyAssignmentInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	4	None	replace
24	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(cond)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isPropertyAssignmentInExpression(cond)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isPropertyAssignmentInExpression(cond)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(isPropertyAssignmentInExpression(expr)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	3	None	replace
25	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isLowerPrecedenceInExpression(cond)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(isPropertyAssignmentInExpression(expr)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	3	None	replace
26	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isLowerPrecedenceInExpression(expr)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isLowerPrecedenceInExpression(expr)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(isPropertyAssignmentInExpression(expr)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	3	None	replace
27	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	1	None	replace
28	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	1	None	replace
29	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	1	None	replace
30	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	1	None	replace
31	[BUG]  [BUGGY]  if(isFoldableExpressBlock(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isFoldableExpressBlock(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isFoldableExpressBlock(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	1	None	replace
32	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(!isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	16	None	replace
33	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(!isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(!isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {	  if(!isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	16	None	replace
34	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(!isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	16	None	replace
35	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {	  if(!isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	16	None	replace
36	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(expr.getLastChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	5	None	replace
37	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(expr,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isPropertyAssignmentInExpression(expr,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isPropertyAssignmentInExpression(expr,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(expr.getLastChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	5	None	replace
38	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(expr.getLastChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	5	None	replace
39	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(expr.getLastChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	5	None	replace
40	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(expr)||  expr.getFirstChild()  ==  parent)  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isPropertyAssignmentInExpression(expr)||  expr.getFirstChild()  ==  parent)  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isPropertyAssignmentInExpression(expr)||  expr.getFirstChild()  ==  parent)  {	  if(isPropertyAssignmentInExpression(expr)&&    expr.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  ')'  expected	18	None	replace
41	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(expr)&&  expr.getLastChild()  ==  parent)  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isPropertyAssignmentInExpression(expr)&&  expr.getLastChild()  ==  parent)  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isPropertyAssignmentInExpression(expr)&&  expr.getLastChild()  ==  parent)  {	  if(isPropertyAssignmentInExpression(expr)&&    expr.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  ')'  expected	18	None	replace
42	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(expr)&&  expr.getFirstChild()  ==  cond)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isPropertyAssignmentInExpression(expr)&&  expr.getFirstChild()  ==  cond)  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isPropertyAssignmentInExpression(expr)&&  expr.getFirstChild()  ==  cond)  {	  if(isPropertyAssignmentInExpression(expr)&&    expr.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  ')'  expected	18	None	replace
43	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(expr)&&  expr.getFirstChild()  ==  OR_PRECEDENCE)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isPropertyAssignmentInExpression(expr)&&  expr.getFirstChild()  ==  OR_PRECEDENCE)  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isPropertyAssignmentInExpression(expr)&&  expr.getFirstChild()  ==  OR_PRECEDENCE)  {	  if(isPropertyAssignmentInExpression(expr)&&    expr.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  ')'  expected	18	None	replace
44	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(cond)&&  expr.getFirstChild()  ==  parent)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isPropertyAssignmentInExpression(cond)&&  expr.getFirstChild()  ==  parent)  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isPropertyAssignmentInExpression(cond)&&  expr.getFirstChild()  ==  parent)  {	  if(isPropertyAssignmentInExpression(expr)&&    expr.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  ')'  expected	18	None	replace
45	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(elseBranch)&&  expr.getFirstChild()  ==  parent)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isPropertyAssignmentInExpression(elseBranch)&&  expr.getFirstChild()  ==  parent)  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isPropertyAssignmentInExpression(elseBranch)&&  expr.getFirstChild()  ==  parent)  {	  if(isPropertyAssignmentInExpression(expr)&&    expr.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  ')'  expected	18	None	replace
46	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getLastChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	6	None	replace
47	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getLastChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	6	None	replace
48	[BUG]  [BUGGY]  if(isFoldableExpressBlock(expr))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isFoldableExpressBlock(expr))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isFoldableExpressBlock(expr))  {	  if(isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  ')'  expected	14	None	replace
49	[BUG]  [BUGGY]  if(expr!=  null  &&  expr.getType()  ==  Token.VAR  &&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(expr!=  null  &&  expr.getType()  ==  Token.VAR  &&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(expr!=  null  &&  expr.getType()  ==  Token.VAR  &&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  ')'  expected	14	None	replace
50	[BUG]  [BUGGY]  if(expr!=  null  &&  expr.getType()  ==  Token.FUNCTION  &&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(expr!=  null  &&  expr.getType()  ==  Token.FUNCTION  &&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(expr!=  null  &&  expr.getType()  ==  Token.FUNCTION  &&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  ')'  expected	14	None	replace
51	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(expr,  true)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isPropertyAssignmentInExpression(expr,  true)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isPropertyAssignmentInExpression(expr,  true)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(isPropertyAssignmentInExpression(expr,    false))    {    	non-compiled	[CE]  ')'  expected	13	None	replace
52	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(elseBranch,  false))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isPropertyAssignmentInExpression(elseBranch,  false))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isPropertyAssignmentInExpression(elseBranch,  false))  {	  if(isPropertyAssignmentInExpression(expr,    false))    {    	non-compiled	[CE]  ')'  expected	13	None	replace
53	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(cond,  false))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isPropertyAssignmentInExpression(cond,  false))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isPropertyAssignmentInExpression(cond,  false))  {	  if(isPropertyAssignmentInExpression(expr,    false))    {    	non-compiled	[CE]  ')'  expected	13	None	replace
54	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(expr,  true)&&  expr.getType()  ==  Token.FUNCTION)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isPropertyAssignmentInExpression(expr,  true)&&  expr.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isPropertyAssignmentInExpression(expr,  true)&&  expr.getType()  ==  Token.FUNCTION)  {	  if(isPropertyAssignmentInExpression(expr,    false))    {    	non-compiled	[CE]  ')'  expected	13	None	replace
55	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(expr,  true)&&  expr.getType()  ==  Token.NAME)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isPropertyAssignmentInExpression(expr,  true)&&  expr.getType()  ==  Token.NAME)  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isPropertyAssignmentInExpression(expr,  true)&&  expr.getType()  ==  Token.NAME)  {	  if(isPropertyAssignmentInExpression(expr,    false))    {    	non-compiled	[CE]  ')'  expected	13	None	replace
56	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(expr,  true)&&  expr.getType()  ==  Token.STRING)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isPropertyAssignmentInExpression(expr,  true)&&  expr.getType()  ==  Token.STRING)  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isPropertyAssignmentInExpression(expr,  true)&&  expr.getType()  ==  Token.STRING)  {	  if(isPropertyAssignmentInExpression(expr,    false))    {    	non-compiled	[CE]  ')'  expected	13	None	replace
57	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(expr,  true)&&  expr.getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isPropertyAssignmentInExpression(expr,  true)&&  expr.getType()  ==  Token.VAR)  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isPropertyAssignmentInExpression(expr,  true)&&  expr.getType()  ==  Token.VAR)  {	  if(isPropertyAssignmentInExpression(expr,    false))    {    	non-compiled	[CE]  ')'  expected	13	None	replace
58	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(!isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	15	None	replace
59	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(!isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(!isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {	  if(!isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	15	None	replace
60	[BUG]  [BUGGY]  if(!isPropertyAssignmentInExpression(expr,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(!isPropertyAssignmentInExpression(expr,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(!isPropertyAssignmentInExpression(expr,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(!isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	15	None	replace
61	[BUG]  [BUGGY]  if(expr  ==  null  &&  expr.getType()  ==  Token.VAR  &&  isPropertyAssignmentInExpression(expr))  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(expr  ==  null  &&  expr.getType()  ==  Token.VAR  &&  isPropertyAssignmentInExpression(expr))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(expr  ==  null  &&  expr.getType()  ==  Token.VAR  &&  isPropertyAssignmentInExpression(expr))  {	  if(expr!=    null    &&    expr.getType()    ==    Token.VAR    &&    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	17	None	replace
62	[BUG]  [BUGGY]  if(expr!=  null  ||  expr.getType()  ==  Token.VAR  &&  isPropertyAssignmentInExpression(expr))  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(expr!=  null  ||  expr.getType()  ==  Token.VAR  &&  isPropertyAssignmentInExpression(expr))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(expr!=  null  ||  expr.getType()  ==  Token.VAR  &&  isPropertyAssignmentInExpression(expr))  {	  if(expr!=    null    &&    expr.getType()    ==    Token.VAR    &&    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	17	None	replace
63	[BUG]  [BUGGY]  if(expr!=  null  &&  expr.getType()  ==  Token.VAR  ||  isPropertyAssignmentInExpression(expr))  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(expr!=  null  &&  expr.getType()  ==  Token.VAR  ||  isPropertyAssignmentInExpression(expr))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(expr!=  null  &&  expr.getType()  ==  Token.VAR  ||  isPropertyAssignmentInExpression(expr))  {	  if(expr!=    null    &&    expr.getType()    ==    Token.VAR    &&    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	17	None	replace
64	[BUG]  [BUGGY]  if(expr!=  null  &&  expr.getType()  ==  Token.VAR  &&  isPropertyAssignmentInExpression(cond))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(expr!=  null  &&  expr.getType()  ==  Token.VAR  &&  isPropertyAssignmentInExpression(cond))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(expr!=  null  &&  expr.getType()  ==  Token.VAR  &&  isPropertyAssignmentInExpression(cond))  {	  if(expr!=    null    &&    expr.getType()    ==    Token.VAR    &&    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	17	None	replace
65	[BUG]  [BUGGY]  if(expr!=  null  &&  expr.getType()  ==  Token.VAR  &&  isPropertyAssignmentInExpression(n))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(expr!=  null  &&  expr.getType()  ==  Token.VAR  &&  isPropertyAssignmentInExpression(n))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(expr!=  null  &&  expr.getType()  ==  Token.VAR  &&  isPropertyAssignmentInExpression(n))  {	  if(expr!=    null    &&    expr.getType()    ==    Token.VAR    &&    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	17	None	replace
66	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(cond)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isPropertyAssignmentInExpression(cond)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isPropertyAssignmentInExpression(cond)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {	  if(isPropertyAssignmentInExpression(expr)&&    isLowerPrecedenceInExpression(expr.getLastChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	12	None	replace
67	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isLowerPrecedenceInExpression(expr)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isLowerPrecedenceInExpression(expr)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {	  if(isPropertyAssignmentInExpression(expr)&&    isLowerPrecedenceInExpression(expr.getLastChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	12	None	replace
68	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(expr))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(expr))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(expr))  {	  if(isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)||    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	7	None	replace
69	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(expr,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(expr))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isPropertyAssignmentInExpression(expr,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(expr))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isPropertyAssignmentInExpression(expr,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(expr))  {	  if(isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)||    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	7	None	replace
70	[BUG]  [BUGGY]  if(expr  ==  null  ||  isPropertyAssignmentInExpression(expr)&&  expr.getType()  ==  Token.FUNCTION)  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(expr  ==  null  ||  isPropertyAssignmentInExpression(expr)&&  expr.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(expr  ==  null  ||  isPropertyAssignmentInExpression(expr)&&  expr.getType()  ==  Token.FUNCTION)  {	  if(expr    ==    null    ||    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	10	None	replace
71	[BUG]  [BUGGY]  if(expr!=  null  &&  expr.getType()  ==  Token.FUNCTION  &&  isPropertyAssignmentInExpression(expr))  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(expr!=  null  &&  expr.getType()  ==  Token.FUNCTION  &&  isPropertyAssignmentInExpression(expr))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(expr!=  null  &&  expr.getType()  ==  Token.FUNCTION  &&  isPropertyAssignmentInExpression(expr))  {	  if(expr!=    null    &&    expr.getType()    ==    Token.VAR    &&    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	17	None	replace
72	[BUG]  [BUGGY]  if(expr!=  null  &&  expr.getType()  ==  Token.VAR  &&  isImmutableExpression(expr))  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(expr!=  null  &&  expr.getType()  ==  Token.VAR  &&  isImmutableExpression(expr))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(expr!=  null  &&  expr.getType()  ==  Token.VAR  &&  isImmutableExpression(expr))  {	  if(expr!=    null    &&    expr.getType()    ==    Token.VAR    &&    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	17	None	replace
73	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(!isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(!isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(!isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	19	None	replace
74	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr.getNext(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(!isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr.getNext(),  OR_PRECEDENCE))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(!isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr.getNext(),  OR_PRECEDENCE))  {	  if(!isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	15	None	replace
75	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(expr,  true)&&  expr.getType()  ==  Token.EXPR_RESULT)  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isPropertyAssignmentInExpression(expr,  true)&&  expr.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isPropertyAssignmentInExpression(expr,  true)&&  expr.getType()  ==  Token.EXPR_RESULT)  {	  if(isPropertyAssignmentInExpression(expr,    false))    {    	non-compiled	[CE]  ')'  expected	13	None	replace
76	[BUG]  [BUGGY]  if(expr  ==  null  ||  isPropertyAssignmentInExpression(expr,  false))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(expr  ==  null  ||  isPropertyAssignmentInExpression(expr,  false))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(expr  ==  null  ||  isPropertyAssignmentInExpression(expr,  false))  {	  if(isPropertyAssignmentInExpression(expr,    false))    {    	non-compiled	[CE]  ')'  expected	13	None	replace
77	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(expr,  true)&&  expr.getType()  ==  Token.GETPROP)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isPropertyAssignmentInExpression(expr,  true)&&  expr.getType()  ==  Token.GETPROP)  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isPropertyAssignmentInExpression(expr,  true)&&  expr.getType()  ==  Token.GETPROP)  {	  if(isPropertyAssignmentInExpression(expr,    false))    {    	non-compiled	[CE]  ')'  expected	13	None	replace
78	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(expr,  true)&&  expr.getType()  ==  Token.RETURN)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isPropertyAssignmentInExpression(expr,  true)&&  expr.getType()  ==  Token.RETURN)  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isPropertyAssignmentInExpression(expr,  true)&&  expr.getType()  ==  Token.RETURN)  {	  if(isPropertyAssignmentInExpression(expr,    false))    {    	non-compiled	[CE]  ')'  expected	13	None	replace
79	[BUG]  [BUGGY]  if(expr  ==  null  ||  isPropertyAssignmentOutExpression(expr))  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(expr  ==  null  ||  isPropertyAssignmentOutExpression(expr))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(expr  ==  null  ||  isPropertyAssignmentOutExpression(expr))  {	  if(expr!=    null    ||    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	11	None	replace
80	[BUG]  [BUGGY]  if(expr  ==  null  ||  isFoldableExpressBlock(expr))  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(expr  ==  null  ||  isFoldableExpressBlock(expr))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(expr  ==  null  ||  isFoldableExpressBlock(expr))  {	  if(expr!=    null    ||    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	11	None	replace
81	[BUG]  [BUGGY]  if(expr  ==  null  ||  isPropertyInExpression(expr))  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(expr  ==  null  ||  isPropertyInExpression(expr))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(expr  ==  null  ||  isPropertyInExpression(expr))  {	  if(expr!=    null    ||    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	11	None	replace
82	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(elseBranch)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isPropertyAssignmentInExpression(elseBranch)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isPropertyAssignmentInExpression(elseBranch)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(isPropertyAssignmentInExpression(expr)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	3	None	replace
83	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr.getNext(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr.getNext(),  OR_PRECEDENCE))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr.getNext(),  OR_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	2	None	replace
84	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isLowerPrecedenceInExpression(expr)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isLowerPrecedenceInExpression(expr)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  ')'  expected	14	None	replace
85	[BUG]  [BUGGY]  if(expr  ==  null)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(expr  ==  null)  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(expr  ==  null)  {	  if(isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  ')'  expected	14	None	replace
86	[BUG]  [BUGGY]  if(expr!=  null)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(expr!=  null)  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(expr!=  null)  {	  if(isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  ')'  expected	14	None	replace
87	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(!isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(!isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(!isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	16	None	replace
88	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(elseBranch,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(!isLowerPrecedenceInExpression(elseBranch,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(!isLowerPrecedenceInExpression(elseBranch,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(!isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	16	None	replace
89	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(elseBranch,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isLowerPrecedenceInExpression(elseBranch,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isLowerPrecedenceInExpression(elseBranch,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	1	None	replace
90	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getNext(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getNext(),  OR_PRECEDENCE))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getNext(),  OR_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	1	None	replace
91	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(elseBranch,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isLowerPrecedenceInExpression(elseBranch,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isLowerPrecedenceInExpression(elseBranch,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)||    isPropertyAssignmentInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	4	None	replace
92	[BUG]  [BUGGY]  if(expr!=  null  &&  expr.getType()  ==  Token.FUNCTION)  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(expr!=  null  &&  expr.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(expr!=  null  &&  expr.getType()  ==  Token.FUNCTION)  {	  if(expr!=    null    &&    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	9	None	replace
93	[BUG]  [BUGGY]  if(expr  ==  null  &&  expr.getType()  ==  Token.FUNCTION)  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(expr  ==  null  &&  expr.getType()  ==  Token.FUNCTION)  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(expr  ==  null  &&  expr.getType()  ==  Token.FUNCTION)  {	  if(expr!=    null    &&    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	9	None	replace
94	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  expr,  new  FoldArrayAction());  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  NodeTraversal.traverse(compiler,  expr,  new  FoldArrayAction());  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	NodeTraversal.traverse(compiler,  expr,  new  FoldArrayAction());	      	non-compiled	[CE]  ')'  expected	8	None	replace
95	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  expr,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  NodeTraversal.traverse(compiler,  expr,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	NodeTraversal.traverse(compiler,  expr,  INVALID_REGULAR_EXPRESSION_FLAGS);	      	non-compiled	[CE]  ')'  expected	8	None	replace
96	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  expr,  INVALID_REGULAR_EXPRESSION_FLAGS,  false);  [CE]  ')'  expected  [FE]                          AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  NodeTraversal.traverse(compiler,  expr,  INVALID_REGULAR_EXPRESSION_FLAGS,  false);  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	NodeTraversal.traverse(compiler,  expr,  INVALID_REGULAR_EXPRESSION_FLAGS,  false);	      	non-compiled	[CE]  ')'  expected	8	None	replace
97	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(expr,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isPropertyAssignmentInExpression(expr,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isPropertyAssignmentInExpression(expr,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr))  {	  if(isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)||    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	7	None	replace
98	[BUG]  [BUGGY]  if(isFoldableExpressBlock(expr,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isFoldableExpressBlock(expr,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isFoldableExpressBlock(expr,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)||    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	7	None	replace
99	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(pr,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isLowerPrecedenceInExpression(pr,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isLowerPrecedenceInExpression(pr,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr))  {	  if(isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)||    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	7	None	replace
100	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(expr)&&  expr.getFirstChild()  ==  firstBranch)  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isPropertyAssignmentInExpression(expr)&&  expr.getFirstChild()  ==  firstBranch)  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isPropertyAssignmentInExpression(expr)&&  expr.getFirstChild()  ==  firstBranch)  {	  if(isPropertyAssignmentInExpression(expr)&&    expr.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  ')'  expected	18	None	replace
101	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(expr)&&  expr.getFirstChild()  ==  nextBranch)  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isPropertyAssignmentInExpression(expr)&&  expr.getFirstChild()  ==  nextBranch)  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isPropertyAssignmentInExpression(expr)&&  expr.getFirstChild()  ==  nextBranch)  {	  if(isPropertyAssignmentInExpression(expr)&&    expr.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  ')'  expected	18	None	replace
102	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(expr,  true)&&  expr.getFirstChild()  ==  null)  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isPropertyAssignmentInExpression(expr,  true)&&  expr.getFirstChild()  ==  null)  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isPropertyAssignmentInExpression(expr,  true)&&  expr.getFirstChild()  ==  null)  {	  if(isPropertyAssignmentInExpression(expr,    false))    {    	non-compiled	[CE]  ')'  expected	13	None	replace
103	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(expr,  true)&&  expr.getFirstChild()  ==  parent)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isPropertyAssignmentInExpression(expr,  true)&&  expr.getFirstChild()  ==  parent)  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isPropertyAssignmentInExpression(expr,  true)&&  expr.getFirstChild()  ==  parent)  {	  if(isPropertyAssignmentInExpression(expr,    false))    {    	non-compiled	[CE]  ')'  expected	13	None	replace
104	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(expr,  false)&&  expr.getFirstChild()  ==  null)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isPropertyAssignmentInExpression(expr,  false)&&  expr.getFirstChild()  ==  null)  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isPropertyAssignmentInExpression(expr,  false)&&  expr.getFirstChild()  ==  null)  {	  if(isPropertyAssignmentInExpression(expr,    false))    {    	non-compiled	[CE]  ')'  expected	13	None	replace
105	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(expr,  false)&&  expr.getFirstChild()  ==  parent)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isPropertyAssignmentInExpression(expr,  false)&&  expr.getFirstChild()  ==  parent)  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isPropertyAssignmentInExpression(expr,  false)&&  expr.getFirstChild()  ==  parent)  {	  if(isPropertyAssignmentInExpression(expr,    false))    {    	non-compiled	[CE]  ')'  expected	13	None	replace
106	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(expr,  true)&&  expr.getFirstChild()!=  null)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isPropertyAssignmentInExpression(expr,  true)&&  expr.getFirstChild()!=  null)  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isPropertyAssignmentInExpression(expr,  true)&&  expr.getFirstChild()!=  null)  {	  if(isPropertyAssignmentInExpression(expr,    false))    {    	non-compiled	[CE]  ')'  expected	13	None	replace
107	[BUG]  [BUGGY]  if(expr  ==  null  ||  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(expr  ==  null  ||  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(expr  ==  null  ||  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr))  {	  if(isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)||    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	7	None	replace
108	[BUG]  [BUGGY]  Node  elseOp  =  expr.getFirstChild();  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  Node  elseOp  =  expr.getFirstChild();  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	Node  elseOp  =  expr.getFirstChild();	      	non-compiled	[CE]  ')'  expected	8	None	replace
109	[BUG]  [BUGGY]  Node  elseOp  =  expr.getNext();  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  Node  elseOp  =  expr.getNext();  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	Node  elseOp  =  expr.getNext();	      	non-compiled	[CE]  ')'  expected	8	None	replace
110	[BUG]  [BUGGY]  Node  elseAssign  =  expr.getFirstChild();  [CE]  ')'  expected  [FE]                          AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  Node  elseAssign  =  expr.getFirstChild();  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	Node  elseAssign  =  expr.getFirstChild();	      	non-compiled	[CE]  ')'  expected	8	None	replace
111	[BUG]  [BUGGY]  Node  elseAssign  =  getBlockExpression(elseBranch);  [CE]  ')'  expected  [FE]                            AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  Node  elseAssign  =  getBlockExpression(elseBranch);  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	Node  elseAssign  =  getBlockExpression(elseBranch);	      	non-compiled	[CE]  ')'  expected	8	None	replace
112	[BUG]  [BUGGY]  Node  parent  =  expr.getParent();  [CE]  ')'  expected  [FE]                              AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  Node  parent  =  expr.getParent();  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	Node  parent  =  expr.getParent();	      	non-compiled	[CE]  ')'  expected	8	None	replace
113	[BUG]  [BUGGY]  Node  elseAssign  =  expr.getNext();  [CE]  ')'  expected  [FE]                                AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  Node  elseAssign  =  expr.getNext();  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	Node  elseAssign  =  expr.getNext();	      	non-compiled	[CE]  ')'  expected	8	None	replace
114	[BUG]  [BUGGY]  Node  elseAssign  =  getBlockExpression(expr);  [CE]  ')'  expected  [FE]                                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  Node  elseAssign  =  getBlockExpression(expr);  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	Node  elseAssign  =  getBlockExpression(expr);	      	non-compiled	[CE]  ')'  expected	8	None	replace
115	[BUG]  [BUGGY]  if(expr  ==  null  ||  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(expr  ==  null  ||  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(expr  ==  null  ||  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)||    isPropertyAssignmentInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	4	None	replace
116	[BUG]  [BUGGY]  if(expr!=  null  &&  expr.getType()  ==  Token.CATCH  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr.getFirstChild  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(expr!=  null  &&  expr.getType()  ==  Token.CATCH  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr.getFirstChild  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(expr!=  null  &&  expr.getType()  ==  Token.CATCH  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr.getFirstChild	  if(isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)||    isPropertyAssignmentInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	4	None	replace
117	[BUG]  [BUGGY]  if(expr!=  null  &&  expr.getType()  ==  Token.CATCH  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(expr!=  null  &&  expr.getType()  ==  Token.CATCH  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(expr!=  null  &&  expr.getType()  ==  Token.CATCH  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	1	None	replace
118	[BUG]  [BUGGY]  if(expr  ==  null  ||  expr.getType()  ==  Token.VAR  &&  isPropertyAssignmentInExpression(expr))  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(expr  ==  null  ||  expr.getType()  ==  Token.VAR  &&  isPropertyAssignmentInExpression(expr))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(expr  ==  null  ||  expr.getType()  ==  Token.VAR  &&  isPropertyAssignmentInExpression(expr))  {	  if(expr!=    null    &&    expr.getType()    ==    Token.VAR    &&    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	17	None	replace
119	[BUG]  [BUGGY]  if(expr!=  null  &&  expr.getType()  ==  Token.VAR  &&  isFoldableExpressBlock(expr))  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(expr!=  null  &&  expr.getType()  ==  Token.VAR  &&  isFoldableExpressBlock(expr))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(expr!=  null  &&  expr.getType()  ==  Token.VAR  &&  isFoldableExpressBlock(expr))  {	  if(expr!=    null    &&    expr.getType()    ==    Token.VAR    &&    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	17	None	replace
120	[BUG]  [BUGGY]  if(expr!=  null  &&  expr.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(expr))  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(expr!=  null  &&  expr.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(expr))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(expr!=  null  &&  expr.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(expr))  {	  if(expr!=    null    &&    expr.getType()    ==    Token.VAR    &&    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	17	None	replace
121	[BUG]  [BUGGY]  if(expr  ==  expr  ||  isPropertyAssignmentInExpression(expr))  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(expr  ==  expr  ||  isPropertyAssignmentInExpression(expr))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(expr  ==  expr  ||  isPropertyAssignmentInExpression(expr))  {	  if(expr!=    null    ||    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	11	None	replace
122	[BUG]  [BUGGY]  if(expr  ==  null  ||  expr.getType()  ==  Token.NAME)  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(expr  ==  null  ||  expr.getType()  ==  Token.NAME)  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(expr  ==  null  ||  expr.getType()  ==  Token.NAME)  {	  if(expr!=    null    ||    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	11	None	replace
123	[BUG]  [BUGGY]  if(expr  ==  null  ||  isPropertyAssignmentInExpression(expr)||  expr.getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(expr  ==  null  ||  isPropertyAssignmentInExpression(expr)||  expr.getType()  ==  Token.VAR)  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(expr  ==  null  ||  isPropertyAssignmentInExpression(expr)||  expr.getType()  ==  Token.VAR)  {	  if(expr    ==    null    ||    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	10	None	replace
124	[BUG]  [BUGGY]  if(expr  ==  null  ||  isPropertyAssignmentInExpression(expr)||  expr.getType()  ==  Token.EXPR_RESULT)  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(expr  ==  null  ||  isPropertyAssignmentInExpression(expr)||  expr.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(expr  ==  null  ||  isPropertyAssignmentInExpression(expr)||  expr.getType()  ==  Token.EXPR_RESULT)  {	  if(expr    ==    null    ||    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	10	None	replace
125	[BUG]  [BUGGY]  if(expr  ==  null  ||  isPropertyAssignmentInExpression(expr)||  expr.getType()  ==  Token.RETURN)  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(expr  ==  null  ||  isPropertyAssignmentInExpression(expr)||  expr.getType()  ==  Token.RETURN)  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(expr  ==  null  ||  isPropertyAssignmentInExpression(expr)||  expr.getType()  ==  Token.RETURN)  {	  if(expr    ==    null    ||    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	10	None	replace
126	[BUG]  [BUGGY]  if(expr  ==  null  ||  isPropertyAssignmentInExpression(expr)||  expr.getType()  ==  Token.CATCH)  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(expr  ==  null  ||  isPropertyAssignmentInExpression(expr)||  expr.getType()  ==  Token.CATCH)  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(expr  ==  null  ||  isPropertyAssignmentInExpression(expr)||  expr.getType()  ==  Token.CATCH)  {	  if(expr    ==    null    ||    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	10	None	replace
127	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(expr)||  isLowerPrecedenceInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(isPropertyAssignmentInExpression(expr)||  isLowerPrecedenceInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(isPropertyAssignmentInExpression(expr)||  isLowerPrecedenceInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {	  if(isPropertyAssignmentInExpression(expr)&&    isLowerPrecedenceInExpression(expr.getLastChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	12	None	replace
128	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(expr)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(!isLowerPrecedenceInExpression(expr)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(!isLowerPrecedenceInExpression(expr)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(isPropertyAssignmentInExpression(expr)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	3	None	replace
129	[BUG]  [BUGGY]  if(expr!=  null  &&  isPropertyAssignmentInExpression(expr)||  expr.getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(expr!=  null  &&  isPropertyAssignmentInExpression(expr)||  expr.getType()  ==  Token.VAR)  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(expr!=  null  &&  isPropertyAssignmentInExpression(expr)||  expr.getType()  ==  Token.VAR)  {	  if(expr!=    null    &&    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	9	None	replace
130	[BUG]  [BUGGY]  if(expr!=  null  &&  isPropertyAssignmentInExpression(expr)||  expr.getType()  ==  Token.EXPR_RESULT)  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(expr!=  null  &&  isPropertyAssignmentInExpression(expr)||  expr.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(expr!=  null  &&  isPropertyAssignmentInExpression(expr)||  expr.getType()  ==  Token.EXPR_RESULT)  {	  if(expr!=    null    &&    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	9	None	replace
131	[BUG]  [BUGGY]  if(expr!=  null  &&  isPropertyAssignmentInExpression(expr)||  expr.getType()  ==  Token.RETURN)  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(expr!=  null  &&  isPropertyAssignmentInExpression(expr)||  expr.getType()  ==  Token.RETURN)  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(expr!=  null  &&  isPropertyAssignmentInExpression(expr)||  expr.getType()  ==  Token.RETURN)  {	  if(expr!=    null    &&    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	9	None	replace
132	[BUG]  [BUGGY]  if(expr!=  null  &&  isPropertyAssignmentInExpression(expr)||  expr.getType()  ==  Token.NAME)  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(expr!=  null  &&  isPropertyAssignmentInExpression(expr)||  expr.getType()  ==  Token.NAME)  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(expr!=  null  &&  isPropertyAssignmentInExpression(expr)||  expr.getType()  ==  Token.NAME)  {	  if(expr!=    null    &&    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	9	None	replace
133	[BUG]  [BUGGY]  if(expr!=  null  &&  expr.getType()  ==  Token.CATCH  &&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(expr!=  null  &&  expr.getType()  ==  Token.CATCH  &&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(expr!=  null  &&  expr.getType()  ==  Token.CATCH  &&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  ')'  expected	14	None	replace
134	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);    [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {  [BUGGY]      return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	277	277	1	replace	if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(expr.getLastChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	5	None	replace
