bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  newExpr!=  null?  null  :  newExpr.cloneTree();  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr!=  null?  null  :  newExpr.cloneTree();  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr!=  null?  null  :  newExpr.cloneTree();	  return    newExpr.cloneTree();    	non-compiled	[CE]  ')'  expected	1	None	replace
2	[BUG]  [BUGGY]  return  newExpr.clone();  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr.clone();  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr.clone();	  return    newExpr.cloneTree();    	non-compiled	[CE]  ')'  expected	1	None	replace
3	[BUG]  [BUGGY]  returnNode.cloneTree();  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  returnNode.cloneTree();  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	returnNode.cloneTree();	  return    newExpr.cloneTree();    	non-compiled	[CE]  ')'  expected	1	None	replace
4	[BUG]  [BUGGY]  return  expr.cloneTree();  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  expr.cloneTree();  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  expr.cloneTree();	  return    newExpr.cloneTree();    	non-compiled	[CE]  ')'  expected	1	None	replace
5	[BUG]  [BUGGY]  return  newExpr.cloneNode();  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr.cloneNode();  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr.cloneNode();	  return    newExpr.cloneTree();    	non-compiled	[CE]  ')'  expected	1	None	replace
6	[BUG]  [BUGGY]  return  newExpr.cloneChildren();  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr.cloneChildren();  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr.cloneChildren();	  return    newExpr.cloneTree();    	non-compiled	[CE]  ')'  expected	1	None	replace
7	[BUG]  [BUGGY]  return  newExpr  ==  expr.removeFirstChild()?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  newExpr);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  expr.removeFirstChild()?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  newExpr);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  expr.removeFirstChild()?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  newExpr);	  return    newExpr    ==    expr.removeFirstChild()?    Node.newString(Token.NAME,    name1):    Node.newString(Token.NAME,    name2);    	non-compiled	[CE]  ')'  expected	17	None	replace
8	[BUG]  [BUGGY]  return  newExpr  ==  parent.removeFirstChild()?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  name2);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  parent.removeFirstChild()?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  name2);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  parent.removeFirstChild()?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  name2);	  return    newExpr    ==    expr.removeFirstChild()?    Node.newString(Token.NAME,    name1):    Node.newString(Token.NAME,    name2);    	non-compiled	[CE]  ')'  expected	17	None	replace
9	[BUG]  [BUGGY]  return  newExpr  ==  expr.removeFirstChild()?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  newExpr);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  expr.removeFirstChild()?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  newExpr);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  expr.removeFirstChild()?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  newExpr);	  return    newExpr    ==    expr.removeFirstChild()?    Node.newString(Token.NAME,    name1):    Node.newString(Token.NAME,    name2);    	non-compiled	[CE]  ')'  expected	17	None	replace
10	[BUG]  [BUGGY]  return  newExpr  ==  expr.removeLastChild()?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  name2);  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  expr.removeLastChild()?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  name2);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  expr.removeLastChild()?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  name2);	  return    newExpr    ==    expr.removeFirstChild()?    Node.newString(Token.NAME,    name1):    Node.newString(Token.NAME,    name2);    	non-compiled	[CE]  ')'  expected	17	None	replace
11	[BUG]  [BUGGY]  return  newExpr  ==  expr.removeFirstChild()?  Node.newString(Token.NAME,  cond):  Node.newString(Token.NAME,  name2);  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  expr.removeFirstChild()?  Node.newString(Token.NAME,  cond):  Node.newString(Token.NAME,  name2);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  expr.removeFirstChild()?  Node.newString(Token.NAME,  cond):  Node.newString(Token.NAME,  name2);	  return    newExpr    ==    expr.removeFirstChild()?    Node.newString(Token.NAME,    name1):    Node.newString(Token.NAME,    name2);    	non-compiled	[CE]  ')'  expected	17	None	replace
12	[BUG]  [BUGGY]  return  newExpr  ==  expr.removeFirstChild()?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  cond);  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  expr.removeFirstChild()?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  cond);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  expr.removeFirstChild()?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  cond);	  return    newExpr    ==    expr.removeFirstChild()?    Node.newString(Token.NAME,    name1):    Node.newString(Token.NAME,    name2);    	non-compiled	[CE]  ')'  expected	17	None	replace
13	[BUG]  [BUGGY]  return  newExpr  ==  null?  Node.newString(Token.NAME,  cond):  Node.newString(Token.NAME,  expr.removeFirstChild()));  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  null?  Node.newString(Token.NAME,  cond):  Node.newString(Token.NAME,  expr.removeFirstChild()));  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  null?  Node.newString(Token.NAME,  cond):  Node.newString(Token.NAME,  expr.removeFirstChild()));	  return    newExpr    ==    null?    Node.newString(Token.NAME,    name1):    Node.newString(Token.NAME,    cond,    expr.removeFirstChild()));    	non-compiled	[CE]  ')'  expected	9	None	replace
14	[BUG]  [BUGGY]  return  newExpr  ==  null?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  cond,  expr.removeLastChild()));  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  null?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  cond,  expr.removeLastChild()));  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  null?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  cond,  expr.removeLastChild()));	  return    newExpr    ==    null?    Node.newString(Token.NAME,    name1):    Node.newString(Token.NAME,    cond,    expr.removeFirstChild()));    	non-compiled	[CE]  ')'  expected	9	None	replace
15	[BUG]  [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  cond):  Node.newString(Token.NAME,  expr.removeFirstChild()));  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  cond):  Node.newString(Token.NAME,  expr.removeFirstChild()));  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr!=  null?  Node.newString(Token.NAME,  cond):  Node.newString(Token.NAME,  expr.removeFirstChild()));	  return    newExpr    ==    null?    Node.newString(Token.NAME,    name1):    Node.newString(Token.NAME,    cond,    expr.removeFirstChild()));    	non-compiled	[CE]  ')'  expected	9	None	replace
16	[BUG]  [BUGGY]  return  expr  ==  Node.newString(Token.NAME,  newExpr):  Node.newString(Token.NAME,  name1);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  expr  ==  Node.newString(Token.NAME,  newExpr):  Node.newString(Token.NAME,  name1);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  expr  ==  Node.newString(Token.NAME,  newExpr):  Node.newString(Token.NAME,  name1);	  return    newExpr    ==    expr?    Node.newString(Token.NAME,    name1):    Node.newString(Token.NAME,    name1);    	non-compiled	[CE]  ')'  expected	15	None	replace
17	[BUG]  [BUGGY]  return  newExpr  ==  expr?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  newExpr);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  expr?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  newExpr);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  expr?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  newExpr);	  return    newExpr    ==    expr?    Node.newString(Token.NAME,    name1):    Node.newString(Token.NAME,    name1);    	non-compiled	[CE]  ')'  expected	15	None	replace
18	[BUG]  [BUGGY]  return  newExpr  ==  parent?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  name1);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  parent?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  name1);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  parent?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  name1);	  return    newExpr    ==    expr?    Node.newString(Token.NAME,    name1):    Node.newString(Token.NAME,    name1);    	non-compiled	[CE]  ')'  expected	15	None	replace
19	[BUG]  [BUGGY]  return  expr  ==  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  newExpr);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  expr  ==  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  newExpr);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  expr  ==  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  newExpr);	  return    newExpr    ==    expr?    Node.newString(Token.NAME,    name1):    Node.newString(Token.NAME,    name1);    	non-compiled	[CE]  ')'  expected	15	None	replace
20	[BUG]  [BUGGY]  return  expr  ==  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  newExpr);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  expr  ==  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  newExpr);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  expr  ==  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  newExpr);	  return    newExpr    ==    expr?    Node.newString(Token.NAME,    name1):    Node.newString(Token.NAME,    name1);    	non-compiled	[CE]  ')'  expected	15	None	replace
21	[BUG]  [BUGGY]  return  newExpr  ==  expr.getFirstChild()?  Node.newString(Token.NAME,  expr.getLastChild()):  Node.newString(Token.NAME,  newExpr.getLastChild());  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  expr.getFirstChild()?  Node.newString(Token.NAME,  expr.getLastChild()):  Node.newString(Token.NAME,  newExpr.getLastChild());  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  expr.getFirstChild()?  Node.newString(Token.NAME,  expr.getLastChild()):  Node.newString(Token.NAME,  newExpr.getLastChild());	  return    newExpr    ==    parent.getFirstChild()?    Node.newString(Token.NAME,    expr.getLastChild()):    Node.newString(Token.NAME,    newExpr.getLastChild());    	non-compiled	[CE]  ')'  expected	10	None	replace
22	[BUG]  [BUGGY]  return  newExpr  ==  n.getFirstChild()?  Node.newString(Token.NAME,  expr.getLastChild()):  Node.newString(Token.NAME,  newExpr.getLastChild());  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  n.getFirstChild()?  Node.newString(Token.NAME,  expr.getLastChild()):  Node.newString(Token.NAME,  newExpr.getLastChild());  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  n.getFirstChild()?  Node.newString(Token.NAME,  expr.getLastChild()):  Node.newString(Token.NAME,  newExpr.getLastChild());	  return    newExpr    ==    parent.getFirstChild()?    Node.newString(Token.NAME,    expr.getLastChild()):    Node.newString(Token.NAME,    newExpr.getLastChild());    	non-compiled	[CE]  ')'  expected	10	None	replace
23	[BUG]  [BUGGY]  return  newExpr  ==  expr.getFirstChild()?  Node.newString(Token.NAME,  parent.getLastChild()):  Node.newString(Token.NAME,  newExpr.getLastChild());  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  expr.getFirstChild()?  Node.newString(Token.NAME,  parent.getLastChild()):  Node.newString(Token.NAME,  newExpr.getLastChild());  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  expr.getFirstChild()?  Node.newString(Token.NAME,  parent.getLastChild()):  Node.newString(Token.NAME,  newExpr.getLastChild());	  return    newExpr    ==    parent.getFirstChild()?    Node.newString(Token.NAME,    expr.getLastChild()):    Node.newString(Token.NAME,    newExpr.getLastChild());    	non-compiled	[CE]  ')'  expected	10	None	replace
24	[BUG]  [BUGGY]  return  newExpr  ==  cond.getFirstChild()?  Node.newString(Token.NAME,  expr.getLastChild()):  Node.newString(Token.NAME,  newExpr.getLastChild());  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  cond.getFirstChild()?  Node.newString(Token.NAME,  expr.getLastChild()):  Node.newString(Token.NAME,  newExpr.getLastChild());  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  cond.getFirstChild()?  Node.newString(Token.NAME,  expr.getLastChild()):  Node.newString(Token.NAME,  newExpr.getLastChild());	  return    newExpr    ==    parent.getFirstChild()?    Node.newString(Token.NAME,    expr.getLastChild()):    Node.newString(Token.NAME,    newExpr.getLastChild());    	non-compiled	[CE]  ')'  expected	10	None	replace
25	[BUG]  [BUGGY]  return  newExpr  ==  parent.getFirstChild()?  Node.newString(Token.NAME,  cond.getLastChild()):  Node.newString(Token.NAME,  expr.getLastChild());  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  parent.getFirstChild()?  Node.newString(Token.NAME,  cond.getLastChild()):  Node.newString(Token.NAME,  expr.getLastChild());  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  parent.getFirstChild()?  Node.newString(Token.NAME,  cond.getLastChild()):  Node.newString(Token.NAME,  expr.getLastChild());	  return    newExpr    ==    parent.getFirstChild()?    Node.newString(Token.NAME,    expr.getLastChild()):    Node.newString(Token.NAME,    newExpr.getLastChild());    	non-compiled	[CE]  ')'  expected	10	None	replace
26	[BUG]  [BUGGY]  return  newExpr  ==  parent.getFirstChild()?  Node.newString(Token.NAME,  expr.getFirstChild()):  Node.newString(Token.NAME,  newExpr.getLastChild());  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  parent.getFirstChild()?  Node.newString(Token.NAME,  expr.getFirstChild()):  Node.newString(Token.NAME,  newExpr.getLastChild());  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  parent.getFirstChild()?  Node.newString(Token.NAME,  expr.getFirstChild()):  Node.newString(Token.NAME,  newExpr.getLastChild());	  return    newExpr    ==    parent.getFirstChild()?    Node.newString(Token.NAME,    expr.getLastChild()):    Node.newString(Token.NAME,    newExpr.getLastChild());    	non-compiled	[CE]  ')'  expected	10	None	replace
27	[BUG]  [BUGGY]  return  newExpr  ==  expr.getLastChild()?  Node.newString(Token.NAME,  expr.getFirstChild()):  Node.newString(Token.NAME,  newExpr.getLastChild());  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  expr.getLastChild()?  Node.newString(Token.NAME,  expr.getFirstChild()):  Node.newString(Token.NAME,  newExpr.getLastChild());  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  expr.getLastChild()?  Node.newString(Token.NAME,  expr.getFirstChild()):  Node.newString(Token.NAME,  newExpr.getLastChild());	  return    newExpr    ==    parent.getFirstChild()?    Node.newString(Token.NAME,    expr.getLastChild()):    Node.newString(Token.NAME,    newExpr.getLastChild());    	non-compiled	[CE]  ')'  expected	10	None	replace
28	[BUG]  [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  cond,  expr.removeLastChild()));  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  cond,  expr.removeLastChild()));  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr!=  null?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  cond,  expr.removeLastChild()));	  return    newExpr!=    null?    Node.newString(Token.NAME,    name1):    Node.newString(Token.NAME,    cond,    expr.removeFirstChild()));    	non-compiled	[CE]  ')'  expected	8	None	replace
29	[BUG]  [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  cond,  expr.removeFirstChild()));  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  cond,  expr.removeFirstChild()));  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr!=  null?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  cond,  expr.removeFirstChild()));	  return    newExpr!=    null?    Node.newString(Token.NAME,    name1):    Node.newString(Token.NAME,    cond,    expr.removeFirstChild()));    	non-compiled	[CE]  ')'  expected	8	None	replace
30	[BUG]  [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  cond,  expr.getLastChild()));  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  cond,  expr.getLastChild()));  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr!=  null?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  cond,  expr.getLastChild()));	  return    newExpr!=    null?    Node.newString(Token.NAME,    name1):    Node.newString(Token.NAME,    cond,    expr.getFirstChild()));    	non-compiled	[CE]  ')'  expected	11	None	replace
31	[BUG]  [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  cond):  Node.newString(Token.NAME,  expr.getFirstChild()));  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  cond):  Node.newString(Token.NAME,  expr.getFirstChild()));  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr!=  null?  Node.newString(Token.NAME,  cond):  Node.newString(Token.NAME,  expr.getFirstChild()));	  return    newExpr!=    null?    Node.newString(Token.NAME,    name1):    Node.newString(Token.NAME,    cond,    expr.getFirstChild()));    	non-compiled	[CE]  ')'  expected	11	None	replace
32	[BUG]  [BUGGY]  return  newExpr  ==  null?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  cond,  expr.getLastChild()));  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  null?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  cond,  expr.getLastChild()));  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  null?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  cond,  expr.getLastChild()));	  return    newExpr!=    null?    Node.newString(Token.NAME,    name1):    Node.newString(Token.NAME,    cond,    expr.getFirstChild()));    	non-compiled	[CE]  ')'  expected	11	None	replace
33	[BUG]  [BUGGY]  return  expr!=  null?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  cond,  expr.getFirstChild()));  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  expr!=  null?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  cond,  expr.getFirstChild()));  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  expr!=  null?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  cond,  expr.getFirstChild()));	  return    newExpr!=    null?    Node.newString(Token.NAME,    name1):    Node.newString(Token.NAME,    cond,    expr.getFirstChild()));    	non-compiled	[CE]  ')'  expected	11	None	replace
34	[BUG]  [BUGGY]  return  newExpr.removeLastChild();  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr.removeLastChild();  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr.removeLastChild();	  return    newExpr.removeFirstChild();    	non-compiled	[CE]  ')'  expected	3	None	replace
35	[BUG]  [BUGGY]  return  expr.removeFirstChild();  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  expr.removeFirstChild();  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  expr.removeFirstChild();	  return    newExpr.removeFirstChild();    	non-compiled	[CE]  ')'  expected	3	None	replace
36	[BUG]  [BUGGY]  return  newExpr.getLastChild();  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr.getLastChild();  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr.getLastChild();	  return    newExpr.removeFirstChild();    	non-compiled	[CE]  ')'  expected	3	None	replace
37	[BUG]  [BUGGY]  return  n.removeFirstChild();  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  n.removeFirstChild();  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  n.removeFirstChild();	  return    newExpr.removeFirstChild();    	non-compiled	[CE]  ')'  expected	3	None	replace
38	[BUG]  [BUGGY]  return  newExpr  ==  expr.getFirstChild()?  Node.newString(Token.NAME,  expr.getLastChild()):  Node.newString(Token.NAME,  newExpr.getLastChild()));  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  expr.getFirstChild()?  Node.newString(Token.NAME,  expr.getLastChild()):  Node.newString(Token.NAME,  newExpr.getLastChild()));  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  expr.getFirstChild()?  Node.newString(Token.NAME,  expr.getLastChild()):  Node.newString(Token.NAME,  newExpr.getLastChild()));	  return    newExpr    ==    parent.getFirstChild()?    Node.newString(Token.NAME,    expr.getLastChild()):    Node.newString(Token.NAME,    newExpr.getLastChild()));    	non-compiled	[CE]  ')'  expected	13	None	replace
39	[BUG]  [BUGGY]  return  newExpr  ==  n.getFirstChild()?  Node.newString(Token.NAME,  expr.getLastChild()):  Node.newString(Token.NAME,  newExpr.getLastChild()));  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  n.getFirstChild()?  Node.newString(Token.NAME,  expr.getLastChild()):  Node.newString(Token.NAME,  newExpr.getLastChild()));  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  n.getFirstChild()?  Node.newString(Token.NAME,  expr.getLastChild()):  Node.newString(Token.NAME,  newExpr.getLastChild()));	  return    newExpr    ==    parent.getFirstChild()?    Node.newString(Token.NAME,    expr.getLastChild()):    Node.newString(Token.NAME,    newExpr.getLastChild()));    	non-compiled	[CE]  ')'  expected	13	None	replace
40	[BUG]  [BUGGY]  return  newExpr  ==  expr.getFirstChild()?  Node.newString(Token.NAME,  parent.getLastChild()):  Node.newString(Token.NAME,  newExpr.getLastChild()));  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  expr.getFirstChild()?  Node.newString(Token.NAME,  parent.getLastChild()):  Node.newString(Token.NAME,  newExpr.getLastChild()));  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  expr.getFirstChild()?  Node.newString(Token.NAME,  parent.getLastChild()):  Node.newString(Token.NAME,  newExpr.getLastChild()));	  return    newExpr    ==    parent.getFirstChild()?    Node.newString(Token.NAME,    expr.getLastChild()):    Node.newString(Token.NAME,    newExpr.getLastChild()));    	non-compiled	[CE]  ')'  expected	13	None	replace
41	[BUG]  [BUGGY]  return  newExpr  ==  cond.getFirstChild()?  Node.newString(Token.NAME,  expr.getLastChild()):  Node.newString(Token.NAME,  newExpr.getLastChild()));  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  cond.getFirstChild()?  Node.newString(Token.NAME,  expr.getLastChild()):  Node.newString(Token.NAME,  newExpr.getLastChild()));  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  cond.getFirstChild()?  Node.newString(Token.NAME,  expr.getLastChild()):  Node.newString(Token.NAME,  newExpr.getLastChild()));	  return    newExpr    ==    parent.getFirstChild()?    Node.newString(Token.NAME,    expr.getLastChild()):    Node.newString(Token.NAME,    newExpr.getLastChild()));    	non-compiled	[CE]  ')'  expected	13	None	replace
42	[BUG]  [BUGGY]  return  newExpr  ==  parent.getFirstChild()?  Node.newString(Token.NAME,  cond.getLastChild()):  Node.newString(Token.NAME,  expr.getLastChild()));  [CE]  ')'  expected  [FE]                          AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  parent.getFirstChild()?  Node.newString(Token.NAME,  cond.getLastChild()):  Node.newString(Token.NAME,  expr.getLastChild()));  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  parent.getFirstChild()?  Node.newString(Token.NAME,  cond.getLastChild()):  Node.newString(Token.NAME,  expr.getLastChild()));	  return    newExpr    ==    parent.getFirstChild()?    Node.newString(Token.NAME,    expr.getLastChild()):    Node.newString(Token.NAME,    newExpr.getLastChild()));    	non-compiled	[CE]  ')'  expected	13	None	replace
43	[BUG]  [BUGGY]  return  newExpr  ==  expr.getLastChild()?  Node.newString(Token.NAME,  expr.getFirstChild()):  Node.newString(Token.NAME,  newExpr.getLastChild()));  [CE]  ')'  expected  [FE]                            AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  expr.getLastChild()?  Node.newString(Token.NAME,  expr.getFirstChild()):  Node.newString(Token.NAME,  newExpr.getLastChild()));  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  expr.getLastChild()?  Node.newString(Token.NAME,  expr.getFirstChild()):  Node.newString(Token.NAME,  newExpr.getLastChild()));	  return    newExpr    ==    parent.getFirstChild()?    Node.newString(Token.NAME,    expr.getLastChild()):    Node.newString(Token.NAME,    newExpr.getLastChild()));    	non-compiled	[CE]  ')'  expected	13	None	replace
44	[BUG]  [BUGGY]  return  newExpr  ==  parent.getFirstChild()?  Node.newString(Token.NAME,  expr.getFirstChild()):  Node.newString(Token.NAME,  newExpr.getLastChild()));  [CE]  ')'  expected  [FE]                              AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  parent.getFirstChild()?  Node.newString(Token.NAME,  expr.getFirstChild()):  Node.newString(Token.NAME,  newExpr.getLastChild()));  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  parent.getFirstChild()?  Node.newString(Token.NAME,  expr.getFirstChild()):  Node.newString(Token.NAME,  newExpr.getLastChild()));	  return    newExpr    ==    parent.getFirstChild()?    Node.newString(Token.NAME,    expr.getLastChild()):    Node.newString(Token.NAME,    newExpr.getLastChild()));    	non-compiled	[CE]  ')'  expected	13	None	replace
45	[BUG]  [BUGGY]  return  newExpr  ==  parent?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  name1);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  parent?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  name1);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  parent?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  name1);	  return    newExpr    ==    expr?    Node.newString(Token.NAME,    name2):    Node.newString(Token.NAME,    name1);    	non-compiled	[CE]  ')'  expected	18	None	replace
46	[BUG]  [BUGGY]  return  expr  ==  Node.newString(Token.NAME,  newExpr):  Node.newString(Token.NAME,  name2);  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  expr  ==  Node.newString(Token.NAME,  newExpr):  Node.newString(Token.NAME,  name2);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  expr  ==  Node.newString(Token.NAME,  newExpr):  Node.newString(Token.NAME,  name2);	  return    newExpr    ==    expr?    Node.newString(Token.NAME,    name1):    Node.newString(Token.NAME,    name2);    	non-compiled	[CE]  ')'  expected	14	None	replace
47	[BUG]  [BUGGY]  return  newExpr  ==  parent?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  name2);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  parent?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  name2);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  parent?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  name2);	  return    newExpr    ==    expr?    Node.newString(Token.NAME,    name1):    Node.newString(Token.NAME,    name2);    	non-compiled	[CE]  ')'  expected	14	None	replace
48	[BUG]  [BUGGY]  return  newExpr  ==  expr?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  newExpr);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  expr?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  newExpr);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  expr?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  newExpr);	  return    newExpr    ==    expr?    Node.newString(Token.NAME,    name1):    Node.newString(Token.NAME,    name2);    	non-compiled	[CE]  ')'  expected	14	None	replace
49	[BUG]  [BUGGY]  return  newExpr  ==  expr?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  cond);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  expr?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  cond);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  expr?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  cond);	  return    newExpr    ==    expr?    Node.newString(Token.NAME,    name1):    Node.newString(Token.NAME,    name2);    	non-compiled	[CE]  ')'  expected	14	None	replace
50	[BUG]  [BUGGY]  return  newExpr  ==  parent?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  name2);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  parent?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  name2);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  parent?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  name2);	  return    newExpr    ==    expr?    Node.newString(Token.NAME,    name2):    Node.newString(Token.NAME,    name2);    	non-compiled	[CE]  ')'  expected	19	None	replace
51	[BUG]  [BUGGY]  return  newExpr  ==  parent.removeFirstChild()?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  name2);  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  parent.removeFirstChild()?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  name2);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  parent.removeFirstChild()?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  name2);	  return    newExpr    ==    expr.removeFirstChild()?    Node.newString(Token.NAME,    name2):    Node.newString(Token.NAME,    name2);    	non-compiled	[CE]  ')'  expected	20	None	replace
52	[BUG]  [BUGGY]  return  newExpr  ==  expr.removeFirstChild()?  Node.newString(Token.NAME,  name1,  name2):  Node.newString(Token.NAME,  name2);  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  expr.removeFirstChild()?  Node.newString(Token.NAME,  name1,  name2):  Node.newString(Token.NAME,  name2);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  expr.removeFirstChild()?  Node.newString(Token.NAME,  name1,  name2):  Node.newString(Token.NAME,  name2);	  return    newExpr    ==    expr.removeFirstChild()?    Node.newString(Token.NAME,    name2):    Node.newString(Token.NAME,    name2);    	non-compiled	[CE]  ')'  expected	20	None	replace
53	[BUG]  [BUGGY]  return  newExpr!=  expr.removeFirstChild()?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  name2);  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr!=  expr.removeFirstChild()?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  name2);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr!=  expr.removeFirstChild()?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  name2);	  return    newExpr    ==    expr.removeFirstChild()?    Node.newString(Token.NAME,    name2):    Node.newString(Token.NAME,    name2);    	non-compiled	[CE]  ')'  expected	20	None	replace
54	[BUG]  [BUGGY]  return  expr.removeFirstChild()?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  newExpr);  [CE]  ')'  expected  [FE]                          AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  expr.removeFirstChild()?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  newExpr);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  expr.removeFirstChild()?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  newExpr);	  return    newExpr    ==    expr.removeFirstChild()?    Node.newString(Token.NAME,    name2):    Node.newString(Token.NAME,    name2);    	non-compiled	[CE]  ')'  expected	20	None	replace
55	[BUG]  [BUGGY]  return  newExpr.getParent();  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr.getParent();  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr.getParent();	  return    newExpr.getNext();    	non-compiled	[CE]  ')'  expected	2	None	replace
56	[BUG]  [BUGGY]  return  expr.getNext();  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  expr.getNext();  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  expr.getNext();	  return    newExpr.getNext();    	non-compiled	[CE]  ')'  expected	2	None	replace
57	[BUG]  [BUGGY]  return  newExpr.getFirstChild();  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr.getFirstChild();  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr.getFirstChild();	  return    newExpr.getNext();    	non-compiled	[CE]  ')'  expected	2	None	replace
58	[BUG]  [BUGGY]  return  newExpr.getType()  ==  Token.FUNCTION;  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr.getType()  ==  Token.FUNCTION;  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr.getType()  ==  Token.FUNCTION;	  return    newExpr.getNext();    	non-compiled	[CE]  ')'  expected	2	None	replace
59	[BUG]  [BUGGY]  return  newExpr.getNext()  :  expr;  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr.getNext()  :  expr;  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr.getNext()  :  expr;	  return    newExpr.getNext();    	non-compiled	[CE]  ')'  expected	2	None	replace
60	[BUG]  [BUGGY]  n.removeChild(cond);  return  newExpr;  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  n.removeChild(cond);  return  newExpr;  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	n.removeChild(cond);  return  newExpr;	      	non-compiled	[CE]  ')'  expected	7	None	replace
61	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr);  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  parent.replaceChild(n,  newExpr);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	parent.replaceChild(n,  newExpr);	      	non-compiled	[CE]  ')'  expected	7	None	replace
62	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  newExpr);  parent.replaceChild(n,  newExpr);  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  NodeUtil.removeChild(parent,  newExpr);  parent.replaceChild(n,  newExpr);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	NodeUtil.removeChild(parent,  newExpr);  parent.replaceChild(n,  newExpr);	      	non-compiled	[CE]  ')'  expected	7	None	replace
63	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  newExpr);  [CE]  ')'  expected  [FE]                          AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  NodeUtil.removeChild(parent,  newExpr);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	NodeUtil.removeChild(parent,  newExpr);	      	non-compiled	[CE]  ')'  expected	7	None	replace
64	[BUG]  [BUGGY]  n.removeChild(cond);  newExpr.addChildToBack(newExpr);  [CE]  ')'  expected  [FE]                            AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  n.removeChild(cond);  newExpr.addChildToBack(newExpr);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	n.removeChild(cond);  newExpr.addChildToBack(newExpr);	      	non-compiled	[CE]  ')'  expected	7	None	replace
65	[BUG]  [BUGGY]  return  newExpr!=  null?  expr  :  newExpr;  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr!=  null?  expr  :  newExpr;  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr!=  null?  expr  :  newExpr;	  return    newExpr!=    null?    newExpr    :    expr;    	non-compiled	[CE]  ')'  expected	16	None	replace
66	[BUG]  [BUGGY]  return  expr!=  null?  newExpr  :  expr;  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  expr!=  null?  newExpr  :  expr;  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  expr!=  null?  newExpr  :  expr;	  return    newExpr!=    null?    newExpr    :    expr;    	non-compiled	[CE]  ')'  expected	16	None	replace
67	[BUG]  [BUGGY]  return  newExpr  ==  null?  expr  :  newExpr;  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  null?  expr  :  newExpr;  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  null?  expr  :  newExpr;	  return    newExpr!=    null?    newExpr    :    expr;    	non-compiled	[CE]  ')'  expected	16	None	replace
68	[BUG]  [BUGGY]  return  newExpr  ==  null?  newExpr  :  expr;  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  null?  newExpr  :  expr;  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  null?  newExpr  :  expr;	  return    newExpr!=    null?    newExpr    :    expr;    	non-compiled	[CE]  ')'  expected	16	None	replace
69	[BUG]  [BUGGY]  return  expr  ==  null?  newExpr  :  expr;  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  expr  ==  null?  newExpr  :  expr;  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  expr  ==  null?  newExpr  :  expr;	  return    newExpr!=    null?    newExpr    :    expr;    	non-compiled	[CE]  ')'  expected	16	None	replace
70	[BUG]  [BUGGY]  return  newExpr!=  null?  newExpr  :  expr.cloneTree();  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr!=  null?  newExpr  :  expr.cloneTree();  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr!=  null?  newExpr  :  expr.cloneTree();	  return    newExpr!=    null?    newExpr    :    expr;    	non-compiled	[CE]  ')'  expected	16	None	replace
71	[BUG]  [BUGGY]  n.removeChild(newExpr);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  n.removeChild(newExpr);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	n.removeChild(newExpr);	  n.removeChild(cond);    	non-compiled	[CE]  ')'  expected	5	None	replace
72	[BUG]  [BUGGY]  return  newExpr.node  -  1;  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr.node  -  1;  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr.node  -  1;	  return    newExpr.node;    	non-compiled	[CE]  ')'  expected	6	None	replace
73	[BUG]  [BUGGY]  n.removeChild(parent);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  n.removeChild(parent);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	n.removeChild(parent);	  n.removeChild(expr);    	non-compiled	[CE]  ')'  expected	4	None	replace
74	[BUG]  [BUGGY]  parent.replaceChild(n,  expr);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  parent.replaceChild(n,  expr);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	parent.replaceChild(n,  expr);	  n.removeChild(expr);    	non-compiled	[CE]  ')'  expected	4	None	replace
75	[BUG]  [BUGGY]  parent.removeChild(cond);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  parent.removeChild(cond);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	parent.removeChild(cond);	  n.removeChild(expr);    	non-compiled	[CE]  ')'  expected	4	None	replace
76	[BUG]  [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  expr.getLastChild()));  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  expr.getLastChild()));  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr!=  null?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  expr.getLastChild()));	  return    newExpr!=    null?    Node.newString(Token.NAME,    name1):    Node.newString(Token.NAME,    expr.getFirstChild()));    	non-compiled	[CE]  ')'  expected	12	None	replace
77	[BUG]  [BUGGY]  return  newExpr  ==  null?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  expr.getLastChild()));  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  null?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  expr.getLastChild()));  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  null?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  expr.getLastChild()));	  return    newExpr!=    null?    Node.newString(Token.NAME,    name1):    Node.newString(Token.NAME,    expr.getFirstChild()));    	non-compiled	[CE]  ')'  expected	12	None	replace
78	[BUG]  [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  expr.getLastChild()));  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  expr.getLastChild()));  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr!=  null?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  expr.getLastChild()));	  return    newExpr!=    null?    Node.newString(Token.NAME,    name1):    Node.newString(Token.NAME,    expr.getFirstChild()));    	non-compiled	[CE]  ')'  expected	12	None	replace
79	[BUG]  [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  expr.getFirstChild()));  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  expr.getFirstChild()));  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr!=  null?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  expr.getFirstChild()));	  return    newExpr!=    null?    Node.newString(Token.NAME,    name1):    Node.newString(Token.NAME,    expr.getFirstChild()));    	non-compiled	[CE]  ')'  expected	12	None	replace
80	[BUG]  [BUGGY]  return  newExpr  ==  null?  null  :  newExpr.cloneTree();  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  null?  null  :  newExpr.cloneTree();  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  null?  null  :  newExpr.cloneTree();	  return    newExpr.cloneTree();    	non-compiled	[CE]  ')'  expected	1	None	replace
81	[BUG]  [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  name1):  newExpr.cloneTree();  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  name1):  newExpr.cloneTree();  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr!=  null?  Node.newString(Token.NAME,  name1):  newExpr.cloneTree();	  return    newExpr.cloneTree();    	non-compiled	[CE]  ')'  expected	1	None	replace
82	[BUG]  [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  expr.getFirstChild()):  newExpr.cloneTree();  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  expr.getFirstChild()):  newExpr.cloneTree();  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr!=  null?  Node.newString(Token.NAME,  expr.getFirstChild()):  newExpr.cloneTree();	  return    newExpr.cloneTree();    	non-compiled	[CE]  ')'  expected	1	None	replace
83	[BUG]  [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  cond):  newExpr.cloneTree();  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  cond):  newExpr.cloneTree();  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr!=  null?  Node.newString(Token.NAME,  cond):  newExpr.cloneTree();	  return    newExpr.cloneTree();    	non-compiled	[CE]  ')'  expected	1	None	replace
84	[BUG]  [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  expr.getLastChild()):  newExpr.cloneTree();  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  expr.getLastChild()):  newExpr.cloneTree();  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr!=  null?  Node.newString(Token.NAME,  expr.getLastChild()):  newExpr.cloneTree();	  return    newExpr.cloneTree();    	non-compiled	[CE]  ')'  expected	1	None	replace
85	[BUG]  [BUGGY]  return  elseExpr  ==  null?  newExpr  :  expr;  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  elseExpr  ==  null?  newExpr  :  expr;  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  elseExpr  ==  null?  newExpr  :  expr;	  return    newExpr!=    null?    newExpr    :    expr;    	non-compiled	[CE]  ')'  expected	16	None	replace
86	[BUG]  [BUGGY]  return  newExpr  ==  null?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  cond,  expr.removeFirstChild()));  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  null?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  cond,  expr.removeFirstChild()));  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  null?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  cond,  expr.removeFirstChild()));	  return    newExpr!=    null?    Node.newString(Token.NAME,    name1):    Node.newString(Token.NAME,    cond,    expr.removeFirstChild()));    	non-compiled	[CE]  ')'  expected	8	None	replace
87	[BUG]  [BUGGY]  n.replaceChild(n,  newExpr);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  n.replaceChild(n,  newExpr);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	n.replaceChild(n,  newExpr);	  n.removeChild(expr);    	non-compiled	[CE]  ')'  expected	4	None	replace
88	[BUG]  [BUGGY]  n.removeChild(alloc);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  n.removeChild(alloc);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	n.removeChild(alloc);	  n.removeChild(expr);    	non-compiled	[CE]  ')'  expected	4	None	replace
89	[BUG]  [BUGGY]  return  newExpr!=  expr.getFirstChild()?  Node.newString(Token.NAME,  expr.getLastChild()):  Node.newString(Token.NAME,  newExpr.getLastChild());  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr!=  expr.getFirstChild()?  Node.newString(Token.NAME,  expr.getLastChild()):  Node.newString(Token.NAME,  newExpr.getLastChild());  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr!=  expr.getFirstChild()?  Node.newString(Token.NAME,  expr.getLastChild()):  Node.newString(Token.NAME,  newExpr.getLastChild());	  return    newExpr    ==    parent.getFirstChild()?    Node.newString(Token.NAME,    expr.getLastChild()):    Node.newString(Token.NAME,    newExpr.getLastChild());    	non-compiled	[CE]  ')'  expected	10	None	replace
90	[BUG]  [BUGGY]  return  newExpr!=  expr.getFirstChild()?  Node.newString(Token.NAME,  expr.getLastChild()):  Node.newString(Token.NAME,  newExpr.getLastChild()));  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr!=  expr.getFirstChild()?  Node.newString(Token.NAME,  expr.getLastChild()):  Node.newString(Token.NAME,  newExpr.getLastChild()));  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr!=  expr.getFirstChild()?  Node.newString(Token.NAME,  expr.getLastChild()):  Node.newString(Token.NAME,  newExpr.getLastChild()));	  return    newExpr    ==    parent.getFirstChild()?    Node.newString(Token.NAME,    expr.getLastChild()):    Node.newString(Token.NAME,    newExpr.getLastChild()));    	non-compiled	[CE]  ')'  expected	13	None	replace
91	[BUG]  [BUGGY]  return  newExpr  ==  expr.getFirstChild()?  Node.newString(Token.NAME,  expr.getLastChild()):  Node.newString(Token.NAME,  newExpr.getLastChild())  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  expr.getFirstChild()?  Node.newString(Token.NAME,  expr.getLastChild()):  Node.newString(Token.NAME,  newExpr.getLastChild())  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  expr.getFirstChild()?  Node.newString(Token.NAME,  expr.getLastChild()):  Node.newString(Token.NAME,  newExpr.getLastChild())	  return    newExpr    ==    parent.getFirstChild()?    Node.newString(Token.NAME,    expr.getLastChild()):    Node.newString(Token.NAME,    newExpr.getLastChild()));    	non-compiled	[CE]  ')'  expected	13	None	replace
92	[BUG]  [BUGGY]  return  expr  ==  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  name2);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  expr  ==  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  name2);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  expr  ==  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  name2);	  return    newExpr    ==    expr?    Node.newString(Token.NAME,    name1):    Node.newString(Token.NAME,    name1);    	non-compiled	[CE]  ')'  expected	15	None	replace
93	[BUG]  [BUGGY]  return  expr  ==  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  name1);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  expr  ==  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  name1);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  expr  ==  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  name1);	  return    newExpr    ==    expr?    Node.newString(Token.NAME,    name1):    Node.newString(Token.NAME,    name1);    	non-compiled	[CE]  ')'  expected	15	None	replace
94	[BUG]  [BUGGY]  return  expr  ==  node?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  name2);  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  expr  ==  node?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  name2);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  expr  ==  node?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  name2);	  return    newExpr    ==    expr?    Node.newString(Token.NAME,    name1):    Node.newString(Token.NAME,    name2);    	non-compiled	[CE]  ')'  expected	14	None	replace
95	[BUG]  [BUGGY]  return  expr  ==  n?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  name2);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  expr  ==  n?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  name2);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  expr  ==  n?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  name2);	  return    newExpr    ==    expr?    Node.newString(Token.NAME,    name1):    Node.newString(Token.NAME,    name2);    	non-compiled	[CE]  ')'  expected	14	None	replace
96	[BUG]  [BUGGY]  return  newExpr  ==  null?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  expr.getFirstChild()));  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  null?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  expr.getFirstChild()));  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  null?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  expr.getFirstChild()));	  return    newExpr!=    null?    Node.newString(Token.NAME,    name1):    Node.newString(Token.NAME,    expr.getFirstChild()));    	non-compiled	[CE]  ')'  expected	12	None	replace
97	[BUG]  [BUGGY]  return  newExpr  ==  null?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  expr.getLastChild()));  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  null?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  expr.getLastChild()));  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  null?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  expr.getLastChild()));	  return    newExpr!=    null?    Node.newString(Token.NAME,    name1):    Node.newString(Token.NAME,    expr.getFirstChild()));    	non-compiled	[CE]  ')'  expected	12	None	replace
98	[BUG]  [BUGGY]  return  newExpr.replaceChild(n,  expr.removeFirstChild());  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr.replaceChild(n,  expr.removeFirstChild());  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr.replaceChild(n,  expr.removeFirstChild());	  return    newExpr.removeFirstChild();    	non-compiled	[CE]  ')'  expected	3	None	replace
99	[BUG]  [BUGGY]  return  newExpr.replaceChild(n,  expr.removeLastChild());  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr.replaceChild(n,  expr.removeLastChild());  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr.replaceChild(n,  expr.removeLastChild());	  return    newExpr.removeFirstChild();    	non-compiled	[CE]  ')'  expected	3	None	replace
100	[BUG]  [BUGGY]  n.removeChild(assign);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  n.removeChild(assign);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	n.removeChild(assign);	  n.removeChild(cond);    	non-compiled	[CE]  ')'  expected	5	None	replace
101	[BUG]  [BUGGY]  return  name  ==  expr?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  name2);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  name  ==  expr?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  name2);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  name  ==  expr?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  name2);	  return    newExpr    ==    expr?    Node.newString(Token.NAME,    name2):    Node.newString(Token.NAME,    name2);    	non-compiled	[CE]  ')'  expected	19	None	replace
102	[BUG]  [BUGGY]  return  expr  ==  node?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  name2);  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  expr  ==  node?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  name2);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  expr  ==  node?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  name2);	  return    newExpr    ==    expr?    Node.newString(Token.NAME,    name2):    Node.newString(Token.NAME,    name2);    	non-compiled	[CE]  ')'  expected	19	None	replace
103	[BUG]  [BUGGY]  return  newExpr  ==  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  name2);  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  name2);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  name2);	  return    newExpr    ==    expr?    Node.newString(Token.NAME,    name2):    Node.newString(Token.NAME,    name2);    	non-compiled	[CE]  ')'  expected	19	None	replace
104	[BUG]  [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  name1):  newExpr.node;  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  name1):  newExpr.node;  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr!=  null?  Node.newString(Token.NAME,  name1):  newExpr.node;	  return    newExpr.node;    	non-compiled	[CE]  ')'  expected	6	None	replace
105	[BUG]  [BUGGY]  return  newExpr  ==  null?  Node.newString(Token.NAME,  name1):  newExpr.node;  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  null?  Node.newString(Token.NAME,  name1):  newExpr.node;  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  null?  Node.newString(Token.NAME,  name1):  newExpr.node;	  return    newExpr.node;    	non-compiled	[CE]  ')'  expected	6	None	replace
106	[BUG]  [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  cond):  newExpr.node;  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  cond):  newExpr.node;  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr!=  null?  Node.newString(Token.NAME,  cond):  newExpr.node;	  return    newExpr.node;    	non-compiled	[CE]  ')'  expected	6	None	replace
107	[BUG]  [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  cond):  newExpr;  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  cond):  newExpr;  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr!=  null?  Node.newString(Token.NAME,  cond):  newExpr;	  return    newExpr.node;    	non-compiled	[CE]  ')'  expected	6	None	replace
108	[BUG]  [BUGGY]  return  newExpr  ==  expr.removeFirstChild()?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  name1);  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  expr.removeFirstChild()?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  name1);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  expr.removeFirstChild()?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  name1);	  return    newExpr    ==    expr.removeFirstChild()?    Node.newString(Token.NAME,    name2):    Node.newString(Token.NAME,    name2);    	non-compiled	[CE]  ')'  expected	20	None	replace
109	[BUG]  [BUGGY]  return  newExpr  ==  expr.removeLastChild()?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  name1);  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  expr.removeLastChild()?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  name1);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  expr.removeLastChild()?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  name1);	  return    newExpr    ==    expr.removeFirstChild()?    Node.newString(Token.NAME,    name2):    Node.newString(Token.NAME,    name2);    	non-compiled	[CE]  ')'  expected	20	None	replace
110	[BUG]  [BUGGY]  return  newExpr  ==  null?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  cond,  expr.getFirstChild()));  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  null?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  cond,  expr.getFirstChild()));  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  null?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  cond,  expr.getFirstChild()));	  return    newExpr!=    null?    Node.newString(Token.NAME,    name1):    Node.newString(Token.NAME,    cond,    expr.getFirstChild()));    	non-compiled	[CE]  ')'  expected	11	None	replace
111	[BUG]  [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  cond,  expr.getFirstChild()));  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  cond,  expr.getFirstChild()));  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr!=  null?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  cond,  expr.getFirstChild()));	  return    newExpr!=    null?    Node.newString(Token.NAME,    name1):    Node.newString(Token.NAME,    cond,    expr.getFirstChild()));    	non-compiled	[CE]  ')'  expected	11	None	replace
112	[BUG]  [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  cond,  expr.getLastChild()));  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  cond,  expr.getLastChild()));  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr!=  null?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  cond,  expr.getLastChild()));	  return    newExpr!=    null?    Node.newString(Token.NAME,    name1):    Node.newString(Token.NAME,    cond,    expr.getFirstChild()));    	non-compiled	[CE]  ')'  expected	11	None	replace
113	[BUG]  [BUGGY]  return  newExpr  ==  null?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  cond,  expr.getFirstChild()));  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  null?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  cond,  expr.getFirstChild()));  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  null?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  cond,  expr.getFirstChild()));	  return    newExpr!=    null?    Node.newString(Token.NAME,    name1):    Node.newString(Token.NAME,    cond,    expr.getFirstChild()));    	non-compiled	[CE]  ')'  expected	11	None	replace
114	[BUG]  [BUGGY]  return  newExpr!=  null?  null  :  newExpr.getNext();  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr!=  null?  null  :  newExpr.getNext();  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr!=  null?  null  :  newExpr.getNext();	  return    newExpr.getNext();    	non-compiled	[CE]  ')'  expected	2	None	replace
115	[BUG]  [BUGGY]  return  n.getNext();  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  n.getNext();  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  n.getNext();	  return    newExpr.getNext();    	non-compiled	[CE]  ')'  expected	2	None	replace
116	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  newExpr);  returnNode;  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  NodeUtil.removeChild(parent,  newExpr);  returnNode;  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	NodeUtil.removeChild(parent,  newExpr);  returnNode;	      	non-compiled	[CE]  ')'  expected	7	None	replace
117	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newExpr,  this);  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  NodeTraversal.traverse(compiler,  newExpr,  this);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	NodeTraversal.traverse(compiler,  newExpr,  this);	      	non-compiled	[CE]  ')'  expected	7	None	replace
118	[BUG]  [BUGGY]  n.removeChild(cond);  returnNode;  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  n.removeChild(cond);  returnNode;  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	n.removeChild(cond);  returnNode;	      	non-compiled	[CE]  ')'  expected	7	None	replace
119	[BUG]  [BUGGY]  return  newExpr  ==  expr?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  cond);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  expr?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  cond);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  expr?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  cond);	  return    newExpr    ==    expr?    Node.newString(Token.NAME,    name2):    Node.newString(Token.NAME,    name1);    	non-compiled	[CE]  ')'  expected	18	None	replace
120	[BUG]  [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  name1):  newExpr.getNext();  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  name1):  newExpr.getNext();  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr!=  null?  Node.newString(Token.NAME,  name1):  newExpr.getNext();	  return    newExpr.getNext();    	non-compiled	[CE]  ')'  expected	2	None	replace
121	[BUG]  [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  cond):  newExpr.getNext();  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  cond):  newExpr.getNext();  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr!=  null?  Node.newString(Token.NAME,  cond):  newExpr.getNext();	  return    newExpr.getNext();    	non-compiled	[CE]  ')'  expected	2	None	replace
122	[BUG]  [BUGGY]  return  newExpr!=  null?  newExpr  :  newExpr.getNext();  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr!=  null?  newExpr  :  newExpr.getNext();  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr!=  null?  newExpr  :  newExpr.getNext();	  return    newExpr.getNext();    	non-compiled	[CE]  ')'  expected	2	None	replace
123	[BUG]  [BUGGY]  return  expr.removeLastChild();  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  expr.removeLastChild();  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  expr.removeLastChild();	  return    newExpr.removeFirstChild();    	non-compiled	[CE]  ')'  expected	3	None	replace
124	[BUG]  [BUGGY]  return  newExpr.removeFirstChild(),  expr.removeLastChild();  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr.removeFirstChild(),  expr.removeLastChild();  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr.removeFirstChild(),  expr.removeLastChild();	  return    newExpr.removeFirstChild();    	non-compiled	[CE]  ')'  expected	3	None	replace
125	[BUG]  [BUGGY]  return  newExpr  ==  expr.getFirstChild()?  Node.newString(Token.NAME,  expr.getFirstChild()):  Node.newString(Token.NAME,  newExpr.getLastChild()));  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  expr.getFirstChild()?  Node.newString(Token.NAME,  expr.getFirstChild()):  Node.newString(Token.NAME,  newExpr.getLastChild()));  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  expr.getFirstChild()?  Node.newString(Token.NAME,  expr.getFirstChild()):  Node.newString(Token.NAME,  newExpr.getLastChild()));	  return    newExpr    ==    parent.getFirstChild()?    Node.newString(Token.NAME,    expr.getLastChild()):    Node.newString(Token.NAME,    newExpr.getLastChild()));    	non-compiled	[CE]  ')'  expected	13	None	replace
126	[BUG]  [BUGGY]  return  newExpr  ==  expr.getFirstChild()?  Node.newString(Token.NAME,  expr.getFirstChild()):  Node.newString(Token.NAME,  newExpr.getFirstChild()));  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  expr.getFirstChild()?  Node.newString(Token.NAME,  expr.getFirstChild()):  Node.newString(Token.NAME,  newExpr.getFirstChild()));  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  expr.getFirstChild()?  Node.newString(Token.NAME,  expr.getFirstChild()):  Node.newString(Token.NAME,  newExpr.getFirstChild()));	  return    newExpr    ==    parent.getFirstChild()?    Node.newString(Token.NAME,    expr.getLastChild()):    Node.newString(Token.NAME,    newExpr.getLastChild()));    	non-compiled	[CE]  ')'  expected	13	None	replace
127	[BUG]  [BUGGY]  return  newExpr  ==  expr.getFirstChild()?  Node.newString(Token.NAME,  expr.getLastChild()):  Node.newString(Token.NAME,  newExpr.getFirstChild()));  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  expr.getFirstChild()?  Node.newString(Token.NAME,  expr.getLastChild()):  Node.newString(Token.NAME,  newExpr.getFirstChild()));  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  expr.getFirstChild()?  Node.newString(Token.NAME,  expr.getLastChild()):  Node.newString(Token.NAME,  newExpr.getFirstChild()));	  return    newExpr    ==    parent.getFirstChild()?    Node.newString(Token.NAME,    expr.getLastChild()):    Node.newString(Token.NAME,    newExpr.getLastChild()));    	non-compiled	[CE]  ')'  expected	13	None	replace
128	[BUG]  [BUGGY]  return  expr  ==  parent.getFirstChild()?  Node.newString(Token.NAME,  newExpr.getLastChild()):  Node.newString(Token.NAME,  newExpr.getLastChild()));  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  expr  ==  parent.getFirstChild()?  Node.newString(Token.NAME,  newExpr.getLastChild()):  Node.newString(Token.NAME,  newExpr.getLastChild()));  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  expr  ==  parent.getFirstChild()?  Node.newString(Token.NAME,  newExpr.getLastChild()):  Node.newString(Token.NAME,  newExpr.getLastChild()));	  return    newExpr    ==    parent.getFirstChild()?    Node.newString(Token.NAME,    expr.getLastChild()):    Node.newString(Token.NAME,    newExpr.getLastChild()));    	non-compiled	[CE]  ')'  expected	13	None	replace
129	[BUG]  [BUGGY]  return  newExpr  ==  expr?  newExpr  :  expr;  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  expr?  newExpr  :  expr;  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  expr?  newExpr  :  expr;	  return    newExpr!=    null?    newExpr    :    expr;    	non-compiled	[CE]  ')'  expected	16	None	replace
130	[BUG]  [BUGGY]  return  expr  ==  parent?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  name2);  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  expr  ==  parent?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  name2);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  expr  ==  parent?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  name2);	  return    newExpr    ==    expr?    Node.newString(Token.NAME,    name1):    Node.newString(Token.NAME,    name2);    	non-compiled	[CE]  ')'  expected	14	None	replace
131	[BUG]  [BUGGY]  return  newExpr  ==  expr?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  parent);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  expr?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  parent);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  expr?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  parent);	  return    newExpr    ==    expr?    Node.newString(Token.NAME,    name1):    Node.newString(Token.NAME,    name2);    	non-compiled	[CE]  ')'  expected	14	None	replace
132	[BUG]  [BUGGY]  return  newExpr  ==  expr.getFirstChild()?  Node.newString(Token.NAME,  expr.getFirstChild()):  Node.newString(Token.NAME,  newExpr.getLastChild());  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  expr.getFirstChild()?  Node.newString(Token.NAME,  expr.getFirstChild()):  Node.newString(Token.NAME,  newExpr.getLastChild());  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  expr.getFirstChild()?  Node.newString(Token.NAME,  expr.getFirstChild()):  Node.newString(Token.NAME,  newExpr.getLastChild());	  return    newExpr    ==    parent.getFirstChild()?    Node.newString(Token.NAME,    expr.getLastChild()):    Node.newString(Token.NAME,    newExpr.getLastChild());    	non-compiled	[CE]  ')'  expected	10	None	replace
133	[BUG]  [BUGGY]  return  newExpr  ==  expr.getFirstChild()?  Node.newString(Token.NAME,  expr.getFirstChild()):  Node.newString(Token.NAME,  newExpr.getFirstChild());  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  expr.getFirstChild()?  Node.newString(Token.NAME,  expr.getFirstChild()):  Node.newString(Token.NAME,  newExpr.getFirstChild());  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  expr.getFirstChild()?  Node.newString(Token.NAME,  expr.getFirstChild()):  Node.newString(Token.NAME,  newExpr.getFirstChild());	  return    newExpr    ==    parent.getFirstChild()?    Node.newString(Token.NAME,    expr.getLastChild()):    Node.newString(Token.NAME,    newExpr.getLastChild());    	non-compiled	[CE]  ')'  expected	10	None	replace
134	[BUG]  [BUGGY]  return  newExpr  ==  expr.getFirstChild()?  Node.newString(Token.NAME,  expr.getLastChild()):  Node.newString(Token.NAME,  newExpr);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  expr.getFirstChild()?  Node.newString(Token.NAME,  expr.getLastChild()):  Node.newString(Token.NAME,  newExpr);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  expr.getFirstChild()?  Node.newString(Token.NAME,  expr.getLastChild()):  Node.newString(Token.NAME,  newExpr);	  return    newExpr    ==    parent.getFirstChild()?    Node.newString(Token.NAME,    expr.getLastChild()):    Node.newString(Token.NAME,    newExpr.getLastChild());    	non-compiled	[CE]  ')'  expected	10	None	replace
135	[BUG]  [BUGGY]  return  newExpr  ==  expr.getFirstChild()?  Node.newString(Token.NAME,  expr.getLastChild()):  Node.newString(Token.NAME,  newExpr.getFirstChild());  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  expr.getFirstChild()?  Node.newString(Token.NAME,  expr.getLastChild()):  Node.newString(Token.NAME,  newExpr.getFirstChild());  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  expr.getFirstChild()?  Node.newString(Token.NAME,  expr.getLastChild()):  Node.newString(Token.NAME,  newExpr.getFirstChild());	  return    newExpr    ==    parent.getFirstChild()?    Node.newString(Token.NAME,    expr.getLastChild()):    Node.newString(Token.NAME,    newExpr.getLastChild());    	non-compiled	[CE]  ')'  expected	10	None	replace
136	[BUG]  [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  expr,  expr.removeFirstChild()));  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  expr,  expr.removeFirstChild()));  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr!=  null?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  expr,  expr.removeFirstChild()));	  return    newExpr    ==    null?    Node.newString(Token.NAME,    name1):    Node.newString(Token.NAME,    cond,    expr.removeFirstChild()));    	non-compiled	[CE]  ')'  expected	9	None	replace
137	[BUG]  [BUGGY]  n.removeChild(cond);  newExpr  =  NodeUtil.newExpr(newExpr);  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  n.removeChild(cond);  newExpr  =  NodeUtil.newExpr(newExpr);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	n.removeChild(cond);  newExpr  =  NodeUtil.newExpr(newExpr);	      	non-compiled	[CE]  ')'  expected	7	None	replace
138	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  newExpr);  n.removeChild(cond);  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  NodeUtil.removeChild(parent,  newExpr);  n.removeChild(cond);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	NodeUtil.removeChild(parent,  newExpr);  n.removeChild(cond);	      	non-compiled	[CE]  ')'  expected	7	None	replace
139	[BUG]  [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  name2):  newExpr.cloneTree();  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  name2):  newExpr.cloneTree();  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr!=  null?  Node.newString(Token.NAME,  name2):  newExpr.cloneTree();	  return    newExpr.cloneTree();    	non-compiled	[CE]  ')'  expected	1	None	replace
140	[BUG]  [BUGGY]  return  newExpr!=  null?  newExpr  :  newExpr.cloneTree();  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr!=  null?  newExpr  :  newExpr.cloneTree();  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr!=  null?  newExpr  :  newExpr.cloneTree();	  return    newExpr.cloneTree();    	non-compiled	[CE]  ')'  expected	1	None	replace
141	[BUG]  [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  name1):  expr.cloneTree();  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  name1):  expr.cloneTree();  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr!=  null?  Node.newString(Token.NAME,  name1):  expr.cloneTree();	  return    newExpr.cloneTree();    	non-compiled	[CE]  ')'  expected	1	None	replace
142	[BUG]  [BUGGY]  return  newExpr  ==  null?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  expr,  expr.removeFirstChild()));  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  null?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  expr,  expr.removeFirstChild()));  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  null?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  expr,  expr.removeFirstChild()));	  return    newExpr!=    null?    Node.newString(Token.NAME,    name1):    Node.newString(Token.NAME,    cond,    expr.removeFirstChild()));    	non-compiled	[CE]  ')'  expected	8	None	replace
143	[BUG]  [BUGGY]  return  newExpr  ==  null?  Node.newString(Token.NAME,  cond):  newExpr;  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  null?  Node.newString(Token.NAME,  cond):  newExpr;  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  null?  Node.newString(Token.NAME,  cond):  newExpr;	  return    newExpr.node;    	non-compiled	[CE]  ')'  expected	6	None	replace
144	[BUG]  [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  name1):  newExpr;  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  name1):  newExpr;  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr!=  null?  Node.newString(Token.NAME,  name1):  newExpr;	  return    newExpr.node;    	non-compiled	[CE]  ')'  expected	6	None	replace
145	[BUG]  [BUGGY]  return  newExpr!=  null?  newExpr  :  newExpr.node;  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr!=  null?  newExpr  :  newExpr.node;  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr!=  null?  newExpr  :  newExpr.node;	  return    newExpr.node;    	non-compiled	[CE]  ')'  expected	6	None	replace
146	[BUG]  [BUGGY]  return  newExpr  ==  null?  Node.newString(Token.NAME,  name1):  newExpr;  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr  ==  null?  Node.newString(Token.NAME,  name1):  newExpr;  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr  ==  null?  Node.newString(Token.NAME,  name1):  newExpr;	  return    newExpr.node;    	non-compiled	[CE]  ')'  expected	6	None	replace
147	[BUG]  [BUGGY]  return  newExpr!=  null?  newExpr  :  newExpr;  [CE]  ')'  expected  [FE]                          AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr!=  null?  newExpr  :  newExpr;  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr!=  null?  newExpr  :  newExpr;	  return    newExpr.node;    	non-compiled	[CE]  ')'  expected	6	None	replace
148	[BUG]  [BUGGY]  return  expr  ==  parent?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  name2);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  expr  ==  parent?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  name2);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  expr  ==  parent?  Node.newString(Token.NAME,  name2):  Node.newString(Token.NAME,  name2);	  return    newExpr    ==    expr?    Node.newString(Token.NAME,    name2):    Node.newString(Token.NAME,    name2);    	non-compiled	[CE]  ')'  expected	19	None	replace
149	[BUG]  [BUGGY]  return  newExpr!=  expr?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  name2);  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr!=  expr?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  name2);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr!=  expr?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  name2);	  return    newExpr    ==    expr?    Node.newString(Token.NAME,    name2):    Node.newString(Token.NAME,    name2);    	non-compiled	[CE]  ')'  expected	19	None	replace
150	[BUG]  [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  expr.removeFirstChild()));  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  return  newExpr!=  null?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  expr.removeFirstChild()));  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	return  newExpr!=  null?  Node.newString(Token.NAME,  name1):  Node.newString(Token.NAME,  expr.removeFirstChild()));	  return    newExpr!=    null?    Node.newString(Token.NAME,    name1):    Node.newString(Token.NAME,    expr.getFirstChild()));    	non-compiled	[CE]  ')'  expected	12	None	replace
151	[BUG]  [BUGGY]  n.replaceChild(cond,  newExpr);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  n.replaceChild(cond,  newExpr);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	n.replaceChild(cond,  newExpr);	  n.removeChild(expr);    	non-compiled	[CE]  ')'  expected	4	None	replace
152	[BUG]  [BUGGY]  n.addChildToFront(cond);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  n.addChildToFront(cond);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	n.addChildToFront(cond);	  n.removeChild(expr);    	non-compiled	[CE]  ')'  expected	4	None	replace
153	[BUG]  [BUGGY]  n.addChildToFront(newExpr);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();    [BUGGY]  n.addChildToFront(newExpr);  [BUGGY]    }  return  n;  }    tryRemoveRepeatedStatements(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	316	316	1	replace	n.addChildToFront(newExpr);	  n.removeChild(expr);    	non-compiled	[CE]  ')'  expected	4	None	replace
