bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  parent  =(n.getParent()  instanceof  ImmutableSet)?((  ImmutableSet)node).getNext()  :  n;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getParent()  instanceof  ImmutableSet)?((  ImmutableSet)node).getNext()  :  n;  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getParent()  instanceof  ImmutableSet)?((  ImmutableSet)node).getNext()  :  n;	  Node    parent    =(n.getParent()    instanceof    ImmutableSet)?((    ImmutableSet)node).getParent()    :    node;    	non-compiled	[CE]  	24	None	replace
2	[BUG]  [BUGGY]  Node  parent  =(n.getParent()  instanceof  ImmutableSet)?((  ImmutableSet)node).getNext()  :  node;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getParent()  instanceof  ImmutableSet)?((  ImmutableSet)node).getNext()  :  node;  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getParent()  instanceof  ImmutableSet)?((  ImmutableSet)node).getNext()  :  node;	  Node    parent    =(n.getParent()    instanceof    ImmutableSet)?((    ImmutableSet)node).getParent()    :    node;    	non-compiled	[CE]  	24	None	replace
3	[BUG]  [BUGGY]  Node  parent  =(n.getFirstChild()  instanceof  ImmutableSet)?((  ImmutableSet)node).getParent()  :  node;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getFirstChild()  instanceof  ImmutableSet)?((  ImmutableSet)node).getParent()  :  node;  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getFirstChild()  instanceof  ImmutableSet)?((  ImmutableSet)node).getParent()  :  node;	  Node    parent    =(n.getParent()    instanceof    ImmutableSet)?((    ImmutableSet)node).getParent()    :    node;    	non-compiled	[CE]  	24	None	replace
4	[BUG]  [BUGGY]  Node  parent  =  this.node.getLastChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =  this.node.getLastChild();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =  this.node.getLastChild();	  Node    parent    =    this.node.getParent();    	non-compiled	[CE]  	15	None	replace
5	[BUG]  [BUGGY]  Node  n  =  this.node.getParent();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  n  =  this.node.getParent();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  n  =  this.node.getParent();	  Node    parent    =    this.node.getParent();    	non-compiled	[CE]  	15	None	replace
6	[BUG]  [BUGGY]  Node  parent  =  this.node.getNext();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =  this.node.getNext();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =  this.node.getNext();	  Node    parent    =    this.node.getParent();    	non-compiled	[CE]  	15	None	replace
7	[BUG]  [BUGGY]  Node  n  =  n.getNext();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  n  =  n.getNext();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  n  =  n.getNext();	  Node    n    =    n.getFirstChild();    	non-compiled	[CE]  	8	None	replace
8	[BUG]  [BUGGY]  Node  n  =  n.getParent();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  n  =  n.getParent();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  n  =  n.getParent();	  Node    n    =    n.getFirstChild();    	non-compiled	[CE]  	8	None	replace
9	[BUG]  [BUGGY]  Node  n  =  n.removeFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  n  =  n.removeFirstChild();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  n  =  n.removeFirstChild();	  Node    n    =    n.getFirstChild();    	non-compiled	[CE]  	8	None	replace
10	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  n  =  parent.getFirstChild();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  n  =  parent.getFirstChild();	  Node    n    =    n.getFirstChild();    	non-compiled	[CE]  	8	None	replace
11	[BUG]  [BUGGY]  Node  n  =  n.getOwnerChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  n  =  n.getOwnerChild();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  n  =  n.getOwnerChild();	  Node    n    =    n.getFirstChild();    	non-compiled	[CE]  	8	None	replace
12	[BUG]  [BUGGY]  Node  parent  =(n.getNext()  ==  null)?  node  :  n.getNext();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getNext()  ==  null)?  node  :  n.getNext();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getNext()  ==  null)?  node  :  n.getNext();	  Node    parent    =(n.getParent()    ==    null)?    node    :    n.getParent();    	non-compiled	[CE]  	22	None	replace
13	[BUG]  [BUGGY]  Node  parent  =(n.getParent()  ==  null)?  node  :  n.getNext();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getParent()  ==  null)?  node  :  n.getNext();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getParent()  ==  null)?  node  :  n.getNext();	  Node    parent    =(n.getParent()    ==    null)?    node    :    n.getParent();    	non-compiled	[CE]  	22	None	replace
14	[BUG]  [BUGGY]  Node  parent  =(n.getFirstChild()  ==  null)?  node  :  n.getParent();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getFirstChild()  ==  null)?  node  :  n.getParent();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getFirstChild()  ==  null)?  node  :  n.getParent();	  Node    parent    =(n.getParent()    ==    null)?    node    :    n.getParent();    	non-compiled	[CE]  	22	None	replace
15	[BUG]  [BUGGY]  Node  parent  =(n.getParent()  ==  null)?  n  :  n.getParent();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getParent()  ==  null)?  n  :  n.getParent();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getParent()  ==  null)?  n  :  n.getParent();	  Node    parent    =(n.getParent()    ==    null)?    node    :    n.getParent();    	non-compiled	[CE]  	22	None	replace
16	[BUG]  [BUGGY]  Node  parent  =(n.getParent()  ==  null)?  parent  :  n.getParent();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getParent()  ==  null)?  parent  :  n.getParent();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getParent()  ==  null)?  parent  :  n.getParent();	  Node    parent    =(n.getParent()    ==    null)?    node    :    n.getParent();    	non-compiled	[CE]  	22	None	replace
17	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	3	None	replace
18	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString());  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString());	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	3	None	replace
19	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	3	None	replace
20	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount());  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount());	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	3	None	replace
21	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	3	None	replace
22	[BUG]  [BUGGY]  Node  parent  =(n.getParent()  ==  null)?  n.getParent()  :  n;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getParent()  ==  null)?  n.getParent()  :  n;  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getParent()  ==  null)?  n.getParent()  :  n;	  Node    parent    =(n.getParent()!=    null)?    n.getParent()    :    n;    	non-compiled	[CE]  	33	None	replace
23	[BUG]  [BUGGY]  Node  parent  =(n.getNext()!=  null)?  n.getNext()  :  n;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getNext()!=  null)?  n.getNext()  :  n;  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getNext()!=  null)?  n.getNext()  :  n;	  Node    parent    =(n.getParent()!=    null)?    n.getParent()    :    n;    	non-compiled	[CE]  	33	None	replace
24	[BUG]  [BUGGY]  Node  parent  =(n.getParent()  ==  null)?  n.getNext()  :  n;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getParent()  ==  null)?  n.getNext()  :  n;  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getParent()  ==  null)?  n.getNext()  :  n;	  Node    parent    =(n.getParent()!=    null)?    n.getParent()    :    n;    	non-compiled	[CE]  	33	None	replace
25	[BUG]  [BUGGY]  Node  parent  =(n.getParent()!=  null)?  n.getNext()  :  n;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getParent()!=  null)?  n.getNext()  :  n;  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getParent()!=  null)?  n.getNext()  :  n;	  Node    parent    =(n.getParent()!=    null)?    n.getParent()    :    n;    	non-compiled	[CE]  	33	None	replace
26	[BUG]  [BUGGY]  Node  parent  =(n.getFirstChild()!=  null)?  n.getParent()  :  n;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getFirstChild()!=  null)?  n.getParent()  :  n;  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getFirstChild()!=  null)?  n.getParent()  :  n;	  Node    parent    =(n.getParent()!=    null)?    n.getParent()    :    n;    	non-compiled	[CE]  	33	None	replace
27	[BUG]  [BUGGY]  Node  parent  =(n.getFirstChild()!=  null)?  n.getNext()  :  n;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getFirstChild()!=  null)?  n.getNext()  :  n;  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getFirstChild()!=  null)?  n.getNext()  :  n;	  Node    parent    =(n.getParent()!=    null)?    n.getParent()    :    n;    	non-compiled	[CE]  	33	None	replace
28	[BUG]  [BUGGY]  Node  parent  =  n.getImmutableChildren();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =  n.getImmutableChildren();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =  n.getImmutableChildren();	  Node    parent    =    n.getImmutableSet();    	non-compiled	[CE]  	9	None	replace
29	[BUG]  [BUGGY]  Node  parent  =  n.getImmutableState();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =  n.getImmutableState();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =  n.getImmutableState();	  Node    parent    =    n.getImmutableSet();    	non-compiled	[CE]  	9	None	replace
30	[BUG]  [BUGGY]  Node  parent  =  n.getImmutableParent();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =  n.getImmutableParent();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =  n.getImmutableParent();	  Node    parent    =    n.getImmutableSet();    	non-compiled	[CE]  	9	None	replace
31	[BUG]  [BUGGY]  Node  parent  =  n.removeChild(n.getLastChild());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =  n.removeChild(n.getLastChild());  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =  n.removeChild(n.getLastChild());	  Node    parent    =    n.removeParent();    	non-compiled	[CE]  	35	None	replace
32	[BUG]  [BUGGY]  Node  parent  =  n.removeChild(n.getFirstChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =  n.removeChild(n.getFirstChild());  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =  n.removeChild(n.getFirstChild());	  Node    parent    =    n.removeParent();    	non-compiled	[CE]  	35	None	replace
33	[BUG]  [BUGGY]  Node  parent  =  node.removeFirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =  node.removeFirstChild();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =  node.removeFirstChild();	  Node    parent    =    n.removeLastChild();    	non-compiled	[CE]  	10	None	replace
34	[BUG]  [BUGGY]  Node  parent  =  n.getPreviousSibling();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =  n.getPreviousSibling();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =  n.getPreviousSibling();	  Node    parent    =    n.removeLastChild();    	non-compiled	[CE]  	10	None	replace
35	[BUG]  [BUGGY]  Node  parent  =(n.getParent()  instanceof  ImmutableSet)?((  ImmutableSet)node).getNext()  :  null;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getParent()  instanceof  ImmutableSet)?((  ImmutableSet)node).getNext()  :  null;  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getParent()  instanceof  ImmutableSet)?((  ImmutableSet)node).getNext()  :  null;	  Node    parent    =(n.getParent()    instanceof    ImmutableSet)?((    ImmutableSet)node).getParent()    :    null;    	non-compiled	[CE]  	25	None	replace
36	[BUG]  [BUGGY]  Node  parent  =(n.getNext()  instanceof  ImmutableSet)?((  ImmutableSet)node).getParent()  :  null;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getNext()  instanceof  ImmutableSet)?((  ImmutableSet)node).getParent()  :  null;  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getNext()  instanceof  ImmutableSet)?((  ImmutableSet)node).getParent()  :  null;	  Node    parent    =(n.getParent()    instanceof    ImmutableSet)?((    ImmutableSet)node).getParent()    :    null;    	non-compiled	[CE]  	25	None	replace
37	[BUG]  [BUGGY]  Node  parent  =(n.getFirstChild()  instanceof  ImmutableSet)?((  ImmutableSet)node).getParent()  :  null;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getFirstChild()  instanceof  ImmutableSet)?((  ImmutableSet)node).getParent()  :  null;  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getFirstChild()  instanceof  ImmutableSet)?((  ImmutableSet)node).getParent()  :  null;	  Node    parent    =(n.getParent()    instanceof    ImmutableSet)?((    ImmutableSet)node).getParent()    :    null;    	non-compiled	[CE]  	25	None	replace
38	[BUG]  [BUGGY]  Node  parent  =(n.getLastChild()  instanceof  ImmutableSet)?((  ImmutableSet)node).getParent()  :  null;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getLastChild()  instanceof  ImmutableSet)?((  ImmutableSet)node).getParent()  :  null;  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getLastChild()  instanceof  ImmutableSet)?((  ImmutableSet)node).getParent()  :  null;	  Node    parent    =(n.getParent()    instanceof    ImmutableSet)?((    ImmutableSet)node).getParent()    :    null;    	non-compiled	[CE]  	25	None	replace
39	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  n.getFirstChild());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  n.getFirstChild());  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  n.getFirstChild());	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	7	None	replace
40	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  n.getString());  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  n.getString());  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  n.getString());	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	7	None	replace
41	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  n.getChildCount());  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  n.getChildCount());  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  n.getChildCount());	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	7	None	replace
42	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	7	None	replace
43	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkArgument(n.getType()!=  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	7	None	replace
44	[BUG]  [BUGGY]  Node  parent  =  n.getOwnerParent();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =  n.getOwnerParent();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =  n.getOwnerParent();	  Node    parent    =    n.getOwnerNode();    	non-compiled	[CE]  	11	None	replace
45	[BUG]  [BUGGY]  Node  parent  =(n.getNext()!=  null)?  node  :  n.getNext();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getNext()!=  null)?  node  :  n.getNext();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getNext()!=  null)?  node  :  n.getNext();	  Node    parent    =(n.getParent()!=    null)?    node    :    n.getParent();    	non-compiled	[CE]  	23	None	replace
46	[BUG]  [BUGGY]  Node  parent  =(n.getFirstChild()!=  null)?  node  :  n.getParent();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getFirstChild()!=  null)?  node  :  n.getParent();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getFirstChild()!=  null)?  node  :  n.getParent();	  Node    parent    =(n.getParent()!=    null)?    node    :    n.getParent();    	non-compiled	[CE]  	23	None	replace
47	[BUG]  [BUGGY]  Node  parent  =(n.getParent()!=  null)?  node  :  n.getNext();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getParent()!=  null)?  node  :  n.getNext();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getParent()!=  null)?  node  :  n.getNext();	  Node    parent    =(n.getParent()!=    null)?    node    :    n.getParent();    	non-compiled	[CE]  	23	None	replace
48	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	37	None	replace
49	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	37	None	replace
50	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.VAR);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkArgument(n.getType()!=  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	37	None	replace
51	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getFirstChild().getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	37	None	replace
52	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	37	None	replace
53	[BUG]  [BUGGY]  Node  n  =  node.getLastChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  n  =  node.getLastChild();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  n  =  node.getLastChild();	  Node    n    =    node.getParent();    	non-compiled	[CE]  	16	None	replace
54	[BUG]  [BUGGY]  Node  n  =  parent.getParent();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  n  =  parent.getParent();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  n  =  parent.getParent();	  Node    n    =    node.getParent();    	non-compiled	[CE]  	16	None	replace
55	[BUG]  [BUGGY]  Node  n  =  node.getNext();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  n  =  node.getNext();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  n  =  node.getNext();	  Node    n    =    node.getParent();    	non-compiled	[CE]  	16	None	replace
56	[BUG]  [BUGGY]  Node  parent  =  n.getPreviousStructure();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =  n.getPreviousStructure();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =  n.getPreviousStructure();	  Node    parent    =    n.getParentStructure();    	non-compiled	[CE]  	28	None	replace
57	[BUG]  [BUGGY]  Node  parent  =  n.getOwnerStructure();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =  n.getOwnerStructure();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =  n.getOwnerStructure();	  Node    parent    =    n.getParentStructure();    	non-compiled	[CE]  	28	None	replace
58	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	4	None	replace
59	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EMPTY);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EMPTY);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkState(n.getType()  ==  Token.EMPTY);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	4	None	replace
60	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  n.getFirstChild());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  n.getFirstChild());  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	4	None	replace
61	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	4	None	replace
62	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	4	None	replace
63	[BUG]  [BUGGY]  Node  parent  =  n.getImmediateParent();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =  n.getImmediateParent();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =  n.getImmediateParent();	  Node    parent    =    n.getImmediateParentNode();    	non-compiled	[CE]  	21	None	replace
64	[BUG]  [BUGGY]  Node  parent  =  n.getAssignedParentNode();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =  n.getAssignedParentNode();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =  n.getAssignedParentNode();	  Node    parent    =    n.getImmediateParentNode();    	non-compiled	[CE]  	21	None	replace
65	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	5	None	replace
66	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	5	None	replace
67	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	5	None	replace
68	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	5	None	replace
69	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	36	None	replace
70	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	36	None	replace
71	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EMPTY);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EMPTY);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EMPTY);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	36	None	replace
72	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	36	None	replace
73	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT,  n.getString());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT,  n.getString());  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT,  n.getString());	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	36	None	replace
74	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	NodeTraversal.traverse(compiler,  n,  this);	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    	non-compiled	[CE]  	20	None	replace
75	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  REGEXP_FLAGS_RE);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  REGEXP_FLAGS_RE);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  REGEXP_FLAGS_RE);	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    	non-compiled	[CE]  	20	None	replace
76	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    	non-compiled	[CE]  	20	None	replace
77	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  STANDARD_OBJECT_CONSTRUCTORS);	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    	non-compiled	[CE]  	20	None	replace
78	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  this);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  this);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  this);	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    	non-compiled	[CE]  	20	None	replace
79	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  false);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  false);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  false);	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    	non-compiled	[CE]  	20	None	replace
80	[BUG]  [BUGGY]  Node  parent  =(n.getParent()  ==  null)?  node.getParent()  :  n;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getParent()  ==  null)?  node.getParent()  :  n;  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getParent()  ==  null)?  node.getParent()  :  n;	  Node    parent    =(n.getParent()!=    null)?    node.getParent()    :    n;    	non-compiled	[CE]  	32	None	replace
81	[BUG]  [BUGGY]  Node  parent  =(n.getParent()  ==  null)?  node.getNext()  :  n;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getParent()  ==  null)?  node.getNext()  :  n;  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getParent()  ==  null)?  node.getNext()  :  n;	  Node    parent    =(n.getParent()!=    null)?    node.getParent()    :    n;    	non-compiled	[CE]  	32	None	replace
82	[BUG]  [BUGGY]  Node  parent  =(n.getNext()!=  null)?  node.getNext()  :  n;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getNext()!=  null)?  node.getNext()  :  n;  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getNext()!=  null)?  node.getNext()  :  n;	  Node    parent    =(n.getParent()!=    null)?    node.getParent()    :    n;    	non-compiled	[CE]  	32	None	replace
83	[BUG]  [BUGGY]  Node  parent  =(n.getParent()!=  null)?  node.getNext()  :  n;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getParent()!=  null)?  node.getNext()  :  n;  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getParent()!=  null)?  node.getNext()  :  n;	  Node    parent    =(n.getParent()!=    null)?    node.getParent()    :    n;    	non-compiled	[CE]  	32	None	replace
84	[BUG]  [BUGGY]  Node  parent  =(n.getNext()  instanceof  ImmutableSet)?((  ImmutableSet)node).getParent()  :  n;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getNext()  instanceof  ImmutableSet)?((  ImmutableSet)node).getParent()  :  n;  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getNext()  instanceof  ImmutableSet)?((  ImmutableSet)node).getParent()  :  n;	  Node    parent    =(n.getParent()    instanceof    ImmutableSet)?((    ImmutableSet)node).getParent()    :    n;    	non-compiled	[CE]  	26	None	replace
85	[BUG]  [BUGGY]  Node  parent  =(n.getFirstChild()  instanceof  ImmutableSet)?((  ImmutableSet)node).getParent()  :  n;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getFirstChild()  instanceof  ImmutableSet)?((  ImmutableSet)node).getParent()  :  n;  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getFirstChild()  instanceof  ImmutableSet)?((  ImmutableSet)node).getParent()  :  n;	  Node    parent    =(n.getParent()    instanceof    ImmutableSet)?((    ImmutableSet)node).getParent()    :    n;    	non-compiled	[CE]  	26	None	replace
86	[BUG]  [BUGGY]  Node  parent  =(n.getNext()  ==  null)?  null  :  n.getNext();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getNext()  ==  null)?  null  :  n.getNext();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getNext()  ==  null)?  null  :  n.getNext();	  Node    parent    =(n.getParent()    ==    null)?    null    :    n.getParent();    	non-compiled	[CE]  	31	None	replace
87	[BUG]  [BUGGY]  Node  parent  =(n.getParent()!=  null)?  null  :  n.getParent();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getParent()!=  null)?  null  :  n.getParent();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getParent()!=  null)?  null  :  n.getParent();	  Node    parent    =(n.getParent()    ==    null)?    null    :    n.getParent();    	non-compiled	[CE]  	31	None	replace
88	[BUG]  [BUGGY]  Node  parent  =(n.getFirstChild()  ==  null)?  null  :  n.getParent();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getFirstChild()  ==  null)?  null  :  n.getParent();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getFirstChild()  ==  null)?  null  :  n.getParent();	  Node    parent    =(n.getParent()    ==    null)?    null    :    n.getParent();    	non-compiled	[CE]  	31	None	replace
89	[BUG]  [BUGGY]  Node  parent  =(n.getParent()  ==  null)?  null  :  n.getNext();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getParent()  ==  null)?  null  :  n.getNext();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getParent()  ==  null)?  null  :  n.getNext();	  Node    parent    =(n.getParent()    ==    null)?    null    :    n.getParent();    	non-compiled	[CE]  	31	None	replace
90	[BUG]  [BUGGY]  Node  parent  =(n.getLastChild()  ==  null)?  null  :  n.getParent();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getLastChild()  ==  null)?  null  :  n.getParent();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getLastChild()  ==  null)?  null  :  n.getParent();	  Node    parent    =(n.getParent()    ==    null)?    null    :    n.getParent();    	non-compiled	[CE]  	31	None	replace
91	[BUG]  [BUGGY]  Node  parent  =(n.getType()  ==  Token.FUNCTION)?  null  :  n.getParent();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getType()  ==  Token.FUNCTION)?  null  :  n.getParent();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getType()  ==  Token.FUNCTION)?  null  :  n.getParent();	  Node    parent    =(n.getParent()    ==    null)?    null    :    n.getParent();    	non-compiled	[CE]  	31	None	replace
92	[BUG]  [BUGGY]  Node  assign  =  n.getNext();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  assign  =  n.getNext();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  assign  =  n.getNext();	  Node    assign    =    n.getFirstChild();    	non-compiled	[CE]  	1	None	replace
93	[BUG]  [BUGGY]  Node  assign  =  n.getAssignedValue();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  assign  =  n.getAssignedValue();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  assign  =  n.getAssignedValue();	  Node    assign    =    n.getFirstChild();    	non-compiled	[CE]  	1	None	replace
94	[BUG]  [BUGGY]  Node  assign  =  n.getAssignedChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  assign  =  n.getAssignedChild();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  assign  =  n.getAssignedChild();	  Node    assign    =    n.getFirstChild();    	non-compiled	[CE]  	1	None	replace
95	[BUG]  [BUGGY]  Node  assign  =  n.getParent();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  assign  =  n.getParent();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  assign  =  n.getParent();	  Node    assign    =    n.getFirstChild();    	non-compiled	[CE]  	1	None	replace
96	[BUG]  [BUGGY]  Node  assign  =  n.removeFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  assign  =  n.removeFirstChild();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  assign  =  n.removeFirstChild();	  Node    assign    =    n.getFirstChild();    	non-compiled	[CE]  	1	None	replace
97	[BUG]  [BUGGY]  Node  assign  =  node.getFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  assign  =  node.getFirstChild();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  assign  =  node.getFirstChild();	  Node    assign    =    n.getLastChild();    	non-compiled	[CE]  	2	None	replace
98	[BUG]  [BUGGY]  Node  assign  =  parent.getFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  assign  =  parent.getFirstChild();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  assign  =  parent.getFirstChild();	  Node    assign    =    n.getLastChild();    	non-compiled	[CE]  	2	None	replace
99	[BUG]  [BUGGY]  Node  n  =  node.getFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  n  =  node.getFirstChild();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  n  =  node.getFirstChild();	  Node    n    =    n.getLastChild();    	non-compiled	[CE]  	13	None	replace
100	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.REGEXP,  n.getFirstChild());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.REGEXP,  n.getFirstChild());  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkState(n.getType()  ==  Token.REGEXP,  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  	6	None	replace
101	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkState(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  	6	None	replace
102	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.REGEXP);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.REGEXP);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkState(n.getType()!=  Token.REGEXP);	  Preconditions.checkState(n.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  	6	None	replace
103	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.NAME);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.NAME);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkState(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  	6	None	replace
104	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.GETPROP);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkState(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  	6	None	replace
105	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.REGEXP,  n.getChildCount());  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.REGEXP,  n.getChildCount());  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkState(n.getType()  ==  Token.REGEXP,  n.getChildCount());	  Preconditions.checkState(n.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  	6	None	replace
106	[BUG]  [BUGGY]  Node  parent  =  n.getSibling();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =  n.getSibling();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =  n.getSibling();	  Node    parent    =    n.getOwnerSibling();    	non-compiled	[CE]  	29	None	replace
107	[BUG]  [BUGGY]  Node  parent  =(n  ==  null)?  null  :  n.getParent();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n  ==  null)?  null  :  n.getParent();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n  ==  null)?  null  :  n.getParent();	  Node    parent    =(n.getParent()    ==    null)?    null    :    n.getParent();    	non-compiled	[CE]  	31	None	replace
108	[BUG]  [BUGGY]  Node  parent  =  n.getNextSibling();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =  n.getNextSibling();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =  n.getNextSibling();	  Node    parent    =    n.getParentSibling();    	non-compiled	[CE]  	27	None	replace
109	[BUG]  [BUGGY]  Node  parent  =(n.getParent()  instanceof  ImmutableSet)?((  ImmutableSet)node).getNameNode()  :  n;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getParent()  instanceof  ImmutableSet)?((  ImmutableSet)node).getNameNode()  :  n;  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getParent()  instanceof  ImmutableSet)?((  ImmutableSet)node).getNameNode()  :  n;	  Node    parent    =(n.getParent()    instanceof    ImmutableSet)?((    ImmutableSet)node).getParent()    :    n;    	non-compiled	[CE]  	26	None	replace
110	[BUG]  [BUGGY]  Node  parent  =(n.getParent()  instanceof  ImmutableSet)?((  ImmutableSet)node).getNameNode()  :  node;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getParent()  instanceof  ImmutableSet)?((  ImmutableSet)node).getNameNode()  :  node;  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getParent()  instanceof  ImmutableSet)?((  ImmutableSet)node).getNameNode()  :  node;	  Node    parent    =(n.getParent()    instanceof    ImmutableSet)?((    ImmutableSet)node).getParent()    :    node;    	non-compiled	[CE]  	24	None	replace
111	[BUG]  [BUGGY]  Node  parent  =(n.getParent()  ==  null)?  node  :  n.getFirstChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getParent()  ==  null)?  node  :  n.getFirstChild();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getParent()  ==  null)?  node  :  n.getFirstChild();	  Node    parent    =(n.getParent()    ==    null)?    node    :    n.getParent();    	non-compiled	[CE]  	22	None	replace
112	[BUG]  [BUGGY]  Node  parent  =(n.getParent()  instanceof  ImmutableSet)?((  ImmutableSet)node).getNameNode()  :  null;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getParent()  instanceof  ImmutableSet)?((  ImmutableSet)node).getNameNode()  :  null;  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getParent()  instanceof  ImmutableSet)?((  ImmutableSet)node).getNameNode()  :  null;	  Node    parent    =(n.getParent()    instanceof    ImmutableSet)?((    ImmutableSet)node).getParent()    :    null;    	non-compiled	[CE]  	25	None	replace
113	[BUG]  [BUGGY]  Node  parent  =(n.getParent()  instanceof  ImmutableSet)?((  ImmutableSet)node).getParent()  :  this;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getParent()  instanceof  ImmutableSet)?((  ImmutableSet)node).getParent()  :  this;  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getParent()  instanceof  ImmutableSet)?((  ImmutableSet)node).getParent()  :  this;	  Node    parent    =(n.getParent()    instanceof    ImmutableSet)?((    ImmutableSet)node).getParent()    :    null;    	non-compiled	[CE]  	25	None	replace
114	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&!NodeUtil.isLiteralValue(n.getString()));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&!NodeUtil.isLiteralValue(n.getString()));  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&!NodeUtil.isLiteralValue(n.getString()));	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	3	None	replace
115	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||!NodeUtil.isLiteralValue(n.getFirstChild()));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||!NodeUtil.isLiteralValue(n.getFirstChild()));  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||!NodeUtil.isLiteralValue(n.getFirstChild()));	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	3	None	replace
116	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  NodeUtil.isLiteralValue(n.getString()));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  NodeUtil.isLiteralValue(n.getString()));  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  NodeUtil.isLiteralValue(n.getString()));	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	3	None	replace
117	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||!NodeUtil.isLiteralValue(n.getString()));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||!NodeUtil.isLiteralValue(n.getString()));  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||!NodeUtil.isLiteralValue(n.getString()));	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	3	None	replace
118	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  NodeUtil.isLiteralValue(n.getFirstChild()));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  NodeUtil.isLiteralValue(n.getFirstChild()));  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  NodeUtil.isLiteralValue(n.getFirstChild()));	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	3	None	replace
119	[BUG]  [BUGGY]  Node  parent  =  n.removeChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =  n.removeChild();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =  n.removeChild();	  Node    parent    =    n.removeParent();    	non-compiled	[CE]  	35	None	replace
120	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getFirstChild()!=  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getFirstChild()!=  null);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getFirstChild()!=  null);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	37	None	replace
121	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.hasChildren());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.hasChildren());  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.hasChildren());	  Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	37	None	replace
122	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isLiteralValue(n.getString()));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isLiteralValue(n.getString()));  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isLiteralValue(n.getString()));	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	7	None	replace
123	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isLiteralValue(n.getFirstChild()));  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isLiteralValue(n.getFirstChild()));  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isLiteralValue(n.getFirstChild()));	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	7	None	replace
124	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&!NodeUtil.isLiteralValue(n.getString()));  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&!NodeUtil.isLiteralValue(n.getString()));  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&!NodeUtil.isLiteralValue(n.getString()));	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	7	None	replace
125	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||!NodeUtil.isLiteralValue(n.getFirstChild()));  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||!NodeUtil.isLiteralValue(n.getFirstChild()));  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||!NodeUtil.isLiteralValue(n.getFirstChild()));	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	7	None	replace
126	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||!NodeUtil.isLiteralValue(n.getString()));  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||!NodeUtil.isLiteralValue(n.getString()));  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||!NodeUtil.isLiteralValue(n.getString()));	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	7	None	replace
127	[BUG]  [BUGGY]  Node  parent  =  n.getPreviousParent();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =  n.getPreviousParent();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =  n.getPreviousParent();	  Node    parent    =    n.getPreviousOperator();    	non-compiled	[CE]  	18	None	replace
128	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.REGEXP  &&!NodeUtil.isLiteralValue(n.getString()));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.REGEXP  &&!NodeUtil.isLiteralValue(n.getString()));  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkState(n.getType()  ==  Token.REGEXP  &&!NodeUtil.isLiteralValue(n.getString()));	  Preconditions.checkState(n.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  	6	None	replace
129	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.REGEXP  &&  NodeUtil.isLiteralValue(n.getString()));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.REGEXP  &&  NodeUtil.isLiteralValue(n.getString()));  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkState(n.getType()  ==  Token.REGEXP  &&  NodeUtil.isLiteralValue(n.getString()));	  Preconditions.checkState(n.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  	6	None	replace
130	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  	6	None	replace
131	[BUG]  [BUGGY]  Node  parent  =  n.cloneTree();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =  n.cloneTree();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =  n.cloneTree();	  Node    parent    =    n.removeLastChild();    	non-compiled	[CE]  	10	None	replace
132	[BUG]  [BUGGY]  Node  parent  =  n.getImmutableChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =  n.getImmutableChild();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =  n.getImmutableChild();	  Node    parent    =    n.getImmutableSet();    	non-compiled	[CE]  	9	None	replace
133	[BUG]  [BUGGY]  Node  assign  =  n.getfirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  assign  =  n.getfirstChild();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  assign  =  n.getfirstChild();	  Node    assign    =    n.getLastChild();    	non-compiled	[CE]  	2	None	replace
134	[BUG]  [BUGGY]  Node  assign  =  n.getPreviousChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  assign  =  n.getPreviousChild();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  assign  =  n.getPreviousChild();	  Node    assign    =    n.getLastChild();    	non-compiled	[CE]  	2	None	replace
135	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()!=  null);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()!=  null);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild()!=  null);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	4	None	replace
136	[BUG]  [BUGGY]  Node  n  =  n.getPreviousChild();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  n  =  n.getPreviousChild();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  n  =  n.getPreviousChild();	  Node    n    =    n.getFirstChild();    	non-compiled	[CE]  	8	None	replace
137	[BUG]  [BUGGY]  Node  parent  =(n.getParent()  ==  null)?  this.node  :  n.getParent();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getParent()  ==  null)?  this.node  :  n.getParent();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getParent()  ==  null)?  this.node  :  n.getParent();	  Node    parent    =    this.node.getParent();    	non-compiled	[CE]  	15	None	replace
138	[BUG]  [BUGGY]  Node  parent  =(n.getParent()  ==  null)?  this.node.getParent()  :  n;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getParent()  ==  null)?  this.node.getParent()  :  n;  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getParent()  ==  null)?  this.node.getParent()  :  n;	  Node    parent    =    this.node.getParent();    	non-compiled	[CE]  	15	None	replace
139	[BUG]  [BUGGY]  Node  parent  =(n.getParent()  ==  null)?  this.node  :  n.getNext();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getParent()  ==  null)?  this.node  :  n.getNext();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getParent()  ==  null)?  this.node  :  n.getNext();	  Node    parent    =    this.node.getParent();    	non-compiled	[CE]  	15	None	replace
140	[BUG]  [BUGGY]  Node  parent  =  n.getOwnerState();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =  n.getOwnerState();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =  n.getOwnerState();	  Node    parent    =    n.getOwnerFunction();    	non-compiled	[CE]  	30	None	replace
141	[BUG]  [BUGGY]  Node  n  =(n.getFirstChild()  ==  null)?  null  :  n.getLastChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  n  =(n.getFirstChild()  ==  null)?  null  :  n.getLastChild();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  n  =(n.getFirstChild()  ==  null)?  null  :  n.getLastChild();	  Node    n    =    n.getLastChild();    	non-compiled	[CE]  	13	None	replace
142	[BUG]  [BUGGY]  Node  n  =(n.getFirstChild()!=  null)?  n  :  n.getLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  n  =(n.getFirstChild()!=  null)?  n  :  n.getLastChild();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  n  =(n.getFirstChild()!=  null)?  n  :  n.getLastChild();	  Node    n    =    n.getLastChild();    	non-compiled	[CE]  	13	None	replace
143	[BUG]  [BUGGY]  Node  n  =(n.getFirstChild()  ==  null)?  n  :  n.getLastChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  n  =(n.getFirstChild()  ==  null)?  n  :  n.getLastChild();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  n  =(n.getFirstChild()  ==  null)?  n  :  n.getLastChild();	  Node    n    =    n.getLastChild();    	non-compiled	[CE]  	13	None	replace
144	[BUG]  [BUGGY]  Node  n  =(n.getFirstChild()!=  null)?  n.getLastChild()  :  n;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  n  =(n.getFirstChild()!=  null)?  n.getLastChild()  :  n;  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  n  =(n.getFirstChild()!=  null)?  n.getLastChild()  :  n;	  Node    n    =    n.getLastChild();    	non-compiled	[CE]  	13	None	replace
145	[BUG]  [BUGGY]  Node  n  =(n.getFirstChild()  ==  null)?  n.getLastChild()  :  n;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  n  =(n.getFirstChild()  ==  null)?  n.getLastChild()  :  n;  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  n  =(n.getFirstChild()  ==  null)?  n.getLastChild()  :  n;	  Node    n    =    n.getLastChild();    	non-compiled	[CE]  	13	None	replace
146	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ImmutableSet());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ImmutableSet());  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	NodeTraversal.traverse(compiler,  n,  new  ImmutableSet());	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    	non-compiled	[CE]  	20	None	replace
147	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  INVALID_REGULAR_EXPRESSION_FLAGS);	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    	non-compiled	[CE]  	20	None	replace
148	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TryMinimizeAction());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  TryMinimizeAction());  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	NodeTraversal.traverse(compiler,  n,  new  TryMinimizeAction());	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    	non-compiled	[CE]  	20	None	replace
149	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  tryMinimizeIf(n));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  tryMinimizeIf(n));  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	NodeTraversal.traverse(compiler,  n,  tryMinimizeIf(n));	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    	non-compiled	[CE]  	20	None	replace
150	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT,  false);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT,  false);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT,  false);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	36	None	replace
151	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.hasChildren());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.hasChildren());  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.hasChildren());	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	36	None	replace
152	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getChildCount());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getChildCount());  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getChildCount());	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	5	None	replace
153	[BUG]  [BUGGY]  Node  assign  =(n.getFirstChild()  ==  null)?  n.getLastChild()  :  n;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  assign  =(n.getFirstChild()  ==  null)?  n.getLastChild()  :  n;  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  assign  =(n.getFirstChild()  ==  null)?  n.getLastChild()  :  n;	  Node    assign    =    n.getLastChild();    	non-compiled	[CE]  	2	None	replace
154	[BUG]  [BUGGY]  Node  assign  =(n.getFirstChild()!=  null)?  n.getLastChild()  :  n;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  assign  =(n.getFirstChild()!=  null)?  n.getLastChild()  :  n;  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  assign  =(n.getFirstChild()!=  null)?  n.getLastChild()  :  n;	  Node    assign    =    n.getLastChild();    	non-compiled	[CE]  	2	None	replace
155	[BUG]  [BUGGY]  Node  assign  =(n.getFirstChild()  ==  n)?  n.getLastChild()  :  n;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  assign  =(n.getFirstChild()  ==  n)?  n.getLastChild()  :  n;  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  assign  =(n.getFirstChild()  ==  n)?  n.getLastChild()  :  n;	  Node    assign    =    n.getLastChild();    	non-compiled	[CE]  	2	None	replace
156	[BUG]  [BUGGY]  Node  assign  =(n.getFirstChild()  ==  n)?  n.getLastChild()  :  null;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  assign  =(n.getFirstChild()  ==  n)?  n.getLastChild()  :  null;  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  assign  =(n.getFirstChild()  ==  n)?  n.getLastChild()  :  null;	  Node    assign    =    n.getLastChild();    	non-compiled	[CE]  	2	None	replace
157	[BUG]  [BUGGY]  Node  assign  =(n.getFirstChild()  ==  null)?  n  :  n.getLastChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  assign  =(n.getFirstChild()  ==  null)?  n  :  n.getLastChild();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  assign  =(n.getFirstChild()  ==  null)?  n  :  n.getLastChild();	  Node    assign    =    n.getLastChild();    	non-compiled	[CE]  	2	None	replace
158	[BUG]  [BUGGY]  Node  parent  =(n.getNext()  ==  null)?  null  :  n.getParent();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getNext()  ==  null)?  null  :  n.getParent();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getNext()  ==  null)?  null  :  n.getParent();	  Node    parent    =(n.getParent()    ==    null)?    null    :    n.getParent();    	non-compiled	[CE]  	31	None	replace
159	[BUG]  [BUGGY]  Node  parent  =(n.getParent()  ==  null)?  null  :  n.getFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getParent()  ==  null)?  null  :  n.getFirstChild();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getParent()  ==  null)?  null  :  n.getFirstChild();	  Node    parent    =(n.getParent()    ==    null)?    null    :    n.getParent();    	non-compiled	[CE]  	31	None	replace
160	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  1);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  1);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  1);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	7	None	replace
161	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  2);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  2);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  2);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	7	None	replace
162	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  n.getChildCount()  >  1);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	7	None	replace
163	[BUG]  [BUGGY]  Node  n  =  n.cloneTree();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  n  =  n.cloneTree();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  n  =  n.cloneTree();	  Node    n    =    n.getFirstChild();    	non-compiled	[CE]  	8	None	replace
164	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  INVALID_REGULAR_FLAGS);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  INVALID_REGULAR_FLAGS);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  INVALID_REGULAR_FLAGS);	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    	non-compiled	[CE]  	20	None	replace
165	[BUG]  [BUGGY]  Node  parent  =  n.removeChild(n.getParent());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =  n.removeChild(n.getParent());  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =  n.removeChild(n.getParent());	  Node    parent    =    n.removeParent();    	non-compiled	[CE]  	35	None	replace
166	[BUG]  [BUGGY]  Node  parent  =  n.removeParent(parent);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =  n.removeParent(parent);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =  n.removeParent(parent);	  Node    parent    =    n.removeParent();    	non-compiled	[CE]  	35	None	replace
167	[BUG]  [BUGGY]  Node  parent  =(n.getParent()  instanceof  ImmutableSet)?((  ImmutableSet)node).cloneTree()  :  n;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getParent()  instanceof  ImmutableSet)?((  ImmutableSet)node).cloneTree()  :  n;  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getParent()  instanceof  ImmutableSet)?((  ImmutableSet)node).cloneTree()  :  n;	  Node    parent    =(n.getParent()    instanceof    ImmutableSet)?((    ImmutableSet)node).getParent()    :    n;    	non-compiled	[CE]  	26	None	replace
168	[BUG]  [BUGGY]  Node  parent  =(n.getParent()!=  null)?  this.node.getParent()  :  n;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getParent()!=  null)?  this.node.getParent()  :  n;  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getParent()!=  null)?  this.node.getParent()  :  n;	  Node    parent    =    this.node.getParent();    	non-compiled	[CE]  	15	None	replace
169	[BUG]  [BUGGY]  Node  parent  =(n.getParent()!=  null)?  this.node  :  n.getParent();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getParent()!=  null)?  this.node  :  n.getParent();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getParent()!=  null)?  this.node  :  n.getParent();	  Node    parent    =    this.node.getParent();    	non-compiled	[CE]  	15	None	replace
170	[BUG]  [BUGGY]  Node  parent  =(n.getParent()  ==  null)?  this  :  n.getParent();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getParent()  ==  null)?  this  :  n.getParent();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getParent()  ==  null)?  this  :  n.getParent();	  Node    parent    =    this.node.getParent();    	non-compiled	[CE]  	15	None	replace
171	[BUG]  [BUGGY]  Node  parent  =(n.getParent()  instanceof  ImmutableSet)?((  ImmutableSet)node).cloneTree()  :  null;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getParent()  instanceof  ImmutableSet)?((  ImmutableSet)node).cloneTree()  :  null;  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getParent()  instanceof  ImmutableSet)?((  ImmutableSet)node).cloneTree()  :  null;	  Node    parent    =(n.getParent()    instanceof    ImmutableSet)?((    ImmutableSet)node).getParent()    :    null;    	non-compiled	[CE]  	25	None	replace
172	[BUG]  [BUGGY]  Node  parent  =(n.getParent()!=  null)?  n  :  n.getParent();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getParent()!=  null)?  n  :  n.getParent();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getParent()!=  null)?  n  :  n.getParent();	  Node    parent    =(n.getParent()!=    null)?    node    :    n.getParent();    	non-compiled	[CE]  	23	None	replace
173	[BUG]  [BUGGY]  Node  parent  =(n.getNext()!=  null)?  node  :  n.getParent();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getNext()!=  null)?  node  :  n.getParent();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getNext()!=  null)?  node  :  n.getParent();	  Node    parent    =(n.getParent()!=    null)?    node    :    n.getParent();    	non-compiled	[CE]  	23	None	replace
174	[BUG]  [BUGGY]  Node  parent  =(n.getNext()!=  null)?  n  :  n.getParent();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getNext()!=  null)?  n  :  n.getParent();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getNext()!=  null)?  n  :  n.getParent();	  Node    parent    =(n.getParent()!=    null)?    node    :    n.getParent();    	non-compiled	[CE]  	23	None	replace
175	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	5	None	replace
176	[BUG]  [BUGGY]  Node  parent  =(n.getParent()!=  null)?  n.getParent()  :  node.getParent();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getParent()!=  null)?  n.getParent()  :  node.getParent();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getParent()!=  null)?  n.getParent()  :  node.getParent();	  Node    parent    =    node.getNext();    	non-compiled	[CE]  	17	None	replace
177	[BUG]  [BUGGY]  Node  parent  =  n.getParentFirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =  n.getParentFirstChild();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =  n.getParentFirstChild();	  Node    parent    =    n.getParentSibling();    	non-compiled	[CE]  	27	None	replace
178	[BUG]  [BUGGY]  Node  parent  =  n.getParentTree();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =  n.getParentTree();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =  n.getParentTree();	  Node    parent    =    n.getParentSibling();    	non-compiled	[CE]  	27	None	replace
179	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getChildCount()  ==  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getChildCount()  ==  1);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getChildCount()  ==  1);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	37	None	replace
180	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getChildCount()  ==  2);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getChildCount()  ==  2);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getChildCount()  ==  2);	  Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	37	None	replace
181	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR,  n.getFirstChild());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR,  n.getFirstChild());  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR,  n.getFirstChild());	  Preconditions.checkArgument(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	37	None	replace
182	[BUG]  [BUGGY]  Node  parent  =(n.getNext()  ==  null)?  node  :  n.getParent();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getNext()  ==  null)?  node  :  n.getParent();  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getNext()  ==  null)?  node  :  n.getParent();	  Node    parent    =(n.getParent()    ==    null)?    node    :    n.getParent();    	non-compiled	[CE]  	22	None	replace
183	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.REGEXP);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.REGEXP);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.REGEXP);	  Preconditions.checkState(n.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  	6	None	replace
184	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.REGEXP  ||  n.getFirstChild()  ==  n);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.REGEXP  ||  n.getFirstChild()  ==  n);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkState(n.getType()  ==  Token.REGEXP  ||  n.getFirstChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  	6	None	replace
185	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.VAR);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.VAR);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkState(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  	6	None	replace
186	[BUG]  [BUGGY]  Node  parent  =(n.getParent()  instanceof  ImmutableSet)?((  ImmutableSet)node).cloneTree()  :  node;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getParent()  instanceof  ImmutableSet)?((  ImmutableSet)node).cloneTree()  :  node;  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getParent()  instanceof  ImmutableSet)?((  ImmutableSet)node).cloneTree()  :  node;	  Node    parent    =(n.getParent()    instanceof    ImmutableSet)?((    ImmutableSet)node).getParent()    :    node;    	non-compiled	[CE]  	24	None	replace
187	[BUG]  [BUGGY]  Node  parent  =(n.getNext()!=  null)?  n.getParent()  :  n;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Node  parent  =(n.getNext()!=  null)?  n.getParent()  :  n;  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Node  parent  =(n.getNext()!=  null)?  n.getParent()  :  n;	  Node    parent    =(n.getParent()!=    null)?    n.getParent()    :    n;    	non-compiled	[CE]  	33	None	replace
188	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  1);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  1);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  1);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	3	None	replace
189	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  2);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  2);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  2);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	3	None	replace
190	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	36	None	replace
191	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild()!=  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild()!=  null);  [BUGGY]        Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	260	260	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild()!=  null);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	36	None	replace
