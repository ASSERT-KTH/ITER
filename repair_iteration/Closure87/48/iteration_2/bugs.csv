bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getConditionExpression(node));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getConditionExpression(node));  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getLastChild(),  NodeUtil.getConditionExpression(node));	  tryMinimizeCondition(node.getLastChild());    	non-compiled	[CE]  	2	None	replace
2	[BUG]  [BUGGY]  tryMinimizeCondition(node.getLastChild(),  node);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(node.getLastChild(),  node);  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getLastChild(),  node);	  tryMinimizeCondition(node.getLastChild());    	non-compiled	[CE]  	2	None	replace
3	[BUG]  [BUGGY]  tryMinimizeCondition(node.getLeftChild());  [CE]  [FE]              AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(node.getLeftChild());  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getLeftChild());	  tryMinimizeCondition(node.getLastChild());    	non-compiled	[CE]  	2	None	replace
4	[BUG]  [BUGGY]  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getExpressionExpression(node));  [CE]  [FE]                AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getExpressionExpression(node));  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getLastChild(),  NodeUtil.getExpressionExpression(node));	  tryMinimizeCondition(node.getLastChild());    	non-compiled	[CE]  	2	None	replace
5	[BUG]  [BUGGY]  tryMinimizeCondition(node.getEmptyChild(),  node);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(node.getEmptyChild(),  node);  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getEmptyChild(),  node);	  tryMinimizeCondition(node.getEmptyChild());    	non-compiled	[CE]  	5	None	replace
6	[BUG]  [BUGGY]  tryMinimizeCondition(node.getExpressionChild());  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(node.getExpressionChild());  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getExpressionChild());	  tryMinimizeCondition(node.getEmptyChild());    	non-compiled	[CE]  	5	None	replace
7	[BUG]  [BUGGY]  tryMinimizeCondition(node.getString());  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(node.getString());  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getString());	  tryMinimizeCondition(node.getEmptyChild());    	non-compiled	[CE]  	5	None	replace
8	[BUG]  [BUGGY]  Node  node  =  NodeUtil.getConditionExpression(node);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  Node  node  =  NodeUtil.getConditionExpression(node);  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	Node  node  =  NodeUtil.getConditionExpression(node);	      	non-compiled	[CE]  	7	None	replace
9	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;	      	non-compiled	[CE]  	7	None	replace
10	[BUG]  [BUGGY]  Node  node  =  NodeUtil.getConditionExpression(node);  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  Node  node  =  NodeUtil.getConditionExpression(node);  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	Node  node  =  NodeUtil.getConditionExpression(node);  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));	      	non-compiled	[CE]  	7	None	replace
11	[BUG]  [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));	      	non-compiled	[CE]  	7	None	replace
12	[BUG]  [BUGGY]  Predicate  node  =  NodeUtil.getConditionExpression(node);  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  Predicate  node  =  NodeUtil.getConditionExpression(node);  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	Predicate  node  =  NodeUtil.getConditionExpression(node);	      	non-compiled	[CE]  	7	None	replace
13	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  NodeUtil.getConditionExpression(node);  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  NodeUtil.getConditionExpression(node);  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  NodeUtil.getConditionExpression(node);	      	non-compiled	[CE]  	7	None	replace
14	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getExpressionExpression(node));  [CE]  [FE]        AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(NodeUtil.getExpressionExpression(node));  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getExpressionExpression(node));	  tryMinimizeCondition(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	1	None	replace
15	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getEXPR_RESULT(node));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(NodeUtil.getEXPR_RESULT(node));  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getEXPR_RESULT(node));	  tryMinimizeCondition(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	1	None	replace
16	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getReferenceExpression(node));  [CE]  [FE]            AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(NodeUtil.getReferenceExpression(node));  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getReferenceExpression(node));	  tryMinimizeCondition(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	1	None	replace
17	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getFunctionExpression(node));  [CE]  [FE]              AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(NodeUtil.getFunctionExpression(node));  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getFunctionExpression(node));	  tryMinimizeCondition(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	1	None	replace
18	[BUG]  [BUGGY]  tryMinimize(NodeUtil.getConditionExpression(node));  [CE]  [FE]                AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimize(NodeUtil.getConditionExpression(node));  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimize(NodeUtil.getConditionExpression(node));	  tryMinimizeCondition(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	1	None	replace
19	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getExprExpression(node));  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(NodeUtil.getExprExpression(node));  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getExprExpression(node));	  tryMinimizeCondition(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	1	None	replace
20	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getExpressionExpr(node));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(NodeUtil.getExpressionExpr(node));  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getExpressionExpr(node));	  tryMinimizeCondition(NodeUtil.getConditionExpr(node));    	non-compiled	[CE]  	10	None	replace
21	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionReturn(node));  [CE]  [FE]            AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionReturn(node));  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionReturn(node));	  tryMinimizeCondition(NodeUtil.getConditionExpr(node));    	non-compiled	[CE]  	10	None	replace
22	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionEscaped(node));  [CE]  [FE]              AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionEscaped(node));  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionEscaped(node));	  tryMinimizeCondition(NodeUtil.getConditionExpr(node));    	non-compiled	[CE]  	10	None	replace
23	[BUG]  [BUGGY]  tryMinimizeCondition(node.getExpression(),  NodeUtil.getConditionExpression(node));  [CE]  [FE]            AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(node.getExpression(),  NodeUtil.getConditionExpression(node));  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getExpression(),  NodeUtil.getConditionExpression(node));	  tryMinimizeCondition(node.getExpression());    	non-compiled	[CE]  	3	None	replace
24	[BUG]  [BUGGY]  tryMinimizeCondition(node.getExpression(),  node);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(node.getExpression(),  node);  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getExpression(),  node);	  tryMinimizeCondition(node.getExpression());    	non-compiled	[CE]  	3	None	replace
25	[BUG]  [BUGGY]  tryMinimizeCondition(node.getShortChild(),  node);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(node.getShortChild(),  node);  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getShortChild(),  node);	  tryMinimizeCondition(node.getShortChild());    	non-compiled	[CE]  	6	None	replace
26	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node),  node.getLastChild());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node),  node.getLastChild());  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node),  node.getLastChild());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node),    node.getFirstChild());    	non-compiled	[CE]  	11	None	replace
27	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node),  node.getOwnerChild());  [CE]  [FE]              AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node),  node.getOwnerChild());  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node),  node.getOwnerChild());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node),    node.getFirstChild());    	non-compiled	[CE]  	11	None	replace
28	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node),  node.getLeastChild());  [CE]  [FE]                AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node),  node.getLeastChild());  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node),  node.getLeastChild());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node),    node.getFirstChild());    	non-compiled	[CE]  	11	None	replace
29	[BUG]  [BUGGY]  tryMinimizeCondition(node.getEXPR_RESULT(),  node);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(node.getEXPR_RESULT(),  node);  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getEXPR_RESULT(),  node);	  tryMinimizeCondition(node.getEXPR_RESULT());    	non-compiled	[CE]  	4	None	replace
30	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getLastChild());  [CE]  [FE]        AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getLastChild());  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).getLastChild());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getFirstChild());    	non-compiled	[CE]  	9	None	replace
31	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEXPR_RESULT());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEXPR_RESULT());  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEXPR_RESULT());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getFirstChild());    	non-compiled	[CE]  	9	None	replace
32	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getOwnerChild());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getOwnerChild());  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).getOwnerChild());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getFirstChild());    	non-compiled	[CE]  	9	None	replace
33	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getLeastChild());  [CE]  [FE]              AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getLeastChild());  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).getLeastChild());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getFirstChild());    	non-compiled	[CE]  	9	None	replace
34	[BUG]  [BUGGY]  tryMinimizeCondition(node.getEmptyChildCount()  -  1);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(node.getEmptyChildCount()  -  1);  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getEmptyChildCount()  -  1);	  tryMinimizeCondition(node.getEmptyChildCount());    	non-compiled	[CE]  	8	None	replace
35	[BUG]  [BUGGY]  tryMinimizeCondition(node.getEmptyChildCount()  +  1);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(node.getEmptyChildCount()  +  1);  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getEmptyChildCount()  +  1);	  tryMinimizeCondition(node.getEmptyChildCount());    	non-compiled	[CE]  	8	None	replace
36	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  tryMinimizeNot(node);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  tryMinimizeNot(node);  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  tryMinimizeNot(node);	  tryMinimizeCondition(node.getExpression());    	non-compiled	[CE]  	3	None	replace
37	[BUG]  [BUGGY]  tryMinimizeCondition(node.getExprChild());  [CE]  [FE]                AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(node.getExprChild());  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getExprChild());	  tryMinimizeCondition(node.getEmptyChild());    	non-compiled	[CE]  	5	None	replace
38	[BUG]  [BUGGY]  tryMinimizeCondition(node.getExpr());  [CE]  [FE]              AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(node.getExpr());  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getExpr());	  tryMinimizeCondition(node.getEXPR_RESULT());    	non-compiled	[CE]  	4	None	replace
39	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEmptyChild());  [CE]  [FE]        AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEmptyChild());  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEmptyChild());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getFirstChild());    	non-compiled	[CE]  	9	None	replace
40	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getReturnType());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getReturnType());  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).getReturnType());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getFirstChild());    	non-compiled	[CE]  	9	None	replace
41	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  null;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  null;  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  null;	      	non-compiled	[CE]  	7	None	replace
42	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  this;  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  this;  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  this;	      	non-compiled	[CE]  	7	None	replace
43	[BUG]  [BUGGY]  Node  node  =  node.getFirstChild();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  Node  node  =  node.getFirstChild();  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	Node  node  =  node.getFirstChild();	      	non-compiled	[CE]  	7	None	replace
44	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionRelative(node));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionRelative(node));  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionRelative(node));	  tryMinimizeCondition(NodeUtil.getConditionExpr(node));    	non-compiled	[CE]  	10	None	replace
45	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionReference(node));  [CE]  [FE]            AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionReference(node));  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionReference(node));	  tryMinimizeCondition(NodeUtil.getConditionExpr(node));    	non-compiled	[CE]  	10	None	replace
46	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node)+  1);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node)+  1);  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node)+  1);	  tryMinimizeCondition(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	1	None	replace
47	[BUG]  [BUGGY]  tryMinimizeCondition(node.getExpressionShortChild());  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(node.getExpressionShortChild());  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getExpressionShortChild());	  tryMinimizeCondition(node.getShortChild());    	non-compiled	[CE]  	6	None	replace
48	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).removeFirstChild());  [CE]  [FE]        AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).removeFirstChild());  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).removeFirstChild());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getFirstChild());    	non-compiled	[CE]  	9	None	replace
49	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).return  Node;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).return  Node;  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).return  Node;	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getFirstChild());    	non-compiled	[CE]  <identifier>  expected	9	None	replace
50	[BUG]  [BUGGY]  tryMinimizeCondition(node.getInitializingChild());  [CE]  [FE]              AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(node.getInitializingChild());  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getInitializingChild());	  tryMinimizeCondition(node.getEXPR_RESULT());    	non-compiled	[CE]  	4	None	replace
51	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(node))  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  if(NodeUtil.isExpressionNode(node))  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	if(NodeUtil.isExpressionNode(node))  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }	      	non-compiled	[CE]  	7	None	replace
52	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  [CE]  orphaned  case  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  case  Token.EXPR_RESULT:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	case  Token.EXPR_RESULT:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));	      	non-compiled	[CE]  orphaned  case	7	None	replace
53	[BUG]  [BUGGY]  if(NodeUtil.getConditionExpression(node)!=  null)  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  if(NodeUtil.getConditionExpression(node)!=  null)  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	if(NodeUtil.getConditionExpression(node)!=  null)  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }	      	non-compiled	[CE]  	7	None	replace
54	[BUG]  [BUGGY]  tryMinimizeCondition(node.getSecondChild());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(node.getSecondChild());  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getSecondChild());	  tryMinimizeCondition(node.getLastChild());    	non-compiled	[CE]  	2	None	replace
55	[BUG]  [BUGGY]  tryMinimizeCondition(node.getLastChild(),  null);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(node.getLastChild(),  null);  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getLastChild(),  null);	  tryMinimizeCondition(node.getLastChild());    	non-compiled	[CE]  	2	None	replace
56	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpress(node));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpress(node));  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpress(node));	  tryMinimizeCondition(NodeUtil.getConditionExpr(node));    	non-compiled	[CE]  	10	None	replace
57	[BUG]  [BUGGY]  tryMinimizeCondition(node.getEmptyChildCount(),  node);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(node.getEmptyChildCount(),  node);  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getEmptyChildCount(),  node);	  tryMinimizeCondition(node.getEmptyChildCount());    	non-compiled	[CE]  	8	None	replace
58	[BUG]  [BUGGY]  tryMinimizeCondition(node.getDoubleChild());  [CE]  [FE]                AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(node.getDoubleChild());  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getDoubleChild());	  tryMinimizeCondition(node.getEmptyChild());    	non-compiled	[CE]  	5	None	replace
59	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node)-  1,  node.getFirstChild());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:    [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node)-  1,  node.getFirstChild());  [BUGGY]    return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node)-  1,  node.getFirstChild());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node),    node.getFirstChild());    	non-compiled	[CE]  	11	None	replace
