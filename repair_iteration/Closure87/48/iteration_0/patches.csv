bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  [CE]  [FE]    AssertionFailedError  [CONTEXT]  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  [BUGGY]  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node));	tryMinimizeCondition(node.getFirstChild());  	non-compiled	[CE]  	95	None	replace
2	[BUG]  [BUGGY]  tryMinimizeCondition(node.getLastChild());  [CE]  [FE]      AssertionFailedError  [CONTEXT]  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  [BUGGY]  tryMinimizeCondition(node.getLastChild());  [BUGGY]  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getLastChild());	tryMinimizeCondition(node.getFirstChild());  	non-compiled	[CE]  	95	None	replace
3	[BUG]  [BUGGY]  tryMinimizeCondition(node.getExpression());  [CE]  [FE]        AssertionFailedError  [CONTEXT]  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  [BUGGY]  tryMinimizeCondition(node.getExpression());  [BUGGY]  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getExpression());	tryMinimizeCondition(node.getFirstChild());  	non-compiled	[CE]  	95	None	replace
4	[BUG]  [BUGGY]  tryMinimizeCondition(node.getEXPR_RESULT());  [CE]  [FE]          AssertionFailedError  [CONTEXT]  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  [BUGGY]  tryMinimizeCondition(node.getEXPR_RESULT());  [BUGGY]  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getEXPR_RESULT());	tryMinimizeCondition(node.getFirstChild());  	non-compiled	[CE]  	95	None	replace
5	[BUG]  [BUGGY]  tryMinimizeCondition(node.getEmptyChild());  [CE]  [FE]            AssertionFailedError  [CONTEXT]  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  [BUGGY]  tryMinimizeCondition(node.getEmptyChild());  [BUGGY]  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getEmptyChild());	tryMinimizeCondition(node.getFirstChild());  	non-compiled	[CE]  	95	None	replace
6	[BUG]  [BUGGY]  tryMinimizeCondition(node.getShortChild());  [CE]  [FE]              AssertionFailedError  [CONTEXT]  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  [BUGGY]  tryMinimizeCondition(node.getShortChild());  [BUGGY]  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getShortChild());	tryMinimizeCondition(node.getFirstChild());  	non-compiled	[CE]  	95	None	replace
7	[BUG]  [BUGGY]    [CE]  [FE]                AssertionFailedError  [CONTEXT]  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  [BUGGY]    [BUGGY]  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	  	tryMinimizeCondition(node.getFirstChild());  	non-compiled	[CE]  	95	None	replace
8	[BUG]  [BUGGY]  tryMinimizeCondition(node.getEmptyChildCount());  [CE]  [FE]    AssertionFailedError  [CONTEXT]  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  [BUGGY]  tryMinimizeCondition(node.getEmptyChildCount());  [BUGGY]  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getEmptyChildCount());	tryMinimizeCondition(node.getFirstChild());  	non-compiled	[CE]  	95	None	replace
9	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getFirstChild());  [CE]  [FE]    AssertionFailedError  [CONTEXT]  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getFirstChild());  [BUGGY]  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).getFirstChild());	tryMinimizeCondition(node.getFirstChild());  	non-compiled	[CE]  	95	None	replace
10	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpr(node));  [CE]  [FE]      AssertionFailedError  [CONTEXT]  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpr(node));  [BUGGY]  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpr(node));	tryMinimizeCondition(node.getFirstChild());  	non-compiled	[CE]  	95	None	replace
11	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node),  node.getFirstChild());  [CE]  [FE]        AssertionFailedError  [CONTEXT]  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node),  node.getFirstChild());  [BUGGY]  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node),  node.getFirstChild());	tryMinimizeCondition(node.getFirstChild());  	non-compiled	[CE]  	95	None	replace
