bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  tryMinimizeCondition(NodeUtil.getExpressionExpression(node));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  return  tryMinimizeCondition(NodeUtil.getExpressionExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	return  tryMinimizeCondition(NodeUtil.getExpressionExpression(node));	  return    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	11	None	replace
2	[BUG]  [BUGGY]  return  tryMinimizeCondition(NodeUtil.getEXPR_RESULT(node));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  return  tryMinimizeCondition(NodeUtil.getEXPR_RESULT(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	return  tryMinimizeCondition(NodeUtil.getEXPR_RESULT(node));	  return    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	11	None	replace
3	[BUG]  [BUGGY]  return  tryMinimize(NodeUtil.getConditionExpression(node));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  return  tryMinimize(NodeUtil.getConditionExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	return  tryMinimize(NodeUtil.getConditionExpression(node));	  return    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	11	None	replace
4	[BUG]  [BUGGY]  return  tryMinimizeCondition(NodeUtil.getReferenceExpression(node));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  return  tryMinimizeCondition(NodeUtil.getReferenceExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	return  tryMinimizeCondition(NodeUtil.getReferenceExpression(node));	  return    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	11	None	replace
5	[BUG]  [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node)+  1);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node)+  1);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	return  tryMinimizeCondition(NodeUtil.getConditionExpression(node)+  1);	  return    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	11	None	replace
6	[BUG]  [BUGGY]  Node  node  =  node.getLastChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  Node  node  =  node.getLastChild();  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	Node  node  =  node.getLastChild();	  Node    node    =    node.getFirstChild();    	non-compiled	[CE]  	43	None	replace
7	[BUG]  [BUGGY]  Node  node  =  node.getNext();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  Node  node  =  node.getNext();  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	Node  node  =  node.getNext();	  Node    node    =    node.getFirstChild();    	non-compiled	[CE]  	43	None	replace
8	[BUG]  [BUGGY]  Node  node  =  parent.getFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  Node  node  =  parent.getFirstChild();  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	Node  node  =  parent.getFirstChild();	  Node    node    =    node.getFirstChild();    	non-compiled	[CE]  	43	None	replace
9	[BUG]  [BUGGY]  Node  node  =  node.removeFirstChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  Node  node  =  node.removeFirstChild();  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	Node  node  =  node.removeFirstChild();	  Node    node    =    node.getFirstChild();    	non-compiled	[CE]  	43	None	replace
10	[BUG]  [BUGGY]  Node  node  =  node.getAncestor(1);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  Node  node  =  node.getAncestor(1);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	Node  node  =  node.getAncestor(1);	  Node    node    =    node.getFirstChild();    	non-compiled	[CE]  	43	None	replace
11	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getExpressionReturn(node));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getExpressionReturn(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getExpressionReturn(node));	  tryMinimizeCondition(NodeUtil.getExpressionExpr(node));    	non-compiled	[CE]  	20	None	replace
12	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getReturnExpression(node));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getReturnExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getReturnExpression(node));	  tryMinimizeCondition(NodeUtil.getFunctionExpression(node));    	non-compiled	[CE]  	17	None	replace
13	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getExpressionReference(node));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getExpressionReference(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getExpressionReference(node));	  tryMinimizeCondition(NodeUtil.getConditionReference(node));    	non-compiled	[CE]  	45	None	replace
14	[BUG]  [BUGGY]  tryMinimize(NodeUtil.getConditionReference(node));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimize(NodeUtil.getConditionReference(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimize(NodeUtil.getConditionReference(node));	  tryMinimizeCondition(NodeUtil.getConditionReference(node));    	non-compiled	[CE]  	45	None	replace
15	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getReference(node));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getReference(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getReference(node));	  tryMinimizeCondition(NodeUtil.getConditionReference(node));    	non-compiled	[CE]  	45	None	replace
16	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionReference(node)+  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionReference(node)+  1);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionReference(node)+  1);	  tryMinimizeCondition(NodeUtil.getConditionReference(node));    	non-compiled	[CE]  	45	None	replace
17	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getStatementExpression(node));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getStatementExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getStatementExpression(node));	  tryMinimizeCondition(NodeUtil.getExpressionExpression(node));    	non-compiled	[CE]  	14	None	replace
18	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getExpressionExpression(node)+  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getExpressionExpression(node)+  1);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getExpressionExpression(node)+  1);	  tryMinimizeCondition(NodeUtil.getExpressionExpression(node));    	non-compiled	[CE]  	14	None	replace
19	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node),  node.getEXPR_RESULT());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node),  node.getEXPR_RESULT());  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node),  node.getEXPR_RESULT());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEXPR_RESULT());    	non-compiled	[CE]  	31	None	replace
20	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEXPR_RESULT(),  false);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEXPR_RESULT(),  false);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEXPR_RESULT(),  false);	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEXPR_RESULT());    	non-compiled	[CE]  	31	None	replace
21	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getStatement());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getStatement());  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).getStatement());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEXPR_RESULT());    	non-compiled	[CE]  	31	None	replace
22	[BUG]  [BUGGY]  TryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  TryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	TryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;	  if(NodeUtil.getConditionExpression(node)!=    null)    {    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    node;    }    	non-compiled	[CE]  	53	None	replace
23	[BUG]  [BUGGY]  if(NodeUtil.getConditionExpression(node)!=  null)  {  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  if(NodeUtil.getConditionExpression(node)!=  null)  {  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	if(NodeUtil.getConditionExpression(node)!=  null)  {  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }	  if(NodeUtil.getConditionExpression(node)!=    null)    {    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    node;    }    	non-compiled	[CE]  	53	None	replace
24	[BUG]  [BUGGY]  tryMinimizeCondition(node.getExpressionChild(),  node);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getExpressionChild(),  node);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getExpressionChild(),  node);	  tryMinimizeCondition(node.getExpressionChild());    	non-compiled	[CE]  	6	None	replace
25	[BUG]  [BUGGY]  tryMinimizeCondition(node.getExpressionChild(),  NodeUtil.getConditionExpression(node));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getExpressionChild(),  NodeUtil.getConditionExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getExpressionChild(),  NodeUtil.getConditionExpression(node));	  tryMinimizeCondition(node.getExpressionChild());    	non-compiled	[CE]  	6	None	replace
26	[BUG]  [BUGGY]  tryMinimizeCondition(node.getExpressionChild(),  true);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getExpressionChild(),  true);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getExpressionChild(),  true);	  tryMinimizeCondition(node.getExpressionChild());    	non-compiled	[CE]  	6	None	replace
27	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getExpressionExpression(node));  return  node;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getExpressionExpression(node));  return  node;  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getExpressionExpression(node));  return  node;	  tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    null;    	non-compiled	[CE]  	41	None	replace
28	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return;  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return;	  tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    null;    	non-compiled	[CE]  	41	None	replace
29	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getReferenceExpression(node));  return  node;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getReferenceExpression(node));  return  node;  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getReferenceExpression(node));  return  node;	  tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    null;    	non-compiled	[CE]  	41	None	replace
30	[BUG]  [BUGGY]  tryMinimizeCondition(node.getEmptyChildCount()  /  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getEmptyChildCount()  /  1);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getEmptyChildCount()  /  1);	  tryMinimizeCondition(node.getEmptyChildCount()    +    1);    	non-compiled	[CE]  	35	None	replace
31	[BUG]  [BUGGY]  TryMinimizeCondition(node.getEmptyChildCount());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  TryMinimizeCondition(node.getEmptyChildCount());  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	TryMinimizeCondition(node.getEmptyChildCount());	  tryMinimizeCondition(node.getEmptyChildCount()    +    1);    	non-compiled	[CE]  	35	None	replace
32	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	NodeTraversal.traverse(compiler,  node,  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;	  if(NodeUtil.isExpressionNode(node))    {    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    node;    }    	non-compiled	[CE]  	51	None	replace
33	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(node)||  NodeUtil.isExpressionNode(node))  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  if(NodeUtil.isExpressionNode(node)||  NodeUtil.isExpressionNode(node))  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	if(NodeUtil.isExpressionNode(node)||  NodeUtil.isExpressionNode(node))  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }	  if(NodeUtil.isExpressionNode(node))    {    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    node;    }    	non-compiled	[CE]  	51	None	replace
34	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(node)||  NodeUtil.getConditionExpression(node))  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  if(NodeUtil.isExpressionNode(node)||  NodeUtil.getConditionExpression(node))  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	if(NodeUtil.isExpressionNode(node)||  NodeUtil.getConditionExpression(node))  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }	  if(NodeUtil.isExpressionNode(node))    {    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    node;    }    	non-compiled	[CE]  	51	None	replace
35	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  parent;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  parent;  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  parent;	  tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    node;    	non-compiled	[CE]  	9	None	replace
36	[BUG]  [BUGGY]  tryMinimizeCondition(node.getFirstChild());  return  node;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getFirstChild());  return  node;  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getFirstChild());  return  node;	  tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    node;    	non-compiled	[CE]  	9	None	replace
37	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getFullChild());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getFullChild());  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).getFullChild());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getLastChild());    	non-compiled	[CE]  	30	None	replace
38	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEndChild());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEndChild());  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEndChild());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getLastChild());    	non-compiled	[CE]  	30	None	replace
39	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getStringValue());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getStringValue());  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).getStringValue());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getLastChild());    	non-compiled	[CE]  	30	None	replace
40	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getNext());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getNext());  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).getNext());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getLastChild());    	non-compiled	[CE]  	30	None	replace
41	[BUG]  [BUGGY]  tryMinimizeCondition(node.getFirstChild()  -  1);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getFirstChild()  -  1);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getFirstChild()  -  1);	  tryMinimizeCondition(node.getEmptyChildCount()    -    1);    	non-compiled	[CE]  	34	None	replace
42	[BUG]  [BUGGY]  tryMinimizeCondition(node.getFullChildCount()  -  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getFullChildCount()  -  1);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getFullChildCount()  -  1);	  tryMinimizeCondition(node.getEmptyChildCount()    -    1);    	non-compiled	[CE]  	34	None	replace
43	[BUG]  [BUGGY]  tryMinimize(NodeUtil.getConditionExpression(node));  return  NodeUtil.getConditionExpression(node);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimize(NodeUtil.getConditionExpression(node));  return  NodeUtil.getConditionExpression(node);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimize(NodeUtil.getConditionExpression(node));  return  NodeUtil.getConditionExpression(node);	  tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    NodeUtil.getConditionExpression(node);    	non-compiled	[CE]  	13	None	replace
44	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  NodeUtil.getFunctionExpression(node);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  NodeUtil.getFunctionExpression(node);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  NodeUtil.getFunctionExpression(node);	  tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    NodeUtil.getConditionExpression(node);    	non-compiled	[CE]  	13	None	replace
45	[BUG]  [BUGGY]  tryMinimizeCondition(node.getFirstChild());  return  NodeUtil.getConditionExpression(node);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getFirstChild());  return  NodeUtil.getConditionExpression(node);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getFirstChild());  return  NodeUtil.getConditionExpression(node);	  tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    NodeUtil.getConditionExpression(node);    	non-compiled	[CE]  	13	None	replace
46	[BUG]  [BUGGY]  return  NodeUtil.getConditionExpression(node);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  return  NodeUtil.getConditionExpression(node);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	return  NodeUtil.getConditionExpression(node);	  tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    NodeUtil.getConditionExpression(node);    	non-compiled	[CE]  	13	None	replace
47	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getExpressionExpression(node));  return  this;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getExpressionExpression(node));  return  this;  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getExpressionExpression(node));  return  this;	  tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    this;    	non-compiled	[CE]  	42	None	replace
48	[BUG]  [BUGGY]  tryMinimize(NodeUtil.getConditionExpression(node));  return  this;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimize(NodeUtil.getConditionExpression(node));  return  this;  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimize(NodeUtil.getConditionExpression(node));  return  this;	  tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    this;    	non-compiled	[CE]  	42	None	replace
49	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getReferenceExpression(node));  return  this;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getReferenceExpression(node));  return  this;  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getReferenceExpression(node));  return  this;	  tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    this;    	non-compiled	[CE]  	42	None	replace
50	[BUG]  [BUGGY]  tryMinimizeCondition(node.getExprChild(),  node);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getExprChild(),  node);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getExprChild(),  node);	  tryMinimizeCondition(node.getExprChild());    	non-compiled	[CE]  	37	None	replace
51	[BUG]  [BUGGY]  tryMinimizeCondition(node.getFirstChild(),  NodeUtil.getConditionExpression(node));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getFirstChild(),  NodeUtil.getConditionExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getFirstChild(),  NodeUtil.getConditionExpression(node));	  tryMinimizeCondition(node.getExpression(),    NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	23	None	replace
52	[BUG]  [BUGGY]  tryMinimizeCondition(node.getExpression(),  NodeUtil.getEXPR_RESULT(node));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getExpression(),  NodeUtil.getEXPR_RESULT(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getExpression(),  NodeUtil.getEXPR_RESULT(node));	  tryMinimizeCondition(node.getExpression(),    NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	23	None	replace
53	[BUG]  [BUGGY]  tryMinimizeCondition(node.getExpression(),  NodeUtil.getFunctionExpression(node));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getExpression(),  NodeUtil.getFunctionExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getExpression(),  NodeUtil.getFunctionExpression(node));	  tryMinimizeCondition(node.getExpression(),    NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	23	None	replace
54	[BUG]  [BUGGY]  tryMinimizeCondition(node.getExpression(),  NodeUtil.getReferenceExpression(node));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getExpression(),  NodeUtil.getReferenceExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getExpression(),  NodeUtil.getReferenceExpression(node));	  tryMinimizeCondition(node.getExpression(),    NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	23	None	replace
55	[BUG]  [BUGGY]  tryMinimizeCondition(node.getExpression(),  NodeUtil.getReturnType(node));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getExpression(),  NodeUtil.getReturnType(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getExpression(),  NodeUtil.getReturnType(node));	  tryMinimizeCondition(node.getExpression(),    NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	23	None	replace
56	[BUG]  [BUGGY]  tryMinimizeCondition(node.getExpressionShortChild(),  node);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getExpressionShortChild(),  node);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getExpressionShortChild(),  node);	  tryMinimizeCondition(node.getExpressionShortChild());    	non-compiled	[CE]  	47	None	replace
57	[BUG]  [BUGGY]  tryMinimizeCondition(node.getExpressionShortChild(),  NodeUtil.getConditionExpression(node));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getExpressionShortChild(),  NodeUtil.getConditionExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getExpressionShortChild(),  NodeUtil.getConditionExpression(node));	  tryMinimizeCondition(node.getExpressionShortChild());    	non-compiled	[CE]  	47	None	replace
58	[BUG]  [BUGGY]  tryMinimizeCondition(node.getExpressionShortChild(),  false);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getExpressionShortChild(),  false);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getExpressionShortChild(),  false);	  tryMinimizeCondition(node.getExpressionShortChild());    	non-compiled	[CE]  	47	None	replace
59	[BUG]  [BUGGY]  tryMinimizeCondition(node.getExpressionShortChild(),  true);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getExpressionShortChild(),  true);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getExpressionShortChild(),  true);	  tryMinimizeCondition(node.getExpressionShortChild());    	non-compiled	[CE]  	47	None	replace
60	[BUG]  [BUGGY]  tryMinimizeCondition(node.getExpressionShortChild(),  null);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getExpressionShortChild(),  null);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getExpressionShortChild(),  null);	  tryMinimizeCondition(node.getExpressionShortChild());    	non-compiled	[CE]  	47	None	replace
61	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node),  node.getEmptyChild());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node),  node.getEmptyChild());  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node),  node.getEmptyChild());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEmptyChild());    	non-compiled	[CE]  	39	None	replace
62	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).restrictByNotNullOrUndefined());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).restrictByNotNullOrUndefined());  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).restrictByNotNullOrUndefined());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEmptyChild());    	non-compiled	[CE]  	39	None	replace
63	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getImmutableChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getImmutableChild());  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).getImmutableChild());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEmptyChild());    	non-compiled	[CE]  	39	None	replace
64	[BUG]  [BUGGY]  tryMinimizeCondition(node.getLeftChild(),  node);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getLeftChild(),  node);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getLeftChild(),  node);	  tryMinimizeCondition(node.getLeftChild());    	non-compiled	[CE]  	3	None	replace
65	[BUG]  [BUGGY]  tryMinimize(NodeUtil.getExpressionExpression(node));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimize(NodeUtil.getExpressionExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimize(NodeUtil.getExpressionExpression(node));	  tryMinimize(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	18	None	replace
66	[BUG]  [BUGGY]  tryMinimize(NodeUtil.getEXPR_RESULT(node));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimize(NodeUtil.getEXPR_RESULT(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimize(NodeUtil.getEXPR_RESULT(node));	  tryMinimize(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	18	None	replace
67	[BUG]  [BUGGY]  tryMinimize(NodeUtil.getReferenceExpression(node));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimize(NodeUtil.getReferenceExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimize(NodeUtil.getReferenceExpression(node));	  tryMinimize(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	18	None	replace
68	[BUG]  [BUGGY]  tryMinimize(NodeUtil.getFunctionExpression(node));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimize(NodeUtil.getFunctionExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimize(NodeUtil.getFunctionExpression(node));	  tryMinimize(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	18	None	replace
69	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getLeftChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getLeftChild());  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).getLeftChild());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getLeastChild());    	non-compiled	[CE]  	33	None	replace
70	[BUG]  [BUGGY]  tryMinimizeCondition(node.getFirstChild(),  null);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getFirstChild(),  null);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getFirstChild(),  null);	  tryMinimizeCondition(node.getLastChild(),    null);    	non-compiled	[CE]  	55	None	replace
71	[BUG]  [BUGGY]  tryMinimizeCondition(node.getLastChild(),  this);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getLastChild(),  this);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getLastChild(),  this);	  tryMinimizeCondition(node.getLastChild(),    null);    	non-compiled	[CE]  	55	None	replace
72	[BUG]  [BUGGY]  tryMinimizeCondition(node.getLastChild(),  true);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getLastChild(),  true);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getLastChild(),  true);	  tryMinimizeCondition(node.getLastChild(),    null);    	non-compiled	[CE]  	55	None	replace
73	[BUG]  [BUGGY]  tryMinimizeCondition(node.getLastChild(),  parent);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getLastChild(),  parent);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getLastChild(),  parent);	  tryMinimizeCondition(node.getLastChild(),    null);    	non-compiled	[CE]  	55	None	replace
74	[BUG]  [BUGGY]  tryMinimizeCondition(node.getDoubleChild(),  node);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getDoubleChild(),  node);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getDoubleChild(),  node);	  tryMinimizeCondition(node.getDoubleChild());    	non-compiled	[CE]  	58	None	replace
75	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getExpressionStatement(node));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getExpressionStatement(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getExpressionStatement(node));	  tryMinimizeCondition(NodeUtil.getEXPR_RESULT(node));    	non-compiled	[CE]  	15	None	replace
76	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getExpressionRelative(node));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getExpressionRelative(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getExpressionRelative(node));	  tryMinimizeCondition(NodeUtil.getEXPR_RESULT(node));    	non-compiled	[CE]  	15	None	replace
77	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node),  node);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node),  node);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node),  node);	  tryMinimizeCondition(node.getExpression(),    node);    	non-compiled	[CE]  	24	None	replace
78	[BUG]  [BUGGY]  tryMinimizeCondition(node.getFirstChild(),  node);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getFirstChild(),  node);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getFirstChild(),  node);	  tryMinimizeCondition(node.getExpression(),    node);    	non-compiled	[CE]  	24	None	replace
79	[BUG]  [BUGGY]  tryMinimizeCondition(node.getSecondChild(),  node);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getSecondChild(),  node);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getSecondChild(),  node);	  tryMinimizeCondition(node.getSecondChild());    	non-compiled	[CE]  	54	None	replace
80	[BUG]  [BUGGY]  tryMinimizeCondition(node.getSecondChild(),  NodeUtil.getConditionExpression(node));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getSecondChild(),  NodeUtil.getConditionExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getSecondChild(),  NodeUtil.getConditionExpression(node));	  tryMinimizeCondition(node.getSecondChild());    	non-compiled	[CE]  	54	None	replace
81	[BUG]  [BUGGY]  tryMinimizeCondition(node.getSecondChild(),  NodeUtil.getExpressionExpression(node));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getSecondChild(),  NodeUtil.getExpressionExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getSecondChild(),  NodeUtil.getExpressionExpression(node));	  tryMinimizeCondition(node.getSecondChild());    	non-compiled	[CE]  	54	None	replace
82	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node)-  1,  node.getLastChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node)-  1,  node.getLastChild());  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node)-  1,  node.getLastChild());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node),    node.getLastChild());    	non-compiled	[CE]  	26	None	replace
83	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node)/  2,  node.getLastChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node)/  2,  node.getLastChild());  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node)/  2,  node.getLastChild());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node),    node.getLastChild());    	non-compiled	[CE]  	26	None	replace
84	[BUG]  [BUGGY]  tryMinimizeCondition(node.getFirstChild(),  NodeUtil.getExpressionExpression(node));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getFirstChild(),  NodeUtil.getExpressionExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getFirstChild(),  NodeUtil.getExpressionExpression(node));	  tryMinimizeCondition(node.getLastChild(),    NodeUtil.getExpressionExpression(node));    	non-compiled	[CE]  	4	None	replace
85	[BUG]  [BUGGY]  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getEXPR_RESULT(node));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getEXPR_RESULT(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getLastChild(),  NodeUtil.getEXPR_RESULT(node));	  tryMinimizeCondition(node.getLastChild(),    NodeUtil.getExpressionExpression(node));    	non-compiled	[CE]  	4	None	replace
86	[BUG]  [BUGGY]  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getFunctionExpression(node));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getFunctionExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getLastChild(),  NodeUtil.getFunctionExpression(node));	  tryMinimizeCondition(node.getLastChild(),    NodeUtil.getExpressionExpression(node));    	non-compiled	[CE]  	4	None	replace
87	[BUG]  [BUGGY]  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getExprExpression(node));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getExprExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getLastChild(),  NodeUtil.getExprExpression(node));	  tryMinimizeCondition(node.getLastChild(),    NodeUtil.getExpressionExpression(node));    	non-compiled	[CE]  	4	None	replace
88	[BUG]  [BUGGY]  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getSimpleExpression(node));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getSimpleExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getLastChild(),  NodeUtil.getSimpleExpression(node));	  tryMinimizeCondition(node.getLastChild(),    NodeUtil.getExpressionExpression(node));    	non-compiled	[CE]  	4	None	replace
89	[BUG]  [BUGGY]  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getReturnExpression(node));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getReturnExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getLastChild(),  NodeUtil.getReturnExpression(node));	  tryMinimizeCondition(node.getLastChild(),    NodeUtil.getExpressionExpression(node));    	non-compiled	[CE]  	4	None	replace
90	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node)+  2);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node)+  2);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node)+  2);	  tryMinimizeCondition(NodeUtil.getConditionExpression(node)+    1);    	non-compiled	[CE]  	46	None	replace
91	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node)/  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node)/  1);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node)/  1);	  tryMinimizeCondition(NodeUtil.getConditionExpression(node)+    1);    	non-compiled	[CE]  	46	None	replace
92	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node)+  0);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node)+  0);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node)+  0);	  tryMinimizeCondition(NodeUtil.getConditionExpression(node)+    1);    	non-compiled	[CE]  	46	None	replace
93	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getImmutableSet());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getImmutableSet());  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).getImmutableSet());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getReturnType());    	non-compiled	[CE]  	40	None	replace
94	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).returnType());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).returnType());  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).returnType());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getReturnType());    	non-compiled	[CE]  	40	None	replace
95	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getReturnType(),  false);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getReturnType(),  false);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).getReturnType(),  false);	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getReturnType());    	non-compiled	[CE]  	40	None	replace
96	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getReturnType(),  true);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getReturnType(),  true);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).getReturnType(),  true);	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getReturnType());    	non-compiled	[CE]  	40	None	replace
97	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getExpressionExpress(node));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getExpressionExpress(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getExpressionExpress(node));	  tryMinimizeCondition(NodeUtil.getConditionExpress(node));    	non-compiled	[CE]  	56	None	replace
98	[BUG]  [BUGGY]  tryMinimize(NodeUtil.getConditionExpress(node));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimize(NodeUtil.getConditionExpress(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimize(NodeUtil.getConditionExpress(node));	  tryMinimizeCondition(NodeUtil.getConditionExpress(node));    	non-compiled	[CE]  	56	None	replace
99	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpress(node)+  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpress(node)+  1);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpress(node)+  1);	  tryMinimizeCondition(NodeUtil.getConditionExpress(node));    	non-compiled	[CE]  	56	None	replace
100	[BUG]  [BUGGY]  tryMinimizeCondition(node.getInitializingChild(),  node);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getInitializingChild(),  node);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getInitializingChild(),  node);	  tryMinimizeCondition(node.getInitializingChild());    	non-compiled	[CE]  	50	None	replace
101	[BUG]  [BUGGY]  tryMinimizeCondition(node.getInitializingChild(),  NodeUtil.getConditionExpression(node));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getInitializingChild(),  NodeUtil.getConditionExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getInitializingChild(),  NodeUtil.getConditionExpression(node));	  tryMinimizeCondition(node.getInitializingChild());    	non-compiled	[CE]  	50	None	replace
102	[BUG]  [BUGGY]  tryMinimizeCondition(node.getShortChild(),  NodeUtil.getConditionExpression(node));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getShortChild(),  NodeUtil.getConditionExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getShortChild(),  NodeUtil.getConditionExpression(node));	  tryMinimizeCondition(node.getShortChild(),    node);    	non-compiled	[CE]  	25	None	replace
103	[BUG]  [BUGGY]  tryMinimizeCondition(node.getShortChild(),  NodeUtil.getEXPR_RESULT(node));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getShortChild(),  NodeUtil.getEXPR_RESULT(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getShortChild(),  NodeUtil.getEXPR_RESULT(node));	  tryMinimizeCondition(node.getShortChild(),    node);    	non-compiled	[CE]  	25	None	replace
104	[BUG]  [BUGGY]  tryMinimizeCondition(node.getIntChild(),  node);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getIntChild(),  node);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getIntChild(),  node);	  tryMinimizeCondition(node.getShortChild(),    node);    	non-compiled	[CE]  	25	None	replace
105	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  tryEXPR_RESULT(node);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  tryEXPR_RESULT(node);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  tryEXPR_RESULT(node);	  tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    tryMinimizeNot(node);    	non-compiled	[CE]  	36	None	replace
106	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  tryMinimizeIf(node);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  tryMinimizeIf(node);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  tryMinimizeIf(node);	  tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    tryMinimizeNot(node);    	non-compiled	[CE]  	36	None	replace
107	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  tryMaximizeIf(node);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  tryMaximizeIf(node);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  tryMaximizeIf(node);	  tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    tryMinimizeNot(node);    	non-compiled	[CE]  	36	None	replace
108	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  tryFallThrough(node);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  tryFallThrough(node);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  tryFallThrough(node);	  tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    tryMinimizeNot(node);    	non-compiled	[CE]  	36	None	replace
109	[BUG]  [BUGGY]  Node  node  =  NodeUtil.getEXPR_RESULT(node);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  Node  node  =  NodeUtil.getEXPR_RESULT(node);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	Node  node  =  NodeUtil.getEXPR_RESULT(node);	  Node    node    =    NodeUtil.getConditionExpression(node);    	non-compiled	[CE]  	8	None	replace
110	[BUG]  [BUGGY]  Node  node  =  NodeUtil.getConditionExpression(node)+  1;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  Node  node  =  NodeUtil.getConditionExpression(node)+  1;  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	Node  node  =  NodeUtil.getConditionExpression(node)+  1;	  Node    node    =    NodeUtil.getConditionExpression(node);    	non-compiled	[CE]  	8	None	replace
111	[BUG]  [BUGGY]  Node  node  =  NodeUtil.getFunctionExpression(node);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  Node  node  =  NodeUtil.getFunctionExpression(node);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	Node  node  =  NodeUtil.getFunctionExpression(node);	  Node    node    =    NodeUtil.getConditionExpression(node);    	non-compiled	[CE]  	8	None	replace
112	[BUG]  [BUGGY]  Node  node  =  NodeUtil.getReferenceExpression(node);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  Node  node  =  NodeUtil.getReferenceExpression(node);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	Node  node  =  NodeUtil.getReferenceExpression(node);	  Node    node    =    NodeUtil.getConditionExpression(node);    	non-compiled	[CE]  	8	None	replace
113	[BUG]  [BUGGY]  Node  node  =  NodeUtil.getConditionExpression(node,  false);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  Node  node  =  NodeUtil.getConditionExpression(node,  false);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	Node  node  =  NodeUtil.getConditionExpression(node,  false);	  Node    node    =    NodeUtil.getConditionExpression(node);    	non-compiled	[CE]  	8	None	replace
114	[BUG]  [BUGGY]  Node  node  =  NodeUtil.getConditionExpr(node);  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  Node  node  =  NodeUtil.getConditionExpr(node);  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	Node  node  =  NodeUtil.getConditionExpr(node);  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));	  Node    node    =    NodeUtil.getConditionExpression(node);    return    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	10	None	replace
115	[BUG]  [BUGGY]  Node  node  =  NodeUtil.getFirstChild();  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  Node  node  =  NodeUtil.getFirstChild();  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	Node  node  =  NodeUtil.getFirstChild();  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));	  Node    node    =    NodeUtil.getConditionExpression(node);    return    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	10	None	replace
116	[BUG]  [BUGGY]  Node  node  =  NodeUtil.getEXPR_RESULT(node);  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  Node  node  =  NodeUtil.getEXPR_RESULT(node);  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	Node  node  =  NodeUtil.getEXPR_RESULT(node);  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));	  Node    node    =    NodeUtil.getConditionExpression(node);    return    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	10	None	replace
117	[BUG]  [BUGGY]  Node  node  =  NodeUtil.getConditionElement(node);  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  Node  node  =  NodeUtil.getConditionElement(node);  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	Node  node  =  NodeUtil.getConditionElement(node);  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));	  Node    node    =    NodeUtil.getConditionExpression(node);    return    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	10	None	replace
118	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionRestricted(node));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionRestricted(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionRestricted(node));	  tryMinimizeCondition(NodeUtil.getConditionRelative(node));    	non-compiled	[CE]  	44	None	replace
119	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getRelative(node));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getRelative(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getRelative(node));	  tryMinimizeCondition(NodeUtil.getConditionRelative(node));    	non-compiled	[CE]  	44	None	replace
120	[BUG]  [BUGGY]  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getExpressionStatement(node));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getExpressionStatement(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getLastChild(),  NodeUtil.getExpressionStatement(node));	  tryMinimizeCondition(node.getLastChild(),    node);    	non-compiled	[CE]  	2	None	replace
121	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getExprReturn(node));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getExprReturn(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getExprReturn(node));	  tryMinimizeCondition(NodeUtil.getExprExpression(node));    	non-compiled	[CE]  	19	None	replace
122	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getExprStatement(node));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getExprStatement(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getExprStatement(node));	  tryMinimizeCondition(NodeUtil.getExprExpression(node));    	non-compiled	[CE]  	19	None	replace
123	[BUG]  [BUGGY]  tryMinimizeCondition(node.getEXPR_RESULT(),  NodeUtil.getConditionExpression(node));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getEXPR_RESULT(),  NodeUtil.getConditionExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getEXPR_RESULT(),  NodeUtil.getConditionExpression(node));	  tryMinimizeCondition(node.getEXPR_RESULT(),    node);    	non-compiled	[CE]  	29	None	replace
124	[BUG]  [BUGGY]  tryMinimizeCondition(node.getEXPR_RESULT(),  parent);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getEXPR_RESULT(),  parent);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getEXPR_RESULT(),  parent);	  tryMinimizeCondition(node.getEXPR_RESULT(),    node);    	non-compiled	[CE]  	29	None	replace
125	[BUG]  [BUGGY]  tryMinimizeCondition(node.getEmptyChildCount(),  NodeUtil.getConditionExpression(node));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getEmptyChildCount(),  NodeUtil.getConditionExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getEmptyChildCount(),  NodeUtil.getConditionExpression(node));	  tryMinimizeCondition(node.getEmptyChildCount(),    node);    	non-compiled	[CE]  	57	None	replace
126	[BUG]  [BUGGY]  tryMinimizeCondition(node.getEmptyChildCount(),  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getEmptyChildCount(),  1);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getEmptyChildCount(),  1);	  tryMinimizeCondition(node.getEmptyChildCount(),    node);    	non-compiled	[CE]  	57	None	replace
127	[BUG]  [BUGGY]  tryMinimizeCondition(node.getEmptyChildCount(),  node  +  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getEmptyChildCount(),  node  +  1);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getEmptyChildCount(),  node  +  1);	  tryMinimizeCondition(node.getEmptyChildCount(),    node);    	non-compiled	[CE]  	57	None	replace
128	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getOwnerChild(),  false);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getOwnerChild(),  false);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).getOwnerChild(),  false);	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getOwnerChild());    	non-compiled	[CE]  	32	None	replace
129	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node)/  1,  node.getFirstChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node)/  1,  node.getFirstChild());  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node)/  1,  node.getFirstChild());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node)-    1,    node.getFirstChild());    	non-compiled	[CE]  	59	None	replace
130	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node)+  1,  node.getLastChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node)+  1,  node.getLastChild());  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node)+  1,  node.getLastChild());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node)-    1,    node.getFirstChild());    	non-compiled	[CE]  	59	None	replace
131	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getReferenceExpression(node)+  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getReferenceExpression(node)+  1);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getReferenceExpression(node)+  1);	  tryMinimizeCondition(NodeUtil.getReferenceExpression(node));    	non-compiled	[CE]  	16	None	replace
132	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getDeclarationExpression(node));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getDeclarationExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getDeclarationExpression(node));	  tryMinimizeCondition(NodeUtil.getReferenceExpression(node));    	non-compiled	[CE]  	16	None	replace
133	[BUG]  [BUGGY]  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getReturnType(node));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getReturnType(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getLastChild(),  NodeUtil.getReturnType(node));	  tryMinimizeCondition(node.getLastChild(),    NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	1	None	replace
134	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  Node;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  Node;  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  Node;	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).return    Node;    	non-compiled	[CE]  	49	None	replace
135	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node),  return  Node;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node),  return  Node;  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node),  return  Node;	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).return    Node;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
136	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node)).return  Node;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node)).return  Node;  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node)).return  Node;	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).return    Node;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
137	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).return  Token;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).return  Token;  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).return  Token;	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).return    Node;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
138	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).return  Node,  false);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).return  Node,  false);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).return  Node,  false);	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).return    Node;    	non-compiled	[CE]  <identifier>  expected	49	None	replace
139	[BUG]  [BUGGY]  tryMinimizeCondition(node.getEmptyChild(),  NodeUtil.getConditionExpression(node));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getEmptyChild(),  NodeUtil.getConditionExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getEmptyChild(),  NodeUtil.getConditionExpression(node));	  tryMinimizeCondition(node.getEmptyChild(),    node);    	non-compiled	[CE]  	5	None	replace
140	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node),  node.getLeftChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node),  node.getLeftChild());  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node),  node.getLeftChild());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node),    node.getLeastChild());    	non-compiled	[CE]  	28	None	replace
141	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node),  node.removeFirstChild());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node),  node.removeFirstChild());  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node),  node.removeFirstChild());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).removeFirstChild());    	non-compiled	[CE]  	48	None	replace
142	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).removeLastChild());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).removeLastChild());  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).removeLastChild());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).removeFirstChild());    	non-compiled	[CE]  	48	None	replace
143	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).removeChild(node);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).removeChild(node);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).removeChild(node);	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).removeFirstChild());    	non-compiled	[CE]  	48	None	replace
144	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionReturn(node)+  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionReturn(node)+  1);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionReturn(node)+  1);	  tryMinimizeCondition(NodeUtil.getConditionReturn(node));    	non-compiled	[CE]  	21	None	replace
145	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionFunctionReturn(node));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionFunctionReturn(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionFunctionReturn(node));	  tryMinimizeCondition(NodeUtil.getConditionReturn(node));    	non-compiled	[CE]  	21	None	replace
146	[BUG]  [BUGGY]  tryMinimizeCondition(node.getString(),  NodeUtil.getConditionExpression(node));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getString(),  NodeUtil.getConditionExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getString(),  NodeUtil.getConditionExpression(node));	  tryMinimizeCondition(node.getString());    	non-compiled	[CE]  	7	None	replace
147	[BUG]  [BUGGY]  tryMinimizeCondition(node.getString(),  node);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getString(),  node);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getString(),  node);	  tryMinimizeCondition(node.getString());    	non-compiled	[CE]  	7	None	replace
148	[BUG]  [BUGGY]  Predicate  node  =  NodeUtil.getConditionExpression(node):  tryMinimizeCondition(NodeUtil.getConditionExpression(node);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  Predicate  node  =  NodeUtil.getConditionExpression(node):  tryMinimizeCondition(NodeUtil.getConditionExpression(node);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	Predicate  node  =  NodeUtil.getConditionExpression(node):  tryMinimizeCondition(NodeUtil.getConditionExpression(node);	  Predicate    node    =    NodeUtil.getConditionExpression(node);    	non-compiled	[CE]  	12	None	replace
149	[BUG]  [BUGGY]  Predicate  node  =  NodeUtil.getConditionExpression(node)+  1;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  Predicate  node  =  NodeUtil.getConditionExpression(node)+  1;  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	Predicate  node  =  NodeUtil.getConditionExpression(node)+  1;	  Predicate    node    =    NodeUtil.getConditionExpression(node);    	non-compiled	[CE]  	12	None	replace
150	[BUG]  [BUGGY]  Predicate  node  =  NodeUtil.getConditionExpression(node,  false);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  Predicate  node  =  NodeUtil.getConditionExpression(node,  false);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	Predicate  node  =  NodeUtil.getConditionExpression(node,  false);	  Predicate    node    =    NodeUtil.getConditionExpression(node);    	non-compiled	[CE]  	12	None	replace
151	[BUG]  [BUGGY]  Predicate  node  =  NodeUtil.getConditionExpression(node,  tryMinimizeNot(node));  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  Predicate  node  =  NodeUtil.getConditionExpression(node,  tryMinimizeNot(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	Predicate  node  =  NodeUtil.getConditionExpression(node,  tryMinimizeNot(node));	  Predicate    node    =    NodeUtil.getConditionExpression(node);    	non-compiled	[CE]  	12	None	replace
152	[BUG]  [BUGGY]  Predicate  node  =  NodeUtil.getEXPR_RESULT(node);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  Predicate  node  =  NodeUtil.getEXPR_RESULT(node);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	Predicate  node  =  NodeUtil.getEXPR_RESULT(node);	  Predicate    node    =    NodeUtil.getConditionExpression(node);    	non-compiled	[CE]  	12	None	replace
153	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  tryMinimizeCondition(NodeUtil.getExpressionExpression(node));  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  case  Token.EXPR_RESULT:  tryMinimizeCondition(NodeUtil.getExpressionExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	case  Token.EXPR_RESULT:  tryMinimizeCondition(NodeUtil.getExpressionExpression(node));	  case    Token.EXPR_RESULT:    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  orphaned  case	52	None	replace
154	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());	  case    Token.EXPR_RESULT:    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  orphaned  case	52	None	replace
155	[BUG]  [BUGGY]  Case  Token.EXPR_RESULT:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  Case  Token.EXPR_RESULT:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	Case  Token.EXPR_RESULT:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));	  case    Token.EXPR_RESULT:    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	52	None	replace
156	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  tryMinimizeCondition(NodeUtil.getReferenceExpression(node));  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  case  Token.EXPR_RESULT:  tryMinimizeCondition(NodeUtil.getReferenceExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	case  Token.EXPR_RESULT:  tryMinimizeCondition(NodeUtil.getReferenceExpression(node));	  case    Token.EXPR_RESULT:    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  orphaned  case	52	None	replace
157	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  tryMinimizeCondition(NodeUtil.getConditionExpression(node)+  1);  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  case  Token.EXPR_RESULT:  tryMinimizeCondition(NodeUtil.getConditionExpression(node)+  1);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	case  Token.EXPR_RESULT:  tryMinimizeCondition(NodeUtil.getConditionExpression(node)+  1);	  case    Token.EXPR_RESULT:    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  orphaned  case	52	None	replace
158	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionProp(node));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionProp(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionProp(node));	  tryMinimizeCondition(NodeUtil.getConditionReturn(node));    	non-compiled	[CE]  	21	None	replace
159	[BUG]  [BUGGY]  tryMinimizeCondition(node.getExpressionChild(),  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getExpressionChild(),  null);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getExpressionChild(),  null);	  tryMinimizeCondition(node.getExpressionChild());    	non-compiled	[CE]  	6	None	replace
160	[BUG]  [BUGGY]  tryMinimizeCondition(node.getEXPR_RESULTChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getEXPR_RESULTChild());  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getEXPR_RESULTChild());	  tryMinimizeCondition(node.getExpressionShortChild());    	non-compiled	[CE]  	47	None	replace
161	[BUG]  [BUGGY]  ConditionExpression  node  =  NodeUtil.getConditionExpression(node);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  ConditionExpression  node  =  NodeUtil.getConditionExpression(node);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	ConditionExpression  node  =  NodeUtil.getConditionExpression(node);	  if(NodeUtil.isExpressionNode(node))    {    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    node;    }    	non-compiled	[CE]  	51	None	replace
162	[BUG]  [BUGGY]  MutableSet  <  Node>  node  =  NodeUtil.getConditionExpression(node);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  MutableSet  <  Node>  node  =  NodeUtil.getConditionExpression(node);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	MutableSet  <  Node>  node  =  NodeUtil.getConditionExpression(node);	  if(NodeUtil.isExpressionNode(node))    {    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    node;    }    	non-compiled	[CE]  	51	None	replace
163	[BUG]  [BUGGY]  ConditionExpression  node  =  NodeUtil.getConditionExpression(node);  return  node;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  ConditionExpression  node  =  NodeUtil.getConditionExpression(node);  return  node;  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	ConditionExpression  node  =  NodeUtil.getConditionExpression(node);  return  node;	  if(NodeUtil.isExpressionNode(node))    {    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    node;    }    	non-compiled	[CE]  	51	None	replace
164	[BUG]  [BUGGY]  tryMinimizeCondition(node.getLastChild(),  new  Node(Token.EXPR_RESULT));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getLastChild(),  new  Node(Token.EXPR_RESULT));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getLastChild(),  new  Node(Token.EXPR_RESULT));	  tryMinimizeCondition(node.getLastChild(),    null);    	non-compiled	[CE]  	55	None	replace
165	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(node))  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  NodeUtil.getConditionExpression(node);  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  if(NodeUtil.isExpressionNode(node))  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  NodeUtil.getConditionExpression(node);  }  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	if(NodeUtil.isExpressionNode(node))  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  NodeUtil.getConditionExpression(node);  }	  tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    NodeUtil.getConditionExpression(node);    	non-compiled	[CE]  	13	None	replace
166	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  NodeUtil.getConditionExpr(node);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  NodeUtil.getConditionExpr(node);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  NodeUtil.getConditionExpr(node);	  tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    NodeUtil.getConditionExpression(node);    	non-compiled	[CE]  	13	None	replace
167	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).removeFirstChild(),  node);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).removeFirstChild(),  node);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).removeFirstChild(),  node);	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).removeFirstChild());    	non-compiled	[CE]  	48	None	replace
168	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).removeEmptyChild());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).removeEmptyChild());  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).removeEmptyChild());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).removeFirstChild());    	non-compiled	[CE]  	48	None	replace
169	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExppress(node));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExppress(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExppress(node));	  tryMinimizeCondition(NodeUtil.getConditionExpress(node));    	non-compiled	[CE]  	56	None	replace
170	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEmptyChildCount());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEmptyChildCount());  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEmptyChildCount());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getLeastChild());    	non-compiled	[CE]  	33	None	replace
171	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEmptyChildren());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEmptyChildren());  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEmptyChildren());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getLeastChild());    	non-compiled	[CE]  	33	None	replace
172	[BUG]  [BUGGY]  tryMinimizeCondition(node.getPreviousChild(),  NodeUtil.getConditionExpression(node));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getPreviousChild(),  NodeUtil.getConditionExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getPreviousChild(),  NodeUtil.getConditionExpression(node));	  tryMinimizeCondition(node.getLastChild(),    NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	1	None	replace
173	[BUG]  [BUGGY]  TryMinimizeCondition(node.getFirstChild(),  NodeUtil.getConditionExpression(node));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  TryMinimizeCondition(node.getFirstChild(),  NodeUtil.getConditionExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	TryMinimizeCondition(node.getFirstChild(),  NodeUtil.getConditionExpression(node));	  tryMinimizeCondition(node.getLastChild(),    NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	1	None	replace
174	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionRelative(node)+  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionRelative(node)+  1);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionRelative(node)+  1);	  tryMinimizeCondition(NodeUtil.getConditionRelative(node));    	non-compiled	[CE]  	44	None	replace
175	[BUG]  [BUGGY]  tryMinimizeCondition(node.getExprState());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getExprState());  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getExprState());	  tryMinimizeCondition(node.getExpr());    	non-compiled	[CE]  	38	None	replace
176	[BUG]  [BUGGY]  tryMinimizeCondition(node.getExpression(),  REGEXP_FLAGS_RE);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getExpression(),  REGEXP_FLAGS_RE);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getExpression(),  REGEXP_FLAGS_RE);	  tryMinimizeCondition(node.getExpression(),    node);    	non-compiled	[CE]  	24	None	replace
177	[BUG]  [BUGGY]  tryMinimizeCondition(node.getExpression(),  EXPR_RESULT);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getExpression(),  EXPR_RESULT);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getExpression(),  EXPR_RESULT);	  tryMinimizeCondition(node.getExpression(),    node);    	non-compiled	[CE]  	24	None	replace
178	[BUG]  [BUGGY]  tryMinimizeCondition(node.getEmptyChildCount(),  return  node);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getEmptyChildCount(),  return  node);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getEmptyChildCount(),  return  node);	  tryMinimizeCondition(node.getEmptyChildCount(),    node);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
179	[BUG]  [BUGGY]  Predicate  node  =  NodeUtil.getConditionExpression(node).restrictByNotNullOrUndefined();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  Predicate  node  =  NodeUtil.getConditionExpression(node).restrictByNotNullOrUndefined();  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	Predicate  node  =  NodeUtil.getConditionExpression(node).restrictByNotNullOrUndefined();	  Predicate    node    =    NodeUtil.getConditionExpression(node);    	non-compiled	[CE]  	12	None	replace
180	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getExprReference(node));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getExprReference(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getExprReference(node));	  tryMinimizeCondition(NodeUtil.getExprExpression(node));    	non-compiled	[CE]  	19	None	replace
181	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  token;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  token;  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  token;	  tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    node;    	non-compiled	[CE]  	9	None	replace
182	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getOwnerChild(),  node);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getOwnerChild(),  node);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).getOwnerChild(),  node);	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getOwnerChild());    	non-compiled	[CE]  	32	None	replace
183	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getReturnValue());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getReturnValue());  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).getReturnValue());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getOwnerChild());    	non-compiled	[CE]  	32	None	replace
184	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEmptyChild(),  false);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEmptyChild(),  false);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEmptyChild(),  false);	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEmptyChild());    	non-compiled	[CE]  	39	None	replace
185	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEmptyChild(),  node);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEmptyChild(),  node);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEmptyChild(),  node);	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEmptyChild());    	non-compiled	[CE]  	39	None	replace
186	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionRelated(node));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionRelated(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionRelated(node));	  tryMinimizeCondition(NodeUtil.getConditionEscaped(node));    	non-compiled	[CE]  	22	None	replace
187	[BUG]  [BUGGY]  Node  node  =  NodeUtil.getConditionExpression(node);  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node)+  1);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  Node  node  =  NodeUtil.getConditionExpression(node);  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node)+  1);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	Node  node  =  NodeUtil.getConditionExpression(node);  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node)+  1);	  Node    node    =    NodeUtil.getConditionExpression(node);    return    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	10	None	replace
188	[BUG]  [BUGGY]  Node  node  =  NodeUtil.getConditionExpression(node);  return  tryMinimizeCondition(NodeUtil.getConditionExpr(node));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  Node  node  =  NodeUtil.getConditionExpression(node);  return  tryMinimizeCondition(NodeUtil.getConditionExpr(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	Node  node  =  NodeUtil.getConditionExpression(node);  return  tryMinimizeCondition(NodeUtil.getConditionExpr(node));	  Node    node    =    NodeUtil.getConditionExpression(node);    return    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	10	None	replace
189	[BUG]  [BUGGY]  Predicate  node  =  NodeUtil.getConditionExpression(node);  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  Predicate  node  =  NodeUtil.getConditionExpression(node);  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	Predicate  node  =  NodeUtil.getConditionExpression(node);  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));	  Node    node    =    NodeUtil.getConditionExpression(node);    return    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	10	None	replace
190	[BUG]  [BUGGY]  Node  node  =  NodeUtil.getConditionExpression(node).removeFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  Node  node  =  NodeUtil.getConditionExpression(node).removeFirstChild();  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	Node  node  =  NodeUtil.getConditionExpression(node).removeFirstChild();	  Node    node    =    NodeUtil.getConditionExpression(node);    	non-compiled	[CE]  	8	None	replace
191	[BUG]  [BUGGY]  Node  node  =  NodeUtil.getConditionExpression(node).removeChild(node);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  Node  node  =  NodeUtil.getConditionExpression(node).removeChild(node);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	Node  node  =  NodeUtil.getConditionExpression(node).removeChild(node);	  Node    node    =    NodeUtil.getConditionExpression(node);    	non-compiled	[CE]  	8	None	replace
192	[BUG]  [BUGGY]  Node  node  =  NodeUtil.getConditionExpression(node).getFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  Node  node  =  NodeUtil.getConditionExpression(node).getFirstChild();  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	Node  node  =  NodeUtil.getConditionExpression(node).getFirstChild();	  Node    node    =    NodeUtil.getConditionExpression(node);    	non-compiled	[CE]  	8	None	replace
193	[BUG]  [BUGGY]  tryMinimizeCondition(node.getSecondChild()  +  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getSecondChild()  +  1);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getSecondChild()  +  1);	  tryMinimizeCondition(node.getSecondChild());    	non-compiled	[CE]  	54	None	replace
194	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node),  return  node;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node),  return  node;  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node),  return  node;	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).return    Node;    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
195	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  0;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  0;  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  0;	  tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    null;    	non-compiled	[CE]  	41	None	replace
196	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getString());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getString());  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).getString());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getLastChild());    	non-compiled	[CE]  	30	None	replace
197	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEXPR_RESULT(),  true);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEXPR_RESULT(),  true);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEXPR_RESULT(),  true);	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEXPR_RESULT());    	non-compiled	[CE]  	31	None	replace
198	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getExpr_RESULT());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getExpr_RESULT());  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).getExpr_RESULT());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEXPR_RESULT());    	non-compiled	[CE]  	31	None	replace
199	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEXPR_RESULT(),  node);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEXPR_RESULT(),  node);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEXPR_RESULT(),  node);	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEXPR_RESULT());    	non-compiled	[CE]  	31	None	replace
200	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getExpr(node));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getExpr(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getExpr(node));	  tryMinimizeCondition(NodeUtil.getExpressionExpr(node));    	non-compiled	[CE]  	20	None	replace
201	[BUG]  [BUGGY]  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getReferenceExpression(node));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getReferenceExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getLastChild(),  NodeUtil.getReferenceExpression(node));	  tryMinimizeCondition(node.getLastChild(),    node);    	non-compiled	[CE]  	2	None	replace
202	[BUG]  [BUGGY]  tryMinimizeCondition(node.getPreviousChild(),  NodeUtil.getExpressionExpression(node));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getPreviousChild(),  NodeUtil.getExpressionExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getPreviousChild(),  NodeUtil.getExpressionExpression(node));	  tryMinimizeCondition(node.getLastChild(),    NodeUtil.getExpressionExpression(node));    	non-compiled	[CE]  	4	None	replace
203	[BUG]  [BUGGY]  tryMinimizeCondition(parent.getLastChild(),  NodeUtil.getExpressionExpression(node));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(parent.getLastChild(),  NodeUtil.getExpressionExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(parent.getLastChild(),  NodeUtil.getExpressionExpression(node));	  tryMinimizeCondition(node.getLastChild(),    NodeUtil.getExpressionExpression(node));    	non-compiled	[CE]  	4	None	replace
204	[BUG]  [BUGGY]  tryMinimizeCondition(node.getFirstChild());  return  this;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getFirstChild());  return  this;  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getFirstChild());  return  this;	  tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    this;    	non-compiled	[CE]  	42	None	replace
205	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node)+  3);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node)+  3);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node)+  3);	  tryMinimizeCondition(NodeUtil.getConditionExpression(node)+    1);    	non-compiled	[CE]  	46	None	replace
206	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node)+  4);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node)+  4);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node)+  4);	  tryMinimizeCondition(NodeUtil.getConditionExpression(node)+    1);    	non-compiled	[CE]  	46	None	replace
207	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getExprReturnType());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getExprReturnType());  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).getExprReturnType());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getReturnType());    	non-compiled	[CE]  	40	None	replace
208	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getExprType());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getExprType());  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).getExprType());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getReturnType());    	non-compiled	[CE]  	40	None	replace
209	[BUG]  [BUGGY]  Node  node  =  node.cloneTree();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  Node  node  =  node.cloneTree();  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	Node  node  =  node.cloneTree();	  Node    node    =    node.getFirstChild();    	non-compiled	[CE]  	43	None	replace
210	[BUG]  [BUGGY]  tryMinimizeCondition(node.getNext(),  NodeUtil.getConditionExpression(node));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getNext(),  NodeUtil.getConditionExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getNext(),  NodeUtil.getConditionExpression(node));	  tryMinimizeCondition(node.getExpression(),    NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	23	None	replace
211	[BUG]  [BUGGY]  tryMinimizeCondition(node.getParent(),  NodeUtil.getConditionExpression(node));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getParent(),  NodeUtil.getConditionExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getParent(),  NodeUtil.getConditionExpression(node));	  tryMinimizeCondition(node.getExpression(),    NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	23	None	replace
212	[BUG]  [BUGGY]  tryMinimizeCondition(node.getType(),  NodeUtil.getConditionExpression(node));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getType(),  NodeUtil.getConditionExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getType(),  NodeUtil.getConditionExpression(node));	  tryMinimizeCondition(node.getExpression(),    NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	23	None	replace
213	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node)-  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node)-  1);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node)-  1);	  tryMinimizeCondition(NodeUtil.getConditionExpression(node)-    1,    node.getFirstChild());    	non-compiled	[CE]  	59	None	replace
214	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node)/  2,  node.getOwnerChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node)/  2,  node.getOwnerChild());  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node)/  2,  node.getOwnerChild());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node),    node.getOwnerChild());    	non-compiled	[CE]  	27	None	replace
215	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node)-  1,  node.getOwnerChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node)-  1,  node.getOwnerChild());  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node)-  1,  node.getOwnerChild());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node),    node.getOwnerChild());    	non-compiled	[CE]  	27	None	replace
216	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node)&  node.getOwnerChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node)&  node.getOwnerChild());  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node)&  node.getOwnerChild());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node),    node.getOwnerChild());    	non-compiled	[CE]  	27	None	replace
217	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getAssignedValue());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getAssignedValue());  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).getAssignedValue());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEXPR_RESULT());    	non-compiled	[CE]  	31	None	replace
218	[BUG]  [BUGGY]  tryMinimizeCondition(node.getDoubleChild(),  0);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getDoubleChild(),  0);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getDoubleChild(),  0);	  tryMinimizeCondition(node.getDoubleChild());    	non-compiled	[CE]  	58	None	replace
219	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(node))  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  null;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  if(NodeUtil.isExpressionNode(node))  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  null;  }  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	if(NodeUtil.isExpressionNode(node))  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  null;  }	  tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    tryMinimizeNot(node);    	non-compiled	[CE]  	36	None	replace
220	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(node))  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  tryMinimizeNot(node);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  if(NodeUtil.isExpressionNode(node))  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  tryMinimizeNot(node);  }  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	if(NodeUtil.isExpressionNode(node))  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  tryMinimizeNot(node);  }	  tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    tryMinimizeNot(node);    	non-compiled	[CE]  	36	None	replace
221	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpr(node));  return  this;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpr(node));  return  this;  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpr(node));  return  this;	  tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    this;    	non-compiled	[CE]  	42	None	replace
222	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEmptyParent());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEmptyParent());  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEmptyParent());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getReturnType());    	non-compiled	[CE]  	40	None	replace
223	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getDeclaration());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getDeclaration());  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).getDeclaration());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getReturnType());    	non-compiled	[CE]  	40	None	replace
224	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node)-  1,  node.getChildCount());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node)-  1,  node.getChildCount());  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node)-  1,  node.getChildCount());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node)-    1,    node.getFirstChild());    	non-compiled	[CE]  	59	None	replace
225	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node)-  1,  node.getFirstChild(),  null);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node)-  1,  node.getFirstChild(),  null);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node)-  1,  node.getFirstChild(),  null);	  tryMinimizeCondition(NodeUtil.getConditionExpression(node)-    1,    node.getFirstChild());    	non-compiled	[CE]  	59	None	replace
226	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpressRelative(node));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpressRelative(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpressRelative(node));	  tryMinimizeCondition(NodeUtil.getConditionRelative(node));    	non-compiled	[CE]  	44	None	replace
227	[BUG]  [BUGGY]  tryMinimizeCondition(node.getInitializingChild()  +  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getInitializingChild()  +  1);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getInitializingChild()  +  1);	  tryMinimizeCondition(node.getInitializingChild());    	non-compiled	[CE]  	50	None	replace
228	[BUG]  [BUGGY]  tryMinimizeCondition(node.getExpression(),  parent);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getExpression(),  parent);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getExpression(),  parent);	  tryMinimizeCondition(node.getExpression(),    node);    	non-compiled	[CE]  	24	None	replace
229	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getEscapedExprExpression(node));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getEscapedExprExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getEscapedExprExpression(node));	  tryMinimizeCondition(NodeUtil.getExprExpression(node));    	non-compiled	[CE]  	19	None	replace
230	[BUG]  [BUGGY]  tryMinimizeCondition(node.getEXPR_RESULT(),  true);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getEXPR_RESULT(),  true);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getEXPR_RESULT(),  true);	  tryMinimizeCondition(node.getEXPR_RESULT(),    node);    	non-compiled	[CE]  	29	None	replace
231	[BUG]  [BUGGY]  Predicate  node  =  NodeUtil.getConditionExpression(node)-  1;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  Predicate  node  =  NodeUtil.getConditionExpression(node)-  1;  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	Predicate  node  =  NodeUtil.getConditionExpression(node)-  1;	  Predicate    node    =    NodeUtil.getConditionExpression(node);    	non-compiled	[CE]  	12	None	replace
232	[BUG]  [BUGGY]  Predicate  node  =  NodeUtil.getConditionExpression(node).removeChild(node);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  Predicate  node  =  NodeUtil.getConditionExpression(node).removeChild(node);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	Predicate  node  =  NodeUtil.getConditionExpression(node).removeChild(node);	  Predicate    node    =    NodeUtil.getConditionExpression(node);    	non-compiled	[CE]  	12	None	replace
233	[BUG]  [BUGGY]  Node  node  =  NodeUtil.getConditionExpression(node);  if(node!=  null)  {  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  Node  node  =  NodeUtil.getConditionExpression(node);  if(node!=  null)  {  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  }  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	Node  node  =  NodeUtil.getConditionExpression(node);  if(node!=  null)  {  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  }	  Node    node    =    NodeUtil.getConditionExpression(node);    return    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	10	None	replace
234	[BUG]  [BUGGY]  Node  node  =  node.removeChildren();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  Node  node  =  node.removeChildren();  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	Node  node  =  node.removeChildren();	  Node    node    =    node.getFirstChild();    	non-compiled	[CE]  	43	None	replace
235	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionNull(node));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionNull(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionNull(node));	  tryMinimizeCondition(NodeUtil.getConditionEscaped(node));    	non-compiled	[CE]  	22	None	replace
236	[BUG]  [BUGGY]  tryMinimizeCondition(node.getLastChild(),  false);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getLastChild(),  false);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getLastChild(),  false);	  tryMinimizeCondition(node.getLastChild(),    null);    	non-compiled	[CE]  	55	None	replace
237	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(node))  {  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  if(NodeUtil.isExpressionNode(node))  {  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  }  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	if(NodeUtil.isExpressionNode(node))  {  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  }	  return    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	11	None	replace
238	[BUG]  [BUGGY]  tryMinimizeCondition(node.getEmptyChildCount(),  2);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getEmptyChildCount(),  2);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getEmptyChildCount(),  2);	  tryMinimizeCondition(node.getEmptyChildCount(),    node);    	non-compiled	[CE]  	57	None	replace
239	[BUG]  [BUGGY]  tryMinimizeCondition(node.getEmptyChildCount(),  4);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getEmptyChildCount(),  4);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getEmptyChildCount(),  4);	  tryMinimizeCondition(node.getEmptyChildCount(),    node);    	non-compiled	[CE]  	57	None	replace
240	[BUG]  [BUGGY]  parent.replaceChild(node,  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  parent.replaceChild(node,  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	parent.replaceChild(node,  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;	  if(NodeUtil.isExpressionNode(node))    {    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    node;    }    	non-compiled	[CE]  	51	None	replace
241	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExpressionNode(node));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  Preconditions.checkState(NodeUtil.isExpressionNode(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	Preconditions.checkState(NodeUtil.isExpressionNode(node));	  if(NodeUtil.isExpressionNode(node))    {    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    node;    }    	non-compiled	[CE]  	51	None	replace
242	[BUG]  [BUGGY]  parent.replaceChild(node,  tryMinimizeCondition(node.getFirstChild()));  return  node;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  parent.replaceChild(node,  tryMinimizeCondition(node.getFirstChild()));  return  node;  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	parent.replaceChild(node,  tryMinimizeCondition(node.getFirstChild()));  return  node;	  if(NodeUtil.isExpressionNode(node))    {    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    node;    }    	non-compiled	[CE]  	51	None	replace
243	[BUG]  [BUGGY]  tryMinimizeCondition(node.getEmptyChild(),  parent);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getEmptyChild(),  parent);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getEmptyChild(),  parent);	  tryMinimizeCondition(node.getEmptyChild(),    node);    	non-compiled	[CE]  	5	None	replace
244	[BUG]  [BUGGY]  tryMinimizeCondition(node.getShortChild(),  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getShortChild(),  null);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getShortChild(),  null);	  tryMinimizeCondition(node.getShortChild(),    node);    	non-compiled	[CE]  	25	None	replace
245	[BUG]  [BUGGY]  tryMinimizeCondition(node.getShortChild(),  parent);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getShortChild(),  parent);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getShortChild(),  parent);	  tryMinimizeCondition(node.getShortChild(),    node);    	non-compiled	[CE]  	25	None	replace
246	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getDeclaringExpression(node));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getDeclaringExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getDeclaringExpression(node));	  tryMinimizeCondition(NodeUtil.getReferenceExpression(node));    	non-compiled	[CE]  	16	None	replace
247	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpressBlock(node));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpressBlock(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpressBlock(node));	  tryMinimizeCondition(NodeUtil.getConditionExpress(node));    	non-compiled	[CE]  	56	None	replace
248	[BUG]  [BUGGY]  Node  node  =  NodeUtil.getConditionExpression(node).cloneTree();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  Node  node  =  NodeUtil.getConditionExpression(node).cloneTree();  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	Node  node  =  NodeUtil.getConditionExpression(node).cloneTree();	  Node    node    =    NodeUtil.getConditionExpression(node);    	non-compiled	[CE]  	8	None	replace
249	[BUG]  [BUGGY]  Node  node  =  NodeUtil.getConditionExpression(node)-  1;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  Node  node  =  NodeUtil.getConditionExpression(node)-  1;  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	Node  node  =  NodeUtil.getConditionExpression(node)-  1;	  Node    node    =    NodeUtil.getConditionExpression(node);    	non-compiled	[CE]  	8	None	replace
250	[BUG]  [BUGGY]  Node  node  =  NodeUtil.getConditionExpression(node  +  1);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  Node  node  =  NodeUtil.getConditionExpression(node  +  1);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	Node  node  =  NodeUtil.getConditionExpression(node  +  1);	  Node    node    =    NodeUtil.getConditionExpression(node);    	non-compiled	[CE]  	8	None	replace
251	[BUG]  [BUGGY]  tryMinimizeCondition(node.getLeftChild(),  NodeUtil.getConditionExpression(node));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getLeftChild(),  NodeUtil.getConditionExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getLeftChild(),  NodeUtil.getConditionExpression(node));	  tryMinimizeCondition(node.getLeftChild());    	non-compiled	[CE]  	3	None	replace
252	[BUG]  [BUGGY]  TryMinimizeCondition(node.getFirstChild(),  NodeUtil.getExpressionExpression(node));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  TryMinimizeCondition(node.getFirstChild(),  NodeUtil.getExpressionExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	TryMinimizeCondition(node.getFirstChild(),  NodeUtil.getExpressionExpression(node));	  tryMinimizeCondition(node.getLastChild(),    NodeUtil.getExpressionExpression(node));    	non-compiled	[CE]  	4	None	replace
253	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).return  null;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).return  null;  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).return  null;	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEmptyChild());    	non-compiled	[CE]  <identifier>  expected	39	None	replace
254	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).return  null);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).return  null);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).return  null);	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEmptyChild());    	non-compiled	[CE]  <identifier>  expected	39	None	replace
255	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).removeChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).removeChild());  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).removeChild());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEmptyChild());    	non-compiled	[CE]  	39	None	replace
256	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getOwnerStatement());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getOwnerStatement());  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).getOwnerStatement());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getOwnerChild());    	non-compiled	[CE]  	32	None	replace
257	[BUG]  [BUGGY]  tryMinimizeCondition(node.getExpressionShortChild()  +  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getExpressionShortChild()  +  1);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getExpressionShortChild()  +  1);	  tryMinimizeCondition(node.getExpressionShortChild());    	non-compiled	[CE]  	47	None	replace
258	[BUG]  [BUGGY]  tryMinimizeCondition(node.getEmptyChildCount(1));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getEmptyChildCount(1));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getEmptyChildCount(1));	  tryMinimizeCondition(node.getEmptyChildCount()    -    1);    	non-compiled	[CE]  	34	None	replace
259	[BUG]  [BUGGY]  tryMinimizeCondition(node.getEmptyChildCount(2));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getEmptyChildCount(2));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getEmptyChildCount(2));	  tryMinimizeCondition(node.getEmptyChildCount()    -    1);    	non-compiled	[CE]  	34	None	replace
260	[BUG]  [BUGGY]  tryMinimizeCondition(node.getEmbeddedChildCount());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(node.getEmbeddedChildCount());  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(node.getEmbeddedChildCount());	  tryMinimizeCondition(node.getEmptyChildCount()    -    1);    	non-compiled	[CE]  	34	None	replace
261	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).removeFirstChild(),  null);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).removeFirstChild(),  null);  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).removeFirstChild(),  null);	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).removeFirstChild());    	non-compiled	[CE]  	48	None	replace
262	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).cloneTree());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node).cloneTree());  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node).cloneTree());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node).removeFirstChild());    	non-compiled	[CE]  	48	None	replace
263	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node)/  2,  node.getLeastChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node)/  2,  node.getLeastChild());  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node)/  2,  node.getLeastChild());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node),    node.getLeastChild());    	non-compiled	[CE]  	28	None	replace
264	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node)-  1,  node.getLeastChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node)-  1,  node.getLeastChild());  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node)-  1,  node.getLeastChild());	  tryMinimizeCondition(NodeUtil.getConditionExpression(node),    node.getLeastChild());    	non-compiled	[CE]  	28	None	replace
265	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionReferences(node));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionReferences(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getConditionReferences(node));	  tryMinimizeCondition(NodeUtil.getConditionReference(node));    	non-compiled	[CE]  	45	None	replace
266	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getEmptyExpression(node));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:      [BUGGY]  tryMinimizeCondition(NodeUtil.getEmptyExpression(node));  [BUGGY]      return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	72	72	1	replace	tryMinimizeCondition(NodeUtil.getEmptyExpression(node));	  tryMinimizeCondition(NodeUtil.getExpressionExpression(node));    	non-compiled	[CE]  	14	None	replace
