bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  cond  =  n.removeChild(parent);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  n.removeChild(parent);  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  n.removeChild(parent);	  Node    cond    =    parent.removeChild(n);    	non-compiled	[CE]  	36	None	replace
2	[BUG]  [BUGGY]  Node  cond  =  parent.removeChild(parent);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.removeChild(parent);  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.removeChild(parent);	  Node    cond    =    parent.removeChild(n);    	non-compiled	[CE]  	36	None	replace
3	[BUG]  [BUGGY]  Node  cond  =  parent.removeChild(n.getString());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.removeChild(n.getString());  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.removeChild(n.getString());	  Node    cond    =    parent.removeChild(n);    	non-compiled	[CE]  	36	None	replace
4	[BUG]  [BUGGY]  Node  cond  =  parent.next();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.next();  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.next();	  Node    cond    =    n.removeFirstChild();    	non-compiled	[CE]  	1	None	replace
5	[BUG]  [BUGGY]  Node  cond  =  parent.replaceChild(n,  0);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.replaceChild(n,  0);  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.replaceChild(n,  0);	  Node    cond    =    n.removeFirstChild();    	non-compiled	[CE]  	1	None	replace
6	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getType()  :  Token.NAME;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getType()  :  Token.NAME;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getType()  :  Token.NAME;	  Node    cond    =    parent.getType()    ==    Token.VAR?    parent.getType()    :    n;    	non-compiled	[CE]  	13	None	replace
7	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getType()  :  Token.FUNCTION;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getType()  :  Token.FUNCTION;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getType()  :  Token.FUNCTION;	  Node    cond    =    parent.getType()    ==    Token.VAR?    parent.getType()    :    n;    	non-compiled	[CE]  	13	None	replace
8	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getType()  :  Token.CALL;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getType()  :  Token.CALL;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getType()  :  Token.CALL;	  Node    cond    =    parent.getType()    ==    Token.VAR?    parent.getType()    :    n;    	non-compiled	[CE]  	13	None	replace
9	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getType()  :  Token.EXPR_RESULT;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getType()  :  Token.EXPR_RESULT;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getType()  :  Token.EXPR_RESULT;	  Node    cond    =    parent.getType()    ==    Token.VAR?    parent.getType()    :    n;    	non-compiled	[CE]  	13	None	replace
10	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getType()  :  Token.GETPROP;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getType()  :  Token.GETPROP;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getType()  :  Token.GETPROP;	  Node    cond    =    parent.getType()    ==    Token.VAR?    parent.getType()    :    n;    	non-compiled	[CE]  	13	None	replace
11	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getType()  :  Token.EMPTY;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getType()  :  Token.EMPTY;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getType()  :  Token.EMPTY;	  Node    cond    =    parent.getType()    ==    Token.VAR?    parent.getType()    :    n;    	non-compiled	[CE]  	13	None	replace
12	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getType()  :  Token.BLOCK;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getType()  :  Token.BLOCK;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getType()  :  Token.BLOCK;	  Node    cond    =    parent.getType()    ==    Token.VAR?    parent.getType()    :    n;    	non-compiled	[CE]  	13	None	replace
13	[BUG]  [BUGGY]  Node  cond  =  parent.getCondition();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getCondition();  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getCondition();	  Node    cond    =    parent.getPrevious();    	non-compiled	[CE]  	8	None	replace
14	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.getNext()  :  n;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.getNext()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.getNext()  :  n;	  Node    cond    =    parent.getType()    ==    Token.CATCH?    parent.getParent()    :    n;    	non-compiled	[CE]  	42	None	replace
15	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.getString()  :  n;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.getString()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.getString()  :  n;	  Node    cond    =    parent.getType()    ==    Token.CATCH?    parent.getParent()    :    n;    	non-compiled	[CE]  	42	None	replace
16	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.getType()  :  Token.NAME;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.getType()  :  Token.NAME;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.getType()  :  Token.NAME;	  Node    cond    =    parent.getType()    ==    Token.CATCH?    parent.getParent()    :    n;    	non-compiled	[CE]  	42	None	replace
17	[BUG]  [BUGGY]  Node  assign  =  parent.getNext();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  assign  =  parent.getNext();  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  assign  =  parent.getNext();	  Node    assign    =    parent.getParent();    	non-compiled	[CE]  	10	None	replace
18	[BUG]  [BUGGY]  Node  assign  =  n.getParent();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  assign  =  n.getParent();  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  assign  =  n.getParent();	  Node    assign    =    parent.getParent();    	non-compiled	[CE]  	10	None	replace
19	[BUG]  [BUGGY]  Node  assign  =  parent.getLastChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  assign  =  parent.getLastChild();  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  assign  =  parent.getLastChild();	  Node    assign    =    parent.getParent();    	non-compiled	[CE]  	10	None	replace
20	[BUG]  [BUGGY]  Node  assign  =  n.getNext();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  assign  =  n.getNext();  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  assign  =  n.getNext();	  Node    assign    =    parent.getParent();    	non-compiled	[CE]  	10	None	replace
21	[BUG]  [BUGGY]  Node  assign  =  parent.getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  assign  =  parent.getType()  ==  Token.EXPR_RESULT;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  assign  =  parent.getType()  ==  Token.EXPR_RESULT;	  Node    assign    =    parent.getParent();    	non-compiled	[CE]  	10	None	replace
22	[BUG]  [BUGGY]  Preconditions.checkArgument(parent  ==  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Preconditions.checkArgument(parent  ==  null);  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Preconditions.checkArgument(parent  ==  null);	  Preconditions.checkArgument(parent!=    null);    	non-compiled	[CE]  	20	None	replace
23	[BUG]  [BUGGY]  Preconditions.checkArgument(parent!=  null  &&  parent.getType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Preconditions.checkArgument(parent!=  null  &&  parent.getType()  ==  Token.FUNCTION);  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Preconditions.checkArgument(parent!=  null  &&  parent.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(parent!=    null);    	non-compiled	[CE]  	20	None	replace
24	[BUG]  [BUGGY]  Preconditions.checkArgument(parent!=  null  &&  parent.getType()  ==  Token.NAME);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Preconditions.checkArgument(parent!=  null  &&  parent.getType()  ==  Token.NAME);  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Preconditions.checkArgument(parent!=  null  &&  parent.getType()  ==  Token.NAME);	  Preconditions.checkArgument(parent!=    null);    	non-compiled	[CE]  	20	None	replace
25	[BUG]  [BUGGY]  Preconditions.checkArgument(parent!=  null  &&  parent.getType()  ==  Token.VAR);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Preconditions.checkArgument(parent!=  null  &&  parent.getType()  ==  Token.VAR);  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Preconditions.checkArgument(parent!=  null  &&  parent.getType()  ==  Token.VAR);	  Preconditions.checkArgument(parent!=    null);    	non-compiled	[CE]  	20	None	replace
26	[BUG]  [BUGGY]  Preconditions.checkArgument(parent!=  null  ||  parent.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Preconditions.checkArgument(parent!=  null  ||  parent.getType()  ==  Token.FUNCTION);  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Preconditions.checkArgument(parent!=  null  ||  parent.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(parent!=    null);    	non-compiled	[CE]  	20	None	replace
27	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.getFirstChild()  :  null;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.getFirstChild()  :  null;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.getFirstChild()  :  null;	  Node    cond    =    parent.getType()    ==    Token.CATCH?    parent.getFirstChild()    :    n;    	non-compiled	[CE]  	37	None	replace
28	[BUG]  [BUGGY]  Node  cond  =  n.getType()  ==  Token.CATCH?  parent.getFirstChild()  :  n;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  n.getType()  ==  Token.CATCH?  parent.getFirstChild()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  n.getType()  ==  Token.CATCH?  parent.getFirstChild()  :  n;	  Node    cond    =    parent.getType()    ==    Token.CATCH?    parent.getFirstChild()    :    n;    	non-compiled	[CE]  	37	None	replace
29	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getFirstChild()  :  null;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getFirstChild()  :  null;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getFirstChild()  :  null;	  Node    cond    =    parent.getType()    ==    Token.NAME?    parent.getFirstChild()    :    n;    	non-compiled	[CE]  	35	None	replace
30	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getString()  :  n;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getString()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getString()  :  n;	  Node    cond    =    parent.getType()    ==    Token.NAME?    parent.getFirstChild()    :    n;    	non-compiled	[CE]  	35	None	replace
31	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getNext()  :  n;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getNext()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getNext()  :  n;	  Node    cond    =    parent.getType()    ==    Token.NAME?    parent.getFirstChild()    :    n;    	non-compiled	[CE]  	35	None	replace
32	[BUG]  [BUGGY]  Node  cond  =  parent  ==  null?  parent.getFirstChild()  :  n;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent  ==  null?  parent.getFirstChild()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent  ==  null?  parent.getFirstChild()  :  n;	  Node    cond    =    parent!=    null?    parent.getFirstChild()    :    n;    	non-compiled	[CE]  	5	None	replace
33	[BUG]  [BUGGY]  Node  cond  =  parent  ==  null?  parent.getLastChild()  :  n;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent  ==  null?  parent.getLastChild()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent  ==  null?  parent.getLastChild()  :  n;	  Node    cond    =    parent!=    null?    parent.getFirstChild()    :    n;    	non-compiled	[CE]  	5	None	replace
34	[BUG]  [BUGGY]  Node  cond  =  parent!=  null?  parent.getType()  :  n;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent!=  null?  parent.getType()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent!=  null?  parent.getType()  :  n;	  Node    cond    =    parent!=    null?    parent.getFirstChild()    :    n;    	non-compiled	[CE]  	5	None	replace
35	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getFirstChild()  :  null;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getFirstChild()  :  null;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getFirstChild()  :  null;	  Node    cond    =    parent.getType()    ==    Token.VAR?    parent.getFirstChild()    :    n;    	non-compiled	[CE]  	34	None	replace
36	[BUG]  [BUGGY]  Node  cond  =  parent.getType()!=  Token.VAR?  parent.getFirstChild()  :  n;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()!=  Token.VAR?  parent.getFirstChild()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()!=  Token.VAR?  parent.getFirstChild()  :  n;	  Node    cond    =    parent.getType()    ==    Token.VAR?    parent.getFirstChild()    :    n;    	non-compiled	[CE]  	34	None	replace
37	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getNext()  :  n;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getNext()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getNext()  :  n;	  Node    cond    =    parent.getType()    ==    Token.VAR?    parent.getFirstChild()    :    n;    	non-compiled	[CE]  	34	None	replace
38	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getString()  :  Integer.toString(parent.getString());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getString()  :  Integer.toString(parent.getString());  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getString()  :  Integer.toString(parent.getString());	  Node    cond    =    parent.getType()    ==    Token.NAME?    parent.getString()    :    null;    	non-compiled	[CE]  	16	None	replace
39	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getString()  :  Collections.EMPTY_LIST;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getString()  :  Collections.EMPTY_LIST;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getString()  :  Collections.EMPTY_LIST;	  Node    cond    =    parent.getType()    ==    Token.NAME?    parent.getString()    :    null;    	non-compiled	[CE]  	16	None	replace
40	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getString()  :  Integer.toString(Locale.ENGLISH);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getString()  :  Integer.toString(Locale.ENGLISH);  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getString()  :  Integer.toString(Locale.ENGLISH);	  Node    cond    =    parent.getType()    ==    Token.NAME?    parent.getString()    :    null;    	non-compiled	[CE]  	16	None	replace
41	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getString()  :  Integer.toString(n.getString());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getString()  :  Integer.toString(n.getString());  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getString()  :  Integer.toString(n.getString());	  Node    cond    =    parent.getType()    ==    Token.NAME?    parent.getString()    :    null;    	non-compiled	[CE]  	16	None	replace
42	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getString()  :  Integer.toString(Integer.toString(n));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getString()  :  Integer.toString(Integer.toString(n));  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getString()  :  Integer.toString(Integer.toString(n));	  Node    cond    =    parent.getType()    ==    Token.NAME?    parent.getString()    :    null;    	non-compiled	[CE]  	16	None	replace
43	[BUG]  [BUGGY]  Node  cond  =  n.replaceChild(parent,  Node.newString(Token.NAME,  Token.EMPTY));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  n.replaceChild(parent,  Node.newString(Token.NAME,  Token.EMPTY));  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  n.replaceChild(parent,  Node.newString(Token.NAME,  Token.EMPTY));	  Node    cond    =    parent.replaceChild(n,    Node.newString(Token.NAME,    Token.EMPTY));    	non-compiled	[CE]  	39	None	replace
44	[BUG]  [BUGGY]  Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  Token.EXPR_RESULT));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  Token.EXPR_RESULT));  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  Token.EXPR_RESULT));	  Node    cond    =    parent.replaceChild(n,    Node.newString(Token.NAME,    Token.EMPTY));    	non-compiled	[CE]  	39	None	replace
45	[BUG]  [BUGGY]  Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  Token.VAR));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  Token.VAR));  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  Token.VAR));	  Node    cond    =    parent.replaceChild(n,    Node.newString(Token.NAME,    Token.EMPTY));    	non-compiled	[CE]  	39	None	replace
46	[BUG]  [BUGGY]  Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  Token.STRING));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  Token.STRING));  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  Token.STRING));	  Node    cond    =    parent.replaceChild(n,    Node.newString(Token.NAME,    Token.EMPTY));    	non-compiled	[CE]  	39	None	replace
47	[BUG]  [BUGGY]  Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  Token.CATCH));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  Token.CATCH));  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  Token.CATCH));	  Node    cond    =    parent.replaceChild(n,    Node.newString(Token.NAME,    Token.EMPTY));    	non-compiled	[CE]  	39	None	replace
48	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getString()  :  n;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getString()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getString()  :  n;	  Node    cond    =    parent.getType()    ==    Token.VAR?    parent.getParent()    :    n;    	non-compiled	[CE]  	14	None	replace
49	[BUG]  [BUGGY]  Node  cond  =  n.getPreviousChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  n.getPreviousChild();  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  n.getPreviousChild();	  Node    cond    =    parent.getPreviousChild();    	non-compiled	[CE]  	24	None	replace
50	[BUG]  [BUGGY]  Node  cond  =  n!=  null?  parent.getLastChild()  :  n;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  n!=  null?  parent.getLastChild()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  n!=  null?  parent.getLastChild()  :  n;	  Node    cond    =    parent!=    null?    parent.getLastChild()    :    n;    	non-compiled	[CE]  	4	None	replace
51	[BUG]  [BUGGY]  Node  cond  =  parent.getType()!=  Token.NAME?  parent.getFirstChild()  :  n;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()!=  Token.NAME?  parent.getFirstChild()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()!=  Token.NAME?  parent.getFirstChild()  :  n;	  Node    cond    =    parent.getType()    ==    Token.NAME?    parent.getLastChild()    :    n;    	non-compiled	[CE]  	6	None	replace
52	[BUG]  [BUGGY]  Node  cond  =  n.getType()  ==  Token.NAME?  parent.getLastChild()  :  n;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  n.getType()  ==  Token.NAME?  parent.getLastChild()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  n.getType()  ==  Token.NAME?  parent.getLastChild()  :  n;	  Node    cond    =    parent.getType()    ==    Token.NAME?    parent.getLastChild()    :    n;    	non-compiled	[CE]  	6	None	replace
53	[BUG]  [BUGGY]  Node  cond  =  parent.getContainingFunction();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getContainingFunction();  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getContainingFunction();	  Node    cond    =    n.getContainingFunction();    	non-compiled	[CE]  	29	None	replace
54	[BUG]  [BUGGY]  Node  cond  =  n.getContainingFunctionParent();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  n.getContainingFunctionParent();  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  n.getContainingFunctionParent();	  Node    cond    =    n.getContainingFunction();    	non-compiled	[CE]  	29	None	replace
55	[BUG]  [BUGGY]  Node  cond  =  n.getContainingFunction(parent);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  n.getContainingFunction(parent);  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  n.getContainingFunction(parent);	  Node    cond    =    n.getContainingFunction();    	non-compiled	[CE]  	29	None	replace
56	[BUG]  [BUGGY]  Node  cond  =  parent.getType()!=  Token.CATCH?  parent.getFirstChild()  :  n;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()!=  Token.CATCH?  parent.getFirstChild()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()!=  Token.CATCH?  parent.getFirstChild()  :  n;	  Node    cond    =    parent.getType()    ==    Token.CATCH?    parent.getLastChild()    :    n;    	non-compiled	[CE]  	38	None	replace
57	[BUG]  [BUGGY]  Node  cond  =  n.getType()  ==  Token.CATCH?  parent.getLastChild()  :  n;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  n.getType()  ==  Token.CATCH?  parent.getLastChild()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  n.getType()  ==  Token.CATCH?  parent.getLastChild()  :  n;	  Node    cond    =    parent.getType()    ==    Token.CATCH?    parent.getLastChild()    :    n;    	non-compiled	[CE]  	38	None	replace
58	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CALL?  parent.getFirstChild()  :  null;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CALL?  parent.getFirstChild()  :  null;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.CALL?  parent.getFirstChild()  :  null;	  Node    cond    =    parent.getType()    ==    Token.CALL?    parent.getParent()    :    null;    	non-compiled	[CE]  	15	None	replace
59	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CALL?  parent.getNext()  :  null;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CALL?  parent.getNext()  :  null;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.CALL?  parent.getNext()  :  null;	  Node    cond    =    parent.getType()    ==    Token.CALL?    parent.getParent()    :    null;    	non-compiled	[CE]  	15	None	replace
60	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CALL?  parent.getLastChild()  :  null;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CALL?  parent.getLastChild()  :  null;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.CALL?  parent.getLastChild()  :  null;	  Node    cond    =    parent.getType()    ==    Token.CALL?    parent.getParent()    :    null;    	non-compiled	[CE]  	15	None	replace
61	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CALL?  parent.getString()  :  null;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CALL?  parent.getString()  :  null;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.CALL?  parent.getString()  :  null;	  Node    cond    =    parent.getType()    ==    Token.CALL?    parent.getParent()    :    null;    	non-compiled	[CE]  	15	None	replace
62	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CALL?  parent.getChildCount()  :  null;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CALL?  parent.getChildCount()  :  null;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.CALL?  parent.getChildCount()  :  null;	  Node    cond    =    parent.getType()    ==    Token.CALL?    parent.getParent()    :    null;    	non-compiled	[CE]  	15	None	replace
63	[BUG]  [BUGGY]  Node  cond  =  n.getType()  ==  Token.CALL?  parent.getParent()  :  null;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  n.getType()  ==  Token.CALL?  parent.getParent()  :  null;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  n.getType()  ==  Token.CALL?  parent.getParent()  :  null;	  Node    cond    =    parent.getType()    ==    Token.CALL?    parent.getParent()    :    null;    	non-compiled	[CE]  	15	None	replace
64	[BUG]  [BUGGY]  Node  cond  =  n.replaceChild(parent,  Node.newString(Token.NAME,  Token.FUNCTION));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  n.replaceChild(parent,  Node.newString(Token.NAME,  Token.FUNCTION));  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  n.replaceChild(parent,  Node.newString(Token.NAME,  Token.FUNCTION));	  Node    cond    =    parent.replaceChild(n,    Node.newString(Token.NAME,    Token.FUNCTION));    	non-compiled	[CE]  	41	None	replace
65	[BUG]  [BUGGY]  Node  cond  =  parent.getInitializingChild();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getInitializingChild();  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getInitializingChild();	  Node    cond    =    parent.getContainingChild();    	non-compiled	[CE]  	17	None	replace
66	[BUG]  [BUGGY]  Node  cond  =  n.replaceChild(parent,  n);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  n.replaceChild(parent,  n);  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  n.replaceChild(parent,  n);	  Node    cond    =    parent.replaceChild(n,    n);    	non-compiled	[CE]  	25	None	replace
67	[BUG]  [BUGGY]  Node  cond  =  parent.replaceChild(n,  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.replaceChild(n,  1);  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.replaceChild(n,  1);	  Node    cond    =    parent.replaceChild(n,    n);    	non-compiled	[CE]  	25	None	replace
68	[BUG]  [BUGGY]  Node  cond  =  parent.replaceChild(parent,  n);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.replaceChild(parent,  n);  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.replaceChild(parent,  n);	  Node    cond    =    parent.replaceChild(n,    n);    	non-compiled	[CE]  	25	None	replace
69	[BUG]  [BUGGY]  Node  cond  =  parent.replaceChild(n,  -1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.replaceChild(n,  -1);  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.replaceChild(n,  -1);	  Node    cond    =    parent.replaceChild(n,    n);    	non-compiled	[CE]  	25	None	replace
70	[BUG]  [BUGGY]  Node  cond  =  parent.replaceChild(n,  '_');  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.replaceChild(n,  '_');  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.replaceChild(n,  '_');	  Node    cond    =    parent.replaceChild(n,    n);    	non-compiled	[CE]  	25	None	replace
71	[BUG]  [BUGGY]  Node  cond  =  parent  ==  null?  parent.getParent()  :  n;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent  ==  null?  parent.getParent()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent  ==  null?  parent.getParent()  :  n;	  Node    cond    =    parent!=    null?    parent.getNext()    :    n;    	non-compiled	[CE]  	28	None	replace
72	[BUG]  [BUGGY]  Node  cond  =  parent  ==  null?  parent.getNext()  :  n;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent  ==  null?  parent.getNext()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent  ==  null?  parent.getNext()  :  n;	  Node    cond    =    parent!=    null?    parent.getNext()    :    n;    	non-compiled	[CE]  	28	None	replace
73	[BUG]  [BUGGY]  Node  assign  =  n.getFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  assign  =  n.getFirstChild();  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  assign  =  n.getFirstChild();	  Node    assign    =    parent.getFirstChild();    	non-compiled	[CE]  	11	None	replace
74	[BUG]  [BUGGY]  Node  assign  =  parent.getType()  ==  Token.NAME?  parent.getLastChild()  :  n;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  assign  =  parent.getType()  ==  Token.NAME?  parent.getLastChild()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  assign  =  parent.getType()  ==  Token.NAME?  parent.getLastChild()  :  n;	  Node    assign    =    parent.getFirstChild();    	non-compiled	[CE]  	11	None	replace
75	[BUG]  [BUGGY]  Node  assign  =  parent.getType()  ==  Token.VAR?  parent.getLastChild()  :  n;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  assign  =  parent.getType()  ==  Token.VAR?  parent.getLastChild()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  assign  =  parent.getType()  ==  Token.VAR?  parent.getLastChild()  :  n;	  Node    assign    =    parent.getFirstChild();    	non-compiled	[CE]  	11	None	replace
76	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CALL?  parent.getFirstChild()  :  n;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CALL?  parent.getFirstChild()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.CALL?  parent.getFirstChild()  :  n;	  Node    cond    =    parent.getType()    ==    Token.CALL?    parent.getParent()    :    n;    	non-compiled	[CE]  	12	None	replace
77	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CALL?  parent.getNext()  :  n;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CALL?  parent.getNext()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.CALL?  parent.getNext()  :  n;	  Node    cond    =    parent.getType()    ==    Token.CALL?    parent.getParent()    :    n;    	non-compiled	[CE]  	12	None	replace
78	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CALL?  parent.getLastChild()  :  n;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CALL?  parent.getLastChild()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.CALL?  parent.getLastChild()  :  n;	  Node    cond    =    parent.getType()    ==    Token.CALL?    parent.getParent()    :    n;    	non-compiled	[CE]  	12	None	replace
79	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CALL?  parent.getString()  :  n;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CALL?  parent.getString()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.CALL?  parent.getString()  :  n;	  Node    cond    =    parent.getType()    ==    Token.CALL?    parent.getParent()    :    n;    	non-compiled	[CE]  	12	None	replace
80	[BUG]  [BUGGY]  Node  cond  =  n.getType()  ==  Token.CALL?  parent.getParent()  :  n;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  n.getType()  ==  Token.CALL?  parent.getParent()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  n.getType()  ==  Token.CALL?  parent.getParent()  :  n;	  Node    cond    =    parent.getType()    ==    Token.CALL?    parent.getParent()    :    n;    	non-compiled	[CE]  	12	None	replace
81	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.getNext()  :  n.getNext();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.getNext()  :  n.getNext();  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.getNext()  :  n.getNext();	  Node    cond    =    parent.getType()    ==    Token.CATCH?    parent.getParent()    :    n.getNext();    	non-compiled	[CE]  	31	None	replace
82	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.getFirstChild()  :  n.getNext();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.getFirstChild()  :  n.getNext();  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.getFirstChild()  :  n.getNext();	  Node    cond    =    parent.getType()    ==    Token.CATCH?    parent.getParent()    :    n.getNext();    	non-compiled	[CE]  	31	None	replace
83	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.getLastChild()  :  n.getNext();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.getLastChild()  :  n.getNext();  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.getLastChild()  :  n.getNext();	  Node    cond    =    parent.getType()    ==    Token.CATCH?    parent.getParent()    :    n.getNext();    	non-compiled	[CE]  	31	None	replace
84	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.getString()  :  n.getNext();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.getString()  :  n.getNext();  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.getString()  :  n.getNext();	  Node    cond    =    parent.getType()    ==    Token.CATCH?    parent.getParent()    :    n.getNext();    	non-compiled	[CE]  	31	None	replace
85	[BUG]  [BUGGY]  Node  cond  =  n.getType()  ==  Token.CATCH?  parent.getParent()  :  n.getNext();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  n.getType()  ==  Token.CATCH?  parent.getParent()  :  n.getNext();  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  n.getType()  ==  Token.CATCH?  parent.getParent()  :  n.getNext();	  Node    cond    =    parent.getType()    ==    Token.CATCH?    parent.getParent()    :    n.getNext();    	non-compiled	[CE]  	31	None	replace
86	[BUG]  [BUGGY]  Node  cond  =  n.removeLastChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  n.removeLastChild();  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  n.removeLastChild();	  Node    cond    =    parent.removeLastChild();    	non-compiled	[CE]  	3	None	replace
87	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getFirstChild()  :  n.getNext();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getFirstChild()  :  n.getNext();  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getFirstChild()  :  n.getNext();	  Node    cond    =    parent.getType()    ==    Token.VAR?    parent.getParent()    :    n.getNext();    	non-compiled	[CE]  	32	None	replace
88	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getNext()  :  n.getNext();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getNext()  :  n.getNext();  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getNext()  :  n.getNext();	  Node    cond    =    parent.getType()    ==    Token.VAR?    parent.getParent()    :    n.getNext();    	non-compiled	[CE]  	32	None	replace
89	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getLastChild()  :  n.getNext();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getLastChild()  :  n.getNext();  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getLastChild()  :  n.getNext();	  Node    cond    =    parent.getType()    ==    Token.VAR?    parent.getParent()    :    n.getNext();    	non-compiled	[CE]  	32	None	replace
90	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getString()  :  n.getNext();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getString()  :  n.getNext();  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getString()  :  n.getNext();	  Node    cond    =    parent.getType()    ==    Token.VAR?    parent.getParent()    :    n.getNext();    	non-compiled	[CE]  	32	None	replace
91	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getLastChild()  :  n.getNext();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getLastChild()  :  n.getNext();  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getLastChild()  :  n.getNext();	  Node    cond    =    parent.getType()    ==    Token.NAME?    parent.getFirstChild()    :    n.getNext();    	non-compiled	[CE]  	33	None	replace
92	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getFirstChild()  :  n.getLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getFirstChild()  :  n.getLastChild();  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getFirstChild()  :  n.getLastChild();	  Node    cond    =    parent.getType()    ==    Token.NAME?    parent.getFirstChild()    :    n.getNext();    	non-compiled	[CE]  	33	None	replace
93	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getFirstChild()  :  n.getParent();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getFirstChild()  :  n.getParent();  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getFirstChild()  :  n.getParent();	  Node    cond    =    parent.getType()    ==    Token.NAME?    parent.getFirstChild()    :    n.getNext();    	non-compiled	[CE]  	33	None	replace
94	[BUG]  [BUGGY]  Node  cond  =  n.getType()  ==  Token.NAME?  parent.getFirstChild()  :  n.getNext();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  n.getType()  ==  Token.NAME?  parent.getFirstChild()  :  n.getNext();  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  n.getType()  ==  Token.NAME?  parent.getFirstChild()  :  n.getNext();	  Node    cond    =    parent.getType()    ==    Token.NAME?    parent.getFirstChild()    :    n.getNext();    	non-compiled	[CE]  	33	None	replace
95	[BUG]  [BUGGY]  Node  cond  =  parent.getType()!=  Token.NAME?  parent.getFirstChild()  :  n.getNext();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()!=  Token.NAME?  parent.getFirstChild()  :  n.getNext();  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()!=  Token.NAME?  parent.getFirstChild()  :  n.getNext();	  Node    cond    =    parent.getType()    ==    Token.NAME?    parent.getFirstChild()    :    n.getNext();    	non-compiled	[CE]  	33	None	replace
96	[BUG]  [BUGGY]  Preconditions.checkState(parent  ==  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Preconditions.checkState(parent  ==  null);  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Preconditions.checkState(parent  ==  null);	  Preconditions.checkState(parent!=    null);    	non-compiled	[CE]  	19	None	replace
97	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.FUNCTION);  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(parent!=    null);    	non-compiled	[CE]  	19	None	replace
98	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.EXPR_RESULT);  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(parent!=    null);    	non-compiled	[CE]  	19	None	replace
99	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.NAME);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.NAME);  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.NAME);	  Preconditions.checkState(parent!=    null);    	non-compiled	[CE]  	19	None	replace
100	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.VAR);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.VAR);  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.VAR);	  Preconditions.checkState(parent!=    null);    	non-compiled	[CE]  	19	None	replace
101	[BUG]  [BUGGY]  Node  cond  =  n.getType()  ==  Token.VAR?  parent.getLastChild()  :  n;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  n.getType()  ==  Token.VAR?  parent.getLastChild()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  n.getType()  ==  Token.VAR?  parent.getLastChild()  :  n;	  Node    cond    =    parent.getType()    ==    Token.VAR?    parent.getLastChild()    :    n;    	non-compiled	[CE]  	7	None	replace
102	[BUG]  [BUGGY]  Node  cond  =  n.getType()  ==  Token.VAR?  parent.getFirstChild()  :  n;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  n.getType()  ==  Token.VAR?  parent.getFirstChild()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  n.getType()  ==  Token.VAR?  parent.getFirstChild()  :  n;	  Node    cond    =    parent.getType()    ==    Token.VAR?    parent.getLastChild()    :    n;    	non-compiled	[CE]  	7	None	replace
103	[BUG]  [BUGGY]  Node  cond  =  parent  ==  null?  parent.getType()  :  n;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent  ==  null?  parent.getType()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent  ==  null?  parent.getType()  :  n;	  Node    cond    =    parent!=    null?    parent.getParent()    :    n;    	non-compiled	[CE]  	27	None	replace
104	[BUG]  [BUGGY]  Node  cond  =  n.getPreviousSibling();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  n.getPreviousSibling();  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  n.getPreviousSibling();	  Node    cond    =    parent.getPreviousSibling();    	non-compiled	[CE]  	9	None	replace
105	[BUG]  [BUGGY]  Node  cond  =  parent.getNextSibling();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getNextSibling();  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getNextSibling();	  Node    cond    =    parent.getPreviousSibling();    	non-compiled	[CE]  	9	None	replace
106	[BUG]  [BUGGY]  Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  Token.CALL));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  Token.CALL));  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  Token.CALL));	  Node    cond    =    parent.replaceChild(n,    Node.newString(Token.NAME,    Token.NAME));    	non-compiled	[CE]  	40	None	replace
107	[BUG]  [BUGGY]  Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  SHORT_DESCRIPTION));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  SHORT_DESCRIPTION));  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  SHORT_DESCRIPTION));	  Node    cond    =    parent.replaceChild(n,    Node.newString(Token.NAME,    Token.NAME));    	non-compiled	[CE]  	40	None	replace
108	[BUG]  [BUGGY]  Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  SHORT_DEF));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  SHORT_DEF));  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  SHORT_DEF));	  Node    cond    =    parent.replaceChild(n,    Node.newString(Token.NAME,    Token.NAME));    	non-compiled	[CE]  	40	None	replace
109	[BUG]  [BUGGY]  Node  cond  =  parent.getContainingChild(n);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getContainingChild(n);  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getContainingChild(n);	  Node    cond    =    n.getContainingChild(parent);    	non-compiled	[CE]  	18	None	replace
110	[BUG]  [BUGGY]  Node  cond  =  n.getContainingChild(parent,  true);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  n.getContainingChild(parent,  true);  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  n.getContainingChild(parent,  true);	  Node    cond    =    n.getContainingChild(parent);    	non-compiled	[CE]  	18	None	replace
111	[BUG]  [BUGGY]  Node  cond  =  parent.getContainingChild(parent);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getContainingChild(parent);  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getContainingChild(parent);	  Node    cond    =    n.getContainingChild(parent);    	non-compiled	[CE]  	18	None	replace
112	[BUG]  [BUGGY]  Node  cond  =  n.getContainingChild(parent,  false);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  n.getContainingChild(parent,  false);  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  n.getContainingChild(parent,  false);	  Node    cond    =    n.getContainingChild(parent);    	non-compiled	[CE]  	18	None	replace
113	[BUG]  [BUGGY]  Node  cond  =  parent!=  null?  parent.getContainingFunction()  :  n.getContainingFunction();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent!=  null?  parent.getContainingFunction()  :  n.getContainingFunction();  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent!=  null?  parent.getContainingFunction()  :  n.getContainingFunction();	  Node    cond    =    n.getContainingFunction();    	non-compiled	[CE]  	29	None	replace
114	[BUG]  [BUGGY]  Node  cond  =  parent!=  null?  parent.getParent()  :  n.getContainingFunction();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent!=  null?  parent.getParent()  :  n.getContainingFunction();  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent!=  null?  parent.getParent()  :  n.getContainingFunction();	  Node    cond    =    n.getContainingFunction();    	non-compiled	[CE]  	29	None	replace
115	[BUG]  [BUGGY]  Node  cond  =  parent!=  null?  parent.getContainingFunction()  :  n;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent!=  null?  parent.getContainingFunction()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent!=  null?  parent.getContainingFunction()  :  n;	  Node    cond    =    n.getContainingFunction();    	non-compiled	[CE]  	29	None	replace
116	[BUG]  [BUGGY]  Node  cond  =  n.getContainingFunction().getParent();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  n.getContainingFunction().getParent();  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  n.getContainingFunction().getParent();	  Node    cond    =    n.getContainingFunction();    	non-compiled	[CE]  	29	None	replace
117	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CALL?  parent.getChildCount()  :  n;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CALL?  parent.getChildCount()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.CALL?  parent.getChildCount()  :  n;	  Node    cond    =    parent.getType()    ==    Token.CALL?    parent.getParent()    :    n;    	non-compiled	[CE]  	12	None	replace
118	[BUG]  [BUGGY]  Node  cond  =  n.getNextChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  n.getNextChild();  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  n.getNextChild();	  Node    cond    =    parent.getPreviousChild();    	non-compiled	[CE]  	24	None	replace
119	[BUG]  [BUGGY]  Node  assign  =  parent!=  null?  parent.getParent()  :  n;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  assign  =  parent!=  null?  parent.getParent()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  assign  =  parent!=  null?  parent.getParent()  :  n;	  Node    assign    =    parent.getParent();    	non-compiled	[CE]  	10	None	replace
120	[BUG]  [BUGGY]  Node  assign  =  parent  ==  null?  parent.getParent()  :  n;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  assign  =  parent  ==  null?  parent.getParent()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  assign  =  parent  ==  null?  parent.getParent()  :  n;	  Node    assign    =    parent.getParent();    	non-compiled	[CE]  	10	None	replace
121	[BUG]  [BUGGY]  Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  Token.ASSIGN));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  Token.ASSIGN));  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  Token.ASSIGN));	  Node    cond    =    parent.replaceChild(n,    Node.newString(Token.NAME,    Token.NAME));    	non-compiled	[CE]  	40	None	replace
122	[BUG]  [BUGGY]  Node  cond  =  n.replaceChild(parent,  Node.newString(Token.NAME,  Token.NAME));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  n.replaceChild(parent,  Node.newString(Token.NAME,  Token.NAME));  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  n.replaceChild(parent,  Node.newString(Token.NAME,  Token.NAME));	  Node    cond    =    parent.replaceChild(n,    Node.newString(Token.NAME,    Token.NAME));    	non-compiled	[CE]  	40	None	replace
123	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getLastChild()  :  null;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getLastChild()  :  null;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getLastChild()  :  null;	  Node    cond    =    parent.getType()    ==    Token.NAME?    parent.getString()    :    null;    	non-compiled	[CE]  	16	None	replace
124	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getLocalName()  :  null;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getLocalName()  :  null;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getLocalName()  :  null;	  Node    cond    =    parent.getType()    ==    Token.NAME?    parent.getString()    :    null;    	non-compiled	[CE]  	16	None	replace
125	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getString()  :  Integer.MAX_VALUE;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getString()  :  Integer.MAX_VALUE;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getString()  :  Integer.MAX_VALUE;	  Node    cond    =    parent.getType()    ==    Token.NAME?    parent.getString()    :    null;    	non-compiled	[CE]  	16	None	replace
126	[BUG]  [BUGGY]  Node  cond  =  parent.getType()!=  Token.NAME?  parent.getString()  :  null;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()!=  Token.NAME?  parent.getString()  :  null;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()!=  Token.NAME?  parent.getString()  :  null;	  Node    cond    =    parent.getType()    ==    Token.NAME?    parent.getString()    :    null;    	non-compiled	[CE]  	16	None	replace
127	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.removeFirstChild()  :  n;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.removeFirstChild()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.removeFirstChild()  :  n;	  Node    cond    =    parent.getType()    ==    Token.CATCH?    parent.getLastChild()    :    n;    	non-compiled	[CE]  	38	None	replace
128	[BUG]  [BUGGY]  Node  cond  =  n.getType()  ==  Token.NAME?  parent.getFirstChild()  :  n;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  n.getType()  ==  Token.NAME?  parent.getFirstChild()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  n.getType()  ==  Token.NAME?  parent.getFirstChild()  :  n;	  Node    cond    =    parent.getType()    ==    Token.NAME?    parent.getLastChild()    :    n;    	non-compiled	[CE]  	6	None	replace
129	[BUG]  [BUGGY]  Node  cond  =  node.getNext();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  node.getNext();  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  node.getNext();	  Node    cond    =    node.getFirstChild();    	non-compiled	[CE]  	30	None	replace
130	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null  ||  parent.getType()  ==  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Preconditions.checkState(parent!=  null  ||  parent.getType()  ==  Token.FUNCTION);  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Preconditions.checkState(parent!=  null  ||  parent.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(parent!=    null);    	non-compiled	[CE]  	19	None	replace
131	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.GETPROP);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.GETPROP);  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Preconditions.checkState(parent!=  null  &&  parent.getType()  ==  Token.GETPROP);	  Preconditions.checkState(parent!=    null);    	non-compiled	[CE]  	19	None	replace
132	[BUG]  [BUGGY]  Node  cond  =  parent.replaceChild(n,  this);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.replaceChild(n,  this);  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.replaceChild(n,  this);	  Node    cond    =    parent.replaceChild(n,    n);    	non-compiled	[CE]  	25	None	replace
133	[BUG]  [BUGGY]  Node  cond  =  parent!=  null?  parent.getContainingChild()  :  n;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent!=  null?  parent.getContainingChild()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent!=  null?  parent.getContainingChild()  :  n;	  Node    cond    =    parent.getContainingChild();    	non-compiled	[CE]  	17	None	replace
134	[BUG]  [BUGGY]  Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  Token.EMPTY)+  1);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  Token.EMPTY)+  1);  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  Token.EMPTY)+  1);	  Node    cond    =    parent.replaceChild(n,    Node.newString(Token.NAME,    Token.EMPTY));    	non-compiled	[CE]  	39	None	replace
135	[BUG]  [BUGGY]  Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  Token.EMPTY),  false);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  Token.EMPTY),  false);  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  Token.EMPTY),  false);	  Node    cond    =    parent.replaceChild(n,    Node.newString(Token.NAME,    Token.EMPTY));    	non-compiled	[CE]  	39	None	replace
136	[BUG]  [BUGGY]  Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME));  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME));	  Node    cond    =    n.removeFirstChild();    	non-compiled	[CE]  	1	None	replace
137	[BUG]  [BUGGY]  Node  cond  =  parent.replaceChild(n,  new  Node(Token.EMPTY));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.replaceChild(n,  new  Node(Token.EMPTY));	  Node    cond    =    n.removeFirstChild();    	non-compiled	[CE]  	1	None	replace
138	[BUG]  [BUGGY]  Node  cond  =  n!=  null?  parent.getFirstChild()  :  n;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  n!=  null?  parent.getFirstChild()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  n!=  null?  parent.getFirstChild()  :  n;	  Node    cond    =    parent!=    null?    parent.getFirstChild()    :    n;    	non-compiled	[CE]  	5	None	replace
139	[BUG]  [BUGGY]  Node  cond  =  n.getType()  ==  Token.CATCH?  parent.getParent()  :  n;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  n.getType()  ==  Token.CATCH?  parent.getParent()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  n.getType()  ==  Token.CATCH?  parent.getParent()  :  n;	  Node    cond    =    parent.getType()    ==    Token.CATCH?    parent.getParent()    :    n;    	non-compiled	[CE]  	42	None	replace
140	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CALL?  parent.getPrevious()  :  null;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CALL?  parent.getPrevious()  :  null;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.CALL?  parent.getPrevious()  :  null;	  Node    cond    =    parent.getType()    ==    Token.CALL?    parent.getParent()    :    null;    	non-compiled	[CE]  	15	None	replace
141	[BUG]  [BUGGY]  Node  cond  =  n!=  null?  parent.getParent()  :  n;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  n!=  null?  parent.getParent()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  n!=  null?  parent.getParent()  :  n;	  Node    cond    =    parent!=    null?    parent.getParent()    :    n;    	non-compiled	[CE]  	27	None	replace
142	[BUG]  [BUGGY]  Node  cond  =  parent!=  null?  parent.getContainingChild()  :  n.getContainingChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent!=  null?  parent.getContainingChild()  :  n.getContainingChild();  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent!=  null?  parent.getContainingChild()  :  n.getContainingChild();	  Node    cond    =    n.getContainingChild(parent);    	non-compiled	[CE]  	18	None	replace
143	[BUG]  [BUGGY]  Node  cond  =  parent!=  null?  parent.getContainingChild(n):  n.getContainingChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent!=  null?  parent.getContainingChild(n):  n.getContainingChild();  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent!=  null?  parent.getContainingChild(n):  n.getContainingChild();	  Node    cond    =    n.getContainingChild(parent);    	non-compiled	[CE]  	18	None	replace
144	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getFirstChild().getType()  :  n;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getFirstChild().getType()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getFirstChild().getType()  :  n;	  Node    cond    =    parent.getType()    ==    Token.VAR?    parent.getType()    :    n;    	non-compiled	[CE]  	13	None	replace
145	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getType()  :  Integer.MAX_VALUE;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getType()  :  Integer.MAX_VALUE;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getType()  :  Integer.MAX_VALUE;	  Node    cond    =    parent.getType()    ==    Token.VAR?    parent.getType()    :    n;    	non-compiled	[CE]  	13	None	replace
146	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.cloneTree()  :  n;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.cloneTree()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.cloneTree()  :  n;	  Node    cond    =    parent.getType()    ==    Token.CATCH?    parent.getLastChild()    :    n;    	non-compiled	[CE]  	38	None	replace
147	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getChildCount()  :  n;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getChildCount()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getChildCount()  :  n;	  Node    cond    =    parent.getType()    ==    Token.VAR?    parent.getType()    :    n;    	non-compiled	[CE]  	13	None	replace
148	[BUG]  [BUGGY]  Node  cond  =  parent.getType()!=  Token.VAR?  parent.getType()  :  n;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()!=  Token.VAR?  parent.getType()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()!=  Token.VAR?  parent.getType()  :  n;	  Node    cond    =    parent.getType()    ==    Token.VAR?    parent.getType()    :    n;    	non-compiled	[CE]  	13	None	replace
149	[BUG]  [BUGGY]  Node  cond  =  parent.getType()!=  Token.CALL?  parent.getParent()  :  n;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()!=  Token.CALL?  parent.getParent()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()!=  Token.CALL?  parent.getParent()  :  n;	  Node    cond    =    parent.getType()    ==    Token.CALL?    parent.getParent()    :    n;    	non-compiled	[CE]  	12	None	replace
150	[BUG]  [BUGGY]  Node  cond  =  parent.getFirstChild()!=  null?  parent.getLastChild()  :  n;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getFirstChild()!=  null?  parent.getLastChild()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getFirstChild()!=  null?  parent.getLastChild()  :  n;	  Node    cond    =    parent!=    null?    parent.getLastChild()    :    n;    	non-compiled	[CE]  	4	None	replace
151	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.NAME?  parent.removeFirstChild()  :  n;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.NAME?  parent.removeFirstChild()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.NAME?  parent.removeFirstChild()  :  n;	  Node    cond    =    parent.getType()    ==    Token.NAME?    parent.getFirstChild()    :    n;    	non-compiled	[CE]  	35	None	replace
152	[BUG]  [BUGGY]  Node  cond  =  parent.replaceChild(n,  '-');  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.replaceChild(n,  '-');  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.replaceChild(n,  '-');	  Node    cond    =    parent.replaceChild(n,    n);    	non-compiled	[CE]  	25	None	replace
153	[BUG]  [BUGGY]  Node  assign  =  parent.removeFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  assign  =  parent.removeFirstChild();  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  assign  =  parent.removeFirstChild();	  Node    assign    =    parent.getFirstChild();    	non-compiled	[CE]  	11	None	replace
154	[BUG]  [BUGGY]  Node  assign  =  n.getLastChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  assign  =  n.getLastChild();  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  assign  =  n.getLastChild();	  Node    assign    =    parent.getFirstChild();    	non-compiled	[CE]  	11	None	replace
155	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.removeFirstChild()  :  n;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.removeFirstChild()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.VAR?  parent.removeFirstChild()  :  n;	  Node    cond    =    parent.getType()    ==    Token.VAR?    parent.getFirstChild()    :    n;    	non-compiled	[CE]  	34	None	replace
156	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null  ||  parent.getType()  ==  Token.VAR);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Preconditions.checkState(parent!=  null  ||  parent.getType()  ==  Token.VAR);  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Preconditions.checkState(parent!=  null  ||  parent.getType()  ==  Token.VAR);	  Preconditions.checkState(parent!=    null);    	non-compiled	[CE]  	19	None	replace
157	[BUG]  [BUGGY]  Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  Token.DECEMBER));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  Token.DECEMBER));  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  Token.DECEMBER));	  Node    cond    =    parent.replaceChild(n,    Node.newString(Token.NAME,    Token.EMPTY));    	non-compiled	[CE]  	39	None	replace
158	[BUG]  [BUGGY]  Preconditions.checkArgument(parent!=  null  ||  parent.getType()  ==  Token.VAR);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Preconditions.checkArgument(parent!=  null  ||  parent.getType()  ==  Token.VAR);  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Preconditions.checkArgument(parent!=  null  ||  parent.getType()  ==  Token.VAR);	  Preconditions.checkArgument(parent!=    null);    	non-compiled	[CE]  	20	None	replace
159	[BUG]  [BUGGY]  Preconditions.checkArgument(parent!=  null  &&  parent.getType()  ==  Token.BLOCK);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Preconditions.checkArgument(parent!=  null  &&  parent.getType()  ==  Token.BLOCK);  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Preconditions.checkArgument(parent!=  null  &&  parent.getType()  ==  Token.BLOCK);	  Preconditions.checkArgument(parent!=    null);    	non-compiled	[CE]  	20	None	replace
160	[BUG]  [BUGGY]  Node  cond  =  parent!=  null?  parent.getString()  :  n;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent!=  null?  parent.getString()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent!=  null?  parent.getString()  :  n;	  Node    cond    =    parent!=    null?    parent.getNext()    :    n;    	non-compiled	[CE]  	28	None	replace
161	[BUG]  [BUGGY]  Node  assign  =  parent.getType()  ==  Token.ASSIGN?  parent.getParent()  :  n;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  assign  =  parent.getType()  ==  Token.ASSIGN?  parent.getParent()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  assign  =  parent.getType()  ==  Token.ASSIGN?  parent.getParent()  :  n;	  Node    assign    =    parent.getParent();    	non-compiled	[CE]  	10	None	replace
162	[BUG]  [BUGGY]  Node  assign  =  parent.getType()  ==  Token.VAR?  parent.getParent()  :  n;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  assign  =  parent.getType()  ==  Token.VAR?  parent.getParent()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  assign  =  parent.getType()  ==  Token.VAR?  parent.getParent()  :  n;	  Node    assign    =    parent.getParent();    	non-compiled	[CE]  	10	None	replace
163	[BUG]  [BUGGY]  Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  Token.CASE));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  Token.CASE));  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  Token.CASE));	  Node    cond    =    parent.replaceChild(n,    Node.newString(Token.NAME,    Token.NAME));    	non-compiled	[CE]  	40	None	replace
164	[BUG]  [BUGGY]  Node  cond  =  parent.getInitialValue();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getInitialValue();  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getInitialValue();	  Node    cond    =    parent.getContainingChild();    	non-compiled	[CE]  	17	None	replace
165	[BUG]  [BUGGY]  Node  cond  =  parent.getContainingChildren();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getContainingChildren();  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getContainingChildren();	  Node    cond    =    n.getContainingChild(parent);    	non-compiled	[CE]  	18	None	replace
166	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.getParent()  :  n.getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.getParent()  :  n.getFirstChild();  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.getParent()  :  n.getFirstChild();	  Node    cond    =    parent.getType()    ==    Token.CATCH?    parent.getParent()    :    n.getNext();    	non-compiled	[CE]  	31	None	replace
167	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.getChildCount()  :  n;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.getChildCount()  :  n;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.getChildCount()  :  n;	  Node    cond    =    parent.getType()    ==    Token.CATCH?    parent.getParent()    :    n;    	non-compiled	[CE]  	42	None	replace
168	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getString()  :   " ";  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getString()  :   " ";  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getString()  :   " ";	  Node    cond    =    parent.getType()    ==    Token.NAME?    parent.getString()    :    null;    	non-compiled	[CE]  	16	None	replace
169	[BUG]  [BUGGY]  Node  cond  =  parent.getContainingFnction();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getContainingFnction();  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getContainingFnction();	  Node    cond    =    n.getContainingFunction();    	non-compiled	[CE]  	29	None	replace
170	[BUG]  [BUGGY]  Node  cond  =  n.getContainingFunctionDeclaration();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  n.getContainingFunctionDeclaration();  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  n.getContainingFunctionDeclaration();	  Node    cond    =    n.getContainingFunction();    	non-compiled	[CE]  	29	None	replace
171	[BUG]  [BUGGY]  Node  cond  =  parent.getType()!=  Token.CALL?  parent.getParent()  :  null;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()!=  Token.CALL?  parent.getParent()  :  null;  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()!=  Token.CALL?  parent.getParent()  :  null;	  Node    cond    =    parent.getType()    ==    Token.CALL?    parent.getParent()    :    null;    	non-compiled	[CE]  	15	None	replace
172	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getParent()  :  n.getFirstChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();      [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getParent()  :  n.getFirstChild();  [BUGGY]          if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getParent()  :  n.getFirstChild();	  Node    cond    =    parent.getType()    ==    Token.VAR?    parent.getParent()    :    n.getNext();    	non-compiled	[CE]  	32	None	replace
