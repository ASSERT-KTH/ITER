bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  cond  =  n.removeFirstChild();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();    [BUGGY]  Node  cond  =  n.removeFirstChild();  [BUGGY]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  n.removeFirstChild();	  Node    cond    =    parent.removeFirstChild();    	non-compiled	[CE]  	9	None	replace
2	[BUG]  [BUGGY]  Node  cond  =  parent.getParent();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();    [BUGGY]  Node  cond  =  parent.getParent();  [BUGGY]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getParent();	  Node    cond    =    parent.removeFirstChild();    	non-compiled	[CE]  	9	None	replace
3	[BUG]  [BUGGY]  Node  cond  =  parent.removeLastChild();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();    [BUGGY]  Node  cond  =  parent.removeLastChild();  [BUGGY]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.removeLastChild();	  Node    cond    =    parent.removeFirstChild();    	non-compiled	[CE]  	9	None	replace
4	[BUG]  [BUGGY]  Node  cond  =  parent!=  null?  parent.getLastChild()  :  n;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();    [BUGGY]  Node  cond  =  parent!=  null?  parent.getLastChild()  :  n;  [BUGGY]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent!=  null?  parent.getLastChild()  :  n;	  Node    cond    =    parent.getLastChild();    	non-compiled	[CE]  	3	None	replace
5	[BUG]  [BUGGY]  Node  cond  =  parent!=  null?  parent.getFirstChild()  :  n;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();    [BUGGY]  Node  cond  =  parent!=  null?  parent.getFirstChild()  :  n;  [BUGGY]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent!=  null?  parent.getFirstChild()  :  n;	  Node    cond    =    parent.getLastChild();    	non-compiled	[CE]  	3	None	replace
6	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getLastChild()  :  n;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();    [BUGGY]  Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getLastChild()  :  n;  [BUGGY]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getLastChild()  :  n;	  Node    cond    =    parent.getFirstChild();    	non-compiled	[CE]  	1	None	replace
7	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getLastChild()  :  n;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();    [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getLastChild()  :  n;  [BUGGY]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getLastChild()  :  n;	  Node    cond    =    parent.getFirstChild();    	non-compiled	[CE]  	1	None	replace
8	[BUG]  [BUGGY]  Node  cond  =  parent.getPrevious();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();    [BUGGY]  Node  cond  =  parent.getPrevious();  [BUGGY]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getPrevious();	  Node    cond    =    n.getNext();    	non-compiled	[CE]  	4	None	replace
9	[BUG]  [BUGGY]  Node  cond  =  parent.getPreviousSibling();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();    [BUGGY]  Node  cond  =  parent.getPreviousSibling();  [BUGGY]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getPreviousSibling();	  Node    cond    =    n.getLastChild();    	non-compiled	[CE]  	2	None	replace
10	[BUG]  [BUGGY]  Node  assign  =  parent.getParent();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();    [BUGGY]  Node  assign  =  parent.getParent();  [BUGGY]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  assign  =  parent.getParent();	      	non-compiled	[CE]  	7	None	replace
11	[BUG]  [BUGGY]  Node  assign  =  parent.getFirstChild();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();    [BUGGY]  Node  assign  =  parent.getFirstChild();  [BUGGY]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  assign  =  parent.getFirstChild();	      	non-compiled	[CE]  	7	None	replace
12	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CALL?  parent.getParent()  :  n;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();    [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CALL?  parent.getParent()  :  n;  [BUGGY]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.CALL?  parent.getParent()  :  n;	  Node    cond    =    n.getParent();    	non-compiled	[CE]  	5	None	replace
13	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getType()  :  n;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();    [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getType()  :  n;  [BUGGY]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getType()  :  n;	  Node    cond    =    n.getParent();    	non-compiled	[CE]  	5	None	replace
14	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getParent()  :  n;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();    [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getParent()  :  n;  [BUGGY]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getParent()  :  n;	  Node    cond    =    n.getParent();    	non-compiled	[CE]  	5	None	replace
15	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CALL?  parent.getParent()  :  null;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();    [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CALL?  parent.getParent()  :  null;  [BUGGY]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.CALL?  parent.getParent()  :  null;	  Node    cond    =    parent.getNext();    	non-compiled	[CE]  	6	None	replace
16	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getString()  :  null;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();    [BUGGY]  Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getString()  :  null;  [BUGGY]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getString()  :  null;	  Node    cond    =    parent.getNext();    	non-compiled	[CE]  	6	None	replace
17	[BUG]  [BUGGY]  Node  cond  =  parent.getContainingChild();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();    [BUGGY]  Node  cond  =  parent.getContainingChild();  [BUGGY]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getContainingChild();	  Node    cond    =    n.getContainingChild();    	non-compiled	[CE]  	8	None	replace
18	[BUG]  [BUGGY]  Node  cond  =  n.getContainingChild(parent);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();    [BUGGY]  Node  cond  =  n.getContainingChild(parent);  [BUGGY]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  n.getContainingChild(parent);	  Node    cond    =    n.getContainingChild();    	non-compiled	[CE]  	8	None	replace
19	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();    [BUGGY]  Preconditions.checkState(parent!=  null);  [BUGGY]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Preconditions.checkState(parent!=  null);	      	non-compiled	[CE]  	7	None	replace
20	[BUG]  [BUGGY]  Preconditions.checkArgument(parent!=  null);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();    [BUGGY]  Preconditions.checkArgument(parent!=  null);  [BUGGY]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Preconditions.checkArgument(parent!=  null);	      	non-compiled	[CE]  	7	None	replace
21	[BUG]  [BUGGY]  Node  cond  =  node.getLastChild();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();    [BUGGY]  Node  cond  =  node.getLastChild();  [BUGGY]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  node.getLastChild();	  Node    cond    =    parent.getLastChild();    	non-compiled	[CE]  	3	None	replace
22	[BUG]  [BUGGY]  Node  cond  =  n.getfirstChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();    [BUGGY]  Node  cond  =  n.getfirstChild();  [BUGGY]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  n.getfirstChild();	  Node    cond    =    parent.getLastChild();    	non-compiled	[CE]  	3	None	replace
23	[BUG]  [BUGGY]  Node  cond  =  parent.getfirstChild();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();    [BUGGY]  Node  cond  =  parent.getfirstChild();  [BUGGY]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getfirstChild();	  Node    cond    =    n.getLastChild();    	non-compiled	[CE]  	2	None	replace
24	[BUG]  [BUGGY]  Node  cond  =  parent.getPreviousChild();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();    [BUGGY]  Node  cond  =  parent.getPreviousChild();  [BUGGY]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getPreviousChild();	  Node    cond    =    n.getLastChild();    	non-compiled	[CE]  	2	None	replace
25	[BUG]  [BUGGY]  Node  cond  =  parent.replaceChild(n,  n);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();    [BUGGY]  Node  cond  =  parent.replaceChild(n,  n);  [BUGGY]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.replaceChild(n,  n);	  Node    cond    =    parent.removeFirstChild();    	non-compiled	[CE]  	9	None	replace
26	[BUG]  [BUGGY]  Node  cond  =  n.getPrevious();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();    [BUGGY]  Node  cond  =  n.getPrevious();  [BUGGY]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  n.getPrevious();	  Node    cond    =    n.getNext();    	non-compiled	[CE]  	4	None	replace
27	[BUG]  [BUGGY]  Node  cond  =  parent!=  null?  parent.getParent()  :  n;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();    [BUGGY]  Node  cond  =  parent!=  null?  parent.getParent()  :  n;  [BUGGY]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent!=  null?  parent.getParent()  :  n;	  Node    cond    =    parent.getNext();    	non-compiled	[CE]  	6	None	replace
28	[BUG]  [BUGGY]  Node  cond  =  parent!=  null?  parent.getNext()  :  n;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();    [BUGGY]  Node  cond  =  parent!=  null?  parent.getNext()  :  n;  [BUGGY]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent!=  null?  parent.getNext()  :  n;	  Node    cond    =    parent.getNext();    	non-compiled	[CE]  	6	None	replace
29	[BUG]  [BUGGY]  Node  cond  =  n.getContainingFunction();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();    [BUGGY]  Node  cond  =  n.getContainingFunction();  [BUGGY]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  n.getContainingFunction();	  Node    cond    =    n.getParent();    	non-compiled	[CE]  	5	None	replace
30	[BUG]  [BUGGY]  Node  cond  =  node.getFirstChild();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();    [BUGGY]  Node  cond  =  node.getFirstChild();  [BUGGY]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  node.getFirstChild();	  Node    cond    =    parent.getLastChild();    	non-compiled	[CE]  	3	None	replace
31	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.getParent()  :  n.getNext();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();    [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.getParent()  :  n.getNext();  [BUGGY]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.getParent()  :  n.getNext();	  Node    cond    =    n.getNext();    	non-compiled	[CE]  	4	None	replace
32	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getParent()  :  n.getNext();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();    [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getParent()  :  n.getNext();  [BUGGY]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getParent()  :  n.getNext();	  Node    cond    =    n.getNext();    	non-compiled	[CE]  	4	None	replace
33	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getFirstChild()  :  n.getNext();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();    [BUGGY]  Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getFirstChild()  :  n.getNext();  [BUGGY]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getFirstChild()  :  n.getNext();	  Node    cond    =    n.getNext();    	non-compiled	[CE]  	4	None	replace
34	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getFirstChild()  :  n;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();    [BUGGY]  Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getFirstChild()  :  n;  [BUGGY]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.VAR?  parent.getFirstChild()  :  n;	  Node    cond    =    parent.getFirstChild();    	non-compiled	[CE]  	1	None	replace
35	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getFirstChild()  :  n;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();    [BUGGY]  Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getFirstChild()  :  n;  [BUGGY]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.NAME?  parent.getFirstChild()  :  n;	  Node    cond    =    parent.getFirstChild();    	non-compiled	[CE]  	1	None	replace
36	[BUG]  [BUGGY]  Node  cond  =  parent.removeChild(n);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();    [BUGGY]  Node  cond  =  parent.removeChild(n);  [BUGGY]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.removeChild(n);	  Node    cond    =    n.getContainingChild();    	non-compiled	[CE]  	8	None	replace
37	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.getFirstChild()  :  n;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();    [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.getFirstChild()  :  n;  [BUGGY]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.getFirstChild()  :  n;	  Node    cond    =    n.getLastChild();    	non-compiled	[CE]  	2	None	replace
38	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.getLastChild()  :  n;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();    [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.getLastChild()  :  n;  [BUGGY]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.getLastChild()  :  n;	  Node    cond    =    n.getLastChild();    	non-compiled	[CE]  	2	None	replace
39	[BUG]  [BUGGY]  Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  Token.EMPTY));  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();    [BUGGY]  Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  Token.EMPTY));  [BUGGY]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  Token.EMPTY));	  Node    cond    =    parent.removeFirstChild();    	non-compiled	[CE]  	9	None	replace
40	[BUG]  [BUGGY]  Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  Token.NAME));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();    [BUGGY]  Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  Token.NAME));  [BUGGY]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  Token.NAME));	  Node    cond    =    parent.removeFirstChild();    	non-compiled	[CE]  	9	None	replace
41	[BUG]  [BUGGY]  Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  Token.FUNCTION));  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();    [BUGGY]  Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  Token.FUNCTION));  [BUGGY]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.replaceChild(n,  Node.newString(Token.NAME,  Token.FUNCTION));	  Node    cond    =    parent.removeFirstChild();    	non-compiled	[CE]  	9	None	replace
42	[BUG]  [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.getParent()  :  n;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();    [BUGGY]  Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.getParent()  :  n;  [BUGGY]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	262	262	1	replace	Node  cond  =  parent.getType()  ==  Token.CATCH?  parent.getParent()  :  n;	  Node    cond    =    parent.getNext();    	non-compiled	[CE]  	6	None	replace
