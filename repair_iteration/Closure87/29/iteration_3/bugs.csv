bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.NAME,  left);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.NAME,  left);  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Preconditions.checkState(left.getType()  ==  Token.NAME,  left);	  Preconditions.checkState(left.getType()    ==    Token.NAME);    	non-compiled	[CE]  	15	None	replace
2	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()!=  Token.NAME);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(left.getType()!=  Token.NAME);  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Preconditions.checkState(left.getType()!=  Token.NAME);	  Preconditions.checkState(left.getType()    ==    Token.NAME);    	non-compiled	[CE]  	15	None	replace
3	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);	  Preconditions.checkState(left.getType()    ==    Token.NAME);    	non-compiled	[CE]  	15	None	replace
4	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.AND);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.AND);  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Preconditions.checkState(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.AND);	  Preconditions.checkState(left.getType()    ==    Token.NAME);    	non-compiled	[CE]  	15	None	replace
5	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.CALL);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.CALL);  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Preconditions.checkState(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.CALL);	  Preconditions.checkState(left.getType()    ==    Token.NAME);    	non-compiled	[CE]  	15	None	replace
6	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.NAME,  left.getString());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.NAME,  left.getString());  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Preconditions.checkState(left.getType()  ==  Token.NAME,  left.getString());	  Preconditions.checkState(left.getType()    ==    Token.NAME);    	non-compiled	[CE]  	15	None	replace
7	[BUG]  [BUGGY]  Node  rightParent  =  left.getString();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  rightParent  =  left.getString();  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  rightParent  =  left.getString();	  Node    rightParent    =    left.getParent();    	non-compiled	[CE]  	6	None	replace
8	[BUG]  [BUGGY]  Node  rightParent  =  n.getRightParent();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  rightParent  =  n.getRightParent();  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  rightParent  =  n.getRightParent();	  Node    rightParent    =    n.getParent();    	non-compiled	[CE]  	8	None	replace
9	[BUG]  [BUGGY]  Node  rightParent  =  n.getNext();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  rightParent  =  n.getNext();  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  rightParent  =  n.getNext();	  Node    rightParent    =    n.getParent();    	non-compiled	[CE]  	8	None	replace
10	[BUG]  [BUGGY]  Node  right  =  node.getFirstChild();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  right  =  node.getFirstChild();  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  right  =  node.getFirstChild();	  Node    right    =    node.getLastChild();    	non-compiled	[CE]  	16	None	replace
11	[BUG]  [BUGGY]  Node  right  =  n.getNextChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  right  =  n.getNextChild();  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  right  =  n.getNextChild();	  Node    right    =    left.getNextChild();    	non-compiled	[CE]  	10	None	replace
12	[BUG]  [BUGGY]  Node  right  =  left.getParent();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  right  =  left.getParent();  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  right  =  left.getParent();	  Node    right    =    left.getNextChild();    	non-compiled	[CE]  	10	None	replace
13	[BUG]  [BUGGY]  Node  rightParent  =  n.getFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  rightParent  =  n.getFirstChild();  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  rightParent  =  n.getFirstChild();	  Node    rightParent    =    n.getLastChild();    	non-compiled	[CE]  	13	None	replace
14	[BUG]  [BUGGY]  Node  rightParent  =  left.getPreviousChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  rightParent  =  left.getPreviousChild();  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  rightParent  =  left.getPreviousChild();	  Node    rightParent    =    n.getLastChild();    	non-compiled	[CE]  	13	None	replace
15	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  left  =  n.getFirstChild();  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  left  =  n.getFirstChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  	17	None	replace
16	[BUG]  [BUGGY]  Node  left  =  left.getFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  left  =  left.getFirstChild();  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  left  =  left.getFirstChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  	17	None	replace
17	[BUG]  [BUGGY]  Node  left  =  rightParent.getLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  left  =  rightParent.getLastChild();  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  left  =  rightParent.getLastChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  	17	None	replace
18	[BUG]  [BUGGY]  Node  left  =  left.getLastChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  left  =  left.getLastChild();  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  left  =  left.getLastChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  	17	None	replace
19	[BUG]  [BUGGY]  Node  left  =  leftParent.getLastChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  left  =  leftParent.getLastChild();  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  left  =  leftParent.getLastChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  	17	None	replace
20	[BUG]  [BUGGY]  Node  left  =  right.getLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  left  =  right.getLastChild();  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  left  =  right.getLastChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  	17	None	replace
21	[BUG]  [BUGGY]  Node  right  =  n.getNext();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  right  =  n.getNext();  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  right  =  n.getNext();	  Node    right    =    left.getNext();    	non-compiled	[CE]  	1	None	replace
22	[BUG]  [BUGGY]  Node  right  =  left.getNext()  -  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  right  =  left.getNext()  -  1;  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  right  =  left.getNext()  -  1;	  Node    right    =    left.getNext();    	non-compiled	[CE]  	1	None	replace
23	[BUG]  [BUGGY]  Node  right  =  left.getNext()  :  null;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  right  =  left.getNext()  :  null;  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  right  =  left.getNext()  :  null;	  Node    right    =    left.getNext();    	non-compiled	[CE]  	1	None	replace
24	[BUG]  [BUGGY]  Node  right  =  n.getNextSibling();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  right  =  n.getNextSibling();  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  right  =  n.getNextSibling();	  Node    right    =    left.getNextSibling();    	non-compiled	[CE]  	12	None	replace
25	[BUG]  [BUGGY]  Node  right  =  left.getNextParent();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  right  =  left.getNextParent();  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  right  =  left.getNextParent();	  Node    right    =    left.getNextSibling();    	non-compiled	[CE]  	12	None	replace
26	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.BLOCK  ||  left.getType()  ==  Token.AND);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.BLOCK  ||  left.getType()  ==  Token.AND);  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Preconditions.checkState(left.getType()  ==  Token.BLOCK  ||  left.getType()  ==  Token.AND);	  Preconditions.checkState(left.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	19	None	replace
27	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()!=  Token.BLOCK);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(left.getType()!=  Token.BLOCK);  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Preconditions.checkState(left.getType()!=  Token.BLOCK);	  Preconditions.checkState(left.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	19	None	replace
28	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.AND);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.AND);  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Preconditions.checkState(left.getType()  ==  Token.AND);	  Preconditions.checkState(left.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	19	None	replace
29	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(left.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	19	None	replace
30	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.BLOCK  ||  left.getType()  ==  Token.OR);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.BLOCK  ||  left.getType()  ==  Token.OR);  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Preconditions.checkState(left.getType()  ==  Token.BLOCK  ||  left.getType()  ==  Token.OR);	  Preconditions.checkState(left.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	19	None	replace
31	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.BLOCK  ||  left.getType()  ==  Token.NAME);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.BLOCK  ||  left.getType()  ==  Token.NAME);  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Preconditions.checkState(left.getType()  ==  Token.BLOCK  ||  left.getType()  ==  Token.NAME);	  Preconditions.checkState(left.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	19	None	replace
32	[BUG]  [BUGGY]  Node  rightParent  =  left.getNext()  -  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  rightParent  =  left.getNext()  -  1;  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  rightParent  =  left.getNext()  -  1;	  Node    rightParent    =    left.getNext();    	non-compiled	[CE]  	7	None	replace
33	[BUG]  [BUGGY]  Node  right  =  n.removeFirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  right  =  n.removeFirstChild();  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  right  =  n.removeFirstChild();	  Node    right    =    left.removeFirstChild();    	non-compiled	[CE]  	2	None	replace
34	[BUG]  [BUGGY]  Node  right  =  left.removeLastChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  right  =  left.removeLastChild();  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  right  =  left.removeLastChild();	  Node    right    =    left.removeFirstChild();    	non-compiled	[CE]  	2	None	replace
35	[BUG]  [BUGGY]  Node  rightParent  =  left.removeLastChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  rightParent  =  left.removeLastChild();  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  rightParent  =  left.removeLastChild();	  Node    rightParent    =    left.removeFirstChild();    	non-compiled	[CE]  	18	None	replace
36	[BUG]  [BUGGY]  Node  rightParent  =  n.removeFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  rightParent  =  n.removeFirstChild();  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  rightParent  =  n.removeFirstChild();	  Node    rightParent    =    left.removeFirstChild();    	non-compiled	[CE]  	18	None	replace
37	[BUG]  [BUGGY]  Node  right  =  n.getString();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  right  =  n.getString();  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  right  =  n.getString();	  Node    right    =    left.getString();    	non-compiled	[CE]  	3	None	replace
38	[BUG]  [BUGGY]  Node  right  =  left.getString()  +  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  right  =  left.getString()  +  1;  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  right  =  left.getString()  +  1;	  Node    right    =    left.getString();    	non-compiled	[CE]  	3	None	replace
39	[BUG]  [BUGGY]  Node  right  =  left.getString()  -  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  right  =  left.getString()  -  1;  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  right  =  left.getString()  -  1;	  Node    right    =    left.getString();    	non-compiled	[CE]  	3	None	replace
40	[BUG]  [BUGGY]  Node  rightVal  =  left.getLastChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  rightVal  =  left.getLastChild();  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  rightVal  =  left.getLastChild();	  Node    rightVal    =    left.getNext();    	non-compiled	[CE]  	9	None	replace
41	[BUG]  [BUGGY]  Node  rightVal  =  left.getFirstChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  rightVal  =  left.getFirstChild();  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  rightVal  =  left.getFirstChild();	  Node    rightVal    =    left.getNext();    	non-compiled	[CE]  	9	None	replace
42	[BUG]  [BUGGY]  Node  rightVal  =  left.getParent();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  rightVal  =  left.getParent();  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  rightVal  =  left.getParent();	  Node    rightVal    =    left.getNext();    	non-compiled	[CE]  	9	None	replace
43	[BUG]  [BUGGY]  Node  rightVal  =  left.getNext()  -  1;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  rightVal  =  left.getNext()  -  1;  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  rightVal  =  left.getNext()  -  1;	  Node    rightVal    =    left.getNext();    	non-compiled	[CE]  	9	None	replace
44	[BUG]  [BUGGY]  Node  rightVal  =  left.getString();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  rightVal  =  left.getString();  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  rightVal  =  left.getString();	  Node    rightVal    =    left.getNext();    	non-compiled	[CE]  	9	None	replace
45	[BUG]  [BUGGY]  Node  rightVal  =  n.getNext();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  rightVal  =  n.getNext();  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  rightVal  =  n.getNext();	  Node    rightVal    =    left.getNext();    	non-compiled	[CE]  	9	None	replace
46	[BUG]  [BUGGY]  Node  leftParent  =  left.getFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  leftParent  =  left.getFirstChild();  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  leftParent  =  left.getFirstChild();	  Node    rightParent    =    left.getLastChild();    	non-compiled	[CE]  	14	None	replace
47	[BUG]  [BUGGY]  Node  rightParent  =  left.replaceChild(n,  n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  rightParent  =  left.replaceChild(n,  n);  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  rightParent  =  left.replaceChild(n,  n);	  Node    rightParent    =    left.removeFirstChild();    	non-compiled	[CE]  	18	None	replace
48	[BUG]  [BUGGY]  Node  rightParent  =  left.replaceChild(n,  newRoot);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  rightParent  =  left.replaceChild(n,  newRoot);  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  rightParent  =  left.replaceChild(n,  newRoot);	  Node    rightParent    =    left.removeFirstChild();    	non-compiled	[CE]  	18	None	replace
49	[BUG]  [BUGGY]  Node  rightParent  =  n.getGrandparent();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  rightParent  =  n.getGrandparent();  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  rightParent  =  n.getGrandparent();	  Node    rightParent    =    n.getParent();    	non-compiled	[CE]  	8	None	replace
50	[BUG]  [BUGGY]  Node  right  =  parent.getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  right  =  parent.getFirstChild();  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  right  =  parent.getFirstChild();	  Node    right    =    left    parent.getLastChild();    	non-compiled	[CE]  	5	None	replace
51	[BUG]  [BUGGY]  Node  rightParent  =  left.getfirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  rightParent  =  left.getfirstChild();  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  rightParent  =  left.getfirstChild();	  Node    rightParent    =    n.getLastChild();    	non-compiled	[CE]  	13	None	replace
52	[BUG]  [BUGGY]  Node  rightParent  =  left.getNextChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  rightParent  =  left.getNextChild();  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  rightParent  =  left.getNextChild();	  Node    rightParent    =    n.getLastChild();    	non-compiled	[CE]  	13	None	replace
53	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.NAME,  n);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.NAME,  n);  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Preconditions.checkState(left.getType()  ==  Token.NAME,  n);	  Preconditions.checkState(left.getType()    ==    Token.NAME);    	non-compiled	[CE]  	15	None	replace
54	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.NAME,  right);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.NAME,  right);  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Preconditions.checkState(left.getType()  ==  Token.NAME,  right);	  Preconditions.checkState(left.getType()    ==    Token.NAME);    	non-compiled	[CE]  	15	None	replace
55	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.NAME  &&  left.hasChildren());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.NAME  &&  left.hasChildren());  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Preconditions.checkState(left.getType()  ==  Token.NAME  &&  left.hasChildren());	  Preconditions.checkState(left.getType()    ==    Token.NAME);    	non-compiled	[CE]  	15	None	replace
56	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.BLOCK,  left);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.BLOCK,  left);  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Preconditions.checkState(left.getType()  ==  Token.BLOCK,  left);	  Preconditions.checkState(left.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	19	None	replace
57	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.BLOCK  ||  left.getType()  ==  Token.GETPROP);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.BLOCK  ||  left.getType()  ==  Token.GETPROP);  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Preconditions.checkState(left.getType()  ==  Token.BLOCK  ||  left.getType()  ==  Token.GETPROP);	  Preconditions.checkState(left.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	19	None	replace
58	[BUG]  [BUGGY]  Node  rightParent  =  left.getPreviousParent();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  rightParent  =  left.getPreviousParent();  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  rightParent  =  left.getPreviousParent();	  Node    rightParent    =    left.getParent();    	non-compiled	[CE]  	6	None	replace
59	[BUG]  [BUGGY]  Node  right  =  left.getRightChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  right  =  left.getRightChild();  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  right  =  left.getRightChild();	  Node    right    =    left.getNextChild();    	non-compiled	[CE]  	10	None	replace
60	[BUG]  [BUGGY]  Node  right  =  left.replaceChild(n,  n);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  right  =  left.replaceChild(n,  n);  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  right  =  left.replaceChild(n,  n);	  Node    right    =    left.removeFirstChild();    	non-compiled	[CE]  	2	None	replace
61	[BUG]  [BUGGY]  Node  left  =  right.getFirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  left  =  right.getFirstChild();  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  left  =  right.getFirstChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  	17	None	replace
62	[BUG]  [BUGGY]  Node  left  =  rightParent.getFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  left  =  rightParent.getFirstChild();  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  left  =  rightParent.getFirstChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  	17	None	replace
63	[BUG]  [BUGGY]  Node  rightVal  =  left.removeFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  rightVal  =  left.removeFirstChild();  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  rightVal  =  left.removeFirstChild();	  Node    rightVal    =    left.getNext();    	non-compiled	[CE]  	9	None	replace
64	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.BLOCK  ||  left.getType()  ==  Token.CATCH);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.BLOCK  ||  left.getType()  ==  Token.CATCH);  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Preconditions.checkState(left.getType()  ==  Token.BLOCK  ||  left.getType()  ==  Token.CATCH);	  Preconditions.checkState(left.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	19	None	replace
65	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.NAME  &&  left.getFirstChild()  ==  n);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.NAME  &&  left.getFirstChild()  ==  n);  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Preconditions.checkState(left.getType()  ==  Token.NAME  &&  left.getFirstChild()  ==  n);	  Preconditions.checkState(left.getType()    ==    Token.NAME);    	non-compiled	[CE]  	15	None	replace
66	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.THIS);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.THIS);  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Preconditions.checkState(left.getType()  ==  Token.NAME  ||  left.getType()  ==  Token.THIS);	  Preconditions.checkState(left.getType()    ==    Token.NAME);    	non-compiled	[CE]  	15	None	replace
67	[BUG]  [BUGGY]  Node  right  =  leftParent.getNextChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  right  =  leftParent.getNextChild();  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  right  =  leftParent.getNextChild();	  Node    right    =    left.getNextChild();    	non-compiled	[CE]  	10	None	replace
68	[BUG]  [BUGGY]  Node  rightParent  =  left.getNextSibling();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  rightParent  =  left.getNextSibling();  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  rightParent  =  left.getNextSibling();	  Node    rightParent    =    left.removeFirstChild();    	non-compiled	[CE]  	18	None	replace
69	[BUG]  [BUGGY]  Node  leftParent  =  left.getParent();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  leftParent  =  left.getParent();  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  leftParent  =  left.getParent();	  Node    rightParent    =    n.getParent();    	non-compiled	[CE]  	8	None	replace
70	[BUG]  [BUGGY]  Node  right  =  leftParent.getNext();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  right  =  leftParent.getNext();  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  right  =  leftParent.getNext();	  Node    right    =    left.getNext();    	non-compiled	[CE]  	1	None	replace
71	[BUG]  [BUGGY]  Node  rightParent  =  left.cloneTree();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();      [BUGGY]  Node  rightParent  =  left.cloneTree();  [BUGGY]          left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  rightParent  =  left.cloneTree();	  Node    rightParent    =    left.getParent();    	non-compiled	[CE]  	6	None	replace
