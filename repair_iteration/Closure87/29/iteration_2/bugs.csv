bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  right  =  left.getNext();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();    [BUGGY]  Node  right  =  left.getNext();  [BUGGY]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  right  =  left.getNext();	  Node    right    =    left.getLastChild();    	non-compiled	[CE]  	1	None	replace
2	[BUG]  [BUGGY]  Node  right  =  left.removeFirstChild();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();    [BUGGY]  Node  right  =  left.removeFirstChild();  [BUGGY]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  right  =  left.removeFirstChild();	  Node    right    =    left.getLastChild();    	non-compiled	[CE]  	1	None	replace
3	[BUG]  [BUGGY]  Node  right  =  left.getString();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();    [BUGGY]  Node  right  =  left.getString();  [BUGGY]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  right  =  left.getString();	  Node    right    =    leftParent.getFirstChild();    	non-compiled	[CE]  	5	None	replace
4	[BUG]  [BUGGY]  Node  right  =  left  parent.getFirstChild();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();    [BUGGY]  Node  right  =  left  parent.getFirstChild();  [BUGGY]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  right  =  left  parent.getFirstChild();	  Node    right    =    n.getFirstChild();    	non-compiled	[CE]  	3	None	replace
5	[BUG]  [BUGGY]  Node  right  =  left  parent.getLastChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();    [BUGGY]  Node  right  =  left  parent.getLastChild();  [BUGGY]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  right  =  left  parent.getLastChild();	  Node    right    =    leftParent.getLastChild();    	non-compiled	[CE]  	4	None	replace
6	[BUG]  [BUGGY]  Node  rightParent  =  left.getParent();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();    [BUGGY]  Node  rightParent  =  left.getParent();  [BUGGY]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  rightParent  =  left.getParent();	      	non-compiled	[CE]  	6	None	replace
7	[BUG]  [BUGGY]  Node  rightParent  =  left.getNext();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();    [BUGGY]  Node  rightParent  =  left.getNext();  [BUGGY]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  rightParent  =  left.getNext();	      	non-compiled	[CE]  	6	None	replace
8	[BUG]  [BUGGY]  Node  rightParent  =  n.getParent();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();    [BUGGY]  Node  rightParent  =  n.getParent();  [BUGGY]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  rightParent  =  n.getParent();	      	non-compiled	[CE]  	6	None	replace
9	[BUG]  [BUGGY]  Node  rightVal  =  left.getNext();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();    [BUGGY]  Node  rightVal  =  left.getNext();  [BUGGY]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  rightVal  =  left.getNext();	      	non-compiled	[CE]  	6	None	replace
10	[BUG]  [BUGGY]  Node  right  =  left.getNextChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();    [BUGGY]  Node  right  =  left.getNextChild();  [BUGGY]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  right  =  left.getNextChild();	  Node    right    =    leftParent.getLastChild();    	non-compiled	[CE]  	4	None	replace
11	[BUG]  [BUGGY]  Node  rightParent  =  left.getFirstChild();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();    [BUGGY]  Node  rightParent  =  left.getFirstChild();  [BUGGY]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  rightParent  =  left.getFirstChild();	  Node    right    =    leftParent.getLastChild();    	non-compiled	[CE]  	4	None	replace
12	[BUG]  [BUGGY]  Node  right  =  left.getNextSibling();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();    [BUGGY]  Node  right  =  left.getNextSibling();  [BUGGY]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  right  =  left.getNextSibling();	  Node    right    =    leftParent.getFirstChild();    	non-compiled	[CE]  	5	None	replace
13	[BUG]  [BUGGY]  Node  rightParent  =  n.getLastChild();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();    [BUGGY]  Node  rightParent  =  n.getLastChild();  [BUGGY]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  rightParent  =  n.getLastChild();	      	non-compiled	[CE]  	6	None	replace
14	[BUG]  [BUGGY]  Node  rightParent  =  left.getLastChild();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();    [BUGGY]  Node  rightParent  =  left.getLastChild();  [BUGGY]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  rightParent  =  left.getLastChild();	      	non-compiled	[CE]  	6	None	replace
15	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.NAME);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.NAME);  [BUGGY]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Preconditions.checkState(left.getType()  ==  Token.NAME);	      	non-compiled	[CE]  	6	None	replace
16	[BUG]  [BUGGY]  Node  right  =  node.getLastChild();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();    [BUGGY]  Node  right  =  node.getLastChild();  [BUGGY]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  right  =  node.getLastChild();	  Node    right    =    left.getLastChild();    	non-compiled	[CE]  	1	None	replace
17	[BUG]  [BUGGY]  Node  left  =  n.getLastChild();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();    [BUGGY]  Node  left  =  n.getLastChild();  [BUGGY]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  left  =  n.getLastChild();	  Node    right    =    left.getLastChild();    	non-compiled	[CE]  	1	None	replace
18	[BUG]  [BUGGY]  Node  rightParent  =  left.removeFirstChild();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();    [BUGGY]  Node  rightParent  =  left.removeFirstChild();  [BUGGY]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Node  rightParent  =  left.removeFirstChild();	      	non-compiled	[CE]  	6	None	replace
19	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.BLOCK);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  break;  }    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();    [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.BLOCK);  [BUGGY]        left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	714	714	1	replace	Preconditions.checkState(left.getType()  ==  Token.BLOCK);	      	non-compiled	[CE]  	6	None	replace
