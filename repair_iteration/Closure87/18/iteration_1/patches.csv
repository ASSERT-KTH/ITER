bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  newNode  ==  n.replaceChild(parent,  newNode);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  n.replaceChild(parent,  newNode);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  n.replaceChild(parent,  newNode);	  return    newNode    ==    parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	15	None	replace
2	[BUG]  [BUGGY]  return  newNode!=  parent.replaceChild(n,  newNode);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode!=  parent.replaceChild(n,  newNode);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  parent.replaceChild(n,  newNode);	  return    newNode    ==    parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	15	None	replace
3	[BUG]  [BUGGY]  return  newNode  ==  n.removeChild(parent);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  n.removeChild(parent);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  n.removeChild(parent);	  return    newNode    ==    parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	15	None	replace
4	[BUG]  [BUGGY]  return  newNode!=  n.replaceChild(parent,  newNode);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode!=  n.replaceChild(parent,  newNode);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  n.replaceChild(parent,  newNode);	  return    newNode    ==    parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	15	None	replace
5	[BUG]  [BUGGY]  return  newNode  ==  parent.replaceChild(n,  newNode  -  1);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  parent.replaceChild(n,  newNode  -  1);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.replaceChild(n,  newNode  -  1);	  return    newNode    ==    parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	15	None	replace
6	[BUG]  [BUGGY]  return  n  ==  parent.replaceChild(n,  newNode);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  n  ==  parent.replaceChild(n,  newNode);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n  ==  parent.replaceChild(n,  newNode);	  return    newNode    ==    parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	15	None	replace
7	[BUG]  [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(newNode,  num);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(newNode,  num);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(newNode,  num);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(newNode);    	non-compiled	[CE]  	13	None	replace
8	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(n,  newNode);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(n,  newNode);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(n,  newNode);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(newNode);    	non-compiled	[CE]  	13	None	replace
9	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.removeLastChild()  :  new  Node(newNode);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  null?  parent.removeLastChild()  :  new  Node(newNode);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.removeLastChild()  :  new  Node(newNode);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(newNode);    	non-compiled	[CE]  	13	None	replace
10	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.getFirstChild()  :  new  Node(newNode);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  null?  parent.getFirstChild()  :  new  Node(newNode);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.getFirstChild()  :  new  Node(newNode);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(newNode);    	non-compiled	[CE]  	13	None	replace
11	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  1));  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  1));  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  1));	  return    newNode.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	6	None	replace
12	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  n));  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  n));  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  n));	  return    newNode.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	6	None	replace
13	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num);	  return    newNode.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	6	None	replace
14	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num));  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num));  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num));	  return    newNode.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	6	None	replace
15	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  2));  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  2));  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  2));	  return    newNode.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	6	None	replace
16	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  0));  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  0));  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  0));	  return    newNode.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	6	None	replace
17	[BUG]  [BUGGY]  return  parent.getNext();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  parent.getNext();  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.getNext();	  return    newNode.getNext();    	non-compiled	[CE]  	2	None	replace
18	[BUG]  [BUGGY]  return  newNode.getParent();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode.getParent();  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getParent();	  return    newNode.getNext();    	non-compiled	[CE]  	2	None	replace
19	[BUG]  [BUGGY]  return  n.getNext();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  n.getNext();  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n.getNext();	  return    newNode.getNext();    	non-compiled	[CE]  	2	None	replace
20	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME);	  return    newNode.getNext();    	non-compiled	[CE]  	2	None	replace
21	[BUG]  [BUGGY]  return  parent.removeFirstChild();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  parent.removeFirstChild();  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.removeFirstChild();	  return    newNode.removeFirstChild();    	non-compiled	[CE]  	3	None	replace
22	[BUG]  [BUGGY]  return  n.removeFirstChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  n.removeFirstChild();  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n.removeFirstChild();	  return    newNode.removeFirstChild();    	non-compiled	[CE]  	3	None	replace
23	[BUG]  [BUGGY]  return  newNode.removeLastChild();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode.removeLastChild();  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.removeLastChild();	  return    newNode.removeFirstChild();    	non-compiled	[CE]  	3	None	replace
24	[BUG]  [BUGGY]  return  parent.replaceChild(n,  newNode);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  parent.replaceChild(n,  newNode);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.replaceChild(n,  newNode);	  return    newNode.removeFirstChild();    	non-compiled	[CE]  	3	None	replace
25	[BUG]  [BUGGY]  n.removeChild(parent);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  n.removeChild(parent);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	n.removeChild(parent);	      	non-compiled	[CE]  	8	None	replace
26	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	NodeTraversal.traverse(compiler,  n,  newNode);	      	non-compiled	[CE]  	8	None	replace
27	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	NodeTraversal.traverse(compiler,  newNode,  this);	      	non-compiled	[CE]  	8	None	replace
28	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  this);  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  this);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  this);	      	non-compiled	[CE]  	8	None	replace
29	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode);  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  parent.replaceChild(n,  newNode);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	parent.replaceChild(n,  newNode);	      	non-compiled	[CE]  	8	None	replace
30	[BUG]  [BUGGY]  n.removeChild(newNode);  [CE]  [FE]                                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  n.removeChild(newNode);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	n.removeChild(newNode);	      	non-compiled	[CE]  	8	None	replace
31	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode);  reportCodeChange();  [CE]  [FE]                                  AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  parent.replaceChild(n,  newNode);  reportCodeChange();  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	parent.replaceChild(n,  newNode);  reportCodeChange();	      	non-compiled	[CE]  	8	None	replace
32	[BUG]  [BUGGY]  return  newNode  ==  parent.getFirstChild()?  null  :  new  Node(newNode,  num);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  parent.getFirstChild()?  null  :  new  Node(newNode,  num);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.getFirstChild()?  null  :  new  Node(newNode,  num);	  return    newNode    ==    parent.getFirstChild()?    null    :    new    Node(newNode);    	non-compiled	[CE]  	11	None	replace
33	[BUG]  [BUGGY]  return  newNode  ==  parent.getLastChild()?  null  :  new  Node(newNode);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  parent.getLastChild()?  null  :  new  Node(newNode);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.getLastChild()?  null  :  new  Node(newNode);	  return    newNode    ==    parent.getFirstChild()?    null    :    new    Node(newNode);    	non-compiled	[CE]  	11	None	replace
34	[BUG]  [BUGGY]  return  newNode  ==  parent.getFirstChild()?  null  :  new  Node(n,  newNode);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  parent.getFirstChild()?  null  :  new  Node(n,  newNode);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.getFirstChild()?  null  :  new  Node(n,  newNode);	  return    newNode    ==    parent.getFirstChild()?    null    :    new    Node(newNode);    	non-compiled	[CE]  	11	None	replace
35	[BUG]  [BUGGY]  return  newNode  ==  n.getFirstChild()?  null  :  new  Node(newNode);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  n.getFirstChild()?  null  :  new  Node(newNode);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  n.getFirstChild()?  null  :  new  Node(newNode);	  return    newNode    ==    parent.getFirstChild()?    null    :    new    Node(newNode);    	non-compiled	[CE]  	11	None	replace
36	[BUG]  [BUGGY]  return  newNode  ==  parent.getFirstChild()?  null  :  new  Node(newNode,  n);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  parent.getFirstChild()?  null  :  new  Node(newNode,  n);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.getFirstChild()?  null  :  new  Node(newNode,  n);	  return    newNode    ==    parent.getFirstChild()?    null    :    new    Node(newNode);    	non-compiled	[CE]  	11	None	replace
37	[BUG]  [BUGGY]  return  newNode!=  parent.getFirstChild()?  null  :  new  Node(newNode,  num);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode!=  parent.getFirstChild()?  null  :  new  Node(newNode,  num);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  parent.getFirstChild()?  null  :  new  Node(newNode,  num);	  return    newNode    ==    parent.getFirstChild()?    null    :    new    Node(newNode);    	non-compiled	[CE]  	11	None	replace
38	[BUG]  [BUGGY]  return  newNode  ==  parent.getLastChild()?  null  :  newNode;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  parent.getLastChild()?  null  :  newNode;  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.getLastChild()?  null  :  newNode;	  return    newNode    ==    parent.getFirstChild()?    null    :    newNode;    	non-compiled	[CE]  	12	None	replace
39	[BUG]  [BUGGY]  return  newNode  ==  n.getFirstChild()?  null  :  newNode;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  n.getFirstChild()?  null  :  newNode;  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  n.getFirstChild()?  null  :  newNode;	  return    newNode    ==    parent.getFirstChild()?    null    :    newNode;    	non-compiled	[CE]  	12	None	replace
40	[BUG]  [BUGGY]  return  newNode!=  parent.getFirstChild()?  null  :  newNode;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode!=  parent.getFirstChild()?  null  :  newNode;  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  parent.getFirstChild()?  null  :  newNode;	  return    newNode    ==    parent.getFirstChild()?    null    :    newNode;    	non-compiled	[CE]  	12	None	replace
41	[BUG]  [BUGGY]  return  n  ==  parent.getFirstChild()?  null  :  newNode;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  n  ==  parent.getFirstChild()?  null  :  newNode;  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n  ==  parent.getFirstChild()?  null  :  newNode;	  return    newNode    ==    parent.getFirstChild()?    null    :    newNode;    	non-compiled	[CE]  	12	None	replace
42	[BUG]  [BUGGY]  return  newNode  ==  parent.getFirstChild()?  this  :  newNode;  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  parent.getFirstChild()?  this  :  newNode;  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.getFirstChild()?  this  :  newNode;	  return    newNode    ==    parent.getFirstChild()?    null    :    newNode;    	non-compiled	[CE]  	12	None	replace
43	[BUG]  [BUGGY]  return  parent.getLastChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  parent.getLastChild();  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.getLastChild();	  return    newNode.getLastChild();    	non-compiled	[CE]  	4	None	replace
44	[BUG]  [BUGGY]  return  parent.getFirstChild();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  parent.getFirstChild();  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.getFirstChild();	  return    newNode.getLastChild();    	non-compiled	[CE]  	4	None	replace
45	[BUG]  [BUGGY]  return  n.getLastChild();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  n.getLastChild();  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n.getLastChild();	  return    newNode.getLastChild();    	non-compiled	[CE]  	4	None	replace
46	[BUG]  [BUGGY]  return  n.getFirstChild();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  n.getFirstChild();  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n.getFirstChild();	  return    newNode.getLastChild();    	non-compiled	[CE]  	4	None	replace
47	[BUG]  [BUGGY]  return  newNode.getLastChild(),  num;  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode.getLastChild(),  num;  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getLastChild(),  num;	  return    newNode.getLastChild();    	non-compiled	[CE]  	4	None	replace
48	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  parent.getFirstChild()  :  Node.newString(Token.NAME);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode.getType()  ==  Token.NAME?  parent.getFirstChild()  :  Node.newString(Token.NAME);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  parent.getFirstChild()  :  Node.newString(Token.NAME);	  return    newNode.getFirstChild();    	non-compiled	[CE]  	5	None	replace
49	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.getType()  :  Node.newNumber(0);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  null?  parent.getType()  :  Node.newNumber(0);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.getType()  :  Node.newNumber(0);	  return    newNode!=    null?    parent.getType()    :    Node.newNumber(0);    	non-compiled	[CE]  	9	None	replace
50	[BUG]  [BUGGY]  return  newNode!=  null?  parent.getType()  :  Node.newNumber(num);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode!=  null?  parent.getType()  :  Node.newNumber(num);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.getType()  :  Node.newNumber(num);	  return    newNode!=    null?    parent.getType()    :    Node.newNumber(0);    	non-compiled	[CE]  	9	None	replace
51	[BUG]  [BUGGY]  return  newNode!=  null?  parent.getType()  :  Node.newNumber(1);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode!=  null?  parent.getType()  :  Node.newNumber(1);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.getType()  :  Node.newNumber(1);	  return    newNode!=    null?    parent.getType()    :    Node.newNumber(0);    	non-compiled	[CE]  	9	None	replace
52	[BUG]  [BUGGY]  return  parent!=  null?  parent.getType()  :  Node.newNumber(0);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  parent!=  null?  parent.getType()  :  Node.newNumber(0);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent!=  null?  parent.getType()  :  Node.newNumber(0);	  return    newNode!=    null?    parent.getType()    :    Node.newNumber(0);    	non-compiled	[CE]  	9	None	replace
53	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(newNode,  num  +  1);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(newNode,  num  +  1);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(newNode,  num  +  1);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(newNode,    num);    	non-compiled	[CE]  	14	None	replace
54	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(n,  num);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(n,  num);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(n,  num);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(newNode,    num);    	non-compiled	[CE]  	14	None	replace
55	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.removeLastChild()  :  new  Node(newNode,  num);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  null?  parent.removeLastChild()  :  new  Node(newNode,  num);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.removeLastChild()  :  new  Node(newNode,  num);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(newNode,    num);    	non-compiled	[CE]  	14	None	replace
56	[BUG]  [BUGGY]  return  newNode!=  null?  parent.getFirstChild()  :  new  Node(newNode,  num);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode!=  null?  parent.getFirstChild()  :  new  Node(newNode,  num);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.getFirstChild()  :  new  Node(newNode,  num);	  return    newNode!=    null?    parent.getFirstChild()    :    new    Node(newNode);    	non-compiled	[CE]  	10	None	replace
57	[BUG]  [BUGGY]  return  newNode!=  null?  parent.getLastChild()  :  new  Node(newNode);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode!=  null?  parent.getLastChild()  :  new  Node(newNode);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.getLastChild()  :  new  Node(newNode);	  return    newNode!=    null?    parent.getFirstChild()    :    new    Node(newNode);    	non-compiled	[CE]  	10	None	replace
58	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num  +  1));  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num  +  1));  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num  +  1));	  return    newNode.getType()    ==    Token.CALL?    newNode    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	7	None	replace
59	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  n));  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  n));  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  n));	  return    newNode.getType()    ==    Token.CALL?    newNode    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	7	None	replace
60	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num);	  return    newNode.getType()    ==    Token.CALL?    newNode    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	7	None	replace
61	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num));  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  parent.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num));  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num));	  return    newNode.getType()    ==    Token.CALL?    newNode    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	7	None	replace
62	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num  +  2));  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num  +  2));  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num  +  2));	  return    newNode.getType()    ==    Token.CALL?    newNode    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	7	None	replace
63	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  0));  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  0));  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  0));	  return    newNode.getType()    ==    Token.CALL?    newNode    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	7	None	replace
64	[BUG]  [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  num  +  1);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  num  +  1);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent?  null  :  new  Node(newNode,  num  +  1);	  return    newNode    ==    parent?    null    :    new    Node(newNode,    num);    	non-compiled	[CE]  	17	None	replace
65	[BUG]  [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  n);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  n);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent?  null  :  new  Node(newNode,  n);	  return    newNode    ==    parent?    null    :    new    Node(newNode,    num);    	non-compiled	[CE]  	17	None	replace
66	[BUG]  [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  num,  parent);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  num,  parent);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent?  null  :  new  Node(newNode,  num,  parent);	  return    newNode    ==    parent?    null    :    new    Node(newNode,    num);    	non-compiled	[CE]  	17	None	replace
67	[BUG]  [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  num,  parent.type);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  num,  parent.type);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent?  null  :  new  Node(newNode,  num,  parent.type);	  return    newNode    ==    parent?    null    :    new    Node(newNode,    num);    	non-compiled	[CE]  	17	None	replace
68	[BUG]  [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  num,  parent.getType());  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  num,  parent.getType());  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent?  null  :  new  Node(newNode,  num,  parent.getType());	  return    newNode    ==    parent?    null    :    new    Node(newNode,    num);    	non-compiled	[CE]  	17	None	replace
69	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  newNode);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  newNode);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  newNode);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(Token.NAME,    num);    	non-compiled	[CE]  	16	None	replace
70	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  n);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  n);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  n);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(Token.NAME,    num);    	non-compiled	[CE]  	16	None	replace
71	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.getFirstChild()  :  new  Node(Token.NAME,  num);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  null?  parent.getFirstChild()  :  new  Node(Token.NAME,  num);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.getFirstChild()  :  new  Node(Token.NAME,  num);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(Token.NAME,    num);    	non-compiled	[CE]  	16	None	replace
72	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.removeLastChild()  :  new  Node(Token.NAME,  num);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  null?  parent.removeLastChild()  :  new  Node(Token.NAME,  num);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.removeLastChild()  :  new  Node(Token.NAME,  num);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(Token.NAME,    num);    	non-compiled	[CE]  	16	None	replace
73	[BUG]  [BUGGY]  return  parent.cloneTree();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  parent.cloneTree();  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.cloneTree();	  return    newNode.cloneTree();    	non-compiled	[CE]  	1	None	replace
74	[BUG]  [BUGGY]  return  n.cloneTree();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  n.cloneTree();  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n.cloneTree();	  return    newNode.cloneTree();    	non-compiled	[CE]  	1	None	replace
75	[BUG]  [BUGGY]  return  newNode.cloneTree(),  parent;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode.cloneTree(),  parent;  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.cloneTree(),  parent;	  return    newNode.cloneTree();    	non-compiled	[CE]  	1	None	replace
76	[BUG]  [BUGGY]  return  newNode.cloneChildren();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode.cloneChildren();  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.cloneChildren();	  return    newNode.cloneTree();    	non-compiled	[CE]  	1	None	replace
77	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  num);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  num);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  num);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(Token.EMPTY);    	non-compiled	[CE]  	18	None	replace
78	[BUG]  [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  num);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  num);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  num);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(Token.EMPTY);    	non-compiled	[CE]  	18	None	replace
79	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  n);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  n);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  n);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(Token.EMPTY);    	non-compiled	[CE]  	18	None	replace
80	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.getFirstChild()  :  new  Node(Token.EMPTY);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  null?  parent.getFirstChild()  :  new  Node(Token.EMPTY);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.getFirstChild()  :  new  Node(Token.EMPTY);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(Token.EMPTY);    	non-compiled	[CE]  	18	None	replace
81	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.removeLastChild()  :  new  Node(Token.EMPTY);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  null?  parent.removeLastChild()  :  new  Node(Token.EMPTY);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.removeLastChild()  :  new  Node(Token.EMPTY);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(Token.EMPTY);    	non-compiled	[CE]  	18	None	replace
82	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.getLastChild()  :  new  Node(newNode);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  null?  parent.getLastChild()  :  new  Node(newNode);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.getLastChild()  :  new  Node(newNode);	  return    newNode!=    null?    parent.getFirstChild()    :    new    Node(newNode);    	non-compiled	[CE]  	10	None	replace
83	[BUG]  [BUGGY]  return  newNode  ==  parent.replaceChild(parent,  newNode);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  parent.replaceChild(parent,  newNode);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.replaceChild(parent,  newNode);	  return    newNode    ==    parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	15	None	replace
84	[BUG]  [BUGGY]  return  newNode.cloneTree(parent);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode.cloneTree(parent);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.cloneTree(parent);	  return    newNode.cloneTree();    	non-compiled	[CE]  	1	None	replace
85	[BUG]  [BUGGY]  return  newNode.removeChild(parent);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode.removeChild(parent);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.removeChild(parent);	  return    newNode.cloneTree();    	non-compiled	[CE]  	1	None	replace
86	[BUG]  [BUGGY]  return  newNode  ==  parent.getNext()?  null  :  newNode;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  parent.getNext()?  null  :  newNode;  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.getNext()?  null  :  newNode;	  return    newNode    ==    parent.getFirstChild()?    null    :    newNode;    	non-compiled	[CE]  	12	None	replace
87	[BUG]  [BUGGY]  return  newNode  ==  parent.getType()?  null  :  newNode;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  parent.getType()?  null  :  newNode;  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.getType()?  null  :  newNode;	  return    newNode    ==    parent.getFirstChild()?    null    :    newNode;    	non-compiled	[CE]  	12	None	replace
88	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(newNode,  n);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(newNode,  n);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(newNode,  n);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(newNode,    num);    	non-compiled	[CE]  	14	None	replace
89	[BUG]  [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(newNode,  n);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(newNode,  n);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(newNode,  n);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(newNode,    num);    	non-compiled	[CE]  	14	None	replace
90	[BUG]  [BUGGY]  return  newNode.getType()!=  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num));  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode.getType()!=  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num));  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()!=  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num));	  return    newNode.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	6	None	replace
91	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  parent.getFirstChild()  :  Node.newNumber(0);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode.getType()  ==  Token.NAME?  parent.getFirstChild()  :  Node.newNumber(0);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  parent.getFirstChild()  :  Node.newNumber(0);	  return    newNode.getFirstChild();    	non-compiled	[CE]  	5	None	replace
92	[BUG]  [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(newNode);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(newNode);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(newNode);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(newNode);    	non-compiled	[CE]  	13	None	replace
93	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(newNode);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(newNode);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(newNode);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(newNode);    	non-compiled	[CE]  	13	None	replace
94	[BUG]  [BUGGY]  return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(newNode);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(newNode);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(newNode);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(newNode);    	non-compiled	[CE]  	13	None	replace
95	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newNumber(Token.NAME,  num));  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newNumber(Token.NAME,  num));  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newNumber(Token.NAME,  num));	  return    newNode.getType()    ==    Token.CALL?    newNode    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	7	None	replace
96	[BUG]  [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  n);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  n);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  n);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(Token.NAME,    num);    	non-compiled	[CE]  	16	None	replace
97	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(Token.NAME,  num);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(Token.NAME,  num);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(Token.NAME,  num);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(Token.NAME,    num);    	non-compiled	[CE]  	16	None	replace
98	[BUG]  [BUGGY]  return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(Token.NAME,  num);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(Token.NAME,  num);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(Token.NAME,  num);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(Token.NAME,    num);    	non-compiled	[CE]  	16	None	replace
99	[BUG]  [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  newNode);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  newNode);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  newNode);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(Token.NAME,    num);    	non-compiled	[CE]  	16	None	replace
100	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  NodeUtil.removeChild(parent,  n);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	NodeUtil.removeChild(parent,  n);	      	non-compiled	[CE]  	8	None	replace
101	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  newNode);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  NodeUtil.removeChild(parent,  newNode);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	NodeUtil.removeChild(parent,  newNode);	      	non-compiled	[CE]  	8	None	replace
102	[BUG]  [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(Token.EMPTY);    	non-compiled	[CE]  	18	None	replace
103	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(Token.EMPTY);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(Token.EMPTY);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(Token.EMPTY);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(Token.EMPTY);    	non-compiled	[CE]  	18	None	replace
104	[BUG]  [BUGGY]  return  newNode  ==  parent.getFirstChild()?  null  :  new  Node(n);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  parent.getFirstChild()?  null  :  new  Node(n);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.getFirstChild()?  null  :  new  Node(n);	  return    newNode    ==    parent.getFirstChild()?    null    :    new    Node(newNode);    	non-compiled	[CE]  	11	None	replace
105	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.getType()  :  Node.newNumber(1);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  null?  parent.getType()  :  Node.newNumber(1);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.getType()  :  Node.newNumber(1);	  return    newNode!=    null?    parent.getType()    :    Node.newNumber(0);    	non-compiled	[CE]  	9	None	replace
106	[BUG]  [BUGGY]  return  newNode  ==  parent.removeFirstChild()?  null  :  newNode;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  parent.removeFirstChild()?  null  :  newNode;  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.removeFirstChild()?  null  :  newNode;	  return    newNode    ==    parent.getFirstChild()?    null    :    newNode;    	non-compiled	[CE]  	12	None	replace
107	[BUG]  [BUGGY]  return  newNode  ==  parent.removeFirstChild()?  null  :  new  Node(newNode);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  parent.removeFirstChild()?  null  :  new  Node(newNode);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.removeFirstChild()?  null  :  new  Node(newNode);	  return    newNode    ==    parent.getFirstChild()?    null    :    new    Node(newNode);    	non-compiled	[CE]  	11	None	replace
108	[BUG]  [BUGGY]  newNode.removeChild(parent);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  newNode.removeChild(parent);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	newNode.removeChild(parent);	      	non-compiled	[CE]  	8	None	replace
109	[BUG]  [BUGGY]  Preconditions.checkState(newNode.getType()  ==  Token.NAME);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  Preconditions.checkState(newNode.getType()  ==  Token.NAME);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	Preconditions.checkState(newNode.getType()  ==  Token.NAME);	      	non-compiled	[CE]  	8	None	replace
110	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  1);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  1);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  1);	  return    newNode.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	6	None	replace
111	[BUG]  [BUGGY]  return  newNode!=  parent?  null  :  new  Node(newNode,  num);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode!=  parent?  null  :  new  Node(newNode,  num);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  parent?  null  :  new  Node(newNode,  num);	  return    newNode    ==    parent?    null    :    new    Node(newNode,    num);    	non-compiled	[CE]  	17	None	replace
112	[BUG]  [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(n,  num);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(n,  num);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent?  null  :  new  Node(n,  num);	  return    newNode    ==    parent?    null    :    new    Node(newNode,    num);    	non-compiled	[CE]  	17	None	replace
113	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  newNode);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  newNode);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  newNode);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(Token.EMPTY);    	non-compiled	[CE]  	18	None	replace
114	[BUG]  [BUGGY]  return  newNode.cloneTree(),  null;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode.cloneTree(),  null;  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.cloneTree(),  null;	  return    newNode.cloneTree();    	non-compiled	[CE]  	1	None	replace
115	[BUG]  [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  num);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  num);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  num);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(Token.NAME,    num);    	non-compiled	[CE]  	16	None	replace
116	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  num  +  1);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  num  +  1);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  num  +  1);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(Token.NAME,    num);    	non-compiled	[CE]  	16	None	replace
117	[BUG]  [BUGGY]  return  newNode  ==  n.removeFirstChild();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  n.removeFirstChild();  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  n.removeFirstChild();	  return    newNode    ==    parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	15	None	replace
118	[BUG]  [BUGGY]  return  newNode!=  null?  parent.getFirstChild()  :  new  Node(newNode,  n);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode!=  null?  parent.getFirstChild()  :  new  Node(newNode,  n);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.getFirstChild()  :  new  Node(newNode,  n);	  return    newNode!=    null?    parent.getFirstChild()    :    new    Node(newNode);    	non-compiled	[CE]  	10	None	replace
119	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(newNode,  num);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(newNode,  num);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(newNode,  num);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(newNode,    num);    	non-compiled	[CE]  	14	None	replace
120	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num  +  1);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num  +  1);  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num  +  1);	  return    newNode.getType()    ==    Token.CALL?    newNode    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	7	None	replace
121	[BUG]  [BUGGY]  return  newNode.getType()!=  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num));  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();    [BUGGY]  return  newNode.getType()!=  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num));  [BUGGY]    }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()!=  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num));	  return    newNode.getType()    ==    Token.CALL?    newNode    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	7	None	replace
