bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  newNode.cloneTree(n);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.cloneTree(n);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.cloneTree(n);	  return    newNode.cloneTree(parent);    	non-compiled	[CE]  	84	None	replace
2	[BUG]  [BUGGY]  return  parent.cloneTree(newNode);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent.cloneTree(newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.cloneTree(newNode);	  return    newNode.cloneTree(parent);    	non-compiled	[CE]  	84	None	replace
3	[BUG]  [BUGGY]  return  newNode.cloneTree(newNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.cloneTree(newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.cloneTree(newNode);	  return    newNode.cloneTree(parent);    	non-compiled	[CE]  	84	None	replace
4	[BUG]  [BUGGY]  return  newNode.cloneTree(parent,  num);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.cloneTree(parent,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.cloneTree(parent,  num);	  return    newNode.cloneTree(parent);    	non-compiled	[CE]  	84	None	replace
5	[BUG]  [BUGGY]  return  newNode.cloneTree(newNode,  parent);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.cloneTree(newNode,  parent);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.cloneTree(newNode,  parent);	  return    newNode.cloneTree(parent);    	non-compiled	[CE]  	84	None	replace
6	[BUG]  [BUGGY]  return  newNode.cloneTree(n,  parent);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.cloneTree(n,  parent);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.cloneTree(n,  parent);	  return    newNode.cloneTree(parent);    	non-compiled	[CE]  	84	None	replace
7	[BUG]  [BUGGY]  return  newNode!=  n.replaceChild(n,  newNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  n.replaceChild(n,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  n.replaceChild(n,  newNode);	  return    newNode!=    n.replaceChild(parent,    newNode);    	non-compiled	[CE]  	4	None	replace
8	[BUG]  [BUGGY]  return  newNode!=  parent.replaceChild(parent,  newNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  parent.replaceChild(parent,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  parent.replaceChild(parent,  newNode);	  return    newNode!=    n.replaceChild(parent,    newNode);    	non-compiled	[CE]  	4	None	replace
9	[BUG]  [BUGGY]  return  newNode!=  n.removeChild(parent,  newNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  n.removeChild(parent,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  n.removeChild(parent,  newNode);	  return    newNode!=    n.replaceChild(parent,    newNode);    	non-compiled	[CE]  	4	None	replace
10	[BUG]  [BUGGY]  return  n!=  parent.replaceChild(n,  newNode);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  n!=  parent.replaceChild(n,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n!=  parent.replaceChild(n,  newNode);	  return    newNode!=    parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	2	None	replace
11	[BUG]  [BUGGY]  return  newNode!=  parent.replaceChild(n,  newNode  -  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  parent.replaceChild(n,  newNode  -  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  parent.replaceChild(n,  newNode  -  1);	  return    newNode!=    parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	2	None	replace
12	[BUG]  [BUGGY]  return  newNode!=  n.removeChild(parent);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  n.removeChild(parent);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  n.removeChild(parent);	  return    newNode!=    parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	2	None	replace
13	[BUG]  [BUGGY]  return  newNode!=  parent.getLastChild()?  null  :  newNode;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  parent.getLastChild()?  null  :  newNode;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  parent.getLastChild()?  null  :  newNode;	  return    newNode!=    parent.getFirstChild()?    null    :    newNode;    	non-compiled	[CE]  	40	None	replace
14	[BUG]  [BUGGY]  return  n!=  parent.getFirstChild()?  null  :  newNode;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  n!=  parent.getFirstChild()?  null  :  newNode;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n!=  parent.getFirstChild()?  null  :  newNode;	  return    newNode!=    parent.getFirstChild()?    null    :    newNode;    	non-compiled	[CE]  	40	None	replace
15	[BUG]  [BUGGY]  return  newNode!=  n.getFirstChild()?  null  :  newNode;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  n.getFirstChild()?  null  :  newNode;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  n.getFirstChild()?  null  :  newNode;	  return    newNode!=    parent.getFirstChild()?    null    :    newNode;    	non-compiled	[CE]  	40	None	replace
16	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num  +  1));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num  +  1));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num  +  1));	  return    parent.getType()    ==    Token.CALL?    newNode    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	61	None	replace
17	[BUG]  [BUGGY]  return  n.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  n.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num));	  return    parent.getType()    ==    Token.CALL?    newNode    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	61	None	replace
18	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.CALL?  parent.newString(Token.NAME,  num):  Node.newString(Token.NAME,  num));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.CALL?  parent.newString(Token.NAME,  num):  Node.newString(Token.NAME,  num));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.CALL?  parent.newString(Token.NAME,  num):  Node.newString(Token.NAME,  num));	  return    parent.getType()    ==    Token.CALL?    newNode    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	61	None	replace
19	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  n));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  n));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  n));	  return    parent.getType()    ==    Token.CALL?    newNode    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	61	None	replace
20	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num);	  return    parent.getType()    ==    Token.CALL?    newNode    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	61	None	replace
21	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	NodeTraversal.traverse(compiler,  n,  this);	  NodeTraversal.traverse(compiler,    newNode,    this);    	non-compiled	[CE]  	27	None	replace
22	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this,  num);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	NodeTraversal.traverse(compiler,  newNode,  this,  num);	  NodeTraversal.traverse(compiler,    newNode,    this);    	non-compiled	[CE]  	27	None	replace
23	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	NodeTraversal.traverse(compiler,  parent,  this);	  NodeTraversal.traverse(compiler,    newNode,    this);    	non-compiled	[CE]  	27	None	replace
24	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this,  parent);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this,  parent);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	NodeTraversal.traverse(compiler,  newNode,  this,  parent);	  NodeTraversal.traverse(compiler,    newNode,    this);    	non-compiled	[CE]  	27	None	replace
25	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this,  n);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this,  n);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	NodeTraversal.traverse(compiler,  newNode,  this,  n);	  NodeTraversal.traverse(compiler,    newNode,    this);    	non-compiled	[CE]  	27	None	replace
26	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  reportCodeChange());  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  reportCodeChange());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	NodeTraversal.traverse(compiler,  newNode,  reportCodeChange());	  NodeTraversal.traverse(compiler,    newNode,    this);    	non-compiled	[CE]  	27	None	replace
27	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this,  null);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this,  null);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	NodeTraversal.traverse(compiler,  newNode,  this,  null);	  NodeTraversal.traverse(compiler,    newNode,    this);    	non-compiled	[CE]  	27	None	replace
28	[BUG]  [BUGGY]  return  newNode  ==  n.replaceChild(parent,  newNode  -  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  n.replaceChild(parent,  newNode  -  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  n.replaceChild(parent,  newNode  -  1);	  return    newNode    ==    parent.replaceChild(n,    newNode    -    1);    	non-compiled	[CE]  	5	None	replace
29	[BUG]  [BUGGY]  return  n  ==  parent.replaceChild(n,  newNode  -  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  n  ==  parent.replaceChild(n,  newNode  -  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n  ==  parent.replaceChild(n,  newNode  -  1);	  return    newNode    ==    parent.replaceChild(n,    newNode    -    1);    	non-compiled	[CE]  	5	None	replace
30	[BUG]  [BUGGY]  return  newNode  ==  parent.replaceChild(n,  newNode  +  1);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent.replaceChild(n,  newNode  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.replaceChild(n,  newNode  +  1);	  return    newNode    ==    parent.replaceChild(n,    newNode    -    1);    	non-compiled	[CE]  	5	None	replace
31	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newNumber(Token.NAME,  num  +  1));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newNumber(Token.NAME,  num  +  1));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newNumber(Token.NAME,  num  +  1));	  return    newNode.getType()    ==    Token.CALL?    newNode    :    Node.newNumber(Token.NAME,    num));    	non-compiled	[CE]  	95	None	replace
32	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newNumber(Token.NAME,  n));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newNumber(Token.NAME,  n));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newNumber(Token.NAME,  n));	  return    newNode.getType()    ==    Token.CALL?    newNode    :    Node.newNumber(Token.NAME,    num));    	non-compiled	[CE]  	95	None	replace
33	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newNumber(Token.NAME,  num);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newNumber(Token.NAME,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newNumber(Token.NAME,  num);	  return    newNode.getType()    ==    Token.CALL?    newNode    :    Node.newNumber(Token.NAME,    num));    	non-compiled	[CE]  	95	None	replace
34	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.CALL?  newNode  :  Node.newNumber(Token.NAME,  num));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent.getType()  ==  Token.CALL?  newNode  :  Node.newNumber(Token.NAME,  num));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.getType()  ==  Token.CALL?  newNode  :  Node.newNumber(Token.NAME,  num));	  return    newNode.getType()    ==    Token.CALL?    newNode    :    Node.newNumber(Token.NAME,    num));    	non-compiled	[CE]  	95	None	replace
35	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newNumber(Token.NAME,  0));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newNumber(Token.NAME,  0));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newNumber(Token.NAME,  0));	  return    newNode.getType()    ==    Token.CALL?    newNode    :    Node.newNumber(Token.NAME,    num));    	non-compiled	[CE]  	95	None	replace
36	[BUG]  [BUGGY]  return  newNode.getType()!=  Token.CALL?  newNode  :  Node.newNumber(Token.NAME,  num));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()!=  Token.CALL?  newNode  :  Node.newNumber(Token.NAME,  num));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()!=  Token.CALL?  newNode  :  Node.newNumber(Token.NAME,  num));	  return    newNode.getType()    ==    Token.CALL?    newNode    :    Node.newNumber(Token.NAME,    num));    	non-compiled	[CE]  	95	None	replace
37	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  num);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  NodeUtil.removeChild(parent,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	NodeUtil.removeChild(parent,  num);	  NodeUtil.removeChild(parent,    newNode);    	non-compiled	[CE]  	101	None	replace
38	[BUG]  [BUGGY]  NodeUtil.removeChild(newNode,  parent);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  NodeUtil.removeChild(newNode,  parent);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	NodeUtil.removeChild(newNode,  parent);	  NodeUtil.removeChild(parent,    newNode);    	non-compiled	[CE]  	101	None	replace
39	[BUG]  [BUGGY]  NodeUtil.removeChild(newNode);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  NodeUtil.removeChild(newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	NodeUtil.removeChild(newNode);	  NodeUtil.removeChild(parent,    newNode);    	non-compiled	[CE]  	101	None	replace
40	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  newNode);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  NodeUtil.removeChild(n,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	NodeUtil.removeChild(n,  newNode);	  NodeUtil.removeChild(parent,    newNode);    	non-compiled	[CE]  	101	None	replace
41	[BUG]  [BUGGY]  return  newNode  ==  parent.removeFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent.removeFirstChild();  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.removeFirstChild();	  return    newNode    ==    n.removeFirstChild();    	non-compiled	[CE]  	117	None	replace
42	[BUG]  [BUGGY]  return  newNode!=  parent.removeFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  parent.removeFirstChild();  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  parent.removeFirstChild();	  return    newNode    ==    n.removeFirstChild();    	non-compiled	[CE]  	117	None	replace
43	[BUG]  [BUGGY]  return  newNode  ==  n.getLastChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  n.getLastChild();  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  n.getLastChild();	  return    newNode    ==    n.removeFirstChild();    	non-compiled	[CE]  	117	None	replace
44	[BUG]  [BUGGY]  return  newNode  ==  parent.getFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent.getFirstChild();  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.getFirstChild();	  return    newNode    ==    n.removeFirstChild();    	non-compiled	[CE]  	117	None	replace
45	[BUG]  [BUGGY]  return  newNode  ==  n.getFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  n.getFirstChild();  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  n.getFirstChild();	  return    newNode    ==    n.removeFirstChild();    	non-compiled	[CE]  	117	None	replace
46	[BUG]  [BUGGY]  return  newNode  ==  parent.removeFirstChild()?  null  :  new  Node(newNode,  num);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent.removeFirstChild()?  null  :  new  Node(newNode,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.removeFirstChild()?  null  :  new  Node(newNode,  num);	  return    newNode    ==    parent.removeFirstChild()?    null    :    new    Node(newNode);    	non-compiled	[CE]  	107	None	replace
47	[BUG]  [BUGGY]  return  newNode  ==  parent.removeFirstChild()?  null  :  new  Node(n,  newNode);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent.removeFirstChild()?  null  :  new  Node(n,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.removeFirstChild()?  null  :  new  Node(n,  newNode);	  return    newNode    ==    parent.removeFirstChild()?    null    :    new    Node(newNode);    	non-compiled	[CE]  	107	None	replace
48	[BUG]  [BUGGY]  return  newNode  ==  n.removeFirstChild()?  null  :  new  Node(newNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  n.removeFirstChild()?  null  :  new  Node(newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  n.removeFirstChild()?  null  :  new  Node(newNode);	  return    newNode    ==    parent.removeFirstChild()?    null    :    new    Node(newNode);    	non-compiled	[CE]  	107	None	replace
49	[BUG]  [BUGGY]  return  newNode  ==  parent.removeFirstChild()?  null  :  new  Node(newNode,  n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent.removeFirstChild()?  null  :  new  Node(newNode,  n);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.removeFirstChild()?  null  :  new  Node(newNode,  n);	  return    newNode    ==    parent.removeFirstChild()?    null    :    new    Node(newNode);    	non-compiled	[CE]  	107	None	replace
50	[BUG]  [BUGGY]  return  newNode  ==  parent.replaceChild(n,  newNode)?  null  :  new  Node(newNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent.replaceChild(n,  newNode)?  null  :  new  Node(newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.replaceChild(n,  newNode)?  null  :  new  Node(newNode);	  return    newNode    ==    parent.removeFirstChild()?    null    :    new    Node(newNode);    	non-compiled	[CE]  	107	None	replace
51	[BUG]  [BUGGY]  return  newNode  ==  parent.removeLastChild()?  null  :  new  Node(newNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent.removeLastChild()?  null  :  new  Node(newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.removeLastChild()?  null  :  new  Node(newNode);	  return    newNode    ==    parent.removeFirstChild()?    null    :    new    Node(newNode);    	non-compiled	[CE]  	107	None	replace
52	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  n  +  2));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  n  +  2));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  n  +  2));	  return    newNode.getType()    ==    Token.CALL?    newNode    :    Node.newString(Token.NAME,    num    +    2));    	non-compiled	[CE]  	62	None	replace
53	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  n  +  1));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  n  +  1));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  n  +  1));	  return    newNode.getType()    ==    Token.CALL?    newNode    :    Node.newString(Token.NAME,    num    +    2));    	non-compiled	[CE]  	62	None	replace
54	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num  +  2);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num  +  2);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num  +  2);	  return    newNode.getType()    ==    Token.CALL?    newNode    :    Node.newString(Token.NAME,    num    +    2));    	non-compiled	[CE]  	62	None	replace
55	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num  +  2));  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num  +  2));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num  +  2));	  return    newNode.getType()    ==    Token.CALL?    newNode    :    Node.newString(Token.NAME,    num    +    2));    	non-compiled	[CE]  	62	None	replace
56	[BUG]  [BUGGY]  return  parent.getType()!=  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent.getType()!=  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.getType()!=  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num));	  return    newNode.getType()!=    Token.CALL?    newNode    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	121	None	replace
57	[BUG]  [BUGGY]  return  newNode.getType()!=  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num  +  1));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()!=  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num  +  1));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()!=  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num  +  1));	  return    newNode.getType()!=    Token.CALL?    newNode    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	121	None	replace
58	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.getLastChild()  :  new  Node(Token.NAME,  num);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.getLastChild()  :  new  Node(Token.NAME,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.getLastChild()  :  new  Node(Token.NAME,  num);	  return    newNode    ==    null?    parent.getFirstChild()    :    new    Node(Token.NAME,    num);    	non-compiled	[CE]  	71	None	replace
59	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.getFirstChild()  :  new  Node(Token.NAME,  newNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.getFirstChild()  :  new  Node(Token.NAME,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.getFirstChild()  :  new  Node(Token.NAME,  newNode);	  return    newNode    ==    null?    parent.getFirstChild()    :    new    Node(Token.NAME,    num);    	non-compiled	[CE]  	71	None	replace
60	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.getFirstChild()  :  new  Node(Token.NAME,  n);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.getFirstChild()  :  new  Node(Token.NAME,  n);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.getFirstChild()  :  new  Node(Token.NAME,  n);	  return    newNode    ==    null?    parent.getFirstChild()    :    new    Node(Token.NAME,    num);    	non-compiled	[CE]  	71	None	replace
61	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.getLastChild()  :  new  Node(Token.NAME,  n);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.getLastChild()  :  new  Node(Token.NAME,  n);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.getLastChild()  :  new  Node(Token.NAME,  n);	  return    newNode    ==    null?    parent.getFirstChild()    :    new    Node(Token.NAME,    num);    	non-compiled	[CE]  	71	None	replace
62	[BUG]  [BUGGY]  return  newNode!=  null?  parent.getLastChild()  :  new  Node(Token.NAME,  num);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.getLastChild()  :  new  Node(Token.NAME,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.getLastChild()  :  new  Node(Token.NAME,  num);	  return    newNode    ==    null?    parent.getFirstChild()    :    new    Node(Token.NAME,    num);    	non-compiled	[CE]  	71	None	replace
63	[BUG]  [BUGGY]  return  newNode!=  parent.getLastChild()?  null  :  new  Node(newNode,  num);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  parent.getLastChild()?  null  :  new  Node(newNode,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  parent.getLastChild()?  null  :  new  Node(newNode,  num);	  return    newNode!=    parent.getFirstChild()?    null    :    new    Node(newNode,    num);    	non-compiled	[CE]  	37	None	replace
64	[BUG]  [BUGGY]  return  newNode  ==  parent.getLastChild()?  null  :  new  Node(newNode,  num);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent.getLastChild()?  null  :  new  Node(newNode,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.getLastChild()?  null  :  new  Node(newNode,  num);	  return    newNode!=    parent.getFirstChild()?    null    :    new    Node(newNode,    num);    	non-compiled	[CE]  	37	None	replace
65	[BUG]  [BUGGY]  return  newNode!=  parent.getFirstChild()?  null  :  new  Node(newNode,  num  +  1);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  parent.getFirstChild()?  null  :  new  Node(newNode,  num  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  parent.getFirstChild()?  null  :  new  Node(newNode,  num  +  1);	  return    newNode!=    parent.getFirstChild()?    null    :    new    Node(newNode,    num);    	non-compiled	[CE]  	37	None	replace
66	[BUG]  [BUGGY]  return  newNode!=  parent.getFirstChild()?  null  :  new  Node(newNode,  n);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  parent.getFirstChild()?  null  :  new  Node(newNode,  n);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  parent.getFirstChild()?  null  :  new  Node(newNode,  n);	  return    newNode!=    parent.getFirstChild()?    null    :    new    Node(newNode,    num);    	non-compiled	[CE]  	37	None	replace
67	[BUG]  [BUGGY]  return  newNode!=  parent.getFirstChild()?  null  :  new  Node(newNode,  num,  parent);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  parent.getFirstChild()?  null  :  new  Node(newNode,  num,  parent);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  parent.getFirstChild()?  null  :  new  Node(newNode,  num,  parent);	  return    newNode!=    parent.getFirstChild()?    null    :    new    Node(newNode,    num);    	non-compiled	[CE]  	37	None	replace
68	[BUG]  [BUGGY]  return  parent.cloneTree(),  newNode;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent.cloneTree(),  newNode;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.cloneTree(),  newNode;	  return    newNode.cloneTree(),    parent;    	non-compiled	[CE]  	75	None	replace
69	[BUG]  [BUGGY]  return  newNode.cloneTree(),  parent,  num;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.cloneTree(),  parent,  num;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.cloneTree(),  parent,  num;	  return    newNode.cloneTree(),    parent;    	non-compiled	[CE]  	75	None	replace
70	[BUG]  [BUGGY]  return  newNode.cloneTree(),  n;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.cloneTree(),  n;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.cloneTree(),  n;	  return    newNode.cloneTree(),    parent;    	non-compiled	[CE]  	75	None	replace
71	[BUG]  [BUGGY]  return  newNode.cloneTree(),  parent,  num);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.cloneTree(),  parent,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.cloneTree(),  parent,  num);	  return    newNode.cloneTree(),    parent;    	non-compiled	[CE]  	75	None	replace
72	[BUG]  [BUGGY]  return  newNode.cloneTree(),  parent.cloneTree();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.cloneTree(),  parent.cloneTree();  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.cloneTree(),  parent.cloneTree();	  return    newNode.cloneTree(),    parent;    	non-compiled	[CE]  	75	None	replace
73	[BUG]  [BUGGY]  return  newNode.cloneTree(),  newNode;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.cloneTree(),  newNode;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.cloneTree(),  newNode;	  return    newNode.cloneTree(),    parent;    	non-compiled	[CE]  	75	None	replace
74	[BUG]  [BUGGY]  return  n.cloneTree(),  parent;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  n.cloneTree(),  parent;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n.cloneTree(),  parent;	  return    newNode.cloneTree(),    parent;    	non-compiled	[CE]  	75	None	replace
75	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.getType()  :  Node.newNumber(num);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.getType()  :  Node.newNumber(num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.getType()  :  Node.newNumber(num);	  return    newNode    ==    null?    parent.getType()    :    Node.newNumber(1);    	non-compiled	[CE]  	105	None	replace
76	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.getType()  :  Node.newNumber(2);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.getType()  :  Node.newNumber(2);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.getType()  :  Node.newNumber(2);	  return    newNode    ==    null?    parent.getType()    :    Node.newNumber(1);    	non-compiled	[CE]  	105	None	replace
77	[BUG]  [BUGGY]  return  parent.removeChild(newNode);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent.removeChild(newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.removeChild(newNode);	  return    newNode.removeChild(parent);    	non-compiled	[CE]  	85	None	replace
78	[BUG]  [BUGGY]  return  newNode.removeChild(n);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.removeChild(n);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.removeChild(n);	  return    newNode.removeChild(parent);    	non-compiled	[CE]  	85	None	replace
79	[BUG]  [BUGGY]  return  n.removeChild(parent);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  n.removeChild(parent);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n.removeChild(parent);	  return    newNode.removeChild(parent);    	non-compiled	[CE]  	85	None	replace
80	[BUG]  [BUGGY]  parent.removeChild(newNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  parent.removeChild(newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	parent.removeChild(newNode);	  return    newNode.removeChild(parent);    	non-compiled	[CE]  	85	None	replace
81	[BUG]  [BUGGY]  return  n.removeChild(newNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  n.removeChild(newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n.removeChild(newNode);	  return    newNode.removeChild(parent);    	non-compiled	[CE]  	85	None	replace
82	[BUG]  [BUGGY]  return  parent.getParent();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent.getParent();  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.getParent();	  return    newNode.getParent();    	non-compiled	[CE]  	18	None	replace
83	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME,  num));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME,  num));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME,  num));	  return    newNode.getParent();    	non-compiled	[CE]  	18	None	replace
84	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.VAR?  parent.getType()  :  Node.newString(Token.NAME);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.VAR?  parent.getType()  :  Node.newString(Token.NAME);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.VAR?  parent.getType()  :  Node.newString(Token.NAME);	  return    newNode.getParent();    	non-compiled	[CE]  	18	None	replace
85	[BUG]  [BUGGY]  return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(Token.NAME,  num  +  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(Token.NAME,  num  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(Token.NAME,  num  +  1);	  return    newNode!=    null?    parent.replaceChild(n,    newNode):    new    Node(Token.NAME,    num);    	non-compiled	[CE]  	98	None	replace
86	[BUG]  [BUGGY]  return  parent!=  null?  parent.replaceChild(n,  newNode):  new  Node(Token.NAME,  num);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent!=  null?  parent.replaceChild(n,  newNode):  new  Node(Token.NAME,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent!=  null?  parent.replaceChild(n,  newNode):  new  Node(Token.NAME,  num);	  return    newNode!=    null?    parent.replaceChild(n,    newNode):    new    Node(Token.NAME,    num);    	non-compiled	[CE]  	98	None	replace
87	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  newNode  :  parent.getFirstChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent.getType()  ==  Token.NAME?  newNode  :  parent.getFirstChild();  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.getType()  ==  Token.NAME?  newNode  :  parent.getFirstChild();	  return    parent.getFirstChild();    	non-compiled	[CE]  	44	None	replace
88	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  1));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  1));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  1));	  return    newNode.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    0));    	non-compiled	[CE]  	16	None	replace
89	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  2));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  2));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  2));	  return    newNode.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    0));    	non-compiled	[CE]  	16	None	replace
90	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  0));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  0));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  0));	  return    newNode.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    0));    	non-compiled	[CE]  	16	None	replace
91	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  0,  num));  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  0,  num));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  0,  num));	  return    newNode.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    0));    	non-compiled	[CE]  	16	None	replace
92	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.removeLastChild()  :  new  Node(Token.EMPTY,  num);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.removeLastChild()  :  new  Node(Token.EMPTY,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.removeLastChild()  :  new  Node(Token.EMPTY,  num);	  return    newNode    ==    null?    parent.removeLastChild()    :    new    Node(Token.EMPTY);    	non-compiled	[CE]  	81	None	replace
93	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.getLastChild()  :  new  Node(Token.EMPTY);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.getLastChild()  :  new  Node(Token.EMPTY);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.getLastChild()  :  new  Node(Token.EMPTY);	  return    newNode    ==    null?    parent.removeLastChild()    :    new    Node(Token.EMPTY);    	non-compiled	[CE]  	81	None	replace
94	[BUG]  [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(n,  newNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(n,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(n,  newNode);	  return    newNode!=    null?    parent.removeFirstChild()    :    new    Node(newNode,    n);    	non-compiled	[CE]  	89	None	replace
95	[BUG]  [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(newNode,  n,  num);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(newNode,  n,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(newNode,  n,  num);	  return    newNode!=    null?    parent.removeFirstChild()    :    new    Node(newNode,    n);    	non-compiled	[CE]  	89	None	replace
96	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.removeLastChild()  :  new  Node(n,  newNode);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.removeLastChild()  :  new  Node(n,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.removeLastChild()  :  new  Node(n,  newNode);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(n,    newNode);    	non-compiled	[CE]  	8	None	replace
97	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(n,  newNode,  num);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(n,  newNode,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(n,  newNode,  num);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(n,    newNode);    	non-compiled	[CE]  	8	None	replace
98	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.getFirstChild()  :  new  Node(n,  newNode);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.getFirstChild()  :  new  Node(n,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.getFirstChild()  :  new  Node(n,  newNode);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(n,    newNode);    	non-compiled	[CE]  	8	None	replace
99	[BUG]  [BUGGY]  return  newNode  ==  parent.getLastChild()?  null  :  new  Node(newNode,  n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent.getLastChild()?  null  :  new  Node(newNode,  n);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.getLastChild()?  null  :  new  Node(newNode,  n);	  return    newNode    ==    parent.getFirstChild()?    null    :    new    Node(newNode,    n);    	non-compiled	[CE]  	36	None	replace
100	[BUG]  [BUGGY]  return  newNode  ==  n.getFirstChild()?  null  :  new  Node(newNode,  parent);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  n.getFirstChild()?  null  :  new  Node(newNode,  parent);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  n.getFirstChild()?  null  :  new  Node(newNode,  parent);	  return    newNode    ==    parent.getFirstChild()?    null    :    new    Node(newNode,    n);    	non-compiled	[CE]  	36	None	replace
101	[BUG]  [BUGGY]  return  newNode  ==  parent.getFirstChild()?  null  :  new  Node(newNode,  n,  num);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent.getFirstChild()?  null  :  new  Node(newNode,  n,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.getFirstChild()?  null  :  new  Node(newNode,  n,  num);	  return    newNode    ==    parent.getFirstChild()?    null    :    new    Node(newNode,    n);    	non-compiled	[CE]  	36	None	replace
102	[BUG]  [BUGGY]  return  newNode  ==  n.getFirstChild()?  null  :  new  Node(newNode,  num);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  n.getFirstChild()?  null  :  new  Node(newNode,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  n.getFirstChild()?  null  :  new  Node(newNode,  num);	  return    newNode    ==    parent.getFirstChild()?    null    :    new    Node(newNode,    n);    	non-compiled	[CE]  	36	None	replace
103	[BUG]  [BUGGY]  return  newNode  ==  parent.getParent()?  null  :  newNode;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent.getParent()?  null  :  newNode;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.getParent()?  null  :  newNode;	  return    newNode    ==    parent.getNext()?    null    :    newNode;    	non-compiled	[CE]  	86	None	replace
104	[BUG]  [BUGGY]  return  newNode  ==  parent.getNext()?  null  :  new  Node(newNode,  num);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent.getNext()?  null  :  new  Node(newNode,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.getNext()?  null  :  new  Node(newNode,  num);	  return    newNode    ==    parent.getNext()?    null    :    newNode;    	non-compiled	[CE]  	86	None	replace
105	[BUG]  [BUGGY]  return  newNode  ==  n.getNext()?  null  :  newNode;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  n.getNext()?  null  :  newNode;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  n.getNext()?  null  :  newNode;	  return    newNode    ==    parent.getNext()?    null    :    newNode;    	non-compiled	[CE]  	86	None	replace
106	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.removeLastChild()  :  new  Node(Token.NAME,  newNode);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.removeLastChild()  :  new  Node(Token.NAME,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.removeLastChild()  :  new  Node(Token.NAME,  newNode);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(Token.NAME,    newNode);    	non-compiled	[CE]  	69	None	replace
107	[BUG]  [BUGGY]  parent.removeChild(n);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  parent.removeChild(n);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	parent.removeChild(n);	  parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	29	None	replace
108	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode,  num);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  parent.replaceChild(n,  newNode,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	parent.replaceChild(n,  newNode,  num);	  parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	29	None	replace
109	[BUG]  [BUGGY]  return  parent.cloneChildren();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent.cloneChildren();  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.cloneChildren();	  return    newNode.cloneChildren();    	non-compiled	[CE]  	76	None	replace
110	[BUG]  [BUGGY]  return  n.cloneChildren();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  n.cloneChildren();  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n.cloneChildren();	  return    newNode.cloneChildren();    	non-compiled	[CE]  	76	None	replace
111	[BUG]  [BUGGY]  return  newNode.cloneChild(parent,  num);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.cloneChild(parent,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.cloneChild(parent,  num);	  return    newNode.cloneChildren();    	non-compiled	[CE]  	76	None	replace
112	[BUG]  [BUGGY]  return  newNode.cloneChild(parent);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.cloneChild(parent);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.cloneChild(parent);	  return    newNode.cloneChildren();    	non-compiled	[CE]  	76	None	replace
113	[BUG]  [BUGGY]  return  newNode.cloneChildCount();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.cloneChildCount();  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.cloneChildCount();	  return    newNode.cloneChildren();    	non-compiled	[CE]  	76	None	replace
114	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  parent.getFirstChild()  :  Node.newString(Token.NAME,  num);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.NAME?  parent.getFirstChild()  :  Node.newString(Token.NAME,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  parent.getFirstChild()  :  Node.newString(Token.NAME,  num);	  return    newNode.getType()    ==    Token.NAME?    parent.getFirstChild()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  	48	None	replace
115	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  newNode.getFirstChild()  :  Node.newString(Token.NAME);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent.getType()  ==  Token.NAME?  newNode.getFirstChild()  :  Node.newString(Token.NAME);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.getType()  ==  Token.NAME?  newNode.getFirstChild()  :  Node.newString(Token.NAME);	  return    newNode.getType()    ==    Token.NAME?    parent.getFirstChild()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  	48	None	replace
116	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  parent.getFirstChild()  :  Node.newString(Token.NAME);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent.getType()  ==  Token.NAME?  parent.getFirstChild()  :  Node.newString(Token.NAME);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.getType()  ==  Token.NAME?  parent.getFirstChild()  :  Node.newString(Token.NAME);	  return    newNode.getType()    ==    Token.NAME?    parent.getFirstChild()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  	48	None	replace
117	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  parent.getLastChild()  :  Node.newString(Token.NAME);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.NAME?  parent.getLastChild()  :  Node.newString(Token.NAME);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  parent.getLastChild()  :  Node.newString(Token.NAME);	  return    newNode.getType()    ==    Token.NAME?    parent.getFirstChild()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  	48	None	replace
118	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  parent.getFirstChild()  :  Node.newString(Token.NAME,  n);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.NAME?  parent.getFirstChild()  :  Node.newString(Token.NAME,  n);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  parent.getFirstChild()  :  Node.newString(Token.NAME,  n);	  return    newNode.getType()    ==    Token.NAME?    parent.getFirstChild()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  	48	None	replace
119	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  parent.getFirstChild()  :  Node.newString(Token.NAME);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  n.getType()  ==  Token.NAME?  parent.getFirstChild()  :  Node.newString(Token.NAME);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n.getType()  ==  Token.NAME?  parent.getFirstChild()  :  Node.newString(Token.NAME);	  return    newNode.getType()    ==    Token.NAME?    parent.getFirstChild()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  	48	None	replace
120	[BUG]  [BUGGY]  return  newNode.replaceChild(parent,  newNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.replaceChild(parent,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.replaceChild(parent,  newNode);	  return    parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	24	None	replace
121	[BUG]  [BUGGY]  return  n.replaceChild(parent,  newNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  n.replaceChild(parent,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n.replaceChild(parent,  newNode);	  return    parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	24	None	replace
122	[BUG]  [BUGGY]  return  newNode.replaceChild(n,  parent);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.replaceChild(n,  parent);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.replaceChild(n,  parent);	  return    parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	24	None	replace
123	[BUG]  [BUGGY]  return  parent.replaceChild(n,  newNode,  num);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent.replaceChild(n,  newNode,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.replaceChild(n,  newNode,  num);	  return    parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	24	None	replace
124	[BUG]  [BUGGY]  return  newNode.replaceChild(parent,  n);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.replaceChild(parent,  n);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.replaceChild(parent,  n);	  return    parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	24	None	replace
125	[BUG]  [BUGGY]  return  newNode  ==  n.getLastChild()?  null  :  new  Node(newNode);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  n.getLastChild()?  null  :  new  Node(newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  n.getLastChild()?  null  :  new  Node(newNode);	  return    newNode    ==    parent.getLastChild()?    null    :    new    Node(newNode);    	non-compiled	[CE]  	33	None	replace
126	[BUG]  [BUGGY]  return  newNode!=  parent.getFirstChild()?  null  :  new  Node(newNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  parent.getFirstChild()?  null  :  new  Node(newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  parent.getFirstChild()?  null  :  new  Node(newNode);	  return    newNode    ==    parent.getLastChild()?    null    :    new    Node(newNode);    	non-compiled	[CE]  	33	None	replace
127	[BUG]  [BUGGY]  return  newNode  ==  parent.getLastChild()?  null  :  new  Node(n,  newNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent.getLastChild()?  null  :  new  Node(n,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.getLastChild()?  null  :  new  Node(n,  newNode);	  return    newNode    ==    parent.getLastChild()?    null    :    new    Node(newNode);    	non-compiled	[CE]  	33	None	replace
128	[BUG]  [BUGGY]  return  newNode  ==  n.removeFirstChild()?  null  :  newNode;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  n.removeFirstChild()?  null  :  newNode;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  n.removeFirstChild()?  null  :  newNode;	  return    newNode    ==    parent.removeFirstChild()?    null    :    newNode;    	non-compiled	[CE]  	106	None	replace
129	[BUG]  [BUGGY]  return  newNode  ==  parent.removeLastChild()?  null  :  newNode;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent.removeLastChild()?  null  :  newNode;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.removeLastChild()?  null  :  newNode;	  return    newNode    ==    parent.removeFirstChild()?    null    :    newNode;    	non-compiled	[CE]  	106	None	replace
130	[BUG]  [BUGGY]  return  newNode!=  parent.removeFirstChild()?  null  :  newNode;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  parent.removeFirstChild()?  null  :  newNode;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  parent.removeFirstChild()?  null  :  newNode;	  return    newNode    ==    parent.removeFirstChild()?    null    :    newNode;    	non-compiled	[CE]  	106	None	replace
131	[BUG]  [BUGGY]  parent.removeFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  parent.removeFirstChild();  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	parent.removeFirstChild();	  return    n.removeFirstChild();    	non-compiled	[CE]  	22	None	replace
132	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  n  +  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  n  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  n  +  1);	  return    newNode.getType()    ==    Token.CALL?    newNode    :    Node.newString(Token.NAME,    num    +    1);    	non-compiled	[CE]  	120	None	replace
133	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num  +  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num  +  1);	  return    newNode.getType()    ==    Token.CALL?    newNode    :    Node.newString(Token.NAME,    num    +    1);    	non-compiled	[CE]  	120	None	replace
134	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num  +  3);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num  +  3);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num  +  3);	  return    newNode.getType()    ==    Token.CALL?    newNode    :    Node.newString(Token.NAME,    num    +    1);    	non-compiled	[CE]  	120	None	replace
135	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.CALL?  Node.newString(Token.NAME,  num  +  1):  Node.newString(Token.NAME,  num  +  1);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.CALL?  Node.newString(Token.NAME,  num  +  1):  Node.newString(Token.NAME,  num  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.CALL?  Node.newString(Token.NAME,  num  +  1):  Node.newString(Token.NAME,  num  +  1);	  return    newNode.getType()    ==    Token.CALL?    newNode    :    Node.newString(Token.NAME,    num    +    1);    	non-compiled	[CE]  	120	None	replace
136	[BUG]  [BUGGY]  return  newNode.getType()!=  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num  +  1);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()!=  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()!=  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num  +  1);	  return    newNode.getType()    ==    Token.CALL?    newNode    :    Node.newString(Token.NAME,    num    +    1);    	non-compiled	[CE]  	120	None	replace
137	[BUG]  [BUGGY]  return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(newNode,  num);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(newNode,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(newNode,  num);	  return    newNode    ==    null?    parent.replaceChild(n,    newNode):    new    Node(newNode);    	non-compiled	[CE]  	93	None	replace
138	[BUG]  [BUGGY]  return  parent.removeLastChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent.removeLastChild();  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.removeLastChild();	  return    newNode.removeLastChild();    	non-compiled	[CE]  	23	None	replace
139	[BUG]  [BUGGY]  return  n.removeLastChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  n.removeLastChild();  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n.removeLastChild();	  return    newNode.removeLastChild();    	non-compiled	[CE]  	23	None	replace
140	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  n  +  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  n  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  n  +  1);	  return    newNode.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num    +    1);    	non-compiled	[CE]  	110	None	replace
141	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  2);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  2);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  2);	  return    newNode.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num    +    1);    	non-compiled	[CE]  	110	None	replace
142	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  1);	  return    newNode.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num    +    1);    	non-compiled	[CE]  	110	None	replace
143	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  3);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  3);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  3);	  return    newNode.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num    +    1);    	non-compiled	[CE]  	110	None	replace
144	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  Node.newString(Token.NAME,  num  +  1):  Node.newString(Token.NAME,  num  +  1);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.NAME?  Node.newString(Token.NAME,  num  +  1):  Node.newString(Token.NAME,  num  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  Node.newString(Token.NAME,  num  +  1):  Node.newString(Token.NAME,  num  +  1);	  return    newNode.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num    +    1);    	non-compiled	[CE]  	110	None	replace
145	[BUG]  [BUGGY]  return  newNode.getType()!=  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  1);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()!=  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()!=  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  1);	  return    newNode.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num    +    1);    	non-compiled	[CE]  	110	None	replace
146	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.removeLastChild()  :  new  Node(Token.NAME,  n);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.removeLastChild()  :  new  Node(Token.NAME,  n);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.removeLastChild()  :  new  Node(Token.NAME,  n);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(Token.NAME,    n);    	non-compiled	[CE]  	70	None	replace
147	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  n,  num);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  n,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  n,  num);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(Token.NAME,    n);    	non-compiled	[CE]  	70	None	replace
148	[BUG]  [BUGGY]  return  newNode!=  null?  parent.removeLastChild()  :  new  Node(Token.NAME,  newNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.removeLastChild()  :  new  Node(Token.NAME,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.removeLastChild()  :  new  Node(Token.NAME,  newNode);	  return    newNode!=    null?    parent.removeFirstChild()    :    new    Node(Token.NAME,    newNode);    	non-compiled	[CE]  	99	None	replace
149	[BUG]  [BUGGY]  return  newNode!=  null?  parent.getFirstChild()  :  new  Node(Token.NAME,  newNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.getFirstChild()  :  new  Node(Token.NAME,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.getFirstChild()  :  new  Node(Token.NAME,  newNode);	  return    newNode!=    null?    parent.removeFirstChild()    :    new    Node(Token.NAME,    newNode);    	non-compiled	[CE]  	99	None	replace
150	[BUG]  [BUGGY]  return  newNode  ==  parent.getLastChild()?  this  :  newNode;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent.getLastChild()?  this  :  newNode;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.getLastChild()?  this  :  newNode;	  return    newNode    ==    parent.getFirstChild()?    this    :    newNode;    	non-compiled	[CE]  	42	None	replace
151	[BUG]  [BUGGY]  return  newNode  ==  parent.getFirstChild()?  this  :  new  Node(newNode,  num);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent.getFirstChild()?  this  :  new  Node(newNode,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.getFirstChild()?  this  :  new  Node(newNode,  num);	  return    newNode    ==    parent.getFirstChild()?    this    :    newNode;    	non-compiled	[CE]  	42	None	replace
152	[BUG]  [BUGGY]  return  newNode  ==  n.getFirstChild()?  this  :  newNode;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  n.getFirstChild()?  this  :  newNode;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  n.getFirstChild()?  this  :  newNode;	  return    newNode    ==    parent.getFirstChild()?    this    :    newNode;    	non-compiled	[CE]  	42	None	replace
153	[BUG]  [BUGGY]  return  newNode!=  parent.getFirstChild()?  this  :  newNode;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  parent.getFirstChild()?  this  :  newNode;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  parent.getFirstChild()?  this  :  newNode;	  return    newNode    ==    parent.getFirstChild()?    this    :    newNode;    	non-compiled	[CE]  	42	None	replace
154	[BUG]  [BUGGY]  return  n  ==  parent.getFirstChild()?  this  :  newNode;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  n  ==  parent.getFirstChild()?  this  :  newNode;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n  ==  parent.getFirstChild()?  this  :  newNode;	  return    newNode    ==    parent.getFirstChild()?    this    :    newNode;    	non-compiled	[CE]  	42	None	replace
155	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.getFirstChild()  :  new  Node(Token.EMPTY,  num);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.getFirstChild()  :  new  Node(Token.EMPTY,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.getFirstChild()  :  new  Node(Token.EMPTY,  num);	  return    newNode    ==    null?    parent.getFirstChild()    :    new    Node(Token.EMPTY);    	non-compiled	[CE]  	80	None	replace
156	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.getFirstChild()  :  new  Node(Token.EMPTY,  n);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.getFirstChild()  :  new  Node(Token.EMPTY,  n);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.getFirstChild()  :  new  Node(Token.EMPTY,  n);	  return    newNode    ==    null?    parent.getFirstChild()    :    new    Node(Token.EMPTY);    	non-compiled	[CE]  	80	None	replace
157	[BUG]  [BUGGY]  return  newNode!=  null?  parent.getFirstChild()  :  new  Node(Token.EMPTY,  num);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.getFirstChild()  :  new  Node(Token.EMPTY,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.getFirstChild()  :  new  Node(Token.EMPTY,  num);	  return    newNode    ==    null?    parent.getFirstChild()    :    new    Node(Token.EMPTY);    	non-compiled	[CE]  	80	None	replace
158	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.removeLastChild()  :  new  Node(Token.EMPTY,  newNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.removeLastChild()  :  new  Node(Token.EMPTY,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.removeLastChild()  :  new  Node(Token.EMPTY,  newNode);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(Token.EMPTY,    newNode);    	non-compiled	[CE]  	113	None	replace
159	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.getFirstChild()  :  new  Node(Token.EMPTY,  newNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.getFirstChild()  :  new  Node(Token.EMPTY,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.getFirstChild()  :  new  Node(Token.EMPTY,  newNode);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(Token.EMPTY,    newNode);    	non-compiled	[CE]  	113	None	replace
160	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  n  +  2));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  n  +  2));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  n  +  2));	  return    newNode.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num    +    2));    	non-compiled	[CE]  	15	None	replace
161	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  n  +  1));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  n  +  1));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  n  +  1));	  return    newNode.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num    +    2));    	non-compiled	[CE]  	15	None	replace
162	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  2));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  2));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  2));	  return    newNode.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num    +    2));    	non-compiled	[CE]  	15	None	replace
163	[BUG]  [BUGGY]  n.removeChild(parent,  num);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  n.removeChild(parent,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	n.removeChild(parent,  num);	  n.removeChild(parent);    	non-compiled	[CE]  	25	None	replace
164	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  1));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  1));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  1));	  return    parent.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	14	None	replace
165	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  n.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num));	  return    parent.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	14	None	replace
166	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  n));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  n));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  n));	  return    parent.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	14	None	replace
167	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  parent.newString(Token.NAME,  num):  Node.newString(Token.NAME,  num));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.NAME?  parent.newString(Token.NAME,  num):  Node.newString(Token.NAME,  num));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  parent.newString(Token.NAME,  num):  Node.newString(Token.NAME,  num));	  return    parent.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	14	None	replace
168	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  parent  :  Node.newString(Token.NAME,  num));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.NAME?  parent  :  Node.newString(Token.NAME,  num));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  parent  :  Node.newString(Token.NAME,  num));	  return    parent.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	14	None	replace
169	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  newNode.getFirstChild()  :  Node.newNumber(0);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent.getType()  ==  Token.NAME?  newNode.getFirstChild()  :  Node.newNumber(0);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.getType()  ==  Token.NAME?  newNode.getFirstChild()  :  Node.newNumber(0);	  return    newNode.getType()    ==    Token.NAME?    parent.getFirstChild()    :    Node.newNumber(0);    	non-compiled	[CE]  	91	None	replace
170	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  parent.getLastChild()  :  Node.newNumber(0);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.NAME?  parent.getLastChild()  :  Node.newNumber(0);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  parent.getLastChild()  :  Node.newNumber(0);	  return    newNode.getType()    ==    Token.NAME?    parent.getFirstChild()    :    Node.newNumber(0);    	non-compiled	[CE]  	91	None	replace
171	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  newNode.getFirstChild()  :  Node.newNumber(1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent.getType()  ==  Token.NAME?  newNode.getFirstChild()  :  Node.newNumber(1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.getType()  ==  Token.NAME?  newNode.getFirstChild()  :  Node.newNumber(1);	  return    newNode.getType()    ==    Token.NAME?    parent.getFirstChild()    :    Node.newNumber(0);    	non-compiled	[CE]  	91	None	replace
172	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  parent.getFirstChild()  :  Node.newNumber(num);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.NAME?  parent.getFirstChild()  :  Node.newNumber(num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  parent.getFirstChild()  :  Node.newNumber(num);	  return    newNode.getType()    ==    Token.NAME?    parent.getFirstChild()    :    Node.newNumber(0);    	non-compiled	[CE]  	91	None	replace
173	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  parent.getFirstChild()  :  Node.newNumber(0);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  n.getType()  ==  Token.NAME?  parent.getFirstChild()  :  Node.newNumber(0);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n.getType()  ==  Token.NAME?  parent.getFirstChild()  :  Node.newNumber(0);	  return    newNode.getType()    ==    Token.NAME?    parent.getFirstChild()    :    Node.newNumber(0);    	non-compiled	[CE]  	91	None	replace
174	[BUG]  [BUGGY]  return  newNode  ==  parent.getFirstChild()?  null  :  new  Node(n,  newNode,  num);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent.getFirstChild()?  null  :  new  Node(n,  newNode,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.getFirstChild()?  null  :  new  Node(n,  newNode,  num);	  return    newNode    ==    parent.getFirstChild()?    null    :    new    Node(n,    newNode);    	non-compiled	[CE]  	34	None	replace
175	[BUG]  [BUGGY]  return  newNode  ==  n.getFirstChild()?  null  :  new  Node(n,  newNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  n.getFirstChild()?  null  :  new  Node(n,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  n.getFirstChild()?  null  :  new  Node(n,  newNode);	  return    newNode    ==    parent.getFirstChild()?    null    :    new    Node(n,    newNode);    	non-compiled	[CE]  	34	None	replace
176	[BUG]  [BUGGY]  return  newNode  ==  parent.getFirstChild()?  null  :  new  Node(newNode,  parent);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent.getFirstChild()?  null  :  new  Node(newNode,  parent);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.getFirstChild()?  null  :  new  Node(newNode,  parent);	  return    newNode    ==    parent.getFirstChild()?    null    :    new    Node(n,    newNode);    	non-compiled	[CE]  	34	None	replace
177	[BUG]  [BUGGY]  return  newNode!=  null?  parent.getLastChild()  :  new  Node(newNode,  num);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.getLastChild()  :  new  Node(newNode,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.getLastChild()  :  new  Node(newNode,  num);	  return    newNode!=    null?    parent.getLastChild()    :    new    Node(newNode);    	non-compiled	[CE]  	57	None	replace
178	[BUG]  [BUGGY]  return  parent.cloneTree(),  newNode);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent.cloneTree(),  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.cloneTree(),  newNode);	  return    parent.cloneTree();    	non-compiled	[CE]  	73	None	replace
179	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  parent));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  parent));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  parent));	  return    newNode.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    n));    	non-compiled	[CE]  	12	None	replace
180	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  n);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  n);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  n);	  return    newNode.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    n));    	non-compiled	[CE]  	12	None	replace
181	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.removeLastChild()  :  new  Node(Token.EMPTY,  n);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.removeLastChild()  :  new  Node(Token.EMPTY,  n);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.removeLastChild()  :  new  Node(Token.EMPTY,  n);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(Token.EMPTY,    n);    	non-compiled	[CE]  	79	None	replace
182	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  n,  num);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  n,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  n,  num);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(Token.EMPTY,    n);    	non-compiled	[CE]  	79	None	replace
183	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(newNode,  num  +  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(newNode,  num  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(newNode,  num  +  1);	  return    newNode    ==    null?    parent.replaceChild(n,    newNode):    new    Node(newNode,    num);    	non-compiled	[CE]  	119	None	replace
184	[BUG]  [BUGGY]  return  parent!=  null?  parent.replaceChild(n,  newNode):  new  Node(newNode,  num);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent!=  null?  parent.replaceChild(n,  newNode):  new  Node(newNode,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent!=  null?  parent.replaceChild(n,  newNode):  new  Node(newNode,  num);	  return    newNode    ==    null?    parent.replaceChild(n,    newNode):    new    Node(newNode,    num);    	non-compiled	[CE]  	119	None	replace
185	[BUG]  [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(n,  newNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(n,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent?  null  :  new  Node(n,  newNode);	  return    newNode    ==    parent?    null    :    new    Node(newNode,    n);    	non-compiled	[CE]  	65	None	replace
186	[BUG]  [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  n,  num);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  n,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent?  null  :  new  Node(newNode,  n,  num);	  return    newNode    ==    parent?    null    :    new    Node(newNode,    n);    	non-compiled	[CE]  	65	None	replace
187	[BUG]  [BUGGY]  return  newNode  ==  n?  null  :  new  Node(newNode,  num);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  n?  null  :  new  Node(newNode,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  n?  null  :  new  Node(newNode,  num);	  return    newNode    ==    parent?    null    :    new    Node(newNode,    n);    	non-compiled	[CE]  	65	None	replace
188	[BUG]  [BUGGY]  return  newNode  ==  null?  null  :  new  Node(newNode,  num);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  null  :  new  Node(newNode,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  null  :  new  Node(newNode,  num);	  return    newNode    ==    parent?    null    :    new    Node(newNode,    n);    	non-compiled	[CE]  	65	None	replace
189	[BUG]  [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(n,  parent.num);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(n,  parent.num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent?  null  :  new  Node(n,  parent.num);	  return    newNode    ==    parent?    null    :    new    Node(n,    num);    	non-compiled	[CE]  	112	None	replace
190	[BUG]  [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(n,  parent.getType());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(n,  parent.getType());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent?  null  :  new  Node(n,  parent.getType());	  return    newNode    ==    parent?    null    :    new    Node(n,    num);    	non-compiled	[CE]  	112	None	replace
191	[BUG]  [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(n,  parent,  num);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(n,  parent,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent?  null  :  new  Node(n,  parent,  num);	  return    newNode    ==    parent?    null    :    new    Node(n,    num);    	non-compiled	[CE]  	112	None	replace
192	[BUG]  [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(parent,  num);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(parent,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent?  null  :  new  Node(parent,  num);	  return    newNode    ==    parent?    null    :    new    Node(n,    num);    	non-compiled	[CE]  	112	None	replace
193	[BUG]  [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(n,  parent);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(n,  parent);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent?  null  :  new  Node(n,  parent);	  return    newNode    ==    parent?    null    :    new    Node(n,    num);    	non-compiled	[CE]  	112	None	replace
194	[BUG]  [BUGGY]  return  n  ==  parent.getLastChild()?  null  :  newNode;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  n  ==  parent.getLastChild()?  null  :  newNode;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n  ==  parent.getLastChild()?  null  :  newNode;	  return    n    ==    parent.getFirstChild()?    null    :    newNode;    	non-compiled	[CE]  	41	None	replace
195	[BUG]  [BUGGY]  return  parent  ==  n.getFirstChild()?  null  :  newNode;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent  ==  n.getFirstChild()?  null  :  newNode;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent  ==  n.getFirstChild()?  null  :  newNode;	  return    n    ==    parent.getFirstChild()?    null    :    newNode;    	non-compiled	[CE]  	41	None	replace
196	[BUG]  [BUGGY]  return  n  ==  parent.getFirstChild()?  newNode  :  null;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  n  ==  parent.getFirstChild()?  newNode  :  null;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n  ==  parent.getFirstChild()?  newNode  :  null;	  return    n    ==    parent.getFirstChild()?    null    :    newNode;    	non-compiled	[CE]  	41	None	replace
197	[BUG]  [BUGGY]  return  parent  ==  null?  null  :  parent.getFirstChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent  ==  null?  null  :  parent.getFirstChild();  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent  ==  null?  null  :  parent.getFirstChild();	  return    n    ==    parent.getFirstChild()?    null    :    newNode;    	non-compiled	[CE]  	41	None	replace
198	[BUG]  [BUGGY]  return  newNode!=  null?  parent.getType()  :  Node.newNumber(num  +  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.getType()  :  Node.newNumber(num  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.getType()  :  Node.newNumber(num  +  1);	  return    newNode!=    null?    parent.getType()    :    Node.newNumber(num);    	non-compiled	[CE]  	50	None	replace
199	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);	  Preconditions.checkState(newNode.getType()    ==    Token.NAME);    	non-compiled	[CE]  	109	None	replace
200	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);	  Preconditions.checkState(newNode.getType()    ==    Token.NAME);    	non-compiled	[CE]  	109	None	replace
201	[BUG]  [BUGGY]  Preconditions.checkState(newNode.getType()  ==  Token.NAME,  num);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  Preconditions.checkState(newNode.getType()  ==  Token.NAME,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	Preconditions.checkState(newNode.getType()  ==  Token.NAME,  num);	  Preconditions.checkState(newNode.getType()    ==    Token.NAME);    	non-compiled	[CE]  	109	None	replace
202	[BUG]  [BUGGY]  Preconditions.checkState(newNode.getType()!=  Token.NAME);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  Preconditions.checkState(newNode.getType()!=  Token.NAME);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	Preconditions.checkState(newNode.getType()!=  Token.NAME);	  Preconditions.checkState(newNode.getType()    ==    Token.NAME);    	non-compiled	[CE]  	109	None	replace
203	[BUG]  [BUGGY]  Preconditions.checkState(newNode.getType()  ==  Token.NAME,  n);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  Preconditions.checkState(newNode.getType()  ==  Token.NAME,  n);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	Preconditions.checkState(newNode.getType()  ==  Token.NAME,  n);	  Preconditions.checkState(newNode.getType()    ==    Token.NAME);    	non-compiled	[CE]  	109	None	replace
204	[BUG]  [BUGGY]  Preconditions.checkState(newNode.getType()  ==  Token.NAME  ||  newNode.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  Preconditions.checkState(newNode.getType()  ==  Token.NAME  ||  newNode.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	Preconditions.checkState(newNode.getType()  ==  Token.NAME  ||  newNode.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(newNode.getType()    ==    Token.NAME);    	non-compiled	[CE]  	109	None	replace
205	[BUG]  [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  n);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  n);	  return    newNode!=    null?    parent.removeFirstChild()    :    new    Node(Token.EMPTY);    	non-compiled	[CE]  	102	None	replace
206	[BUG]  [BUGGY]  return  n  ==  newNode.replaceChild(parent,  newNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  n  ==  newNode.replaceChild(parent,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n  ==  newNode.replaceChild(parent,  newNode);	  return    n    ==    parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	6	None	replace
207	[BUG]  [BUGGY]  return  n  ==  newNode.replaceChild(n,  parent);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  n  ==  newNode.replaceChild(n,  parent);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n  ==  newNode.replaceChild(n,  parent);	  return    n    ==    parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	6	None	replace
208	[BUG]  [BUGGY]  return  n  ==  parent.replaceChild(parent,  newNode);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  n  ==  parent.replaceChild(parent,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n  ==  parent.replaceChild(parent,  newNode);	  return    n    ==    parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	6	None	replace
209	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num);	  return    newNode.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	13	None	replace
210	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  parent);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  parent);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  parent);	  return    newNode.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	13	None	replace
211	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  0);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  0);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  0);	  return    newNode.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	13	None	replace
212	[BUG]  [BUGGY]  return  newNode.getType()!=  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()!=  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()!=  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num);	  return    newNode.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	13	None	replace
213	[BUG]  [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  num,  parent.type,  false);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  num,  parent.type,  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent?  null  :  new  Node(newNode,  num,  parent.type,  false);	  return    newNode    ==    parent?    null    :    new    Node(newNode,    num,    parent.type);    	non-compiled	[CE]  	67	None	replace
214	[BUG]  [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  n,  parent.type);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  n,  parent.type);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent?  null  :  new  Node(newNode,  n,  parent.type);	  return    newNode    ==    parent?    null    :    new    Node(newNode,    num,    parent.type);    	non-compiled	[CE]  	67	None	replace
215	[BUG]  [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  num,  parent.type,  type);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  num,  parent.type,  type);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent?  null  :  new  Node(newNode,  num,  parent.type,  type);	  return    newNode    ==    parent?    null    :    new    Node(newNode,    num,    parent.type);    	non-compiled	[CE]  	67	None	replace
216	[BUG]  [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(n,  num,  parent.type);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(n,  num,  parent.type);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent?  null  :  new  Node(n,  num,  parent.type);	  return    newNode    ==    parent?    null    :    new    Node(newNode,    num,    parent.type);    	non-compiled	[CE]  	67	None	replace
217	[BUG]  [BUGGY]  return  newNode  ==  null?  null  :  new  Node(newNode,  num,  parent.type);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  null  :  new  Node(newNode,  num,  parent.type);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  null  :  new  Node(newNode,  num,  parent.type);	  return    newNode    ==    parent?    null    :    new    Node(newNode,    num,    parent.type);    	non-compiled	[CE]  	67	None	replace
218	[BUG]  [BUGGY]  return  parent.cloneTree(),  null;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent.cloneTree(),  null;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.cloneTree(),  null;	  return    newNode.cloneTree(),    null;    	non-compiled	[CE]  	114	None	replace
219	[BUG]  [BUGGY]  return  newNode.cloneTree(),  this;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.cloneTree(),  this;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.cloneTree(),  this;	  return    newNode.cloneTree(),    null;    	non-compiled	[CE]  	114	None	replace
220	[BUG]  [BUGGY]  return  n.cloneTree(),  null;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  n.cloneTree(),  null;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n.cloneTree(),  null;	  return    newNode.cloneTree(),    null;    	non-compiled	[CE]  	114	None	replace
221	[BUG]  [BUGGY]  return  newNode.cloneTree(),  parent);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.cloneTree(),  parent);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.cloneTree(),  parent);	  return    newNode.cloneTree(),    null;    	non-compiled	[CE]  	114	None	replace
222	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME,  newNode.getString()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME,  newNode.getString()));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME,  newNode.getString()));	  return    parent.getNext();    	non-compiled	[CE]  	17	None	replace
223	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME);	  return    parent.getNext();    	non-compiled	[CE]  	17	None	replace
224	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Node.newString(Token.NAME,  num));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Node.newString(Token.NAME,  num));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Node.newString(Token.NAME,  num));	  return    parent.getNext();    	non-compiled	[CE]  	17	None	replace
225	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME,  newNode.getString());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME,  newNode.getString());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME,  newNode.getString());	  return    parent.getNext();    	non-compiled	[CE]  	17	None	replace
226	[BUG]  [BUGGY]  return  newNode  ==  parent.getType()?  null  :  new  Node(newNode,  num);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent.getType()?  null  :  new  Node(newNode,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.getType()?  null  :  new  Node(newNode,  num);	  return    newNode    ==    parent.getType()?    null    :    newNode;    	non-compiled	[CE]  	87	None	replace
227	[BUG]  [BUGGY]  return  newNode!=  parent.getType()?  null  :  newNode;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  parent.getType()?  null  :  newNode;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  parent.getType()?  null  :  newNode;	  return    newNode    ==    parent.getType()?    null    :    newNode;    	non-compiled	[CE]  	87	None	replace
228	[BUG]  [BUGGY]  return  newNode  ==  n.getType()?  null  :  newNode;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  n.getType()?  null  :  newNode;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  n.getType()?  null  :  newNode;	  return    newNode    ==    parent.getType()?    null    :    newNode;    	non-compiled	[CE]  	87	None	replace
229	[BUG]  [BUGGY]  return  newNode  ==  parent.getType()?  null  :  NodeUtil.newNumber(newNode,  num);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent.getType()?  null  :  NodeUtil.newNumber(newNode,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.getType()?  null  :  NodeUtil.newNumber(newNode,  num);	  return    newNode    ==    parent.getType()?    null    :    newNode;    	non-compiled	[CE]  	87	None	replace
230	[BUG]  [BUGGY]  return  newNode  ==  parent.getType()?  null  :  NodeUtil.newNumber(newNode);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent.getType()?  null  :  NodeUtil.newNumber(newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.getType()?  null  :  NodeUtil.newNumber(newNode);	  return    newNode    ==    parent.getType()?    null    :    newNode;    	non-compiled	[CE]  	87	None	replace
231	[BUG]  [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  num  +  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  num  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  num  +  1);	  return    newNode!=    null?    parent.removeFirstChild()    :    new    Node(Token.EMPTY,    num);    	non-compiled	[CE]  	78	None	replace
232	[BUG]  [BUGGY]  NodeUtil.removeChild(newNode,  n);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  NodeUtil.removeChild(newNode,  n);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	NodeUtil.removeChild(newNode,  n);	  NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  	100	None	replace
233	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n,  newNode);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  NodeUtil.removeChild(parent,  n,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	NodeUtil.removeChild(parent,  n,  newNode);	  NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  	100	None	replace
234	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n  +  1);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  NodeUtil.removeChild(parent,  n  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	NodeUtil.removeChild(parent,  n  +  1);	  NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  	100	None	replace
235	[BUG]  [BUGGY]  return  newNode!=  null?  parent.getFirstChild()  :  new  Node(n,  num);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.getFirstChild()  :  new  Node(n,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.getFirstChild()  :  new  Node(n,  num);	  return    newNode!=    null?    parent.getFirstChild()    :    new    Node(newNode,    num);    	non-compiled	[CE]  	56	None	replace
236	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.getFirstChild()  :  new  Node(newNode,  num);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.getFirstChild()  :  new  Node(newNode,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.getFirstChild()  :  new  Node(newNode,  num);	  return    newNode!=    null?    parent.getFirstChild()    :    new    Node(newNode,    num);    	non-compiled	[CE]  	56	None	replace
237	[BUG]  [BUGGY]  return  newNode!=  null?  parent.getFirstChild()  :  new  Node(newNode,  num  +  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.getFirstChild()  :  new  Node(newNode,  num  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.getFirstChild()  :  new  Node(newNode,  num  +  1);	  return    newNode!=    null?    parent.getFirstChild()    :    new    Node(newNode,    num);    	non-compiled	[CE]  	56	None	replace
238	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.getLastChild()  :  new  Node(newNode,  num);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.getLastChild()  :  new  Node(newNode,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.getLastChild()  :  new  Node(newNode,  num);	  return    newNode    ==    null?    parent.getLastChild()    :    new    Node(newNode);    	non-compiled	[CE]  	82	None	replace
239	[BUG]  [BUGGY]  return  parent.getType()!=  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent.getType()!=  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.getType()!=  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num));	  return    newNode.getType()!=    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	90	None	replace
240	[BUG]  [BUGGY]  return  newNode.getType()!=  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  1));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()!=  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  1));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()!=  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  1));	  return    newNode.getType()!=    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	90	None	replace
241	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  parent));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  parent));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  parent));	  return    newNode.getType()    ==    Token.CALL?    newNode    :    Node.newString(Token.NAME,    n));    	non-compiled	[CE]  	59	None	replace
242	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  name));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  name));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  name));	  return    newNode.getType()    ==    Token.CALL?    newNode    :    Node.newString(Token.NAME,    n));    	non-compiled	[CE]  	59	None	replace
243	[BUG]  [BUGGY]  return  parent.getLastChild(),  num;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent.getLastChild(),  num;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.getLastChild(),  num;	  return    newNode.getLastChild(),    num;    	non-compiled	[CE]  	47	None	replace
244	[BUG]  [BUGGY]  return  parent.getFirstChild(),  num;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent.getFirstChild(),  num;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.getFirstChild(),  num;	  return    newNode.getLastChild(),    num;    	non-compiled	[CE]  	47	None	replace
245	[BUG]  [BUGGY]  return  newNode.getFirstChild(),  num;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getFirstChild(),  num;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getFirstChild(),  num;	  return    newNode.getLastChild(),    num;    	non-compiled	[CE]  	47	None	replace
246	[BUG]  [BUGGY]  return  n.getLastChild(),  num;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  n.getLastChild(),  num;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n.getLastChild(),  num;	  return    newNode.getLastChild(),    num;    	non-compiled	[CE]  	47	None	replace
247	[BUG]  [BUGGY]  return  n.getFirstChild(),  num;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  n.getFirstChild(),  num;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n.getFirstChild(),  num;	  return    newNode.getLastChild(),    num;    	non-compiled	[CE]  	47	None	replace
248	[BUG]  [BUGGY]  return  newNode.getLastChild(),  num  +  1;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getLastChild(),  num  +  1;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getLastChild(),  num  +  1;	  return    newNode.getLastChild(),    num;    	non-compiled	[CE]  	47	None	replace
249	[BUG]  [BUGGY]  return  n.getLastChild(),  newNode;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  n.getLastChild(),  newNode;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n.getLastChild(),  newNode;	  return    newNode.getLastChild(),    num;    	non-compiled	[CE]  	47	None	replace
250	[BUG]  [BUGGY]  return  newNode!=  null?  parent.getType()  :  Node.newNumber(2);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.getType()  :  Node.newNumber(2);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.getType()  :  Node.newNumber(2);	  return    newNode!=    null?    parent.getType()    :    Node.newNumber(1);    	non-compiled	[CE]  	51	None	replace
251	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  n);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  n);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  n);	  return    newNode.getType()    ==    Token.CALL?    newNode    :    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	60	None	replace
252	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  parent);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  parent);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  parent);	  return    newNode.getType()    ==    Token.CALL?    newNode    :    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	60	None	replace
253	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  name);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  name);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  name);	  return    newNode.getType()    ==    Token.CALL?    newNode    :    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	60	None	replace
254	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  0);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  0);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  0);	  return    newNode.getType()    ==    Token.CALL?    newNode    :    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	60	None	replace
255	[BUG]  [BUGGY]  return  newNode  ==  n.getLastChild()?  null  :  newNode;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  n.getLastChild()?  null  :  newNode;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  n.getLastChild()?  null  :  newNode;	  return    newNode    ==    parent.getLastChild()?    null    :    newNode;    	non-compiled	[CE]  	38	None	replace
256	[BUG]  [BUGGY]  newNode.removeChild(n);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  newNode.removeChild(n);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	newNode.removeChild(n);	  newNode.removeChild(parent);    	non-compiled	[CE]  	108	None	replace
257	[BUG]  [BUGGY]  newNode.removeChild(newNode);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  newNode.removeChild(newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	newNode.removeChild(newNode);	  newNode.removeChild(parent);    	non-compiled	[CE]  	108	None	replace
258	[BUG]  [BUGGY]  newNode.addChildToBack(newNode);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  newNode.addChildToBack(newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	newNode.addChildToBack(newNode);	  newNode.removeChild(parent);    	non-compiled	[CE]  	108	None	replace
259	[BUG]  [BUGGY]  NodeUtil.removeChild(parent);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  NodeUtil.removeChild(parent);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	NodeUtil.removeChild(parent);	  newNode.removeChild(parent);    	non-compiled	[CE]  	108	None	replace
260	[BUG]  [BUGGY]  Node.removeChild(newNode);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  Node.removeChild(newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	Node.removeChild(newNode);	  newNode.removeChild(parent);    	non-compiled	[CE]  	108	None	replace
261	[BUG]  [BUGGY]  return  newNode!=  null?  parent.getFirstChild()  :  new  Node(Token.NAME,  n);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.getFirstChild()  :  new  Node(Token.NAME,  n);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.getFirstChild()  :  new  Node(Token.NAME,  n);	  return    newNode!=    null?    parent.removeFirstChild()    :    new    Node(Token.NAME,    n);    	non-compiled	[CE]  	96	None	replace
262	[BUG]  [BUGGY]  return  newNode!=  null?  parent.removeLastChild()  :  new  Node(Token.NAME,  n);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.removeLastChild()  :  new  Node(Token.NAME,  n);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.removeLastChild()  :  new  Node(Token.NAME,  n);	  return    newNode!=    null?    parent.removeFirstChild()    :    new    Node(Token.NAME,    n);    	non-compiled	[CE]  	96	None	replace
263	[BUG]  [BUGGY]  return  newNode  ==  n.replaceChild(n,  newNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  n.replaceChild(n,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  n.replaceChild(n,  newNode);	  return    newNode    ==    n.replaceChild(parent,    newNode);    	non-compiled	[CE]  	1	None	replace
264	[BUG]  [BUGGY]  return  newNode  ==  n.removeChild(parent,  newNode);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  n.removeChild(parent,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  n.removeChild(parent,  newNode);	  return    newNode    ==    n.replaceChild(parent,    newNode);    	non-compiled	[CE]  	1	None	replace
265	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	NodeTraversal.traverse(compiler,  n,  parent);	  NodeTraversal.traverse(compiler,    n,    newNode);    	non-compiled	[CE]  	26	None	replace
266	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  parent);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  parent);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  parent);	  NodeTraversal.traverse(compiler,    n,    newNode);    	non-compiled	[CE]  	26	None	replace
267	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  num);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  num);	  NodeTraversal.traverse(compiler,    n,    newNode);    	non-compiled	[CE]  	26	None	replace
268	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  INVALID_REGULAR_EXPRESSION_FLAGS);	  NodeTraversal.traverse(compiler,    n,    newNode);    	non-compiled	[CE]  	26	None	replace
269	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  newNode);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	NodeTraversal.traverse(compiler,  parent,  newNode);	  NodeTraversal.traverse(compiler,    n,    newNode);    	non-compiled	[CE]  	26	None	replace
270	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  num);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	NodeTraversal.traverse(compiler,  newNode,  num);	  NodeTraversal.traverse(compiler,    n,    newNode);    	non-compiled	[CE]  	26	None	replace
271	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(Token.NAME,  num  +  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(Token.NAME,  num  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(Token.NAME,  num  +  1);	  return    newNode    ==    null?    parent.replaceChild(n,    newNode):    new    Node(Token.NAME,    num);    	non-compiled	[CE]  	97	None	replace
272	[BUG]  [BUGGY]  return  newNode  ==  n.getFirstChild()?  null  :  new  Node(parent,  newNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  n.getFirstChild()?  null  :  new  Node(parent,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  n.getFirstChild()?  null  :  new  Node(parent,  newNode);	  return    newNode    ==    n.getFirstChild()?    null    :    new    Node(newNode);    	non-compiled	[CE]  	35	None	replace
273	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.getType()  :  Node.newString(0);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.getType()  :  Node.newString(0);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.getType()  :  Node.newString(0);	  return    newNode    ==    null?    parent.getType()    :    Node.newNumber(0);    	non-compiled	[CE]  	49	None	replace
274	[BUG]  [BUGGY]  return  parent!=  null?  newNode.getType()  :  Node.newNumber(0);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent!=  null?  newNode.getType()  :  Node.newNumber(0);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent!=  null?  newNode.getType()  :  Node.newNumber(0);	  return    parent!=    null?    parent.getType()    :    Node.newNumber(0);    	non-compiled	[CE]  	52	None	replace
275	[BUG]  [BUGGY]  return  parent  ==  null?  parent.getType()  :  Node.newNumber(0);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent  ==  null?  parent.getType()  :  Node.newNumber(0);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent  ==  null?  parent.getType()  :  Node.newNumber(0);	  return    parent!=    null?    parent.getType()    :    Node.newNumber(0);    	non-compiled	[CE]  	52	None	replace
276	[BUG]  [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  num  +  2);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  num  +  2);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent?  null  :  new  Node(newNode,  num  +  2);	  return    newNode    ==    parent?    null    :    new    Node(newNode,    num    +    1);    	non-compiled	[CE]  	64	None	replace
277	[BUG]  [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  n  +  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  n  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent?  null  :  new  Node(newNode,  n  +  1);	  return    newNode    ==    parent?    null    :    new    Node(newNode,    num    +    1);    	non-compiled	[CE]  	64	None	replace
278	[BUG]  [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(n,  newNode  +  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(n,  newNode  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent?  null  :  new  Node(n,  newNode  +  1);	  return    newNode    ==    parent?    null    :    new    Node(newNode,    num    +    1);    	non-compiled	[CE]  	64	None	replace
279	[BUG]  [BUGGY]  return  newNode!=  parent?  null  :  new  Node(newNode,  num  +  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  parent?  null  :  new  Node(newNode,  num  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  parent?  null  :  new  Node(newNode,  num  +  1);	  return    newNode    ==    parent?    null    :    new    Node(newNode,    num    +    1);    	non-compiled	[CE]  	64	None	replace
280	[BUG]  [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  num  +  3);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  num  +  3);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent?  null  :  new  Node(newNode,  num  +  3);	  return    newNode    ==    parent?    null    :    new    Node(newNode,    num    +    1);    	non-compiled	[CE]  	64	None	replace
281	[BUG]  [BUGGY]  return  newNode!=  null?  parent.removeLastChild()  :  new  Node(newNode);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.removeLastChild()  :  new  Node(newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.removeLastChild()  :  new  Node(newNode);	  return    newNode!=    null?    parent.removeFirstChild()    :    new    Node(newNode);    	non-compiled	[CE]  	92	None	replace
282	[BUG]  [BUGGY]  return  newNode  ==  parent.removeChild(n);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent.removeChild(n);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.removeChild(n);	  return    newNode    ==    n.removeChild(parent);    	non-compiled	[CE]  	3	None	replace
283	[BUG]  [BUGGY]  return  newNode  ==  n.removeChild(newNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  n.removeChild(newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  n.removeChild(newNode);	  return    newNode    ==    n.removeChild(parent);    	non-compiled	[CE]  	3	None	replace
284	[BUG]  [BUGGY]  return  newNode  ==  parent.removeChild(newNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent.removeChild(newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.removeChild(newNode);	  return    newNode    ==    n.removeChild(parent);    	non-compiled	[CE]  	3	None	replace
285	[BUG]  [BUGGY]  return  newNode  ==  parent.removeChild(parent);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent.removeChild(parent);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.removeChild(parent);	  return    newNode    ==    n.removeChild(parent);    	non-compiled	[CE]  	3	None	replace
286	[BUG]  [BUGGY]  return  newNode!=  parent.removeChild(n);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  parent.removeChild(n);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  parent.removeChild(n);	  return    newNode    ==    n.removeChild(parent);    	non-compiled	[CE]  	3	None	replace
287	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME,  num);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME,  num);	  return    newNode.getType()    ==    Token.NAME?    parent.getType()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  	20	None	replace
288	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  newNode.getType()  :  Node.newString(Token.NAME);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent.getType()  ==  Token.NAME?  newNode.getType()  :  Node.newString(Token.NAME);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.getType()  ==  Token.NAME?  newNode.getType()  :  Node.newString(Token.NAME);	  return    newNode.getType()    ==    Token.NAME?    parent.getType()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  	20	None	replace
289	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME,  n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME,  n);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME,  n);	  return    newNode.getType()    ==    Token.NAME?    parent.getType()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  	20	None	replace
290	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  newNode.getString()  :  Node.newString(Token.NAME);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent.getType()  ==  Token.NAME?  newNode.getString()  :  Node.newString(Token.NAME);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.getType()  ==  Token.NAME?  newNode.getString()  :  Node.newString(Token.NAME);	  return    newNode.getType()    ==    Token.NAME?    parent.getType()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  	20	None	replace
291	[BUG]  [BUGGY]  return  newNode.getType()!=  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()!=  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()!=  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME);	  return    newNode.getType()    ==    Token.NAME?    parent.getType()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  	20	None	replace
292	[BUG]  [BUGGY]  return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(Token.EMPTY);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(Token.EMPTY);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(Token.EMPTY);	  return    newNode    ==    null?    parent.replaceChild(n,    newNode):    new    Node(Token.EMPTY);    	non-compiled	[CE]  	103	None	replace
293	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(Token.EMPTY,  num);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(Token.EMPTY,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(Token.EMPTY,  num);	  return    newNode    ==    null?    parent.replaceChild(n,    newNode):    new    Node(Token.EMPTY);    	non-compiled	[CE]  	103	None	replace
294	[BUG]  [BUGGY]  return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(Token.EMPTY,  num);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(Token.EMPTY,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(Token.EMPTY,  num);	  return    newNode    ==    null?    parent.replaceChild(n,    newNode):    new    Node(Token.EMPTY);    	non-compiled	[CE]  	103	None	replace
295	[BUG]  [BUGGY]  return  n.cloneChild(newNode);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  n.cloneChild(newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n.cloneChild(newNode);	  return    n.cloneTree();    	non-compiled	[CE]  	74	None	replace
296	[BUG]  [BUGGY]  return  newNode!=  null?  parent.getFirstChild()  :  new  Node(n,  newNode);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.getFirstChild()  :  new  Node(n,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.getFirstChild()  :  new  Node(n,  newNode);	  return    newNode!=    null?    parent.getFirstChild()    :    new    Node(newNode,    n);    	non-compiled	[CE]  	118	None	replace
297	[BUG]  [BUGGY]  return  newNode!=  null?  parent.getLastChild()  :  new  Node(newNode,  n);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.getLastChild()  :  new  Node(newNode,  n);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.getLastChild()  :  new  Node(newNode,  n);	  return    newNode!=    null?    parent.getFirstChild()    :    new    Node(newNode,    n);    	non-compiled	[CE]  	118	None	replace
298	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.removeLastChild()  :  new  Node(n,  num);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.removeLastChild()  :  new  Node(n,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.removeLastChild()  :  new  Node(n,  num);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(n,    num);    	non-compiled	[CE]  	54	None	replace
299	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.getFirstChild()  :  new  Node(n,  num);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.getFirstChild()  :  new  Node(n,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.getFirstChild()  :  new  Node(n,  num);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(n,    num);    	non-compiled	[CE]  	54	None	replace
300	[BUG]  [BUGGY]  return  parent!=  null?  parent.removeFirstChild()  :  new  Node(n,  num);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent!=  null?  parent.removeFirstChild()  :  new  Node(n,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent!=  null?  parent.removeFirstChild()  :  new  Node(n,  num);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(n,    num);    	non-compiled	[CE]  	54	None	replace
301	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(n,  parent.num);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(n,  parent.num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(n,  parent.num);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(n,    num);    	non-compiled	[CE]  	54	None	replace
302	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(n,  parent.getType());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(n,  parent.getType());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(n,  parent.getType());	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(n,    num);    	non-compiled	[CE]  	54	None	replace
303	[BUG]  [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(newNode,  num  +  1);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(newNode,  num  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(newNode,  num  +  1);	  return    newNode!=    null?    parent.removeFirstChild()    :    new    Node(newNode,    num);    	non-compiled	[CE]  	7	None	replace
304	[BUG]  [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(n,  num);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(n,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(n,  num);	  return    newNode!=    null?    parent.removeFirstChild()    :    new    Node(newNode,    num);    	non-compiled	[CE]  	7	None	replace
305	[BUG]  [BUGGY]  return  newNode  ==  parent.replaceChild(parent,  n);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent.replaceChild(parent,  n);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.replaceChild(parent,  n);	  return    newNode    ==    parent.replaceChild(parent,    newNode);    	non-compiled	[CE]  	83	None	replace
306	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  num  +  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  num  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  num  +  1);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(Token.EMPTY,    num);    	non-compiled	[CE]  	77	None	replace
307	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  n  +  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  n  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  n  +  1);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(Token.NAME,    num    +    1);    	non-compiled	[CE]  	116	None	replace
308	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.getFirstChild()  :  new  Node(Token.NAME,  num  +  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.getFirstChild()  :  new  Node(Token.NAME,  num  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.getFirstChild()  :  new  Node(Token.NAME,  num  +  1);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(Token.NAME,    num    +    1);    	non-compiled	[CE]  	116	None	replace
309	[BUG]  [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  n  +  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  n  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  n  +  1);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(Token.NAME,    num    +    1);    	non-compiled	[CE]  	116	None	replace
310	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  n,  num  +  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  n,  num  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  n,  num  +  1);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(Token.NAME,    num    +    1);    	non-compiled	[CE]  	116	None	replace
311	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.getFirstChild()  :  new  Node(newNode,  n);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.getFirstChild()  :  new  Node(newNode,  n);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.getFirstChild()  :  new  Node(newNode,  n);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(newNode,    n);    	non-compiled	[CE]  	88	None	replace
312	[BUG]  [BUGGY]  return  newNode  ==  parent.getLastChild()?  null  :  new  Node(n);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent.getLastChild()?  null  :  new  Node(n);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.getLastChild()?  null  :  new  Node(n);	  return    newNode    ==    parent.getFirstChild()?    null    :    new    Node(n);    	non-compiled	[CE]  	104	None	replace
313	[BUG]  [BUGGY]  return  newNode  ==  parent.getFirstChild()?  null  :  new  Node(parent,  num);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent.getFirstChild()?  null  :  new  Node(parent,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.getFirstChild()?  null  :  new  Node(parent,  num);	  return    newNode    ==    parent.getFirstChild()?    null    :    new    Node(n);    	non-compiled	[CE]  	104	None	replace
314	[BUG]  [BUGGY]  return  newNode  ==  n.getFirstChild()?  null  :  new  Node(parent);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  n.getFirstChild()?  null  :  new  Node(parent);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  n.getFirstChild()?  null  :  new  Node(parent);	  return    newNode    ==    parent.getFirstChild()?    null    :    new    Node(n);    	non-compiled	[CE]  	104	None	replace
315	[BUG]  [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  n,  parent.getType());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  n,  parent.getType());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent?  null  :  new  Node(newNode,  n,  parent.getType());	  return    newNode    ==    parent?    null    :    new    Node(newNode,    num,    parent.getType());    	non-compiled	[CE]  	68	None	replace
316	[BUG]  [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  num,  parent.getType(),  n);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  num,  parent.getType(),  n);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent?  null  :  new  Node(newNode,  num,  parent.getType(),  n);	  return    newNode    ==    parent?    null    :    new    Node(newNode,    num,    parent.getType());    	non-compiled	[CE]  	68	None	replace
317	[BUG]  [BUGGY]  return  newNode  ==  null?  null  :  new  Node(newNode,  num,  parent.getType());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  null  :  new  Node(newNode,  num,  parent.getType());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  null  :  new  Node(newNode,  num,  parent.getType());	  return    newNode    ==    parent?    null    :    new    Node(newNode,    num,    parent.getType());    	non-compiled	[CE]  	68	None	replace
318	[BUG]  [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(n,  num,  parent.getType());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(n,  num,  parent.getType());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent?  null  :  new  Node(n,  num,  parent.getType());	  return    newNode    ==    parent?    null    :    new    Node(newNode,    num,    parent.getType());    	non-compiled	[CE]  	68	None	replace
319	[BUG]  [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  num,  parent.getFirstChild());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  num,  parent.getFirstChild());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent?  null  :  new  Node(newNode,  num,  parent.getFirstChild());	  return    newNode    ==    parent?    null    :    new    Node(newNode,    num,    parent.getType());    	non-compiled	[CE]  	68	None	replace
320	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(newNode,  num  +  2);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(newNode,  num  +  2);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(newNode,  num  +  2);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(newNode,    num    +    1);    	non-compiled	[CE]  	53	None	replace
321	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(newNode,  n  +  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(newNode,  n  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(newNode,  n  +  1);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(newNode,    num    +    1);    	non-compiled	[CE]  	53	None	replace
322	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  1));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  1));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  1));	  return    newNode.getType()    ==    Token.CALL?    newNode    :    Node.newString(Token.NAME,    0));    	non-compiled	[CE]  	63	None	replace
323	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  2));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  2));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  2));	  return    newNode.getType()    ==    Token.CALL?    newNode    :    Node.newString(Token.NAME,    0));    	non-compiled	[CE]  	63	None	replace
324	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  0,  num));  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  0,  num));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  0,  num));	  return    newNode.getType()    ==    Token.CALL?    newNode    :    Node.newString(Token.NAME,    0));    	non-compiled	[CE]  	63	None	replace
325	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  0));  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  0));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  0));	  return    newNode.getType()    ==    Token.CALL?    newNode    :    Node.newString(Token.NAME,    0));    	non-compiled	[CE]  	63	None	replace
326	[BUG]  [BUGGY]  return  newNode!=  null?  parent.getFirstChild()  :  new  Node(Token.NAME,  num);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.getFirstChild()  :  new  Node(Token.NAME,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.getFirstChild()  :  new  Node(Token.NAME,  num);	  return    newNode!=    null?    parent.removeFirstChild()    :    new    Node(Token.NAME,    num);    	non-compiled	[CE]  	115	None	replace
327	[BUG]  [BUGGY]  return  newNode!=  null?  parent.removeLastChild()  :  new  Node(Token.NAME,  num);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.removeLastChild()  :  new  Node(Token.NAME,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.removeLastChild()  :  new  Node(Token.NAME,  num);	  return    newNode!=    null?    parent.removeFirstChild()    :    new    Node(Token.NAME,    num);    	non-compiled	[CE]  	115	None	replace
328	[BUG]  [BUGGY]  return  parent!=  null?  newNode.replaceChild(n,  newNode):  new  Node(newNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent!=  null?  newNode.replaceChild(n,  newNode):  new  Node(newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent!=  null?  newNode.replaceChild(n,  newNode):  new  Node(newNode);	  return    newNode!=    null?    parent.replaceChild(n,    newNode):    new    Node(newNode);    	non-compiled	[CE]  	94	None	replace
329	[BUG]  [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  n,  parent);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  n,  parent);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent?  null  :  new  Node(newNode,  n,  parent);	  return    newNode    ==    parent?    null    :    new    Node(newNode,    num,    parent);    	non-compiled	[CE]  	66	None	replace
330	[BUG]  [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  num,  parent,  n);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  num,  parent,  n);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent?  null  :  new  Node(newNode,  num,  parent,  n);	  return    newNode    ==    parent?    null    :    new    Node(newNode,    num,    parent);    	non-compiled	[CE]  	66	None	replace
331	[BUG]  [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  num,  parent,  false);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  num,  parent,  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent?  null  :  new  Node(newNode,  num,  parent,  false);	  return    newNode    ==    parent?    null    :    new    Node(newNode,    num,    parent);    	non-compiled	[CE]  	66	None	replace
332	[BUG]  [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(n,  num,  parent);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(n,  num,  parent);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent?  null  :  new  Node(n,  num,  parent);	  return    newNode    ==    parent?    null    :    new    Node(newNode,    num,    parent);    	non-compiled	[CE]  	66	None	replace
333	[BUG]  [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  num,  parent.cloneTree());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  num,  parent.cloneTree());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent?  null  :  new  Node(newNode,  num,  parent.cloneTree());	  return    newNode    ==    parent?    null    :    new    Node(newNode,    num,    parent);    	non-compiled	[CE]  	66	None	replace
334	[BUG]  [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(parent,  num,  newNode);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(parent,  num,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent?  null  :  new  Node(parent,  num,  newNode);	  return    newNode    ==    parent?    null    :    new    Node(newNode,    num,    parent);    	non-compiled	[CE]  	66	None	replace
335	[BUG]  [BUGGY]  return  newNode  ==  parent.getFirstChild()?  null  :  new  Node(newNode,  num  +  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent.getFirstChild()?  null  :  new  Node(newNode,  num  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.getFirstChild()?  null  :  new  Node(newNode,  num  +  1);	  return    newNode    ==    parent.getFirstChild()?    null    :    new    Node(newNode,    num);    	non-compiled	[CE]  	32	None	replace
336	[BUG]  [BUGGY]  return  newNode  ==  parent.getFirstChild()?  null  :  new  Node(newNode,  num,  parent);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent.getFirstChild()?  null  :  new  Node(newNode,  num,  parent);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.getFirstChild()?  null  :  new  Node(newNode,  num,  parent);	  return    newNode    ==    parent.getFirstChild()?    null    :    new    Node(newNode,    num);    	non-compiled	[CE]  	32	None	replace
337	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this);	  NodeTraversal.traverse(compiler,    n,    newNode,    this);    	non-compiled	[CE]  	28	None	replace
338	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  this,  parent);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  this,  parent);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  this,  parent);	  NodeTraversal.traverse(compiler,    n,    newNode,    this);    	non-compiled	[CE]  	28	None	replace
339	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  this,  num);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  this,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  this,  num);	  NodeTraversal.traverse(compiler,    n,    newNode,    this);    	non-compiled	[CE]  	28	None	replace
340	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  null);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  null);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  null);	  NodeTraversal.traverse(compiler,    n,    newNode,    this);    	non-compiled	[CE]  	28	None	replace
341	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  reportCodeChange());  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  reportCodeChange());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  reportCodeChange());	  NodeTraversal.traverse(compiler,    n,    newNode,    this);    	non-compiled	[CE]  	28	None	replace
342	[BUG]  [BUGGY]  parent.removeChild(n);  reportCodeChange();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  parent.removeChild(n);  reportCodeChange();  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	parent.removeChild(n);  reportCodeChange();	  parent.replaceChild(n,    newNode);    reportCodeChange();    	non-compiled	[CE]  	31	None	replace
343	[BUG]  [BUGGY]  return  newNode!=  parent?  null  :  new  Node(newNode,  num,  parent);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  parent?  null  :  new  Node(newNode,  num,  parent);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  parent?  null  :  new  Node(newNode,  num,  parent);	  return    newNode!=    parent?    null    :    new    Node(newNode,    num);    	non-compiled	[CE]  	111	None	replace
344	[BUG]  [BUGGY]  return  newNode.getType()!=  Token.NAME?  newNode  :  Node.newString(Token.NAME,  n));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()!=  Token.NAME?  newNode  :  Node.newString(Token.NAME,  n));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()!=  Token.NAME?  newNode  :  Node.newString(Token.NAME,  n));	  return    newNode.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    n));    	non-compiled	[CE]  	12	None	replace
345	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  name));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  name));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  name));	  return    newNode.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    n));    	non-compiled	[CE]  	12	None	replace
346	[BUG]  [BUGGY]  return  n  ==  newNode.removeFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  n  ==  newNode.removeFirstChild();  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n  ==  newNode.removeFirstChild();	  return    newNode    ==    n.removeFirstChild();    	non-compiled	[CE]  	117	None	replace
347	[BUG]  [BUGGY]  return  newNode  ==  n.removeLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  n.removeLastChild();  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  n.removeLastChild();	  return    newNode    ==    n.removeFirstChild();    	non-compiled	[CE]  	117	None	replace
348	[BUG]  [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  n,  newNode);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  n,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  n,  newNode);	  return    newNode!=    null?    parent.removeFirstChild()    :    new    Node(Token.NAME,    n);    	non-compiled	[CE]  	96	None	replace
349	[BUG]  [BUGGY]  return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(Token.NAME,  n);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(Token.NAME,  n);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(Token.NAME,  n);	  return    newNode!=    null?    parent.removeFirstChild()    :    new    Node(Token.NAME,    n);    	non-compiled	[CE]  	96	None	replace
350	[BUG]  [BUGGY]  return  parent!=  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent!=  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  n);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent!=  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  n);	  return    newNode!=    null?    parent.removeFirstChild()    :    new    Node(Token.NAME,    n);    	non-compiled	[CE]  	96	None	replace
351	[BUG]  [BUGGY]  return  n.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num  +  1));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  n.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num  +  1));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num  +  1));	  return    newNode.getType()    ==    Token.CALL?    newNode    :    Node.newString(Token.NAME,    num    +    1));    	non-compiled	[CE]  	58	None	replace
352	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  this,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  this,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  this,  INVALID_REGULAR_EXPRESSION_FLAGS);	  NodeTraversal.traverse(compiler,    n,    newNode,    this);    	non-compiled	[CE]  	28	None	replace
353	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	NodeTraversal.traverse(compiler,  newNode,  this,  INVALID_REGULAR_EXPRESSION_FLAGS);	  NodeTraversal.traverse(compiler,    newNode,    this);    	non-compiled	[CE]  	27	None	replace
354	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this,  INVALID_REGULAR_EXPRESSION);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this,  INVALID_REGULAR_EXPRESSION);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	NodeTraversal.traverse(compiler,  newNode,  this,  INVALID_REGULAR_EXPRESSION);	  NodeTraversal.traverse(compiler,    newNode,    this);    	non-compiled	[CE]  	27	None	replace
355	[BUG]  [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(newNode,  n  +  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(newNode,  n  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(newNode,  n  +  1);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(newNode,    num    +    1);    	non-compiled	[CE]  	53	None	replace
356	[BUG]  [BUGGY]  return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(Token.NAME,  newNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(Token.NAME,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(Token.NAME,  newNode);	  return    newNode!=    null?    parent.removeFirstChild()    :    new    Node(Token.NAME,    newNode);    	non-compiled	[CE]  	99	None	replace
357	[BUG]  [BUGGY]  return  n.getType()!=  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  n.getType()!=  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n.getType()!=  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num));	  return    newNode.getType()!=    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	90	None	replace
358	[BUG]  [BUGGY]  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num));	  return    newNode.getType()!=    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	90	None	replace
359	[BUG]  [BUGGY]  return  parent!=  null?  null  :  new  Node(newNode,  num);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent!=  null?  null  :  new  Node(newNode,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent!=  null?  null  :  new  Node(newNode,  num);	  return    newNode!=    parent?    null    :    new    Node(newNode,    num);    	non-compiled	[CE]  	111	None	replace
360	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  n.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  1);	  return    newNode.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num    +    1);    	non-compiled	[CE]  	110	None	replace
361	[BUG]  [BUGGY]  return  n.getType()!=  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  n.getType()!=  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n.getType()!=  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num));	  return    newNode.getType()!=    Token.CALL?    newNode    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	121	None	replace
362	[BUG]  [BUGGY]  return  newNode.getType()!=  Token.CALL?  newNode  :  Node.newString(Token.NAME,  n));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()!=  Token.CALL?  newNode  :  Node.newString(Token.NAME,  n));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()!=  Token.CALL?  newNode  :  Node.newString(Token.NAME,  n));	  return    newNode.getType()!=    Token.CALL?    newNode    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	121	None	replace
363	[BUG]  [BUGGY]  return  newNode  ==  parent.removeFirstChild()?  null  :  new  Node(n);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent.removeFirstChild()?  null  :  new  Node(n);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.removeFirstChild()?  null  :  new  Node(n);	  return    newNode    ==    parent.removeFirstChild()?    null    :    new    Node(newNode);    	non-compiled	[CE]  	107	None	replace
364	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  parent.getFirstChild()  :  Node.newNumber(1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.NAME?  parent.getFirstChild()  :  Node.newNumber(1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  parent.getFirstChild()  :  Node.newNumber(1);	  return    newNode.getType()    ==    Token.NAME?    parent.getFirstChild()    :    Node.newNumber(0);    	non-compiled	[CE]  	91	None	replace
365	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  parent.getLastChild()  :  Node.newNumber(1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.NAME?  parent.getLastChild()  :  Node.newNumber(1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  parent.getLastChild()  :  Node.newNumber(1);	  return    newNode.getType()    ==    Token.NAME?    parent.getFirstChild()    :    Node.newNumber(0);    	non-compiled	[CE]  	91	None	replace
366	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  n.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num);	  return    newNode.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	13	None	replace
367	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode  -  1);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  parent.replaceChild(n,  newNode  -  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	parent.replaceChild(n,  newNode  -  1);	  parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	29	None	replace
368	[BUG]  [BUGGY]  return  n.cloneNode();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  n.cloneNode();  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n.cloneNode();	  return    n.cloneTree();    	non-compiled	[CE]  	74	None	replace
369	[BUG]  [BUGGY]  return  n.cloneTree(newNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  n.cloneTree(newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n.cloneTree(newNode);	  return    n.cloneTree();    	non-compiled	[CE]  	74	None	replace
370	[BUG]  [BUGGY]  return  NodeUtil.newNumber(parent,  num);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  NodeUtil.newNumber(parent,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  NodeUtil.newNumber(parent,  num);	  return    n.cloneTree();    	non-compiled	[CE]  	74	None	replace
371	[BUG]  [BUGGY]  return  n.cloneChild(parent,  newNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  n.cloneChild(parent,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n.cloneChild(parent,  newNode);	  return    n.cloneTree();    	non-compiled	[CE]  	74	None	replace
372	[BUG]  [BUGGY]  removeChild(parent.getFirstChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  removeChild(parent.getFirstChild());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	removeChild(parent.getFirstChild());	  return    n.getFirstChild();    	non-compiled	[CE]  	46	None	replace
373	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  n,  newNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  n,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  n,  newNode);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(Token.EMPTY,    n);    	non-compiled	[CE]  	79	None	replace
374	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  n  +  1);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  n  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  n  +  1);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(Token.EMPTY,    n);    	non-compiled	[CE]  	79	None	replace
375	[BUG]  [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  n,  newNode);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  n,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  n,  newNode);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(Token.EMPTY,    n);    	non-compiled	[CE]  	79	None	replace
376	[BUG]  [BUGGY]  return  parent!=  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  num);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent!=  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent!=  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  num);	  return    newNode!=    null?    parent.removeFirstChild()    :    new    Node(Token.EMPTY,    num);    	non-compiled	[CE]  	78	None	replace
377	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  n);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  n);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	NodeTraversal.traverse(compiler,  newNode,  n);	  NodeTraversal.traverse(compiler,    n,    newNode);    	non-compiled	[CE]  	26	None	replace
378	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  false);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  false);	  NodeTraversal.traverse(compiler,    n,    newNode);    	non-compiled	[CE]  	26	None	replace
379	[BUG]  [BUGGY]  return  parent!=  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  num);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent!=  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent!=  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  num);	  return    newNode!=    null?    parent.removeFirstChild()    :    new    Node(Token.NAME,    num);    	non-compiled	[CE]  	115	None	replace
380	[BUG]  [BUGGY]  return  parent.getfirstChild(),  num;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent.getfirstChild(),  num;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.getfirstChild(),  num;	  return    newNode.getLastChild(),    num;    	non-compiled	[CE]  	47	None	replace
381	[BUG]  [BUGGY]  return  node.replaceChild(parent,  newNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  node.replaceChild(parent,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  node.replaceChild(parent,  newNode);	  return    parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	24	None	replace
382	[BUG]  [BUGGY]  return  n  ==  parent.getFirstChild()?  null  :  new  Node(newNode,  num);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  n  ==  parent.getFirstChild()?  null  :  new  Node(newNode,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n  ==  parent.getFirstChild()?  null  :  new  Node(newNode,  num);	  return    newNode    ==    parent.getFirstChild()?    null    :    new    Node(newNode,    num);    	non-compiled	[CE]  	32	None	replace
383	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.CALL?  parent  :  Node.newString(Token.NAME,  num));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.CALL?  parent  :  Node.newString(Token.NAME,  num));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.CALL?  parent  :  Node.newString(Token.NAME,  num));	  return    parent.getType()    ==    Token.CALL?    newNode    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	61	None	replace
384	[BUG]  [BUGGY]  return  newNode  ==  parent.getNext()?  null  :  NodeUtil.newNumber(newNode);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent.getNext()?  null  :  NodeUtil.newNumber(newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.getNext()?  null  :  NodeUtil.newNumber(newNode);	  return    newNode    ==    parent.getNext()?    null    :    newNode;    	non-compiled	[CE]  	86	None	replace
385	[BUG]  [BUGGY]  return  newNode  ==  parent.getNext()?  null  :  NodeUtil.newNumber(newNode,  num);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent.getNext()?  null  :  NodeUtil.newNumber(newNode,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.getNext()?  null  :  NodeUtil.newNumber(newNode,  num);	  return    newNode    ==    parent.getNext()?    null    :    newNode;    	non-compiled	[CE]  	86	None	replace
386	[BUG]  [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  num,  parent.type,  n);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  num,  parent.type,  n);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent?  null  :  new  Node(newNode,  num,  parent.type,  n);	  return    newNode    ==    parent?    null    :    new    Node(newNode,    num,    parent.type);    	non-compiled	[CE]  	67	None	replace
387	[BUG]  [BUGGY]  return  parent  ==  null?  null  :  new  Node(newNode,  num,  parent.type);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent  ==  null?  null  :  new  Node(newNode,  num,  parent.type);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent  ==  null?  null  :  new  Node(newNode,  num,  parent.type);	  return    newNode    ==    parent?    null    :    new    Node(newNode,    num,    parent.type);    	non-compiled	[CE]  	67	None	replace
388	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newNumber(0);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newNumber(0);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.getType()  ==  Token.NAME?  newNode  :  Node.newNumber(0);	  return    parent.getNext();    	non-compiled	[CE]  	17	None	replace
389	[BUG]  [BUGGY]  return  n.getParent();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  n.getParent();  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n.getParent();	  return    newNode.getParent();    	non-compiled	[CE]  	18	None	replace
390	[BUG]  [BUGGY]  return  newNode.cloneTree(),  parent  +  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.cloneTree(),  parent  +  1;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.cloneTree(),  parent  +  1;	  return    newNode.cloneTree(),    parent;    	non-compiled	[CE]  	75	None	replace
391	[BUG]  [BUGGY]  return  parent!=  newNode.getFirstChild()?  null  :  newNode;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent!=  newNode.getFirstChild()?  null  :  newNode;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent!=  newNode.getFirstChild()?  null  :  newNode;	  return    newNode!=    parent.getFirstChild()?    null    :    newNode;    	non-compiled	[CE]  	40	None	replace
392	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.getLastChild()  :  new  Node(newNode,  n);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.getLastChild()  :  new  Node(newNode,  n);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.getLastChild()  :  new  Node(newNode,  n);	  return    newNode!=    null?    parent.getFirstChild()    :    new    Node(newNode,    n);    	non-compiled	[CE]  	118	None	replace
393	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  n,  newNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  n,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  n,  newNode);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(Token.NAME,    n);    	non-compiled	[CE]  	70	None	replace
394	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(Token.NAME,  n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(Token.NAME,  n);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(Token.NAME,  n);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(Token.NAME,    n);    	non-compiled	[CE]  	70	None	replace
395	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(n,  parent);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(n,  parent);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(n,  parent);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(n,    num);    	non-compiled	[CE]  	54	None	replace
396	[BUG]  [BUGGY]  n.replaceChild(parent,  newNode);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  n.replaceChild(parent,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	n.replaceChild(parent,  newNode);	  n.removeChild(newNode);    	non-compiled	[CE]  	30	None	replace
397	[BUG]  [BUGGY]  n.addChildToFront(newNode);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  n.addChildToFront(newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	n.addChildToFront(newNode);	  n.removeChild(newNode);    	non-compiled	[CE]  	30	None	replace
398	[BUG]  [BUGGY]  return  newNode.getType()!=  Token.NAME?  newNode  :  Node.newString(Token.NAME,  0));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()!=  Token.NAME?  newNode  :  Node.newString(Token.NAME,  0));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()!=  Token.NAME?  newNode  :  Node.newString(Token.NAME,  0));	  return    newNode.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    0));    	non-compiled	[CE]  	16	None	replace
399	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(Token.NAME,  newNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(Token.NAME,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(Token.NAME,  newNode);	  return    newNode    ==    null?    parent.replaceChild(n,    newNode):    new    Node(Token.NAME,    num);    	non-compiled	[CE]  	97	None	replace
400	[BUG]  [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  num,  parent.getParent());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  num,  parent.getParent());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent?  null  :  new  Node(newNode,  num,  parent.getParent());	  return    newNode    ==    parent?    null    :    new    Node(newNode,    num,    parent.getType());    	non-compiled	[CE]  	68	None	replace
401	[BUG]  [BUGGY]  return  parent  ==  null?  null  :  new  Node(newNode,  num,  parent.getType());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent  ==  null?  null  :  new  Node(newNode,  num,  parent.getType());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent  ==  null?  null  :  new  Node(newNode,  num,  parent.getType());	  return    newNode    ==    parent?    null    :    new    Node(newNode,    num,    parent.getType());    	non-compiled	[CE]  	68	None	replace
402	[BUG]  [BUGGY]  return  newNode  ==  parent.getType()?  null  :  NodeUtil.newNumber(parent,  num);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent.getType()?  null  :  NodeUtil.newNumber(parent,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.getType()?  null  :  NodeUtil.newNumber(parent,  num);	  return    newNode    ==    parent.getType()?    null    :    newNode;    	non-compiled	[CE]  	87	None	replace
403	[BUG]  [BUGGY]  return  n.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num  +  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  n.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num  +  1);	  return    newNode.getType()    ==    Token.CALL?    newNode    :    Node.newString(Token.NAME,    num    +    1);    	non-compiled	[CE]  	120	None	replace
404	[BUG]  [BUGGY]  return  parent!=  null?  parent.getType()  :  Node.newNumber(num);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent!=  null?  parent.getType()  :  Node.newNumber(num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent!=  null?  parent.getType()  :  Node.newNumber(num);	  return    newNode!=    null?    parent.getType()    :    Node.newNumber(num);    	non-compiled	[CE]  	50	None	replace
405	[BUG]  [BUGGY]  return  newNode  ==  parent.getLastChild()?  null  :  new  Node(newNode,  parent);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent.getLastChild()?  null  :  new  Node(newNode,  parent);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.getLastChild()?  null  :  new  Node(newNode,  parent);	  return    newNode    ==    parent.getFirstChild()?    null    :    new    Node(n,    newNode);    	non-compiled	[CE]  	34	None	replace
406	[BUG]  [BUGGY]  return  parent!=  null?  parent.getType()  :  Node.newNumber(1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent!=  null?  parent.getType()  :  Node.newNumber(1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent!=  null?  parent.getType()  :  Node.newNumber(1);	  return    parent!=    null?    parent.getType()    :    Node.newNumber(0);    	non-compiled	[CE]  	52	None	replace
407	[BUG]  [BUGGY]  return  newNode  ==  parent.replaceChild(n,  newNode)-  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent.replaceChild(n,  newNode)-  1;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.replaceChild(n,  newNode)-  1;	  return    newNode    ==    parent.replaceChild(n,    newNode    -    1);    	non-compiled	[CE]  	5	None	replace
408	[BUG]  [BUGGY]  return  newNode  ==  parent.replaceChild(parent,  newNode  -  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent.replaceChild(parent,  newNode  -  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.replaceChild(parent,  newNode  -  1);	  return    newNode    ==    parent.replaceChild(n,    newNode    -    1);    	non-compiled	[CE]  	5	None	replace
409	[BUG]  [BUGGY]  return  newNode!=  null?  parent.getFirstChild()  :  new  Node(Token.EMPTY);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.getFirstChild()  :  new  Node(Token.EMPTY);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.getFirstChild()  :  new  Node(Token.EMPTY);	  return    newNode!=    null?    parent.removeFirstChild()    :    new    Node(Token.EMPTY);    	non-compiled	[CE]  	102	None	replace
410	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  3));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  3));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  3));	  return    newNode.getType()    ==    Token.CALL?    newNode    :    Node.newString(Token.NAME,    0));    	non-compiled	[CE]  	63	None	replace
411	[BUG]  [BUGGY]  return  n!=  parent.replaceChild(parent,  newNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  n!=  parent.replaceChild(parent,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n!=  parent.replaceChild(parent,  newNode);	  return    newNode!=    n.replaceChild(parent,    newNode);    	non-compiled	[CE]  	4	None	replace
412	[BUG]  [BUGGY]  return  newNode!=  null?  parent.removeLastChild()  :  new  Node(newNode,  num);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.removeLastChild()  :  new  Node(newNode,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.removeLastChild()  :  new  Node(newNode,  num);	  return    newNode    ==    null?    parent.removeLastChild()    :    new    Node(newNode,    num);    	non-compiled	[CE]  	55	None	replace
413	[BUG]  [BUGGY]  return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(newNode,  num  +  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(newNode,  num  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(newNode,  num  +  1);	  return    newNode    ==    null?    parent.replaceChild(n,    newNode):    new    Node(newNode,    num);    	non-compiled	[CE]  	119	None	replace
414	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  parent.getFirstChild()  :  Node.newNumber(Token.NAME);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.NAME?  parent.getFirstChild()  :  Node.newNumber(Token.NAME);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  parent.getFirstChild()  :  Node.newNumber(Token.NAME);	  return    newNode.getType()    ==    Token.NAME?    parent.getFirstChild()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  	48	None	replace
415	[BUG]  [BUGGY]  return  newNode  ==  parent.getFirstChild()?  null  :  new  Node(newNode,  n  +  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent.getFirstChild()?  null  :  new  Node(newNode,  n  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.getFirstChild()?  null  :  new  Node(newNode,  n  +  1);	  return    newNode    ==    parent.getFirstChild()?    null    :    new    Node(newNode,    n);    	non-compiled	[CE]  	36	None	replace
416	[BUG]  [BUGGY]  return  parent!=  null?  parent.getFirstChild()  :  new  Node(newNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent!=  null?  parent.getFirstChild()  :  new  Node(newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent!=  null?  parent.getFirstChild()  :  new  Node(newNode);	  return    newNode!=    null?    parent.getLastChild()    :    new    Node(newNode);    	non-compiled	[CE]  	57	None	replace
417	[BUG]  [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  newNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  newNode);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(Token.EMPTY,    newNode);    	non-compiled	[CE]  	113	None	replace
418	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(Token.EMPTY,  newNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(Token.EMPTY,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(Token.EMPTY,  newNode);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(Token.EMPTY,    newNode);    	non-compiled	[CE]  	113	None	replace
419	[BUG]  [BUGGY]  return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(Token.EMPTY,  newNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(Token.EMPTY,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(Token.EMPTY,  newNode);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(Token.EMPTY,    newNode);    	non-compiled	[CE]  	113	None	replace
420	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  newNode  -  1);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  NodeUtil.removeChild(parent,  newNode  -  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	NodeUtil.removeChild(parent,  newNode  -  1);	  NodeUtil.removeChild(parent,    newNode);    	non-compiled	[CE]  	101	None	replace
421	[BUG]  [BUGGY]  return  parent  ==  n.replaceChild(parent,  newNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent  ==  n.replaceChild(parent,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent  ==  n.replaceChild(parent,  newNode);	  return    n    ==    parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	6	None	replace
422	[BUG]  [BUGGY]  return  parent!=  n.replaceChild(parent,  newNode);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent!=  n.replaceChild(parent,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent!=  n.replaceChild(parent,  newNode);	  return    n    ==    parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	6	None	replace
423	[BUG]  [BUGGY]  return  newNode.removeChild(parent,  num);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.removeChild(parent,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.removeChild(parent,  num);	  return    newNode.removeChild(parent);    	non-compiled	[CE]  	85	None	replace
424	[BUG]  [BUGGY]  return  newNode!=  null?  parent.getLastChild()  :  new  Node(Token.EMPTY);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.getLastChild()  :  new  Node(Token.EMPTY);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.getLastChild()  :  new  Node(Token.EMPTY);	  return    newNode    ==    null?    parent.getFirstChild()    :    new    Node(Token.EMPTY);    	non-compiled	[CE]  	80	None	replace
425	[BUG]  [BUGGY]  Preconditions.checkState(newNode.getType()  ==  Token.NAME  ||  newNode.getType()  ==  Token.GETPROP);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  Preconditions.checkState(newNode.getType()  ==  Token.NAME  ||  newNode.getType()  ==  Token.GETPROP);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	Preconditions.checkState(newNode.getType()  ==  Token.NAME  ||  newNode.getType()  ==  Token.GETPROP);	  Preconditions.checkState(newNode.getType()    ==    Token.NAME);    	non-compiled	[CE]  	109	None	replace
426	[BUG]  [BUGGY]  Preconditions.checkState(newNode.getType()  ==  Token.NAME  ||  newNode.getType()  ==  Token.FUNCTION);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  Preconditions.checkState(newNode.getType()  ==  Token.NAME  ||  newNode.getType()  ==  Token.FUNCTION);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	Preconditions.checkState(newNode.getType()  ==  Token.NAME  ||  newNode.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(newNode.getType()    ==    Token.NAME);    	non-compiled	[CE]  	109	None	replace
427	[BUG]  [BUGGY]  return  null.cloneTree(),  newNode;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  null.cloneTree(),  newNode;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  null.cloneTree(),  newNode;	  return    newNode.cloneTree(),    null;    	non-compiled	[CE]  	114	None	replace
428	[BUG]  [BUGGY]  return  newNode  ==  parent.replaceChild(n,  newNode)?  null  :  newNode;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent.replaceChild(n,  newNode)?  null  :  newNode;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.replaceChild(n,  newNode)?  null  :  newNode;	  return    newNode    ==    parent.removeFirstChild()?    null    :    newNode;    	non-compiled	[CE]  	106	None	replace
429	[BUG]  [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  num  +  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  num  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  num  +  1);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(Token.NAME,    num    +    1);    	non-compiled	[CE]  	116	None	replace
430	[BUG]  [BUGGY]  return  parent!=  null?  parent.replaceChild(n,  newNode):  new  Node(newNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent!=  null?  parent.replaceChild(n,  newNode):  new  Node(newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent!=  null?  parent.replaceChild(n,  newNode):  new  Node(newNode);	  return    newNode!=    null?    parent.replaceChild(n,    newNode):    new    Node(newNode);    	non-compiled	[CE]  	94	None	replace
431	[BUG]  [BUGGY]  return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(newNode  +  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(newNode  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(newNode  +  1);	  return    newNode!=    null?    parent.replaceChild(n,    newNode):    new    Node(newNode);    	non-compiled	[CE]  	94	None	replace
432	[BUG]  [BUGGY]  return  newNode  ==  parent.getFirstChild()?  this  :  null;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent.getFirstChild()?  this  :  null;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.getFirstChild()?  this  :  null;	  return    newNode    ==    parent.getFirstChild()?    this    :    newNode;    	non-compiled	[CE]  	42	None	replace
433	[BUG]  [BUGGY]  return  parent.removeFirstChild(newNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent.removeFirstChild(newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.removeFirstChild(newNode);	  return    parent.removeFirstChild();    	non-compiled	[CE]  	21	None	replace
434	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(n,  newNode);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(n,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(n,  newNode);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(n,    newNode);    	non-compiled	[CE]  	8	None	replace
435	[BUG]  [BUGGY]  return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(n,  newNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(n,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(n,  newNode);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(n,    newNode);    	non-compiled	[CE]  	8	None	replace
436	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  1));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  n.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  1));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  1));	  return    newNode.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num    +    1));    	non-compiled	[CE]  	11	None	replace
437	[BUG]  [BUGGY]  newNode.addChildToFront(parent);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  newNode.addChildToFront(parent);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	newNode.addChildToFront(parent);	  newNode.removeChild(parent);    	non-compiled	[CE]  	108	None	replace
438	[BUG]  [BUGGY]  newNode.removeChild(parent,  num);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  newNode.removeChild(parent,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	newNode.removeChild(parent,  num);	  newNode.removeChild(parent);    	non-compiled	[CE]  	108	None	replace
439	[BUG]  [BUGGY]  newNode.addChildToBack(parent);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  newNode.addChildToBack(parent);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	newNode.addChildToBack(parent);	  newNode.removeChild(parent);    	non-compiled	[CE]  	108	None	replace
440	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newNumber(Token.NAME,  parent));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newNumber(Token.NAME,  parent));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newNumber(Token.NAME,  parent));	  return    newNode.getType()    ==    Token.CALL?    newNode    :    Node.newNumber(Token.NAME,    num));    	non-compiled	[CE]  	95	None	replace
441	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  parent.getFirstChild().getType()  :  Node.newString(Token.NAME);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.NAME?  parent.getFirstChild().getType()  :  Node.newString(Token.NAME);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  parent.getFirstChild().getType()  :  Node.newString(Token.NAME);	  return    newNode.getType()    ==    Token.NAME?    parent.getType()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  	20	None	replace
442	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  n.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n.getType()  ==  Token.NAME?  parent.getType()  :  Node.newString(Token.NAME);	  return    newNode.getType()    ==    Token.NAME?    parent.getType()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  	20	None	replace
443	[BUG]  [BUGGY]  return  parent.cloneNode();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent.cloneNode();  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.cloneNode();	  return    parent.cloneTree();    	non-compiled	[CE]  	73	None	replace
444	[BUG]  [BUGGY]  return  parent.cloneChild(newNode);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent.cloneChild(newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.cloneChild(newNode);	  return    parent.cloneTree();    	non-compiled	[CE]  	73	None	replace
445	[BUG]  [BUGGY]  return  newNode  ==  parent.getFirstChild()?  this  :  new  Node(n,  newNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent.getFirstChild()?  this  :  new  Node(n,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.getFirstChild()?  this  :  new  Node(n,  newNode);	  return    newNode    ==    parent.getFirstChild()?    null    :    new    Node(n,    newNode);    	non-compiled	[CE]  	34	None	replace
446	[BUG]  [BUGGY]  return  newNode  ==  n.getFirstChild()?  parent  :  newNode;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  n.getFirstChild()?  parent  :  newNode;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  n.getFirstChild()?  parent  :  newNode;	  return    newNode    ==    n.getFirstChild()?    null    :    newNode;    	non-compiled	[CE]  	39	None	replace
447	[BUG]  [BUGGY]  return  newNode!=  n.getFirstChild()?  null  :  new  Node(newNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  n.getFirstChild()?  null  :  new  Node(newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  n.getFirstChild()?  null  :  new  Node(newNode);	  return    newNode    ==    n.getFirstChild()?    null    :    new    Node(newNode);    	non-compiled	[CE]  	35	None	replace
448	[BUG]  [BUGGY]  return  newNode!=  parent?  null  :  new  Node(newNode,  num,  parent.getType());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  parent?  null  :  new  Node(newNode,  num,  parent.getType());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  parent?  null  :  new  Node(newNode,  num,  parent.getType());	  return    newNode    ==    parent?    null    :    new    Node(newNode,    num,    parent.getType());    	non-compiled	[CE]  	68	None	replace
449	[BUG]  [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  num,  parent.getChildCount());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  num,  parent.getChildCount());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent?  null  :  new  Node(newNode,  num,  parent.getChildCount());	  return    newNode    ==    parent?    null    :    new    Node(newNode,    num,    parent.getType());    	non-compiled	[CE]  	68	None	replace
450	[BUG]  [BUGGY]  return  newNode!=  null?  parent.removeLastChild()  :  new  Node(Token.EMPTY);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.removeLastChild()  :  new  Node(Token.EMPTY);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.removeLastChild()  :  new  Node(Token.EMPTY);	  return    newNode    ==    null?    parent.removeLastChild()    :    new    Node(Token.EMPTY);    	non-compiled	[CE]  	81	None	replace
451	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(n,  num);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(n,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(n,  num);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(n,    num);    	non-compiled	[CE]  	54	None	replace
452	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(parent,  num  +  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(parent,  num  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(parent,  num  +  1);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(n,    num);    	non-compiled	[CE]  	54	None	replace
453	[BUG]  [BUGGY]  return  newNode.removeFirstChild(),  num;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.removeFirstChild(),  num;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.removeFirstChild(),  num;	  return    newNode.getLastChild(),    num;    	non-compiled	[CE]  	47	None	replace
454	[BUG]  [BUGGY]  return  newNode!=  parent.removeFirstChild()?  null  :  new  Node(newNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  parent.removeFirstChild()?  null  :  new  Node(newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  parent.removeFirstChild()?  null  :  new  Node(newNode);	  return    newNode    ==    parent.removeFirstChild()?    null    :    new    Node(newNode);    	non-compiled	[CE]  	107	None	replace
455	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.removeLastChild()  :  new  Node(newNode,  num  +  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.removeLastChild()  :  new  Node(newNode,  num  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.removeLastChild()  :  new  Node(newNode,  num  +  1);	  return    newNode    ==    null?    parent.removeLastChild()    :    new    Node(newNode,    num);    	non-compiled	[CE]  	55	None	replace
456	[BUG]  [BUGGY]  return  parent!=  null?  parent.getType()  :  Node.newNumber(num  +  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent!=  null?  parent.getType()  :  Node.newNumber(num  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent!=  null?  parent.getType()  :  Node.newNumber(num  +  1);	  return    newNode!=    null?    parent.getType()    :    Node.newNumber(num);    	non-compiled	[CE]  	50	None	replace
457	[BUG]  [BUGGY]  newNode.putBooleanProp(Node.SOURCENAME_PROP,  true);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  newNode.putBooleanProp(Node.SOURCENAME_PROP,  true);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	newNode.putBooleanProp(Node.SOURCENAME_PROP,  true);	  newNode.removeChild(parent);    	non-compiled	[CE]  	108	None	replace
458	[BUG]  [BUGGY]  newNode.addChildToFront(newNode);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  newNode.addChildToFront(newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	newNode.addChildToFront(newNode);	  newNode.removeChild(parent);    	non-compiled	[CE]  	108	None	replace
459	[BUG]  [BUGGY]  newNode.putBooleanProp(Node.SYNTHETIC_PROP,  true);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  newNode.putBooleanProp(Node.SYNTHETIC_PROP,  true);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	newNode.putBooleanProp(Node.SYNTHETIC_PROP,  true);	  newNode.removeChild(parent);    	non-compiled	[CE]  	108	None	replace
460	[BUG]  [BUGGY]  return  newNode!=  null?  parent.replaceChild(parent,  newNode):  new  Node(newNode,  num);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.replaceChild(parent,  newNode):  new  Node(newNode,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.replaceChild(parent,  newNode):  new  Node(newNode,  num);	  return    newNode    ==    null?    parent.replaceChild(n,    newNode):    new    Node(newNode,    num);    	non-compiled	[CE]  	119	None	replace
461	[BUG]  [BUGGY]  return  newNode  ==  parent?  n  :  new  Node(newNode,  num  +  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent?  n  :  new  Node(newNode,  num  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent?  n  :  new  Node(newNode,  num  +  1);	  return    newNode    ==    parent?    null    :    new    Node(newNode,    num    +    1);    	non-compiled	[CE]  	64	None	replace
462	[BUG]  [BUGGY]  return  newNode!=  parent?  null  :  new  Node(newNode,  num,  parent.type);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  parent?  null  :  new  Node(newNode,  num,  parent.type);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  parent?  null  :  new  Node(newNode,  num,  parent.type);	  return    newNode    ==    parent?    null    :    new    Node(newNode,    num,    parent.type);    	non-compiled	[CE]  	67	None	replace
463	[BUG]  [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  num,  parent.type,  newNode);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(newNode,  num,  parent.type,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent?  null  :  new  Node(newNode,  num,  parent.type,  newNode);	  return    newNode    ==    parent?    null    :    new    Node(newNode,    num,    parent.type);    	non-compiled	[CE]  	67	None	replace
464	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(Token.EMPTY,  0);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(Token.EMPTY,  0);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(Token.EMPTY,  0);	  return    newNode    ==    null?    parent.replaceChild(n,    newNode):    new    Node(Token.EMPTY);    	non-compiled	[CE]  	103	None	replace
465	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  num,  newNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  num,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  num,  newNode);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(Token.EMPTY,    num);    	non-compiled	[CE]  	77	None	replace
466	[BUG]  [BUGGY]  return  newNode  ==  parent.removeFirstChild()?  this  :  newNode;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent.removeFirstChild()?  this  :  newNode;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.removeFirstChild()?  this  :  newNode;	  return    newNode    ==    parent.getFirstChild()?    this    :    newNode;    	non-compiled	[CE]  	42	None	replace
467	[BUG]  [BUGGY]  Preconditions.checkArgument(newNode.getType()  ==  Token.NAME);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  Preconditions.checkArgument(newNode.getType()  ==  Token.NAME);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	Preconditions.checkArgument(newNode.getType()  ==  Token.NAME);	  Preconditions.checkState(newNode.getType()    ==    Token.NAME);    	non-compiled	[CE]  	109	None	replace
468	[BUG]  [BUGGY]  Preconditions.checkState(newNode.getType()  ==  Token.NAME  ||  newNode.getType()  ==  Token.VAR);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  Preconditions.checkState(newNode.getType()  ==  Token.NAME  ||  newNode.getType()  ==  Token.VAR);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	Preconditions.checkState(newNode.getType()  ==  Token.NAME  ||  newNode.getType()  ==  Token.VAR);	  Preconditions.checkState(newNode.getType()    ==    Token.NAME);    	non-compiled	[CE]  	109	None	replace
469	[BUG]  [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  num,  newNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  num,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.EMPTY,  num,  newNode);	  return    newNode!=    null?    parent.removeFirstChild()    :    new    Node(Token.EMPTY,    num);    	non-compiled	[CE]  	78	None	replace
470	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(Token.EMPTY,  n);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(Token.EMPTY,  n);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(Token.EMPTY,  n);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(Token.EMPTY,    n);    	non-compiled	[CE]  	79	None	replace
471	[BUG]  [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(parent,  num  +  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent?  null  :  new  Node(parent,  num  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent?  null  :  new  Node(parent,  num  +  1);	  return    newNode    ==    parent?    null    :    new    Node(n,    num);    	non-compiled	[CE]  	112	None	replace
472	[BUG]  [BUGGY]  return  newNode.getType()!=  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()!=  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()!=  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num);	  return    newNode.getType()!=    Token.CALL?    newNode    :    Node.newString(Token.NAME,    num));    	non-compiled	[CE]  	121	None	replace
473	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num  +  1),  parent);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num  +  1),  parent);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num  +  1),  parent);	  return    newNode.getType()    ==    Token.CALL?    newNode    :    Node.newString(Token.NAME,    num    +    1));    	non-compiled	[CE]  	58	None	replace
474	[BUG]  [BUGGY]  return  node.removeFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  node.removeFirstChild();  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  node.removeFirstChild();	  return    parent.removeFirstChild();    	non-compiled	[CE]  	21	None	replace
475	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  1);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  1);	  return    newNode.getType()    ==    Token.CALL?    newNode    :    Node.newString(Token.NAME,    0));    	non-compiled	[CE]  	63	None	replace
476	[BUG]  [BUGGY]  return  newNode.getType()!=  Token.CALL?  newNode  :  Node.newString(Token.NAME,  0));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()!=  Token.CALL?  newNode  :  Node.newString(Token.NAME,  0));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()!=  Token.CALL?  newNode  :  Node.newString(Token.NAME,  0));	  return    newNode.getType()    ==    Token.CALL?    newNode    :    Node.newString(Token.NAME,    0));    	non-compiled	[CE]  	63	None	replace
477	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  2);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  2);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  2);	  return    newNode.getType()    ==    Token.CALL?    newNode    :    Node.newString(Token.NAME,    0));    	non-compiled	[CE]  	63	None	replace
478	[BUG]  [BUGGY]  return  newNode!=  parent.removeChild(newNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  parent.removeChild(newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  parent.removeChild(newNode);	  return    newNode    ==    n.removeChild(parent);    	non-compiled	[CE]  	3	None	replace
479	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newNumber(Token.NAME,  num  +  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newNumber(Token.NAME,  num  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newNumber(Token.NAME,  num  +  1);	  return    newNode.getType()    ==    Token.CALL?    newNode    :    Node.newNumber(Token.NAME,    num));    	non-compiled	[CE]  	95	None	replace
480	[BUG]  [BUGGY]  return  parent!=  null?  newNode.getType()  :  Node.newNumber(1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent!=  null?  newNode.getType()  :  Node.newNumber(1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent!=  null?  newNode.getType()  :  Node.newNumber(1);	  return    parent!=    null?    parent.getType()    :    Node.newNumber(0);    	non-compiled	[CE]  	52	None	replace
481	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT):  new  Node(newNode,  num);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT):  new  Node(newNode,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent.getType()  ==  Token.NAME?  new  Node(Token.EXPR_RESULT):  new  Node(newNode,  num);	  return    parent.getNext();    	non-compiled	[CE]  	17	None	replace
482	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  1);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  1);	  return    newNode.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    0));    	non-compiled	[CE]  	16	None	replace
483	[BUG]  [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  n,  num);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  n,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  n,  num);	  return    newNode!=    null?    parent.removeFirstChild()    :    new    Node(Token.NAME,    num);    	non-compiled	[CE]  	115	None	replace
484	[BUG]  [BUGGY]  return  n!=  parent.getFirstChild()?  null  :  new  Node(newNode,  num);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  n!=  parent.getFirstChild()?  null  :  new  Node(newNode,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n!=  parent.getFirstChild()?  null  :  new  Node(newNode,  num);	  return    newNode!=    parent.getFirstChild()?    null    :    new    Node(newNode,    num);    	non-compiled	[CE]  	37	None	replace
485	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode);  maybeReplaceChildWithNumber(n,  parent);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  parent.replaceChild(n,  newNode);  maybeReplaceChildWithNumber(n,  parent);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	parent.replaceChild(n,  newNode);  maybeReplaceChildWithNumber(n,  parent);	  parent.replaceChild(n,    newNode);    reportCodeChange();    	non-compiled	[CE]  	31	None	replace
486	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode);  maybeReplaceChildWithNumber(n,  newNode);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  parent.replaceChild(n,  newNode);  maybeReplaceChildWithNumber(n,  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	parent.replaceChild(n,  newNode);  maybeReplaceChildWithNumber(n,  newNode);	  parent.replaceChild(n,    newNode);    reportCodeChange();    	non-compiled	[CE]  	31	None	replace
487	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  1,  parent);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  1,  parent);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  1,  parent);	  return    newNode.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num    +    1);    	non-compiled	[CE]  	110	None	replace
488	[BUG]  [BUGGY]  return  n  ==  parent.getFirstChild()?  newNode  :  newNode;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  n  ==  parent.getFirstChild()?  newNode  :  newNode;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  n  ==  parent.getFirstChild()?  newNode  :  newNode;	  return    n    ==    parent.getFirstChild()?    null    :    newNode;    	non-compiled	[CE]  	41	None	replace
489	[BUG]  [BUGGY]  return  newNode!=  n.removeFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  n.removeFirstChild();  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  n.removeFirstChild();	  return    newNode!=    parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	2	None	replace
490	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  this,  INVALID_REGULAR_FLAGS);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  this,  INVALID_REGULAR_FLAGS);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  this,  INVALID_REGULAR_FLAGS);	  NodeTraversal.traverse(compiler,    n,    newNode,    this);    	non-compiled	[CE]  	28	None	replace
491	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  this,  null);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  this,  null);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  this,  null);	  NodeTraversal.traverse(compiler,    n,    newNode,    this);    	non-compiled	[CE]  	28	None	replace
492	[BUG]  [BUGGY]  return  newNode!=  null?  parent.getFirstChild()  :  new  Node(newNode,  n  +  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.getFirstChild()  :  new  Node(newNode,  n  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.getFirstChild()  :  new  Node(newNode,  n  +  1);	  return    newNode!=    null?    parent.getFirstChild()    :    new    Node(newNode,    n);    	non-compiled	[CE]  	118	None	replace
493	[BUG]  [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(newNode,  parent);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(newNode,  parent);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(newNode,  parent);	  return    newNode    ==    null?    parent.removeFirstChild()    :    new    Node(n,    newNode);    	non-compiled	[CE]  	8	None	replace
494	[BUG]  [BUGGY]  return  newNode.getType()!=  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  2));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()!=  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  2));  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()!=  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  2));	  return    newNode.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num    +    2));    	non-compiled	[CE]  	15	None	replace
495	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num++);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num++);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num++);	  return    newNode.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	13	None	replace
496	[BUG]  [BUGGY]  return  newNode!=  parent.getNext()?  null  :  newNode;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  parent.getNext()?  null  :  newNode;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  parent.getNext()?  null  :  newNode;	  return    newNode    ==    parent.getNext()?    null    :    newNode;    	non-compiled	[CE]  	86	None	replace
497	[BUG]  [BUGGY]  return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(Token.NAME,  0);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(Token.NAME,  0);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(Token.NAME,  0);	  return    newNode!=    null?    parent.replaceChild(n,    newNode):    new    Node(Token.NAME,    num);    	non-compiled	[CE]  	98	None	replace
498	[BUG]  [BUGGY]  return  newNode!=  null?  parent.replaceChild(parent,  newNode):  new  Node(Token.NAME,  num  +  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.replaceChild(parent,  newNode):  new  Node(Token.NAME,  num  +  1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.replaceChild(parent,  newNode):  new  Node(Token.NAME,  num  +  1);	  return    newNode!=    null?    parent.replaceChild(n,    newNode):    new    Node(Token.NAME,    num);    	non-compiled	[CE]  	98	None	replace
499	[BUG]  [BUGGY]  return  newNode  ==  parent.getType()?  null  :  new  Node(newNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent.getType()?  null  :  new  Node(newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.getType()?  null  :  new  Node(newNode);	  return    newNode    ==    parent.getType()?    null    :    newNode;    	non-compiled	[CE]  	87	None	replace
500	[BUG]  [BUGGY]  return  newNode  ==  parent.getType()?  this  :  newNode;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  parent.getType()?  this  :  newNode;  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  parent.getType()?  this  :  newNode;	  return    newNode    ==    parent.getType()?    null    :    newNode;    	non-compiled	[CE]  	87	None	replace
501	[BUG]  [BUGGY]  return  newNode!=  parent?  null  :  new  Node(newNode,  n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  parent?  null  :  new  Node(newNode,  n);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  parent?  null  :  new  Node(newNode,  n);	  return    newNode    ==    parent?    null    :    new    Node(newNode,    n);    	non-compiled	[CE]  	65	None	replace
502	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n,  parent);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n,  parent);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	NodeUtil.redeclareVarsInsideBranch(n,  parent);	  NodeUtil.removeChild(parent,    newNode);    	non-compiled	[CE]  	101	None	replace
503	[BUG]  [BUGGY]  return  NodeUtil.newNumber(parent.cloneTree(),  newNode);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  NodeUtil.newNumber(parent.cloneTree(),  newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  NodeUtil.newNumber(parent.cloneTree(),  newNode);	  return    parent.cloneTree();    	non-compiled	[CE]  	73	None	replace
504	[BUG]  [BUGGY]  return  NodeUtil.newNumber(parent.cloneTree());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  NodeUtil.newNumber(parent.cloneTree());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  NodeUtil.newNumber(parent.cloneTree());	  return    parent.cloneTree();    	non-compiled	[CE]  	73	None	replace
505	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  1),  parent);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  1),  parent);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.NAME,  num  +  1),  parent);	  return    newNode.getType()    ==    Token.NAME?    newNode    :    Node.newString(Token.NAME,    num    +    1));    	non-compiled	[CE]  	11	None	replace
506	[BUG]  [BUGGY]  return  parent!=  null?  newNode  :  new  Node(newNode,  num);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  parent!=  null?  newNode  :  new  Node(newNode,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  parent!=  null?  newNode  :  new  Node(newNode,  num);	  return    newNode!=    parent?    null    :    new    Node(newNode,    num);    	non-compiled	[CE]  	111	None	replace
507	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num  +  1,  parent);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num  +  1,  parent);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.CALL?  newNode  :  Node.newString(Token.NAME,  num  +  1,  parent);	  return    newNode.getType()    ==    Token.CALL?    newNode    :    Node.newString(Token.NAME,    num    +    1);    	non-compiled	[CE]  	120	None	replace
508	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  n.getFirstChild()  :  Node.newString(Token.NAME);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.NAME?  n.getFirstChild()  :  Node.newString(Token.NAME);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  n.getFirstChild()  :  Node.newString(Token.NAME);	  return    newNode.getType()    ==    Token.NAME?    parent.getFirstChild()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  	48	None	replace
509	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  parent.removeFirstChild()  :  Node.newString(Token.NAME);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.NAME?  parent.removeFirstChild()  :  Node.newString(Token.NAME);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  parent.removeFirstChild()  :  Node.newString(Token.NAME);	  return    newNode.getType()    ==    Token.NAME?    parent.getFirstChild()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  	48	None	replace
510	[BUG]  [BUGGY]  return  newNode.getType()!=  Token.NAME?  parent.getFirstChild()  :  Node.newString(Token.NAME);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()!=  Token.NAME?  parent.getFirstChild()  :  Node.newString(Token.NAME);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()!=  Token.NAME?  parent.getFirstChild()  :  Node.newString(Token.NAME);	  return    newNode.getType()    ==    Token.NAME?    parent.getFirstChild()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  	48	None	replace
511	[BUG]  [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  newNode,  num);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  newNode,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.removeFirstChild()  :  new  Node(Token.NAME,  newNode,  num);	  return    newNode!=    null?    parent.removeFirstChild()    :    new    Node(Token.NAME,    newNode);    	non-compiled	[CE]  	99	None	replace
512	[BUG]  [BUGGY]  return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(newNode,  false);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(newNode,  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(newNode,  false);	  return    newNode!=    null?    parent.replaceChild(n,    newNode):    new    Node(newNode);    	non-compiled	[CE]  	94	None	replace
513	[BUG]  [BUGGY]  return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(newNode,  reportCodeChange());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(newNode,  reportCodeChange());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.replaceChild(n,  newNode):  new  Node(newNode,  reportCodeChange());	  return    newNode!=    null?    parent.replaceChild(n,    newNode):    new    Node(newNode);    	non-compiled	[CE]  	94	None	replace
514	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(newNode,  false);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(newNode,  false);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(newNode,  false);	  return    newNode    ==    null?    parent.replaceChild(n,    newNode):    new    Node(newNode);    	non-compiled	[CE]  	93	None	replace
515	[BUG]  [BUGGY]  return  newNode!=  parent.replaceChild(n,  newNode):  new  Node(newNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  parent.replaceChild(n,  newNode):  new  Node(newNode);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  parent.replaceChild(n,  newNode):  new  Node(newNode);	  return    newNode    ==    null?    parent.replaceChild(n,    newNode):    new    Node(newNode);    	non-compiled	[CE]  	93	None	replace
516	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  n.getFirstChild()  :  Node.newNumber(0);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.NAME?  n.getFirstChild()  :  Node.newNumber(0);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  n.getFirstChild()  :  Node.newNumber(0);	  return    newNode.getType()    ==    Token.NAME?    parent.getFirstChild()    :    Node.newNumber(0);    	non-compiled	[CE]  	91	None	replace
517	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  n.getFirstChild()  :  Node.newNumber(1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.NAME?  n.getFirstChild()  :  Node.newNumber(1);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  n.getFirstChild()  :  Node.newNumber(1);	  return    newNode.getType()    ==    Token.NAME?    parent.getFirstChild()    :    Node.newNumber(0);    	non-compiled	[CE]  	91	None	replace
518	[BUG]  [BUGGY]  return  newNode.getType()!=  Token.NAME?  parent.getFirstChild()  :  Node.newNumber(0);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()!=  Token.NAME?  parent.getFirstChild()  :  Node.newNumber(0);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()!=  Token.NAME?  parent.getFirstChild()  :  Node.newNumber(0);	  return    newNode.getType()    ==    Token.NAME?    parent.getFirstChild()    :    Node.newNumber(0);    	non-compiled	[CE]  	91	None	replace
519	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  parent.removeFirstChild()  :  Node.newNumber(0);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.NAME?  parent.removeFirstChild()  :  Node.newNumber(0);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  parent.removeFirstChild()  :  Node.newNumber(0);	  return    newNode.getType()    ==    Token.NAME?    parent.getFirstChild()    :    Node.newNumber(0);    	non-compiled	[CE]  	91	None	replace
520	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  INVALID_REGULAR_FLAGS);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  INVALID_REGULAR_FLAGS);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  INVALID_REGULAR_FLAGS);	  NodeTraversal.traverse(compiler,    n,    newNode);    	non-compiled	[CE]  	26	None	replace
521	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  compiler);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  compiler);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  compiler);	  NodeTraversal.traverse(compiler,    n,    newNode);    	non-compiled	[CE]  	26	None	replace
522	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  getTarget());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  getTarget());  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  getTarget());	  NodeTraversal.traverse(compiler,    n,    newNode);    	non-compiled	[CE]  	26	None	replace
523	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.NAME?  parent.getFirstChild().getString()  :  Node.newString(Token.NAME);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode.getType()  ==  Token.NAME?  parent.getFirstChild().getString()  :  Node.newString(Token.NAME);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode.getType()  ==  Token.NAME?  parent.getFirstChild().getString()  :  Node.newString(Token.NAME);	  return    newNode.getType()    ==    Token.NAME?    parent.getType()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  	20	None	replace
524	[BUG]  [BUGGY]  return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(Token.NAME,  0);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(Token.NAME,  0);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode  ==  null?  parent.replaceChild(n,  newNode):  new  Node(Token.NAME,  0);	  return    newNode    ==    null?    parent.replaceChild(n,    newNode):    new    Node(Token.NAME,    num);    	non-compiled	[CE]  	97	None	replace
525	[BUG]  [BUGGY]  return  newNode!=  null?  parent.replaceChild(parent,  newNode):  new  Node(Token.NAME,  num);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();      [BUGGY]  return  newNode!=  null?  parent.replaceChild(parent,  newNode):  new  Node(Token.NAME,  num);  [BUGGY]      }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	823	823	1	replace	return  newNode!=  null?  parent.replaceChild(parent,  newNode):  new  Node(Token.NAME,  num);	  return    newNode    ==    null?    parent.replaceChild(n,    newNode):    new    Node(Token.NAME,    num);    	non-compiled	[CE]  	97	None	replace
