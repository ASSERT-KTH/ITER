bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  parent.replaceChild(n,  expr.cloneTree());  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  expr.cloneTree());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  expr.cloneTree());	  parent.replaceChild(n,    expr);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	7	None	replace
2	[BUG]  [BUGGY]  parent.replaceChild(n,  cond,  newExpr,  expr);  [CE]  invalid  method  declaration;  return  type  required  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  cond,  newExpr,  expr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  cond,  newExpr,  expr);	  parent.replaceChild(n,    cond,    newExpr);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
3	[BUG]  [BUGGY]  parent.replaceChild(n,  cond,  newExpr  -  1);  [CE]  invalid  method  declaration;  return  type  required  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  cond,  newExpr  -  1);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  cond,  newExpr  -  1);	  parent.replaceChild(n,    cond,    newExpr);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
4	[BUG]  [BUGGY]  parent.replaceChild(n,  cond,  newExpr,  expr.cloneTree());  [CE]  invalid  method  declaration;  return  type  required  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  cond,  newExpr,  expr.cloneTree());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  cond,  newExpr,  expr.cloneTree());	  parent.replaceChild(n,    cond,    newExpr);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
5	[BUG]  [BUGGY]  parent.replaceChild(n,  cond,  newExpr,  expr.getLastChild());  [CE]  invalid  method  declaration;  return  type  required  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  cond,  newExpr,  expr.getLastChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  cond,  newExpr,  expr.getLastChild());	  parent.replaceChild(n,    cond,    newExpr);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
6	[BUG]  [BUGGY]  parent.replaceChild(n,  cond,  newExpr,  expr.getFirstChild());  [CE]  invalid  method  declaration;  return  type  required  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  cond,  newExpr,  expr.getFirstChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  cond,  newExpr,  expr.getFirstChild());	  parent.replaceChild(n,    cond,    newExpr);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	23	None	replace
7	[BUG]  [BUGGY]  n.removeChild(const.getFirstChild());  [CE]  invalid  method  declaration;  return  type  required  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.removeChild(const.getFirstChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.removeChild(const.getFirstChild());	  n.removeChild(const.getLastChild());    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
8	[BUG]  [BUGGY]  parent.removeChild(expr);  [CE]  invalid  method  declaration;  return  type  required  [FE]                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.removeChild(expr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.removeChild(expr);	  parent.removeChild(cond);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	51	None	replace
9	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild());  parent.replaceChild(n,  newExpr);  [CE]  invalid  method  declaration;  return  type  required  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild());  parent.replaceChild(n,  newExpr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild());  parent.replaceChild(n,  newExpr);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    parent.replaceChild(n,    newExpr);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	49	None	replace
10	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild());  parent.replaceChild(n,  newExpr);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild());  parent.replaceChild(n,  newExpr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild());  parent.replaceChild(n,  newExpr);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    parent.replaceChild(n,    newExpr);    	non-compiled	[CE]  	49	None	replace
11	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr);  parent.replaceChild(n,  newExpr);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr);  parent.replaceChild(n,  newExpr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr);  parent.replaceChild(n,  newExpr);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    parent.replaceChild(n,    newExpr);    	non-compiled	[CE]  	49	None	replace
12	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree());  parent.replaceChild(n,  newExpr);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree());  parent.replaceChild(n,  newExpr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree());  parent.replaceChild(n,  newExpr);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    parent.replaceChild(n,    newExpr);    	non-compiled	[CE]  	49	None	replace
13	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeLastChild());  parent.replaceChild(n,  newExpr);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeLastChild());  parent.replaceChild(n,  newExpr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeLastChild());  parent.replaceChild(n,  newExpr);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    parent.replaceChild(n,    newExpr);    	non-compiled	[CE]  	49	None	replace
14	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getNext());  parent.replaceChild(n,  newExpr);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getNext());  parent.replaceChild(n,  newExpr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getNext());  parent.replaceChild(n,  newExpr);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    parent.replaceChild(n,    newExpr);    	non-compiled	[CE]  	49	None	replace
15	[BUG]  [BUGGY]  parent.replaceChild(n,  assign,  newExpr);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  assign,  newExpr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  assign,  newExpr);	  parent.replaceChild(n,    assign,    expr);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
16	[BUG]  [BUGGY]  parent.replaceChild(n,  assign,  expr.cloneTree());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  assign,  expr.cloneTree());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  assign,  expr.cloneTree());	  parent.replaceChild(n,    assign,    expr);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
17	[BUG]  [BUGGY]  parent.replaceChild(n,  assign,  expr.getLastChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  assign,  expr.getLastChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  assign,  expr.getLastChild());	  parent.replaceChild(n,    assign,    expr);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
18	[BUG]  [BUGGY]  parent.replaceChild(n,  assign,  elseOp);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  assign,  elseOp);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  assign,  elseOp);	  parent.replaceChild(n,    assign,    expr);    	non-compiled	[CE]  ';'  expected	17	None	replace
19	[BUG]  [BUGGY]  parent.replaceChild(n,  assign,  expr.getFirstChild());  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  assign,  expr.getFirstChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  assign,  expr.getFirstChild());	  parent.replaceChild(n,    assign,    expr);    	non-compiled	[CE]  ';'  expected	17	None	replace
20	[BUG]  [BUGGY]  Node  assign  =  cond.getFirstChild();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  assign  =  cond.getFirstChild();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  assign  =  cond.getFirstChild();	  Node    assign    =    expr.getFirstChild();    	non-compiled	[CE]  ';'  expected	25	None	replace
21	[BUG]  [BUGGY]  Node  assign  =  expr.getAssignedValue();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  assign  =  expr.getAssignedValue();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  assign  =  expr.getAssignedValue();	  Node    assign    =    expr.getFirstChild();    	non-compiled	[CE]  ';'  expected	25	None	replace
22	[BUG]  [BUGGY]  Node  assign  =  expr.getNext();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  assign  =  expr.getNext();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  assign  =  expr.getNext();	  Node    assign    =    expr.getFirstChild();    	non-compiled	[CE]  ';'  expected	25	None	replace
23	[BUG]  [BUGGY]  Node  assign  =  expr.getAssignedChild();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  assign  =  expr.getAssignedChild();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  assign  =  expr.getAssignedChild();	  Node    assign    =    expr.getFirstChild();    	non-compiled	[CE]  ';'  expected	25	None	replace
24	[BUG]  [BUGGY]  n.replaceChild(n,  new  Node(Token.NAME));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.replaceChild(n,  new  Node(Token.NAME));  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.replaceChild(n,  new  Node(Token.NAME));	  n.replaceChild(cond,    new    Node(Token.NAME));    	non-compiled	[CE]  ';'  expected	37	None	replace
25	[BUG]  [BUGGY]  n.replaceChild(cond,  new  Node(Token.NAME,  expr.getFirstChild()));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.replaceChild(cond,  new  Node(Token.NAME,  expr.getFirstChild()));  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.replaceChild(cond,  new  Node(Token.NAME,  expr.getFirstChild()));	  n.replaceChild(cond,    new    Node(Token.NAME));    	non-compiled	[CE]  ';'  expected	37	None	replace
26	[BUG]  [BUGGY]  n.replaceChild(cond,  new  Node(Token.NAME,  expr.getType()));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.replaceChild(cond,  new  Node(Token.NAME,  expr.getType()));  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.replaceChild(cond,  new  Node(Token.NAME,  expr.getType()));	  n.replaceChild(cond,    new    Node(Token.NAME));    	non-compiled	[CE]  ';'  expected	37	None	replace
27	[BUG]  [BUGGY]  n.replaceChild(cond,  new  Node(Token.NAME,  expr.getLastChild()));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.replaceChild(cond,  new  Node(Token.NAME,  expr.getLastChild()));  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.replaceChild(cond,  new  Node(Token.NAME,  expr.getLastChild()));	  n.replaceChild(cond,    new    Node(Token.NAME));    	non-compiled	[CE]  ';'  expected	37	None	replace
28	[BUG]  [BUGGY]  n.replaceChild(cond,  new  Node(Token.NAME,  expr.cloneTree()));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.replaceChild(cond,  new  Node(Token.NAME,  expr.cloneTree()));  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.replaceChild(cond,  new  Node(Token.NAME,  expr.cloneTree()));	  n.replaceChild(cond,    new    Node(Token.NAME));    	non-compiled	[CE]  ';'  expected	37	None	replace
29	[BUG]  [BUGGY]  n.replaceChild(cond,  new  Node(Token.NAME,  expr.getString()));  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.replaceChild(cond,  new  Node(Token.NAME,  expr.getString()));  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.replaceChild(cond,  new  Node(Token.NAME,  expr.getString()));	  n.replaceChild(cond,    new    Node(Token.NAME));    	non-compiled	[CE]  ';'  expected	37	None	replace
30	[BUG]  [BUGGY]  n.replaceChild(cond,  new  Node(Token.NAME,  expr));  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.replaceChild(cond,  new  Node(Token.NAME,  expr));  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.replaceChild(cond,  new  Node(Token.NAME,  expr));	  n.replaceChild(cond,    new    Node(Token.NAME));    	non-compiled	[CE]  ';'  expected	37	None	replace
31	[BUG]  [BUGGY]  n.addChildAfter(expr,  cond);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.addChildAfter(expr,  cond);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.addChildAfter(expr,  cond);	  n.addChildAfter(cond,    expr);    	non-compiled	[CE]  ';'  expected	55	None	replace
32	[BUG]  [BUGGY]  n.addChildAfter(newExpr,  expr);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.addChildAfter(newExpr,  expr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.addChildAfter(newExpr,  expr);	  n.addChildAfter(cond,    expr);    	non-compiled	[CE]  ';'  expected	55	None	replace
33	[BUG]  [BUGGY]  n.addChildAfter(cond,  expr,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.addChildAfter(cond,  expr,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.addChildAfter(cond,  expr,  STANDARD_OBJECT_CONSTRUCTORS);	  n.addChildAfter(cond,    expr);    	non-compiled	[CE]  ';'  expected	55	None	replace
34	[BUG]  [BUGGY]  n.addChildAfter(cond,  expr,  expr.removeFirstChild());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.addChildAfter(cond,  expr,  expr.removeFirstChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.addChildAfter(cond,  expr,  expr.removeFirstChild());	  n.addChildAfter(cond,    expr);    	non-compiled	[CE]  ';'  expected	55	None	replace
35	[BUG]  [BUGGY]  n.addChildAfter(cond,  expr,  expr.getFirstChild());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.addChildAfter(cond,  expr,  expr.getFirstChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.addChildAfter(cond,  expr,  expr.getFirstChild());	  n.addChildAfter(cond,    expr);    	non-compiled	[CE]  ';'  expected	55	None	replace
36	[BUG]  [BUGGY]  n.addChildAfter(cond,  expr,  expr.cloneTree());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.addChildAfter(cond,  expr,  expr.cloneTree());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.addChildAfter(cond,  expr,  expr.cloneTree());	  n.addChildAfter(cond,    expr);    	non-compiled	[CE]  ';'  expected	55	None	replace
37	[BUG]  [BUGGY]  n.addChildAfter(cond,  expr,  newExpr);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.addChildAfter(cond,  expr,  newExpr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.addChildAfter(cond,  expr,  newExpr);	  n.addChildAfter(cond,    expr);    	non-compiled	[CE]  ';'  expected	55	None	replace
38	[BUG]  [BUGGY]  n.removeChild(expr,  cond.getFirstChild());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.removeChild(expr,  cond.getFirstChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.removeChild(expr,  cond.getFirstChild());	  n.removeChild(cond,    expr.getFirstChild());    	non-compiled	[CE]  ';'  expected	34	None	replace
39	[BUG]  [BUGGY]  n.removeChild(expr,  expr.getFirstChild());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.removeChild(expr,  expr.getFirstChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.removeChild(expr,  expr.getFirstChild());	  n.removeChild(cond,    expr.getFirstChild());    	non-compiled	[CE]  ';'  expected	34	None	replace
40	[BUG]  [BUGGY]  n.removeChild(cond,  expr.getNext());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.removeChild(cond,  expr.getNext());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.removeChild(cond,  expr.getNext());	  n.removeChild(cond,    expr.getFirstChild());    	non-compiled	[CE]  ';'  expected	34	None	replace
41	[BUG]  [BUGGY]  n.removeChild(cond,  expr.getType());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.removeChild(cond,  expr.getType());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.removeChild(cond,  expr.getType());	  n.removeChild(cond,    expr.getFirstChild());    	non-compiled	[CE]  ';'  expected	34	None	replace
42	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.NAME));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  new  Node(Token.NAME));  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  new  Node(Token.NAME));	  parent.removeChild(n);    	non-compiled	[CE]  ';'  expected	6	None	replace
43	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.EXPR_RESULT));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  new  Node(Token.EXPR_RESULT));  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  new  Node(Token.EXPR_RESULT));	  parent.removeChild(n);    	non-compiled	[CE]  ';'  expected	6	None	replace
44	[BUG]  [BUGGY]  parent.replaceChild(n,  Cond.OTHER,  expr);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  Cond.OTHER,  expr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  Cond.OTHER,  expr);	  parent.replaceChild(n,    Cond.OTHER);    	non-compiled	[CE]  ';'  expected	57	None	replace
45	[BUG]  [BUGGY]  parent.replaceChild(n,  Cond.OTHER,  cond);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  Cond.OTHER,  cond);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  Cond.OTHER,  cond);	  parent.replaceChild(n,    Cond.OTHER);    	non-compiled	[CE]  ';'  expected	57	None	replace
46	[BUG]  [BUGGY]  parent.replaceChild(n,  cond,  Cond.OTHER);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  cond,  Cond.OTHER);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  cond,  Cond.OTHER);	  parent.replaceChild(n,    Cond.OTHER);    	non-compiled	[CE]  ';'  expected	57	None	replace
47	[BUG]  [BUGGY]  parent.replaceChild(n,  Cond.UNKNOWN);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  Cond.UNKNOWN);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  Cond.UNKNOWN);	  parent.replaceChild(n,    Cond.OTHER);    	non-compiled	[CE]  ';'  expected	57	None	replace
48	[BUG]  [BUGGY]  parent.replaceChild(n,  Cond.OTHER  ||  Cond.OTHER);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  Cond.OTHER  ||  Cond.OTHER);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  Cond.OTHER  ||  Cond.OTHER);	  parent.replaceChild(n,    Cond.OTHER);    	non-compiled	[CE]  ';'  expected	57	None	replace
49	[BUG]  [BUGGY]  Node  assign  =  n.getLastChild();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  assign  =  n.getLastChild();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  assign  =  n.getLastChild();	  Node    assign    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	29	None	replace
50	[BUG]  [BUGGY]  Node  assignName  =  expr.getFirstChild();  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  assignName  =  expr.getFirstChild();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  assignName  =  expr.getFirstChild();	  Node    assign    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	29	None	replace
51	[BUG]  [BUGGY]  Node  assign  =  parent.getFirstChild();  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  assign  =  parent.getFirstChild();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  assign  =  parent.getFirstChild();	  Node    assign    =    n.getFirstChild();    	non-compiled	[CE]  ';'  expected	29	None	replace
52	[BUG]  [BUGGY]  n.addChildToBack(expr,  cond);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.addChildToBack(expr,  cond);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.addChildToBack(expr,  cond);	  n.addChildToBack(cond,    expr);    	non-compiled	[CE]  ';'  expected	13	None	replace
53	[BUG]  [BUGGY]  n.addChildToBack(cond,  expr.getFirstChild());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.addChildToBack(cond,  expr.getFirstChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.addChildToBack(cond,  expr.getFirstChild());	  n.addChildToBack(cond,    expr);    	non-compiled	[CE]  ';'  expected	13	None	replace
54	[BUG]  [BUGGY]  n.addChildToBack(cond,  expr.cloneTree());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.addChildToBack(cond,  expr.cloneTree());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.addChildToBack(cond,  expr.cloneTree());	  n.addChildToBack(cond,    expr);    	non-compiled	[CE]  ';'  expected	13	None	replace
55	[BUG]  [BUGGY]  n.addChildToBack(cond,  expr.getLastChild());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.addChildToBack(cond,  expr.getLastChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.addChildToBack(cond,  expr.getLastChild());	  n.addChildToBack(cond,    expr);    	non-compiled	[CE]  ';'  expected	13	None	replace
56	[BUG]  [BUGGY]  n.addChildToBack(cond,  expr.removeFirstChild());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.addChildToBack(cond,  expr.removeFirstChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.addChildToBack(cond,  expr.removeFirstChild());	  n.addChildToBack(cond,    expr);    	non-compiled	[CE]  ';'  expected	13	None	replace
57	[BUG]  [BUGGY]  NodeUtil.removeChild(n);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  NodeUtil.removeChild(n);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	NodeUtil.removeChild(n);	  n.removeChild(alloc);    	non-compiled	[CE]  ';'  expected	36	None	replace
58	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  	48	None	replace
59	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild()).copyInformationFrom(n);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild()).copyInformationFrom(n);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  	48	None	replace
60	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeLastChild()).copyInformationFrom(n);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeLastChild()).copyInformationFrom(n);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeLastChild()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  	48	None	replace
61	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  	48	None	replace
62	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getNext()).copyInformationFrom(n);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getNext()).copyInformationFrom(n);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getNext()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  	48	None	replace
63	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.next()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  	48	None	replace
64	[BUG]  [BUGGY]  Node  n  =  expr.getLastChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  n  =  expr.getLastChild();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  n  =  expr.getLastChild();	  Node    n    =    expr.getFirstChild();    	non-compiled	[CE]  	30	None	replace
65	[BUG]  [BUGGY]  Node  n  =  cond.getFirstChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  n  =  cond.getFirstChild();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  n  =  cond.getFirstChild();	  Node    n    =    expr.getFirstChild();    	non-compiled	[CE]  	30	None	replace
66	[BUG]  [BUGGY]  Node  n  =  expr.getNext();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  n  =  expr.getNext();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  n  =  expr.getNext();	  Node    n    =    expr.getFirstChild();    	non-compiled	[CE]  	30	None	replace
67	[BUG]  [BUGGY]  Node  n  =  expr.removeFirstChild();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  n  =  expr.removeFirstChild();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  n  =  expr.removeFirstChild();	  Node    n    =    expr.getFirstChild();    	non-compiled	[CE]  	30	None	replace
68	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  n  =  parent.getFirstChild();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  n  =  parent.getFirstChild();	  Node    n    =    expr.getFirstChild();    	non-compiled	[CE]  	30	None	replace
69	[BUG]  [BUGGY]  Node  n  =  expr.cloneTree();  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  n  =  expr.cloneTree();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  n  =  expr.cloneTree();	  Node    n    =    expr.getFirstChild();    	non-compiled	[CE]  	30	None	replace
70	[BUG]  [BUGGY]  n.replaceChild(cond,  new  Node(Token.NAME,  cond),  expr);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.replaceChild(cond,  new  Node(Token.NAME,  cond),  expr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.replaceChild(cond,  new  Node(Token.NAME,  cond),  expr);	  n.replaceChild(cond,    new    Node(Token.NAME,    cond));    	non-compiled	[CE]  	38	None	replace
71	[BUG]  [BUGGY]  n.replaceChild(n,  new  Node(Token.NAME,  cond));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.replaceChild(n,  new  Node(Token.NAME,  cond));  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.replaceChild(n,  new  Node(Token.NAME,  cond));	  n.replaceChild(cond,    new    Node(Token.NAME,    cond));    	non-compiled	[CE]  	38	None	replace
72	[BUG]  [BUGGY]  n.replaceChild(cond,  new  Node(Token.NAME,  cond,  expr));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.replaceChild(cond,  new  Node(Token.NAME,  cond,  expr));  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.replaceChild(cond,  new  Node(Token.NAME,  cond,  expr));	  n.replaceChild(cond,    new    Node(Token.NAME,    cond));    	non-compiled	[CE]  	38	None	replace
73	[BUG]  [BUGGY]  n.removeChild(cond,  new  Node(Token.NAME,  cond));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.removeChild(cond,  new  Node(Token.NAME,  cond));  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.removeChild(cond,  new  Node(Token.NAME,  cond));	  n.replaceChild(cond,    new    Node(Token.NAME,    cond));    	non-compiled	[CE]  	38	None	replace
74	[BUG]  [BUGGY]  n.replaceChild(cond,  new  Node(Token.NAME,  assign));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.replaceChild(cond,  new  Node(Token.NAME,  assign));  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.replaceChild(cond,  new  Node(Token.NAME,  assign));	  n.replaceChild(cond,    new    Node(Token.NAME,    cond));    	non-compiled	[CE]  	38	None	replace
75	[BUG]  [BUGGY]  parent.removeChild(expr.getLastChild());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.removeChild(expr.getLastChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.removeChild(expr.getLastChild());	  n.removeChild(parent.getLastChild());    	non-compiled	[CE]  	9	None	replace
76	[BUG]  [BUGGY]  parent.removeChild(n.getLastChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.removeChild(n.getLastChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.removeChild(n.getLastChild());	  n.removeChild(parent.getLastChild());    	non-compiled	[CE]  	9	None	replace
77	[BUG]  [BUGGY]  n.removeChildAfter(expr);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.removeChildAfter(expr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.removeChildAfter(expr);	  n.removeChildAfter(cond);    	non-compiled	[CE]  	42	None	replace
78	[BUG]  [BUGGY]  n.removeChildAfter(cond,  expr);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.removeChildAfter(cond,  expr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.removeChildAfter(cond,  expr);	  n.removeChildAfter(cond);    	non-compiled	[CE]  	42	None	replace
79	[BUG]  [BUGGY]  n.removeChildAfter(cond,  expr.getLastChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.removeChildAfter(cond,  expr.getLastChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.removeChildAfter(cond,  expr.getLastChild());	  n.removeChildAfter(cond);    	non-compiled	[CE]  	42	None	replace
80	[BUG]  [BUGGY]  n.removeChildAfter(cond,  expr.getFirstChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.removeChildAfter(cond,  expr.getFirstChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.removeChildAfter(cond,  expr.getFirstChild());	  n.removeChildAfter(cond);    	non-compiled	[CE]  	42	None	replace
81	[BUG]  [BUGGY]  Node  var  =  expr.getLastChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  var  =  expr.getLastChild();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  var  =  expr.getLastChild();	  Node    var    =    expr.getFirstChild();    	non-compiled	[CE]  	31	None	replace
82	[BUG]  [BUGGY]  Node  var  =  cond.getFirstChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  var  =  cond.getFirstChild();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  var  =  cond.getFirstChild();	  Node    var    =    expr.getFirstChild();    	non-compiled	[CE]  	31	None	replace
83	[BUG]  [BUGGY]  Node  var  =  expr.getNext();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  var  =  expr.getNext();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  var  =  expr.getNext();	  Node    var    =    expr.getFirstChild();    	non-compiled	[CE]  	31	None	replace
84	[BUG]  [BUGGY]  Node  var  =  expr.removeFirstChild();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  var  =  expr.removeFirstChild();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  var  =  expr.removeFirstChild();	  Node    var    =    expr.getFirstChild();    	non-compiled	[CE]  	31	None	replace
85	[BUG]  [BUGGY]  Node  expr  =  expr.getLastChild();  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  expr  =  expr.getLastChild();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  expr  =  expr.getLastChild();	  Node    var    =    expr.getFirstChild();    	non-compiled	[CE]  	31	None	replace
86	[BUG]  [BUGGY]  Node  var  =  expr.getParent();  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  var  =  expr.getParent();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  var  =  expr.getParent();	  Node    var    =    expr.getFirstChild();    	non-compiled	[CE]  	31	None	replace
87	[BUG]  [BUGGY]  Node  parent  =  expr.getNext();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  parent  =  expr.getNext();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  parent  =  expr.getNext();	  Node    parent    =    expr.getParent();    	non-compiled	[CE]  	27	None	replace
88	[BUG]  [BUGGY]  Node  parent  =  cond.getParent();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  parent  =  cond.getParent();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  parent  =  cond.getParent();	  Node    parent    =    expr.getParent();    	non-compiled	[CE]  	27	None	replace
89	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  parent  =  n.getParent();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  parent  =  n.getParent();	  Node    parent    =    expr.getParent();    	non-compiled	[CE]  	27	None	replace
90	[BUG]  [BUGGY]  Node  parent  =  expr.getLastChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  parent  =  expr.getLastChild();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  parent  =  expr.getLastChild();	  Node    parent    =    expr.getParent();    	non-compiled	[CE]  	27	None	replace
91	[BUG]  [BUGGY]  Node  parent  =  expr.removeFirstChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  parent  =  expr.removeFirstChild();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  parent  =  expr.removeFirstChild();	  Node    parent    =    expr.getParent();    	non-compiled	[CE]  	27	None	replace
92	[BUG]  [BUGGY]  Node  parent  =  expr.getParent(),  cond;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  parent  =  expr.getParent(),  cond;  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  parent  =  expr.getParent(),  cond;	  Node    parent    =    expr.getParent();    	non-compiled	[CE]  	27	None	replace
93	[BUG]  [BUGGY]  n.removeChildToBack(expr);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.removeChildToBack(expr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.removeChildToBack(expr);	  n.removeChildToBack(cond);    	non-compiled	[CE]  	41	None	replace
94	[BUG]  [BUGGY]  NodeUtil.removeChildToBack(expr);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  NodeUtil.removeChildToBack(expr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	NodeUtil.removeChildToBack(expr);	  n.removeChildToBack(cond);    	non-compiled	[CE]  	41	None	replace
95	[BUG]  [BUGGY]  parent.replaceChild(n,  expr)  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  expr)  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  expr)	  parent.replaceChild(n,    cond)    	non-compiled	[CE]  	52	None	replace
96	[BUG]  [BUGGY]  parent.replaceChild(n,  cond).removeFirstChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  cond).removeFirstChild();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  cond).removeFirstChild();	  parent.replaceChild(n,    cond)    	non-compiled	[CE]  	52	None	replace
97	[BUG]  [BUGGY]  parent.replaceChild(n,  cond).removeChild(cond);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  cond).removeChild(cond);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  cond).removeChild(cond);	  parent.replaceChild(n,    cond)    	non-compiled	[CE]  	52	None	replace
98	[BUG]  [BUGGY]  parent.replaceChild(n,  cond).replaceChild(n,  expr)  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  cond).replaceChild(n,  expr)  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  cond).replaceChild(n,  expr)	  parent.replaceChild(n,    cond)    	non-compiled	[CE]  	52	None	replace
99	[BUG]  [BUGGY]  parent.replaceChild(n,  cond).removeChild(expr);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  cond).removeChild(expr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  cond).removeChild(expr);	  parent.replaceChild(n,    cond)    	non-compiled	[CE]  	52	None	replace
100	[BUG]  [BUGGY]  n.removeChild(expr,  cond);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.removeChild(expr,  cond);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.removeChild(expr,  cond);	  n.replaceChild(cond,    expr);    	non-compiled	[CE]  	39	None	replace
101	[BUG]  [BUGGY]  n.removeChild(cond,  expr);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.removeChild(cond,  expr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.removeChild(cond,  expr);	  n.replaceChild(cond,    expr);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
102	[BUG]  [BUGGY]  n.replaceChild(n,  expr);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.replaceChild(n,  expr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.replaceChild(n,  expr);	  n.replaceChild(cond,    expr);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
103	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  cond);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  NodeUtil.removeChild(parent,  cond);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	NodeUtil.removeChild(parent,  cond);	  NodeUtil.removeChild(cond);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
104	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  cond);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  NodeUtil.removeChild(n,  cond);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	NodeUtil.removeChild(n,  cond);	  NodeUtil.removeChild(cond);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
105	[BUG]  [BUGGY]  NodeUtil.removeChild(cond,  n);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  NodeUtil.removeChild(cond,  n);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	NodeUtil.removeChild(cond,  n);	  NodeUtil.removeChild(cond);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
106	[BUG]  [BUGGY]  NodeUtil.removeChild(expr,  cond);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  NodeUtil.removeChild(expr,  cond);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	NodeUtil.removeChild(expr,  cond);	  NodeUtil.removeChild(cond,    expr);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
107	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  expr);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  NodeUtil.removeChild(n,  expr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	NodeUtil.removeChild(n,  expr);	  NodeUtil.removeChild(cond,    expr);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
108	[BUG]  [BUGGY]  NodeUtil.removeChild(cond,  expr.cloneTree());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  NodeUtil.removeChild(cond,  expr.cloneTree());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	NodeUtil.removeChild(cond,  expr.cloneTree());	  NodeUtil.removeChild(cond,    expr);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
109	[BUG]  [BUGGY]  NodeUtil.removeChild(pr,  expr);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  NodeUtil.removeChild(pr,  expr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	NodeUtil.removeChild(pr,  expr);	  NodeUtil.removeChild(cond,    expr);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
110	[BUG]  [BUGGY]  Node  cond  =  expr.removeFirstChild(),  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  cond  =  expr.removeFirstChild(),  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  cond  =  expr.removeFirstChild(),  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE);	  Node    cond    =    expr.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
111	[BUG]  [BUGGY]  Node  cond  =  expr.removeLastChild();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  cond  =  expr.removeLastChild();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  cond  =  expr.removeLastChild();	  Node    cond    =    expr.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
112	[BUG]  [BUGGY]  Node  cond  =  expr.removeFirstChild(),  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  cond  =  expr.removeFirstChild(),  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  cond  =  expr.removeFirstChild(),  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE);	  Node    cond    =    expr.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
113	[BUG]  [BUGGY]  Node  cond  =  expr.removeFirstChild(),  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE));  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  cond  =  expr.removeFirstChild(),  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE));  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  cond  =  expr.removeFirstChild(),  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE));	  Node    cond    =    expr.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
114	[BUG]  [BUGGY]  parent.replaceChild(n,  cond.getLastChild());  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  cond.getLastChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  cond.getLastChild());	  n.removeChild(cond.getLastChild());    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
115	[BUG]  [BUGGY]  n.removeChild(pr.getLastChild());  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.removeChild(pr.getLastChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.removeChild(pr.getLastChild());	  n.removeChild(cond.getLastChild());    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
116	[BUG]  [BUGGY]  parent.removeChild(expr.getFirstChild());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.removeChild(expr.getFirstChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.removeChild(expr.getFirstChild());	  n.removeChild(parent.getFirstChild());    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
117	[BUG]  [BUGGY]  n.addChildToBack(newExpr,  cond);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.addChildToBack(newExpr,  cond);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.addChildToBack(newExpr,  cond);	  n.addChildToBack(newExpr);    	non-compiled	[CE]  ')'  expected	14	None	replace
118	[BUG]  [BUGGY]  n.removeChild(newExpr);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.removeChild(newExpr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.removeChild(newExpr);	  n.addChildToBack(newExpr);    	non-compiled	[CE]  ')'  expected	14	None	replace
119	[BUG]  [BUGGY]  Node  cond  =  expr.getNext();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  cond  =  expr.getNext();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  cond  =  expr.getNext();	  Node    cond    =    expr.getFirstChild();    	non-compiled	[CE]  ')'  expected	26	None	replace
120	[BUG]  [BUGGY]  Node  cond  =  n.getFirstChild();  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  cond  =  n.getFirstChild();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  cond  =  n.getFirstChild();	  Node    cond    =    expr.getFirstChild();    	non-compiled	[CE]  ')'  expected	26	None	replace
121	[BUG]  [BUGGY]  Node  cond  =  expr.getParent();  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  cond  =  expr.getParent();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  cond  =  expr.getParent();	  Node    cond    =    expr.getFirstChild();    	non-compiled	[CE]  ')'  expected	26	None	replace
122	[BUG]  [BUGGY]  Node  cond  =  expr.getConditionalStatement();  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  cond  =  expr.getConditionalStatement();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  cond  =  expr.getConditionalStatement();	  Node    cond    =    expr.getFirstChild();    	non-compiled	[CE]  ')'  expected	26	None	replace
123	[BUG]  [BUGGY]  n.removeChild(cond.getLastChild(),  expr);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.removeChild(cond.getLastChild(),  expr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.removeChild(cond.getLastChild(),  expr);	  n.removeChild(expr.getLastChild(),    cond);    	non-compiled	[CE]  ')'  expected	10	None	replace
124	[BUG]  [BUGGY]  n.removeChild(consd.getLastChild(),  expr);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.removeChild(consd.getLastChild(),  expr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.removeChild(consd.getLastChild(),  expr);	  n.removeChild(expr.getLastChild(),    cond);    	non-compiled	[CE]  ')'  expected	10	None	replace
125	[BUG]  [BUGGY]  n.removeChild(expr.getFirstChild(),  cond);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.removeChild(expr.getFirstChild(),  cond);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.removeChild(expr.getFirstChild(),  cond);	  n.removeChild(expr.getLastChild(),    cond);    	non-compiled	[CE]  ')'  expected	10	None	replace
126	[BUG]  [BUGGY]  cond.removeChild(expr.getLastChild(),  cond);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  cond.removeChild(expr.getLastChild(),  cond);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	cond.removeChild(expr.getLastChild(),  cond);	  n.removeChild(expr.getLastChild(),    cond);    	non-compiled	[CE]  ')'  expected	10	None	replace
127	[BUG]  [BUGGY]  n.removeChild(cond.getFirstChild(),  expr);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.removeChild(cond.getFirstChild(),  expr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.removeChild(cond.getFirstChild(),  expr);	  n.removeChild(expr.getLastChild(),    cond);    	non-compiled	[CE]  ')'  expected	10	None	replace
128	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  NodeUtil.removeChild(parent,  n);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	NodeUtil.removeChild(parent,  n);	  NodeUtil.removeChild(parent);    	non-compiled	[CE]  ')'  expected	5	None	replace
129	[BUG]  [BUGGY]  parent.replaceChild(n,  cond,  expr.cloneTree(),  newExpr);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  cond,  expr.cloneTree(),  newExpr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  cond,  expr.cloneTree(),  newExpr);	  parent.replaceChild(n,    cond,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	58	None	replace
130	[BUG]  [BUGGY]  parent.replaceChild(n,  cond,  expr.cloneTree(),  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  cond,  expr.cloneTree(),  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  cond,  expr.cloneTree(),  STANDARD_OBJECT_CONSTRUCTORS);	  parent.replaceChild(n,    cond,    expr.cloneTree());    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
131	[BUG]  [BUGGY]  parent.replaceChild(n,  cond,  expr.cloneTree(),  returnNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  cond,  expr.cloneTree(),  returnNode);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  cond,  expr.cloneTree(),  returnNode);	  parent.replaceChild(n,    cond,    expr.cloneTree());    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
132	[BUG]  [BUGGY]  parent.replaceChild(n,  cond,  expr.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  cond,  expr.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  cond,  expr.cloneTree(),  STANDARD_OBJECT_EXPRESSION_FLAGS);	  parent.replaceChild(n,    cond,    expr.cloneTree());    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
133	[BUG]  [BUGGY]  parent.replaceChild(n,  cond,  expr.cloneTree(),  STANDARD_OBJECT_SYNTHETIC);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  cond,  expr.cloneTree(),  STANDARD_OBJECT_SYNTHETIC);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  cond,  expr.cloneTree(),  STANDARD_OBJECT_SYNTHETIC);	  parent.replaceChild(n,    cond,    expr.cloneTree());    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
134	[BUG]  [BUGGY]  parent.replaceChild(n,  cond,  expr.cloneTree(),  false);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  cond,  expr.cloneTree(),  false);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  cond,  expr.cloneTree(),  false);	  parent.replaceChild(n,    cond,    expr.cloneTree());    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
135	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  expr.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  NodeUtil.removeChild(n,  expr.getFirstChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	NodeUtil.removeChild(n,  expr.getFirstChild());	  NodeUtil.removeChild(parent,    expr.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
136	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  expr.getFirstChild(),  cond);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  NodeUtil.removeChild(parent,  expr.getFirstChild(),  cond);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	NodeUtil.removeChild(parent,  expr.getFirstChild(),  cond);	  NodeUtil.removeChild(parent,    expr.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
137	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  expr.getLastChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  NodeUtil.removeChild(parent,  expr.getLastChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	NodeUtil.removeChild(parent,  expr.getLastChild());	  NodeUtil.removeChild(parent,    expr.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
138	[BUG]  [BUGGY]  NodeUtil.removeChild(expr,  parent.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  NodeUtil.removeChild(expr,  parent.getFirstChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	NodeUtil.removeChild(expr,  parent.getFirstChild());	  NodeUtil.removeChild(parent,    expr.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
139	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  NodeUtil.removeChild(parent,  n.getFirstChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	NodeUtil.removeChild(parent,  n.getFirstChild());	  NodeUtil.removeChild(parent,    expr.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
140	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  expr.getFirstChild(),  n);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  NodeUtil.removeChild(parent,  expr.getFirstChild(),  n);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	NodeUtil.removeChild(parent,  expr.getFirstChild(),  n);	  NodeUtil.removeChild(parent,    expr.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
141	[BUG]  [BUGGY]  Node  cond  =  expr.getLastChild(),  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  cond  =  expr.getLastChild(),  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  cond  =  expr.getLastChild(),  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE);	  Node    cond    =    expr.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
142	[BUG]  [BUGGY]  Node  cond  =  expr.getLastChild(),  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  cond  =  expr.getLastChild(),  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE));  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  cond  =  expr.getLastChild(),  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE));	  Node    cond    =    expr.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
143	[BUG]  [BUGGY]  Node  cond  =  expr.getLastChild(),  expr.removeFirstChild());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  cond  =  expr.getLastChild(),  expr.removeFirstChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  cond  =  expr.getLastChild(),  expr.removeFirstChild());	  Node    cond    =    expr.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
144	[BUG]  [BUGGY]  Node  cond  =  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  cond  =  n.getLastChild();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  cond  =  n.getLastChild();	  Node    cond    =    expr.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
145	[BUG]  [BUGGY]  Node  cond  =  expr.getLastChild(),  STANDARD_OBJECT_CONSTRUCTORS;  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  cond  =  expr.getLastChild(),  STANDARD_OBJECT_CONSTRUCTORS;  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  cond  =  expr.getLastChild(),  STANDARD_OBJECT_CONSTRUCTORS;	  Node    cond    =    expr.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
146	[BUG]  [BUGGY]  parent.replaceChild(n,  cond.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  cond.getFirstChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  cond.getFirstChild());	  parent.replaceChild(n,    expr.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
147	[BUG]  [BUGGY]  parent.replaceChild(n,  expr.getFirstChild(),  AND_PRECEDENCE);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  expr.getFirstChild(),  AND_PRECEDENCE);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  expr.getFirstChild(),  AND_PRECEDENCE);	  parent.replaceChild(n,    expr.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
148	[BUG]  [BUGGY]  parent.replaceChild(n,  expr.getNext());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  expr.getNext());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  expr.getNext());	  parent.replaceChild(n,    expr.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
149	[BUG]  [BUGGY]  parent.replaceChild(n,  expr.getParent());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  expr.getParent());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  expr.getParent());	  parent.replaceChild(n,    expr.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
150	[BUG]  [BUGGY]  parent.replaceChild(n,  expr.getFirstChild(),  OR_PRECEDENCE);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  expr.getFirstChild(),  OR_PRECEDENCE);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  expr.getFirstChild(),  OR_PRECEDENCE);	  parent.replaceChild(n,    expr.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
151	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild());  parent.replaceChild(n,  assign);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild());  parent.replaceChild(n,  assign);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild());  parent.replaceChild(n,  assign);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    parent.replaceChild(n,    assign);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
152	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  assign);  parent.replaceChild(n,  assign);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  assign);  parent.replaceChild(n,  assign);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  assign);  parent.replaceChild(n,  assign);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    parent.replaceChild(n,    assign);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
153	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild());  parent.replaceChild(n,  assign);  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild());  parent.replaceChild(n,  assign);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild());  parent.replaceChild(n,  assign);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    parent.replaceChild(n,    assign);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
154	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  assign.removeFirstChild());  parent.replaceChild(n,  assign);  [CE]  illegal  start  of  expression  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  assign.removeFirstChild());  parent.replaceChild(n,  assign);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  and  =  new  Node(Token.AND,  cond,  assign.removeFirstChild());  parent.replaceChild(n,  assign);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    parent.replaceChild(n,    assign);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
155	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild());  parent.replaceChild(n,  assign);  [CE]  illegal  start  of  expression  [FE]                                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild());  parent.replaceChild(n,  assign);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  and  =  new  Node(Token.AND,  cond,  n.removeFirstChild());  parent.replaceChild(n,  assign);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    parent.replaceChild(n,    assign);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
156	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeLastChild());  parent.replaceChild(n,  assign);  [CE]  illegal  start  of  expression  [FE]                                        AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeLastChild());  parent.replaceChild(n,  assign);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeLastChild());  parent.replaceChild(n,  assign);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    parent.replaceChild(n,    assign);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
157	[BUG]  [BUGGY]  n.replaceChild(n,  assign);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.replaceChild(n,  assign);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.replaceChild(n,  assign);	  n.replaceChild(cond,    assign);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
158	[BUG]  [BUGGY]  n.replaceChild(assign,  cond);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.replaceChild(assign,  cond);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.replaceChild(assign,  cond);	  n.replaceChild(cond,    assign);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
159	[BUG]  [BUGGY]  NodeUtil.removeChild(expr,  parent);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  NodeUtil.removeChild(expr,  parent);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	NodeUtil.removeChild(expr,  parent);	  NodeUtil.removeChild(parent,    expr);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
160	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  expr.cloneTree());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  NodeUtil.removeChild(parent,  expr.cloneTree());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	NodeUtil.removeChild(parent,  expr.cloneTree());	  NodeUtil.removeChild(parent,    expr);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
161	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  cond,  expr.getFirstChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  NodeUtil.removeChild(parent,  cond,  expr.getFirstChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	NodeUtil.removeChild(parent,  cond,  expr.getFirstChild());	  NodeUtil.removeChild(cond,    expr.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
162	[BUG]  [BUGGY]  NodeUtil.removeChild(expr,  cond.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  NodeUtil.removeChild(expr,  cond.getFirstChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	NodeUtil.removeChild(expr,  cond.getFirstChild());	  NodeUtil.removeChild(cond,    expr.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
163	[BUG]  [BUGGY]  NodeUtil.removeChild(expr,  expr.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  NodeUtil.removeChild(expr,  expr.getFirstChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	NodeUtil.removeChild(expr,  expr.getFirstChild());	  NodeUtil.removeChild(cond,    expr.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
164	[BUG]  [BUGGY]  NodeUtil.removeChild(cond,  expr.getLastChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  NodeUtil.removeChild(cond,  expr.getLastChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	NodeUtil.removeChild(cond,  expr.getLastChild());	  NodeUtil.removeChild(cond,    expr.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
165	[BUG]  [BUGGY]  NodeUtil.removeChild(pr,  expr.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  NodeUtil.removeChild(pr,  expr.getFirstChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	NodeUtil.removeChild(pr,  expr.getFirstChild());	  NodeUtil.removeChild(cond,    expr.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
166	[BUG]  [BUGGY]  parent.replaceChild(n,  assignment,  expr);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  assignment,  expr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  assignment,  expr);	  parent.replaceChild(n,    assignment);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
167	[BUG]  [BUGGY]  parent.replaceChild(n,  assignment,  newExpr);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  assignment,  newExpr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  assignment,  newExpr);	  parent.replaceChild(n,    assignment);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
168	[BUG]  [BUGGY]  parent.replaceChild(n,  assignment,  cond);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  assignment,  cond);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  assignment,  cond);	  parent.replaceChild(n,    assignment);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
169	[BUG]  [BUGGY]  Node  assign  =  cond.getLastChild();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  assign  =  cond.getLastChild();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  assign  =  cond.getLastChild();	  Node    assign    =    expr.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
170	[BUG]  [BUGGY]  Node  assign  =  expr.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  assign  =  expr.removeFirstChild();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  assign  =  expr.removeFirstChild();	  Node    assign    =    expr.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
171	[BUG]  [BUGGY]  Node  assign  =  expr.nextChild();  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  assign  =  expr.nextChild();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  assign  =  expr.nextChild();	  Node    assign    =    expr.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
172	[BUG]  [BUGGY]  Node  assign  =  parent.getLastChild();  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  assign  =  parent.getLastChild();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  assign  =  parent.getLastChild();	  Node    assign    =    expr.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
173	[BUG]  [BUGGY]  n.replaceChild(cond,  expr.getLastChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.replaceChild(cond,  expr.getLastChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.replaceChild(cond,  expr.getLastChild());	  n.replaceChild(cond,    expr.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
174	[BUG]  [BUGGY]  n.replaceChild(n,  expr.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.replaceChild(n,  expr.getFirstChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.replaceChild(n,  expr.getFirstChild());	  n.replaceChild(cond,    expr.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
175	[BUG]  [BUGGY]  n.replaceChild(expr,  cond.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.replaceChild(expr,  cond.getFirstChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.replaceChild(expr,  cond.getFirstChild());	  n.replaceChild(cond,    expr.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
176	[BUG]  [BUGGY]  n.replaceChild(cond,  expr.cloneTree());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.replaceChild(cond,  expr.cloneTree());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.replaceChild(cond,  expr.cloneTree());	  n.replaceChild(cond,    expr.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
177	[BUG]  [BUGGY]  n.replaceChild(cond,  expr.getNext());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.replaceChild(cond,  expr.getNext());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.replaceChild(cond,  expr.getNext());	  n.replaceChild(cond,    expr.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
178	[BUG]  [BUGGY]  parent.replaceChild(n,  assignName,  expr);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  assignName,  expr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  assignName,  expr);	  parent.replaceChild(n,    assignName);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
179	[BUG]  [BUGGY]  parent.replaceChild(n,  assignName,  newExpr);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  assignName,  newExpr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  assignName,  newExpr);	  parent.replaceChild(n,    assignName);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
180	[BUG]  [BUGGY]  parent.replaceChild(n,  cond,  expr.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  cond,  expr.getFirstChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  cond,  expr.getFirstChild());	  parent.replaceChild(n,    cond,    expr.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
181	[BUG]  [BUGGY]  parent.replaceChild(n,  cond,  expr.getLastChild(),  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  cond,  expr.getLastChild(),  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  cond,  expr.getLastChild(),  STANDARD_OBJECT_CONSTRUCTORS);	  parent.replaceChild(n,    cond,    expr.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
182	[BUG]  [BUGGY]  parent.replaceChild(n,  cond,  expr.getLastChild(),  newExpr);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  cond,  expr.getLastChild(),  newExpr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  cond,  expr.getLastChild(),  newExpr);	  parent.replaceChild(n,    cond,    expr.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
183	[BUG]  [BUGGY]  parent.replaceChild(n,  cond,  expr.getLastChild(),  expr);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  cond,  expr.getLastChild(),  expr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  cond,  expr.getLastChild(),  expr);	  parent.replaceChild(n,    cond,    expr.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
184	[BUG]  [BUGGY]  parent.replaceChild(n,  cond,  expr.getLastChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  cond,  expr.getLastChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  cond,  expr.getLastChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS);	  parent.replaceChild(n,    cond,    expr.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
185	[BUG]  [BUGGY]  parent.replaceChild(n,  cond,  expr.getLastChild(),  STANDARD_OBJECT_SYNTHETIC);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  cond,  expr.getLastChild(),  STANDARD_OBJECT_SYNTHETIC);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  cond,  expr.getLastChild(),  STANDARD_OBJECT_SYNTHETIC);	  parent.replaceChild(n,    cond,    expr.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
186	[BUG]  [BUGGY]  parent.replaceChild(n,  cond,  expr.getLastChild(),  returnNode);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  cond,  expr.getLastChild(),  returnNode);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  cond,  expr.getLastChild(),  returnNode);	  parent.replaceChild(n,    cond,    expr.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
187	[BUG]  [BUGGY]  n.removeChild(consd.getFirstChild());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.removeChild(consd.getFirstChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.removeChild(consd.getFirstChild());	  n.removeChild(consd.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
188	[BUG]  [BUGGY]  n.removeChild(cond.getLastChild(),  expr.getFirstChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.removeChild(cond.getLastChild(),  expr.getFirstChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.removeChild(cond.getLastChild(),  expr.getFirstChild());	  n.removeChild(consd.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
189	[BUG]  [BUGGY]  NodeUtil.copyInformationFrom(n,  expr);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  NodeUtil.copyInformationFrom(n,  expr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	NodeUtil.copyInformationFrom(n,  expr);	  NodeUtil.copyInformationFrom(parent,    expr);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
190	[BUG]  [BUGGY]  NodeUtil.copyInformationFrom(cond,  expr);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  NodeUtil.copyInformationFrom(cond,  expr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	NodeUtil.copyInformationFrom(cond,  expr);	  NodeUtil.copyInformationFrom(parent,    expr);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
191	[BUG]  [BUGGY]  NodeUtil.copyInformationFrom(parent,  n);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  NodeUtil.copyInformationFrom(parent,  n);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	NodeUtil.copyInformationFrom(parent,  n);	  NodeUtil.copyInformationFrom(parent,    expr);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
192	[BUG]  [BUGGY]  NodeUtil.copyInformationFrom(n,  parent);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  NodeUtil.copyInformationFrom(n,  parent);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	NodeUtil.copyInformationFrom(n,  parent);	  NodeUtil.copyInformationFrom(parent,    expr);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
193	[BUG]  [BUGGY]  NodeUtil.copyInformationFrom(parent,  n,  expr);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  NodeUtil.copyInformationFrom(parent,  n,  expr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	NodeUtil.copyInformationFrom(parent,  n,  expr);	  NodeUtil.copyInformationFrom(parent,    expr);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
194	[BUG]  [BUGGY]  NodeUtil.copyInformationFrom(parent,  cond,  expr);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  NodeUtil.copyInformationFrom(parent,  cond,  expr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	NodeUtil.copyInformationFrom(parent,  cond,  expr);	  NodeUtil.copyInformationFrom(parent,    expr);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
195	[BUG]  [BUGGY]  NodeUtil.copyInformationFrom(parent,  expr,  cond);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  NodeUtil.copyInformationFrom(parent,  expr,  cond);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	NodeUtil.copyInformationFrom(parent,  expr,  cond);	  NodeUtil.copyInformationFrom(parent,    expr);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
196	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr  -  1);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  newExpr  -  1);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  newExpr  -  1);	  parent.replaceChild(n,    newExpr);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
197	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr,  cond);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  newExpr,  cond);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  newExpr,  cond);	  parent.replaceChild(n,    newExpr);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
198	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr,  expr);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  newExpr,  expr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  newExpr,  expr);	  parent.replaceChild(n,    newExpr);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
199	[BUG]  [BUGGY]  n.addChildToFront(expr,  cond);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.addChildToFront(expr,  cond);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.addChildToFront(expr,  cond);	  n.addChildToFront(cond,    expr);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
200	[BUG]  [BUGGY]  n.addChildToFront(cond,  expr.cloneTree());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.addChildToFront(cond,  expr.cloneTree());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.addChildToFront(cond,  expr.cloneTree());	  n.addChildToFront(cond,    expr);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
201	[BUG]  [BUGGY]  n.addChildToFront(cond,  expr.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.addChildToFront(cond,  expr.getFirstChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.addChildToFront(cond,  expr.getFirstChild());	  n.addChildToFront(cond,    expr);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
202	[BUG]  [BUGGY]  n.addChildToFront(cond,  expr.getLastChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.addChildToFront(cond,  expr.getLastChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.addChildToFront(cond,  expr.getLastChild());	  n.addChildToFront(cond,    expr);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
203	[BUG]  [BUGGY]  n.addChildToFront(cond,  expr.removeFirstChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.addChildToFront(cond,  expr.removeFirstChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.addChildToFront(cond,  expr.removeFirstChild());	  n.addChildToFront(cond,    expr);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
204	[BUG]  [BUGGY]  NodeUtil.copyInformationFrom(parent);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  NodeUtil.copyInformationFrom(parent);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	NodeUtil.copyInformationFrom(parent);	  NodeUtil.removeChild(expr);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
205	[BUG]  [BUGGY]  parent.replaceChild(n,  expr.removeFirstChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  expr.removeFirstChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  expr.removeFirstChild());	  parent.replaceChild(n,    cond    -    1);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
206	[BUG]  [BUGGY]  parent.replaceChild(n,  expr.getFirstChild()  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  expr.getFirstChild()  -  1);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  expr.getFirstChild()  -  1);	  parent.replaceChild(n,    cond    -    1);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
207	[BUG]  [BUGGY]  parent.replaceChild(n,  expr.removeFirstChild()  -  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  expr.removeFirstChild()  -  1);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  expr.removeFirstChild()  -  1);	  parent.replaceChild(n,    cond    -    1);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
208	[BUG]  [BUGGY]  parent.replaceChild(n,  cond  -  1,  expr);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  cond  -  1,  expr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  cond  -  1,  expr);	  parent.replaceChild(n,    cond    -    1);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
209	[BUG]  [BUGGY]  parent.replaceChild(n,  cond  -  2);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  cond  -  2);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  cond  -  2);	  parent.replaceChild(n,    cond    -    1);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
210	[BUG]  [BUGGY]  n.removeChild(expr,  expr.getLastChild());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.removeChild(expr,  expr.getLastChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.removeChild(expr,  expr.getLastChild());	  n.removeChild(cond,    expr.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
211	[BUG]  [BUGGY]  n.removeChild(expr,  cond.getLastChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.removeChild(expr,  cond.getLastChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.removeChild(expr,  cond.getLastChild());	  n.removeChild(cond,    expr.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
212	[BUG]  [BUGGY]  n.removeChild(const,  expr.getLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.removeChild(const,  expr.getLastChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.removeChild(const,  expr.getLastChild());	  n.removeChild(cond,    expr.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
213	[BUG]  [BUGGY]  n.removeChild(pr,  expr.getLastChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.removeChild(pr,  expr.getLastChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.removeChild(pr,  expr.getLastChild());	  n.removeChild(cond,    expr.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
214	[BUG]  [BUGGY]  parent.replaceChild(n,  assignImmutableSet,  expr);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  assignImmutableSet,  expr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  assignImmutableSet,  expr);	  parent.replaceChild(n,    assignImmutableSet);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
215	[BUG]  [BUGGY]  parent.replaceChild(n,  assignImmutableSet,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  assignImmutableSet,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  assignImmutableSet,  STANDARD_OBJECT_CONSTRUCTORS);	  parent.replaceChild(n,    assignImmutableSet);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
216	[BUG]  [BUGGY]  parent.replaceChild(n,  assignImmutableSet,  immutableSet);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  assignImmutableSet,  immutableSet);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  assignImmutableSet,  immutableSet);	  parent.replaceChild(n,    assignImmutableSet);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
217	[BUG]  [BUGGY]  parent.replaceChild(n,  assignImmutableSet,  newExpr);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  assignImmutableSet,  newExpr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  assignImmutableSet,  newExpr);	  parent.replaceChild(n,    assignImmutableSet);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
218	[BUG]  [BUGGY]  parent.replaceChild(n,  assignImmutableSet,  expr.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  assignImmutableSet,  expr.getFirstChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  assignImmutableSet,  expr.getFirstChild());	  parent.replaceChild(n,    assignImmutableSet);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
219	[BUG]  [BUGGY]  n.addChildToFront(newExpr,  cond);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.addChildToFront(newExpr,  cond);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.addChildToFront(newExpr,  cond);	  n.addChildToFront(newExpr);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
220	[BUG]  [BUGGY]  parent.replaceChild(n,  expr.getLastChild(),  cond);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  expr.getLastChild(),  cond);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  expr.getLastChild(),  cond);	  parent.replaceChild(n,    expr.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
221	[BUG]  [BUGGY]  parent.replaceChild(n,  expr.getLastChild(),  OR_PRECEDENCE);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  expr.getLastChild(),  OR_PRECEDENCE);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  expr.getLastChild(),  OR_PRECEDENCE);	  parent.replaceChild(n,    expr.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
222	[BUG]  [BUGGY]  parent.replaceChild(n,  expr.getLastChild(),  newExpr);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  expr.getLastChild(),  newExpr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  expr.getLastChild(),  newExpr);	  parent.replaceChild(n,    expr.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
223	[BUG]  [BUGGY]  parent.replaceChild(n,  expr.getLastChild(),  COND);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  expr.getLastChild(),  COND);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  expr.getLastChild(),  COND);	  parent.replaceChild(n,    expr.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
224	[BUG]  [BUGGY]  parent.replaceChild(n,  cond,  expr.removeFirstChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  cond,  expr.removeFirstChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  cond,  expr.removeFirstChild());	  parent.replaceChild(n,    cond,    expr);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
225	[BUG]  [BUGGY]  parent.replaceChild(n,  cond,  expr.getNext());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  cond,  expr.getNext());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  cond,  expr.getNext());	  parent.replaceChild(n,    cond,    expr);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
226	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getFirstChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
227	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.getLastChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
228	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.getLastChild());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.getLastChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.getLastChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
229	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree());	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	46	None	replace
230	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeLastChild());  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeLastChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeLastChild());	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	46	None	replace
231	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.getType());  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.getType());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.getType());	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	46	None	replace
232	[BUG]  [BUGGY]  Node  expr  =  cond.getFirstChild();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  expr  =  cond.getFirstChild();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  expr  =  cond.getFirstChild();	  Node    expr    =    expr.getFirstChild();    	non-compiled	[CE]  ')'  expected	66	None	replace
233	[BUG]  [BUGGY]  Node  expr  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  expr  =  n.getFirstChild();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  expr  =  n.getFirstChild();	  Node    expr    =    expr.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
234	[BUG]  [BUGGY]  Node  expr  =  expr.getNext();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  expr  =  expr.getNext();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  expr  =  expr.getNext();	  Node    expr    =    expr.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
235	[BUG]  [BUGGY]  Node  expr  =  parent.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  expr  =  parent.getFirstChild();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  expr  =  parent.getFirstChild();	  Node    expr    =    expr.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
236	[BUG]  [BUGGY]  Node  expr  =  expr.removeFirstChild();  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  expr  =  expr.removeFirstChild();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  expr  =  expr.removeFirstChild();	  Node    expr    =    expr.getFirstChild();    	non-compiled	[CE]  ')'  expected	66	None	replace
237	[BUG]  [BUGGY]  n.addChildToFront(assign);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.addChildToFront(assign);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.addChildToFront(assign);	  n.addChildToFront(cond);    	non-compiled	[CE]  ')'  expected	1	None	replace
238	[BUG]  [BUGGY]  n.removeChildToFront(expr);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.removeChildToFront(expr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.removeChildToFront(expr);	  n.removeChildToFront(cond);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
239	[BUG]  [BUGGY]  n.removeChildToFront(assign);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.removeChildToFront(assign);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.removeChildToFront(assign);	  n.removeChildToFront(cond);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
240	[BUG]  [BUGGY]  Node  cond  =  new  Node(Token.AND,  cond,  expr.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  cond  =  new  Node(Token.AND,  cond,  expr.getFirstChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  cond  =  new  Node(Token.AND,  cond,  expr.getFirstChild());	  Node    cond    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
241	[BUG]  [BUGGY]  Node  cond  =  new  Node(Token.AND,  cond,  expr.getLastChild());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  cond  =  new  Node(Token.AND,  cond,  expr.getLastChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  cond  =  new  Node(Token.AND,  cond,  expr.getLastChild());	  Node    cond    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
242	[BUG]  [BUGGY]  Node  cond  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.getLastChild());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  cond  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.getLastChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  cond  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.getLastChild());	  Node    cond    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
243	[BUG]  [BUGGY]  Node  cond  =  new  Node(Token.AND,  cond,  expr.cloneTree());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  cond  =  new  Node(Token.AND,  cond,  expr.cloneTree());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  cond  =  new  Node(Token.AND,  cond,  expr.cloneTree());	  Node    cond    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
244	[BUG]  [BUGGY]  Node  cond  =  new  Node(Token.AND,  cond,  expr.removeLastChild());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  cond  =  new  Node(Token.AND,  cond,  expr.removeLastChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  cond  =  new  Node(Token.AND,  cond,  expr.removeLastChild());	  Node    cond    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
245	[BUG]  [BUGGY]  Node  cond  =  new  Node(Token.AND,  expr,  cond.removeFirstChild());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  cond  =  new  Node(Token.AND,  expr,  cond.removeFirstChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  cond  =  new  Node(Token.AND,  expr,  cond.removeFirstChild());	  Node    cond    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
246	[BUG]  [BUGGY]  parent.replaceChild(n,  assignName  -  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  assignName  -  1);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  assignName  -  1);	  parent.replaceChild(n,    assignName);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
247	[BUG]  [BUGGY]  Node  assign  =  n.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  assign  =  n.removeFirstChild();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  assign  =  n.removeFirstChild();	  Node    assign    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
248	[BUG]  [BUGGY]  n.addChildToFront(expr.getLastChild());  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.addChildToFront(expr.getLastChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.addChildToFront(expr.getLastChild());	  n.removeChild(cond.getLastChild());    	non-compiled	[CE]  ')'  expected	8	None	replace
249	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  expr.getFirstChild(),  newExpr);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  NodeUtil.removeChild(parent,  expr.getFirstChild(),  newExpr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	NodeUtil.removeChild(parent,  expr.getFirstChild(),  newExpr);	  NodeUtil.removeChild(parent,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	63	None	replace
250	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  expr.getFirstChild(),  OR_PRECEDENCE);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  NodeUtil.removeChild(parent,  expr.getFirstChild(),  OR_PRECEDENCE);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	NodeUtil.removeChild(parent,  expr.getFirstChild(),  OR_PRECEDENCE);	  NodeUtil.removeChild(parent,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	63	None	replace
251	[BUG]  [BUGGY]  n.replaceChild(expr,  assign);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.replaceChild(expr,  assign);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.replaceChild(expr,  assign);	  n.replaceChild(cond,    assign);    	non-compiled	[CE]  ')'  expected	43	None	replace
252	[BUG]  [BUGGY]  Node  var  =  expr.cloneTree();  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  var  =  expr.cloneTree();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  var  =  expr.cloneTree();	  Node    var    =    expr.getFirstChild();    	non-compiled	[CE]  ')'  expected	31	None	replace
253	[BUG]  [BUGGY]  Node  var  =  expr.nextChild();  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  var  =  expr.nextChild();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  var  =  expr.nextChild();	  Node    var    =    expr.getFirstChild();    	non-compiled	[CE]  ')'  expected	31	None	replace
254	[BUG]  [BUGGY]  parent.replaceChild(n,  ref);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  ref);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  ref);	  parent.replaceChild(n,    var);    	non-compiled	[CE]  ')'  expected	19	None	replace
255	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.nextChild()).copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	48	None	replace
256	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY));  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  new  Node(Token.EMPTY));	  parent.removeChild(n);    	non-compiled	[CE]  ')'  expected	6	None	replace
257	[BUG]  [BUGGY]  Node  cond  =  expr.cloneTree();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  cond  =  expr.cloneTree();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  cond  =  expr.cloneTree();	  Node    cond    =    expr.getFirstChild();    	non-compiled	[CE]  ')'  expected	26	None	replace
258	[BUG]  [BUGGY]  Node  cond  =  expr.nextChild();  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  cond  =  expr.nextChild();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  cond  =  expr.nextChild();	  Node    cond    =    expr.getFirstChild();    	non-compiled	[CE]  ')'  expected	26	None	replace
259	[BUG]  [BUGGY]  n.removeChild(extr.getLastChild());  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.removeChild(extr.getLastChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.removeChild(extr.getLastChild());	  n.removeChild(parent.getLastChild());    	non-compiled	[CE]  ')'  expected	9	None	replace
260	[BUG]  [BUGGY]  parent.removeChild(alloc);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.removeChild(alloc);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.removeChild(alloc);	  parent.removeChild(assign);    	non-compiled	[CE]  ')'  expected	53	None	replace
261	[BUG]  [BUGGY]  NodeUtil.replaceChild(parent,  expr);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  NodeUtil.replaceChild(parent,  expr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	NodeUtil.replaceChild(parent,  expr);	  NodeUtil.removeChild(expr);    	non-compiled	[CE]  ')'  expected	24	None	replace
262	[BUG]  [BUGGY]  parent.replaceChild(n,  cond,  expr.cloneTree(),  this);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  cond,  expr.cloneTree(),  this);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  cond,  expr.cloneTree(),  this);	  parent.replaceChild(n,    cond,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	58	None	replace
263	[BUG]  [BUGGY]  parent.replaceChild(n,  Cond.OTHER  ||  cond.equals(expr.getLastChild()));  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  Cond.OTHER  ||  cond.equals(expr.getLastChild()));  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  Cond.OTHER  ||  cond.equals(expr.getLastChild()));	  parent.replaceChild(n,    Cond.OTHER);    	non-compiled	[CE]  ')'  expected	57	None	replace
264	[BUG]  [BUGGY]  parent.replaceChild(n,  Cond.OTHER  ||  cond.equals(expr.getFirstChild()));  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  Cond.OTHER  ||  cond.equals(expr.getFirstChild()));  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  Cond.OTHER  ||  cond.equals(expr.getFirstChild()));	  parent.replaceChild(n,    Cond.OTHER);    	non-compiled	[CE]  ')'  expected	57	None	replace
265	[BUG]  [BUGGY]  parent.replaceChild(n,  Cond.OTHER  ||  expr.getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  Cond.OTHER  ||  expr.getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  Cond.OTHER  ||  expr.getFirstChild().getType()  ==  Token.FUNCTION);	  parent.replaceChild(n,    Cond.OTHER);    	non-compiled	[CE]  ')'  expected	57	None	replace
266	[BUG]  [BUGGY]  parent.replaceChild(n,  cond,  expr.getParent());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  cond,  expr.getParent());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  cond,  expr.getParent());	  parent.replaceChild(n,    cond,    expr);    	non-compiled	[CE]  ')'  expected	21	None	replace
267	[BUG]  [BUGGY]  parent.replaceChild(n,  expr.getLastChild(),  Node.newString(Token.NAME));  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  expr.getLastChild(),  Node.newString(Token.NAME));  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  expr.getLastChild(),  Node.newString(Token.NAME));	  parent.replaceChild(n,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	12	None	replace
268	[BUG]  [BUGGY]  Node  expr  =  expr.nextChild();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  expr  =  expr.nextChild();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  expr  =  expr.nextChild();	  Node    expr    =    expr.getFirstChild();    	non-compiled	[CE]  ')'  expected	66	None	replace
269	[BUG]  [BUGGY]  Node  cond  =  expr.getLastChild().getNext();  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  cond  =  expr.getLastChild().getNext();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  cond  =  expr.getLastChild().getNext();	  Node    cond    =    expr.getLastChild();    	non-compiled	[CE]  ')'  expected	67	None	replace
270	[BUG]  [BUGGY]  n.removeChild(parent.getLastChild(),  cond);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.removeChild(parent.getLastChild(),  cond);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.removeChild(parent.getLastChild(),  cond);	  n.removeChild(expr.getLastChild(),    cond);    	non-compiled	[CE]  ')'  expected	10	None	replace
271	[BUG]  [BUGGY]  NodeUtil.removeChild(cond,  expr.getFirstChild(),  cond);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  NodeUtil.removeChild(cond,  expr.getFirstChild(),  cond);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	NodeUtil.removeChild(cond,  expr.getFirstChild(),  cond);	  NodeUtil.removeChild(cond,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	62	None	replace
272	[BUG]  [BUGGY]  parent.replaceChild(n,  n);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  n);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  n);	  parent.removeChild(cond);    	non-compiled	[CE]  ')'  expected	51	None	replace
273	[BUG]  [BUGGY]  n.replaceChild(parent,  new  Node(Token.NAME));  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.replaceChild(parent,  new  Node(Token.NAME));  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.replaceChild(parent,  new  Node(Token.NAME));	  n.replaceChild(cond,    new    Node(Token.NAME));    	non-compiled	[CE]  ')'  expected	37	None	replace
274	[BUG]  [BUGGY]  n.removeChild(const,  expr.getFirstChild());  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.removeChild(const,  expr.getFirstChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.removeChild(const,  expr.getFirstChild());	  n.removeChild(cond,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	44	None	replace
275	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  expr.getParent());  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  NodeUtil.removeChild(parent,  expr.getParent());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	NodeUtil.removeChild(parent,  expr.getParent());	  NodeUtil.removeChild(parent,    expr);    	non-compiled	[CE]  ')'  expected	15	None	replace
276	[BUG]  [BUGGY]  NodeUtil.copyInformationFrom(parent,  cond);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  NodeUtil.copyInformationFrom(parent,  cond);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	NodeUtil.copyInformationFrom(parent,  cond);	  NodeUtil.copyInformationFrom(parent,    expr);    	non-compiled	[CE]  ')'  expected	54	None	replace
277	[BUG]  [BUGGY]  n.replaceChild(expr,  cond);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.replaceChild(expr,  cond);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.replaceChild(expr,  cond);	  n.replaceChild(cond,    expr);    	non-compiled	[CE]  ')'  expected	39	None	replace
278	[BUG]  [BUGGY]  n.removeChild(const,  expr);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.removeChild(const,  expr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.removeChild(const,  expr);	  n.replaceChild(cond,    expr);    	non-compiled	[CE]  ')'  expected	39	None	replace
279	[BUG]  [BUGGY]  Node  parent  =  expr.removeParent();  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  parent  =  expr.removeParent();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  parent  =  expr.removeParent();	  Node    parent    =    expr.getParent();    	non-compiled	[CE]  ')'  expected	27	None	replace
280	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  AND_PRECEDENCE);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  AND_PRECEDENCE);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  AND_PRECEDENCE);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	46	None	replace
281	[BUG]  [BUGGY]  parent.replaceChild(n,  cond).replaceChild(n,  expr.removeFirstChild())  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  cond).replaceChild(n,  expr.removeFirstChild())  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  cond).replaceChild(n,  expr.removeFirstChild())	  parent.replaceChild(n,    cond)    	non-compiled	[CE]  ')'  expected	52	None	replace
282	[BUG]  [BUGGY]  parent.replaceChild(n,  cond).replaceChild(n,  expr.getLastChild())  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  cond).replaceChild(n,  expr.getLastChild())  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  cond).replaceChild(n,  expr.getLastChild())	  parent.replaceChild(n,    cond)    	non-compiled	[CE]  ')'  expected	52	None	replace
283	[BUG]  [BUGGY]  parent.replaceChild(n,  cond).replaceChild(n,  expr.removeFirstChild());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  cond).replaceChild(n,  expr.removeFirstChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  cond).replaceChild(n,  expr.removeFirstChild());	  parent.replaceChild(n,    cond)    	non-compiled	[CE]  ')'  expected	52	None	replace
284	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree());  parent.replaceChild(n,  assign);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree());  parent.replaceChild(n,  assign);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.cloneTree());  parent.replaceChild(n,  assign);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    parent.replaceChild(n,    assign);    	non-compiled	[CE]  ')'  expected	50	None	replace
285	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  elseOp);  parent.replaceChild(n,  assign);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  elseOp);  parent.replaceChild(n,  assign);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  elseOp);  parent.replaceChild(n,  assign);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    parent.replaceChild(n,    assign);    	non-compiled	[CE]  ')'  expected	50	None	replace
286	[BUG]  [BUGGY]  n.replaceChild(parent,  new  Node(Token.NAME,  cond));  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.replaceChild(parent,  new  Node(Token.NAME,  cond));  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.replaceChild(parent,  new  Node(Token.NAME,  cond));	  n.replaceChild(cond,    new    Node(Token.NAME,    cond));    	non-compiled	[CE]  ')'  expected	38	None	replace
287	[BUG]  [BUGGY]  n.replaceChild(expr,  new  Node(Token.NAME,  cond));  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.replaceChild(expr,  new  Node(Token.NAME,  cond));  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.replaceChild(expr,  new  Node(Token.NAME,  cond));	  n.replaceChild(cond,    new    Node(Token.NAME,    cond));    	non-compiled	[CE]  ')'  expected	38	None	replace
288	[BUG]  [BUGGY]  n.removeChild(const.getLastChild(),  expr);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.removeChild(const.getLastChild(),  expr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.removeChild(const.getLastChild(),  expr);	  n.removeChild(consd.getLastChild());    	non-compiled	[CE]  ')'  expected	64	None	replace
289	[BUG]  [BUGGY]  n.removeChildAfter(cond,  expr.cloneTree());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.removeChildAfter(cond,  expr.cloneTree());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.removeChildAfter(cond,  expr.cloneTree());	  n.removeChildAfter(cond);    	non-compiled	[CE]  ')'  expected	42	None	replace
290	[BUG]  [BUGGY]  n.replaceChild(expr.getFirstChild(),  cond);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.replaceChild(expr.getFirstChild(),  cond);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.replaceChild(expr.getFirstChild(),  cond);	  n.removeChild(cond.getFirstChild());    	non-compiled	[CE]  ')'  expected	32	None	replace
291	[BUG]  [BUGGY]  n.removeChild(cond.getString());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.removeChild(cond.getString());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.removeChild(cond.getString());	  n.removeChild(cond.getFirstChild());    	non-compiled	[CE]  ')'  expected	32	None	replace
292	[BUG]  [BUGGY]  Node  cond  =  expr.removeFirstChild(),  OR_PRECEDENCE;  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  cond  =  expr.removeFirstChild(),  OR_PRECEDENCE;  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  cond  =  expr.removeFirstChild(),  OR_PRECEDENCE;	  Node    cond    =    expr.removeFirstChild();    	non-compiled	[CE]  ')'  expected	65	None	replace
293	[BUG]  [BUGGY]  Node  cond  =  expr.removeFirstChild(),  n;  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  cond  =  expr.removeFirstChild(),  n;  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  cond  =  expr.removeFirstChild(),  n;	  Node    cond    =    expr.removeFirstChild();    	non-compiled	[CE]  ')'  expected	65	None	replace
294	[BUG]  [BUGGY]  Node  cond  =  expr.removeFirstChild(),  AND_PRECEDENCE;  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  cond  =  expr.removeFirstChild(),  AND_PRECEDENCE;  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  cond  =  expr.removeFirstChild(),  AND_PRECEDENCE;	  Node    cond    =    expr.removeFirstChild();    	non-compiled	[CE]  ')'  expected	65	None	replace
295	[BUG]  [BUGGY]  n.addChildAfter(cond,  expr.cloneTree());  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.addChildAfter(cond,  expr.cloneTree());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.addChildAfter(cond,  expr.cloneTree());	  n.addChildAfter(cond,    expr);    	non-compiled	[CE]  ')'  expected	55	None	replace
296	[BUG]  [BUGGY]  n.addChildAfter(cond,  expr.getFirstChild());  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.addChildAfter(cond,  expr.getFirstChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.addChildAfter(cond,  expr.getFirstChild());	  n.addChildAfter(cond,    expr);    	non-compiled	[CE]  ')'  expected	55	None	replace
297	[BUG]  [BUGGY]  n.addChildAfter(cond,  expr.removeFirstChild());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.addChildAfter(cond,  expr.removeFirstChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.addChildAfter(cond,  expr.removeFirstChild());	  n.addChildAfter(cond,    expr);    	non-compiled	[CE]  ')'  expected	55	None	replace
298	[BUG]  [BUGGY]  n.addChildAfter(cond,  expr.getLastChild());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.addChildAfter(cond,  expr.getLastChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.addChildAfter(cond,  expr.getLastChild());	  n.addChildAfter(cond,    expr);    	non-compiled	[CE]  ')'  expected	55	None	replace
299	[BUG]  [BUGGY]  parent.replaceChild(n,  assignImmutableSet,  false);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  assignImmutableSet,  false);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  assignImmutableSet,  false);	  parent.replaceChild(n,    assignImmutableSet);    	non-compiled	[CE]  ')'  expected	60	None	replace
300	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  returnNode);  parent.replaceChild(n,  newExpr);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  returnNode);  parent.replaceChild(n,  newExpr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  returnNode);  parent.replaceChild(n,  newExpr);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    parent.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	49	None	replace
301	[BUG]  [BUGGY]  parent.replaceChild(n,  cond,  returnNode);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  cond,  returnNode);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  cond,  returnNode);	  parent.replaceChild(n,    cond,    newExpr);    	non-compiled	[CE]  ')'  expected	23	None	replace
302	[BUG]  [BUGGY]  parent.replaceChild(n,  expr.getLastChild()  -  1);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  expr.getLastChild()  -  1);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  expr.getLastChild()  -  1);	  parent.replaceChild(n,    cond    -    1);    	non-compiled	[CE]  ')'  expected	22	None	replace
303	[BUG]  [BUGGY]  parent.replaceChild(n,  cond,  expr.getLastChild(),  AND_PRECEDENCE);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  cond,  expr.getLastChild(),  AND_PRECEDENCE);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  cond,  expr.getLastChild(),  AND_PRECEDENCE);	  parent.replaceChild(n,    cond,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	56	None	replace
304	[BUG]  [BUGGY]  parent.replaceChild(n,  cond,  expr.getLastChild(),  OR_PRECEDENCE);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  cond,  expr.getLastChild(),  OR_PRECEDENCE);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  cond,  expr.getLastChild(),  OR_PRECEDENCE);	  parent.replaceChild(n,    cond,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	56	None	replace
305	[BUG]  [BUGGY]  Node  cond  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  AND_PRECEDENCE);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  cond  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  AND_PRECEDENCE);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  cond  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  AND_PRECEDENCE);	  Node    cond    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	47	None	replace
306	[BUG]  [BUGGY]  parent.replaceChild(n,  Cond.OTHER  ||  expr.getFirstChild().getString().equals( "__ "));  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  Cond.OTHER  ||  expr.getFirstChild().getString().equals( "__ "));  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  Cond.OTHER  ||  expr.getFirstChild().getString().equals( "__ "));	  parent.replaceChild(n,    Cond.OTHER);    	non-compiled	[CE]  ')'  expected	57	None	replace
307	[BUG]  [BUGGY]  parent.replaceChild(n,  Cond.OTHER  ||  expr.getFirstChild().getType()  ==  Token.VAR);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  Cond.OTHER  ||  expr.getFirstChild().getType()  ==  Token.VAR);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  Cond.OTHER  ||  expr.getFirstChild().getType()  ==  Token.VAR);	  parent.replaceChild(n,    Cond.OTHER);    	non-compiled	[CE]  	57	None	replace
308	[BUG]  [BUGGY]  parent.replaceChild(n,  cond,  expr.getLastChild(),  ref);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  cond,  expr.getLastChild(),  ref);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  cond,  expr.getLastChild(),  ref);	  parent.replaceChild(n,    cond,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	56	None	replace
309	[BUG]  [BUGGY]  parent.replaceChild(n,  cond,  expr.getLastChild(),  this);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  cond,  expr.getLastChild(),  this);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  cond,  expr.getLastChild(),  this);	  parent.replaceChild(n,    cond,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	56	None	replace
310	[BUG]  [BUGGY]  n.replaceChild(cond,  newExpr);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.replaceChild(cond,  newExpr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.replaceChild(cond,  newExpr);	  n.addChildToFront(newExpr);    	non-compiled	[CE]  ')'  expected	4	None	replace
311	[BUG]  [BUGGY]  NodeUtil.removeChild(cond,  expr.removeFirstChild());  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  NodeUtil.removeChild(cond,  expr.removeFirstChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	NodeUtil.removeChild(cond,  expr.removeFirstChild());	  NodeUtil.removeChild(cond,    expr);    	non-compiled	[CE]  ')'  expected	16	None	replace
312	[BUG]  [BUGGY]  n.removeChild(cond,  expr.cloneTree());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.removeChild(cond,  expr.cloneTree());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.removeChild(cond,  expr.cloneTree());	  n.removeChild(cond,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	34	None	replace
313	[BUG]  [BUGGY]  n.removeChild(cond,  expr.getParent());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.removeChild(cond,  expr.getParent());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.removeChild(cond,  expr.getParent());	  n.removeChild(cond,    expr.getFirstChild());    	non-compiled	[CE]  	34	None	replace
314	[BUG]  [BUGGY]  Node  cond  =  expr.removeFirstChild(),  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  cond  =  expr.removeFirstChild(),  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE));  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  cond  =  expr.removeFirstChild(),  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE));	  Node    cond    =    expr.removeFirstChild();    	non-compiled	[CE]  	65	None	replace
315	[BUG]  [BUGGY]  parent.replaceChild(n,  assignName,  expr.cloneTree());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  assignName,  expr.cloneTree());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  assignName,  expr.cloneTree());	  parent.replaceChild(n,    assignName);    	non-compiled	[CE]  	18	None	replace
316	[BUG]  [BUGGY]  parent.replaceChild(n,  assignName,  expr.getLastChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  assignName,  expr.getLastChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  assignName,  expr.getLastChild());	  parent.replaceChild(n,    assignName);    	non-compiled	[CE]  	18	None	replace
317	[BUG]  [BUGGY]  parent.replaceChild(n,  assignment,  expr.cloneTree());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  assignment,  expr.cloneTree());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  assignment,  expr.cloneTree());	  parent.replaceChild(n,    assignment);    	non-compiled	[CE]  ')'  expected	61	None	replace
318	[BUG]  [BUGGY]  n.replaceChild(cond,  new  Node(Token.NAME,  cond),  expr.getLastChild());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.replaceChild(cond,  new  Node(Token.NAME,  cond),  expr.getLastChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.replaceChild(cond,  new  Node(Token.NAME,  cond),  expr.getLastChild());	  n.replaceChild(cond,    new    Node(Token.NAME,    cond));    	non-compiled	[CE]  ')'  expected	38	None	replace
319	[BUG]  [BUGGY]  n.replaceChild(cond,  new  Node(Token.NAME,  cond),  expr.getFirstChild());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.replaceChild(cond,  new  Node(Token.NAME,  cond),  expr.getFirstChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.replaceChild(cond,  new  Node(Token.NAME,  cond),  expr.getFirstChild());	  n.replaceChild(cond,    new    Node(Token.NAME,    cond));    	non-compiled	[CE]  ')'  expected	38	None	replace
320	[BUG]  [BUGGY]  n.replaceChild(cond,  new  Node(Token.NAME,  cond),  expr.cloneTree());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.replaceChild(cond,  new  Node(Token.NAME,  cond),  expr.cloneTree());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.replaceChild(cond,  new  Node(Token.NAME,  cond),  expr.cloneTree());	  n.replaceChild(cond,    new    Node(Token.NAME,    cond));    	non-compiled	[CE]  ')'  expected	38	None	replace
321	[BUG]  [BUGGY]  n.replaceChild(cond,  new  Node(Token.NAME,  cond),  expr.clone());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.replaceChild(cond,  new  Node(Token.NAME,  cond),  expr.clone());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.replaceChild(cond,  new  Node(Token.NAME,  cond),  expr.clone());	  n.replaceChild(cond,    new    Node(Token.NAME,    cond));    	non-compiled	[CE]  ')'  expected	38	None	replace
322	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr  =  NodeUtil.newExpr(cond));  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  newExpr  =  NodeUtil.newExpr(cond));  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  newExpr  =  NodeUtil.newExpr(cond));	  parent.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	20	None	replace
323	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr).replaceChild(cond,  expr);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  newExpr).replaceChild(cond,  expr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  newExpr).replaceChild(cond,  expr);	  parent.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	20	None	replace
324	[BUG]  [BUGGY]  n.addChildBefore(cond,  expr);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.addChildBefore(cond,  expr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.addChildBefore(cond,  expr);	  n.addChildAfter(cond,    expr);    	non-compiled	[CE]  ')'  expected	55	None	replace
325	[BUG]  [BUGGY]  n.replaceChild(cond,  expr.removeFirstChild());  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.replaceChild(cond,  expr.removeFirstChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.replaceChild(cond,  expr.removeFirstChild());	  n.replaceChild(cond,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	40	None	replace
326	[BUG]  [BUGGY]  n.replaceChild(cond,  expr.getParent());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.replaceChild(cond,  expr.getParent());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.replaceChild(cond,  expr.getParent());	  n.replaceChild(cond,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	40	None	replace
327	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.NAME,  cond));  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  new  Node(Token.NAME,  cond));  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  new  Node(Token.NAME,  cond));	  parent.removeChild(n);    	non-compiled	[CE]  ')'  expected	6	None	replace
328	[BUG]  [BUGGY]  n.replaceChild(cond,  new  Node(Token.NAME,  expr.copyInformationFrom(n)));  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.replaceChild(cond,  new  Node(Token.NAME,  expr.copyInformationFrom(n)));  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.replaceChild(cond,  new  Node(Token.NAME,  expr.copyInformationFrom(n)));	  n.replaceChild(cond,    new    Node(Token.NAME));    	non-compiled	[CE]  ')'  expected	37	None	replace
329	[BUG]  [BUGGY]  n.removeChildBefore(cond);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.removeChildBefore(cond);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.removeChildBefore(cond);	  n.removeChildAfter(cond);    	non-compiled	[CE]  ')'  expected	42	None	replace
330	[BUG]  [BUGGY]  Node  expr  =  expr.cloneTree();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  expr  =  expr.cloneTree();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  expr  =  expr.cloneTree();	  Node    expr    =    expr.getFirstChild();    	non-compiled	[CE]  ')'  expected	66	None	replace
331	[BUG]  [BUGGY]  parent.replaceChild(n,  assignImmutableSet,  expr.cloneTree());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  assignImmutableSet,  expr.cloneTree());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  assignImmutableSet,  expr.cloneTree());	  parent.replaceChild(n,    assignImmutableSet);    	non-compiled	[CE]  ')'  expected	60	None	replace
332	[BUG]  [BUGGY]  parent.replaceChild(n,  assignImmutableSet,  expr.getLastChild());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  assignImmutableSet,  expr.getLastChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  assignImmutableSet,  expr.getLastChild());	  parent.replaceChild(n,    assignImmutableSet);    	non-compiled	[CE]  ')'  expected	60	None	replace
333	[BUG]  [BUGGY]  parent.replaceChild(n,  cond,  expr.removeLastChild());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  cond,  expr.removeLastChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  cond,  expr.removeLastChild());	  parent.replaceChild(n,    cond,    expr);    	non-compiled	[CE]  ')'  expected	21	None	replace
334	[BUG]  [BUGGY]  parent.replaceChild(n,  cond,  expr.cloneTree(),  ref);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  cond,  expr.cloneTree(),  ref);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  cond,  expr.cloneTree(),  ref);	  parent.replaceChild(n,    cond,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	58	None	replace
335	[BUG]  [BUGGY]  parent.replaceChild(n,  cond,  expr.cloneTree(),  new  Node(Token.NAME));  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  cond,  expr.cloneTree(),  new  Node(Token.NAME));  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  cond,  expr.cloneTree(),  new  Node(Token.NAME));	  parent.replaceChild(n,    cond,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	58	None	replace
336	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	NodeUtil.redeclareVarsInsideBranch(n);	  NodeUtil.removeChild(expr);    	non-compiled	[CE]  ')'  expected	24	None	replace
337	[BUG]  [BUGGY]  n.replaceChild(cond,  assignName);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.replaceChild(cond,  assignName);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.replaceChild(cond,  assignName);	  n.replaceChild(cond,    assign);    	non-compiled	[CE]  ')'  expected	43	None	replace
338	[BUG]  [BUGGY]  n.addChildToFront(expr.getFirstChild());  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.addChildToFront(expr.getFirstChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.addChildToFront(expr.getFirstChild());	  n.removeChild(cond.getFirstChild());    	non-compiled	[CE]  ')'  expected	32	None	replace
339	[BUG]  [BUGGY]  parent.replaceChild(n,  assign,  expr.removeFirstChild());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  assign,  expr.removeFirstChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  assign,  expr.removeFirstChild());	  parent.replaceChild(n,    assign,    expr);    	non-compiled	[CE]  ')'  expected	17	None	replace
340	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  assignName);  parent.replaceChild(n,  assign);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  assignName);  parent.replaceChild(n,  assign);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  assignName);  parent.replaceChild(n,  assign);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    parent.replaceChild(n,    assign);    	non-compiled	[CE]  ')'  expected	50	None	replace
341	[BUG]  [BUGGY]  n.removeChildToBack();  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.removeChildToBack();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.removeChildToBack();	  n.removeChildToBack(cond);    	non-compiled	[CE]  ')'  expected	41	None	replace
342	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.NAME,  expr.getFirstChild()));  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  new  Node(Token.NAME,  expr.getFirstChild()));  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  new  Node(Token.NAME,  expr.getFirstChild()));	  parent.replaceChild(n,    var);    	non-compiled	[CE]  ')'  expected	19	None	replace
343	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.NAME,  expr.getLastChild()));  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  new  Node(Token.NAME,  expr.getLastChild()));  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  new  Node(Token.NAME,  expr.getLastChild()));	  parent.replaceChild(n,    var);    	non-compiled	[CE]  ')'  expected	19	None	replace
344	[BUG]  [BUGGY]  Node  parent  =  expr.cloneTree();  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  parent  =  expr.cloneTree();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  parent  =  expr.cloneTree();	  Node    parent    =    expr.getParent();    	non-compiled	[CE]  ')'  expected	27	None	replace
345	[BUG]  [BUGGY]  parent.replaceChild(n,  expr.removeLastChild());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  expr.removeLastChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  expr.removeLastChild());	  parent.replaceChild(n,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	33	None	replace
346	[BUG]  [BUGGY]  parent.replaceChild(n,  expr.getFirstChild(),  cond);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  expr.getFirstChild(),  cond);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  expr.getFirstChild(),  cond);	  parent.replaceChild(n,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	33	None	replace
347	[BUG]  [BUGGY]  NodeUtil.copyInformationFrom(parent,  expr,  n);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  NodeUtil.copyInformationFrom(parent,  expr,  n);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	NodeUtil.copyInformationFrom(parent,  expr,  n);	  NodeUtil.copyInformationFrom(parent,    expr);    	non-compiled	[CE]  ')'  expected	54	None	replace
348	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()),  expr.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()),  expr.copyInformationFrom(n);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()),  expr.copyInformationFrom(n);	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	48	None	replace
349	[BUG]  [BUGGY]  parent.replaceChild(n,  expr.replaceChild(n,  cond  -  1));  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  expr.replaceChild(n,  cond  -  1));  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  expr.replaceChild(n,  cond  -  1));	  parent.replaceChild(n,    cond    -    1);    	non-compiled	[CE]  ')'  expected	22	None	replace
350	[BUG]  [BUGGY]  parent.replaceChild(n,  expr.replaceChild(n,  cond)-  1);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  expr.replaceChild(n,  cond)-  1);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  expr.replaceChild(n,  cond)-  1);	  parent.replaceChild(n,    cond    -    1);    	non-compiled	[CE]  ')'  expected	22	None	replace
351	[BUG]  [BUGGY]  parent.replaceChild(n,  expr.replaceFirst(n,  cond)-  1);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  expr.replaceFirst(n,  cond)-  1);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  expr.replaceFirst(n,  cond)-  1);	  parent.replaceChild(n,    cond    -    1);    	non-compiled	[CE]  ')'  expected	22	None	replace
352	[BUG]  [BUGGY]  parent.replaceChild(n,  expr.replaceChild(n,  cond));  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  parent.replaceChild(n,  expr.replaceChild(n,  cond));  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	parent.replaceChild(n,  expr.replaceChild(n,  cond));	  parent.replaceChild(n,    cond    -    1);    	non-compiled	[CE]  ')'  expected	22	None	replace
353	[BUG]  [BUGGY]  Node  assign  =  expr.cloneTree();  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  assign  =  expr.cloneTree();  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  assign  =  expr.cloneTree();	  Node    assign    =    expr.getLastChild();    	non-compiled	[CE]  ')'  expected	28	None	replace
354	[BUG]  [BUGGY]  n.removeChild(pr.getFirstChild());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.removeChild(pr.getFirstChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.removeChild(pr.getFirstChild());	  n.removeChild(parent.getFirstChild());    	non-compiled	[CE]  ')'  expected	35	None	replace
355	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  expr.getFirstChild(),  expr);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  NodeUtil.removeChild(parent,  expr.getFirstChild(),  expr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	NodeUtil.removeChild(parent,  expr.getFirstChild(),  expr);	  NodeUtil.removeChild(parent,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	63	None	replace
356	[BUG]  [BUGGY]  n.replaceChild(cond,  expr.removeLastChild());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.replaceChild(cond,  expr.removeLastChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.replaceChild(cond,  expr.removeLastChild());	  n.replaceChild(cond,    expr);    	non-compiled	[CE]  ')'  expected	39	None	replace
357	[BUG]  [BUGGY]  n.removeChild(cond.getLastChild(),  expr.getLastChild());  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  n.removeChild(cond.getLastChild(),  expr.getLastChild());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	n.removeChild(cond.getLastChild(),  expr.getLastChild());	  n.removeChild(consd.getLastChild());    	non-compiled	[CE]  ')'  expected	64	None	replace
358	[BUG]  [BUGGY]  Node  cond  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.cloneTree());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  cond  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.cloneTree());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  cond  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.cloneTree());	  Node    cond    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	47	None	replace
359	[BUG]  [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.cloneTree());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.cloneTree());  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.cloneTree());	  Node    and    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	46	None	replace
360	[BUG]  [BUGGY]  NodeUtil.removeChild(cond,  expr.getFirstChild(),  expr);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }      [BUGGY]  NodeUtil.removeChild(cond,  expr.getFirstChild(),  expr);  [BUGGY]      Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	309	309	1	replace	NodeUtil.removeChild(cond,  expr.getFirstChild(),  expr);	  NodeUtil.removeChild(cond,    expr.getFirstChild());    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
