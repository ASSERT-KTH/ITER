bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(right)||  NodeUtil.mayHaveSideEffects(rightVal))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(right)||  NodeUtil.mayHaveSideEffects(rightVal))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(right)||  NodeUtil.mayHaveSideEffects(rightVal))  {	  if(NodeUtil.mayHaveSideEffects(left)||    NodeUtil.mayHaveSideEffects(rightVal))    {    	non-compiled	[CE]  	36	None	replace
2	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(rightVal))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(rightVal))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(rightVal))  {	  if(NodeUtil.mayHaveSideEffects(left)||    NodeUtil.mayHaveSideEffects(rightVal))    {    	non-compiled	[CE]  	36	None	replace
3	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.mayHaveSideEffects(nVal))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.mayHaveSideEffects(nVal))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.mayHaveSideEffects(nVal))  {	  if(NodeUtil.mayHaveSideEffects(left)||    NodeUtil.mayHaveSideEffects(rightVal))    {    	non-compiled	[CE]  	36	None	replace
4	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(right)&&  NodeUtil.mayHaveSideEffects(rightVal))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(right)&&  NodeUtil.mayHaveSideEffects(rightVal))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(right)&&  NodeUtil.mayHaveSideEffects(rightVal))  {	  if(NodeUtil.mayHaveSideEffects(left)||    NodeUtil.mayHaveSideEffects(rightVal))    {    	non-compiled	[CE]  	36	None	replace
5	[BUG]  [BUGGY]  if(!NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.mayHaveSideEffects(rightVal))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(!NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.mayHaveSideEffects(rightVal))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(!NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.mayHaveSideEffects(rightVal))  {	  if(NodeUtil.mayHaveSideEffects(left)||    NodeUtil.mayHaveSideEffects(rightVal))    {    	non-compiled	[CE]  	36	None	replace
6	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)||  rightVal.isLowerBound())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)||  rightVal.isLowerBound())  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)||  rightVal.isLowerBound())  {	  if(NodeUtil.mayHaveSideEffects(left)&&    rightVal.isLowerBound())    {    	non-compiled	[CE]  	45	None	replace
7	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(n)&&  rightVal.isLowerBound())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(n)&&  rightVal.isLowerBound())  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(n)&&  rightVal.isLowerBound())  {	  if(NodeUtil.mayHaveSideEffects(left)&&    rightVal.isLowerBound())    {    	non-compiled	[CE]  	45	None	replace
8	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(rightVal)&&  rightVal.isLowerBound())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(rightVal)&&  rightVal.isLowerBound())  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(rightVal)&&  rightVal.isLowerBound())  {	  if(NodeUtil.mayHaveSideEffects(left)&&    rightVal.isLowerBound())    {    	non-compiled	[CE]  	45	None	replace
9	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(right)&&  rightVal.isLowerBound())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(right)&&  rightVal.isLowerBound())  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(right)&&  rightVal.isLowerBound())  {	  if(NodeUtil.mayHaveSideEffects(left)&&    rightVal.isLowerBound())    {    	non-compiled	[CE]  	45	None	replace
10	[BUG]  [BUGGY]  if(!NodeUtil.mayHaveSideEffects(left)&&  rightVal.isLowerBound())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(!NodeUtil.mayHaveSideEffects(left)&&  rightVal.isLowerBound())  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(!NodeUtil.mayHaveSideEffects(left)&&  rightVal.isLowerBound())  {	  if(NodeUtil.mayHaveSideEffects(left)&&    rightVal.isLowerBound())    {    	non-compiled	[CE]  	45	None	replace
11	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  rightVal.toBoolean(true))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  rightVal.toBoolean(true))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  rightVal.toBoolean(true))  {	  if(NodeUtil.mayHaveSideEffects(left)&&    rightVal.isLowerBound())    {    	non-compiled	[CE]  	45	None	replace
12	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(left)||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayEffectMutableState(left)||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(left)||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayEffectMutableState(left)&&    NodeUtil.getBooleanValue(rightVal)    ==    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	9	None	replace
13	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(leftVal)&&  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayEffectMutableState(leftVal)&&  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(leftVal)&&  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayEffectMutableState(left)&&    NodeUtil.getBooleanValue(rightVal)    ==    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	9	None	replace
14	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getAssignedValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getAssignedValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getAssignedValue(rightVal)  ==  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayEffectMutableState(left)&&    NodeUtil.getBooleanValue(rightVal)    ==    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	9	None	replace
15	[BUG]  [BUGGY]  Node  leftParent  =  rightVal.getNext();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  leftParent  =  rightVal.getNext();  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  leftParent  =  rightVal.getNext();	  Node    leftParent    =    rightVal.getParent();    	non-compiled	[CE]  	18	None	replace
16	[BUG]  [BUGGY]  Node  leftParent  =  rightVal.getLastChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  leftParent  =  rightVal.getLastChild();  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  leftParent  =  rightVal.getLastChild();	  Node    leftParent    =    rightVal.getParent();    	non-compiled	[CE]  	18	None	replace
17	[BUG]  [BUGGY]  Node  leftParent  =  rightVal.getFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  leftParent  =  rightVal.getFirstChild();  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  leftParent  =  rightVal.getFirstChild();	  Node    leftParent    =    rightVal.getParent();    	non-compiled	[CE]  	18	None	replace
18	[BUG]  [BUGGY]  Node  leftParent  =  rightVal.toString();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  leftParent  =  rightVal.toString();  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  leftParent  =  rightVal.toString();	  Node    leftParent    =    rightVal.getParent();    	non-compiled	[CE]  	18	None	replace
19	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getConditionalValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getConditionalValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getConditionalValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getConditionalValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	52	None	replace
20	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getConditionalValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getConditionalValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getConditionalValue(rightVal)  ==  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getConditionalValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	52	None	replace
21	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(n)&&  NodeUtil.getConditionalValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(n)&&  NodeUtil.getConditionalValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(n)&&  NodeUtil.getConditionalValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getConditionalValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	52	None	replace
22	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(right)&&  NodeUtil.getConditionalValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(right)&&  NodeUtil.getConditionalValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(right)&&  NodeUtil.getConditionalValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getConditionalValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	52	None	replace
23	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getConditionalValue(nVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getConditionalValue(nVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getConditionalValue(nVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getConditionalValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	52	None	replace
24	[BUG]  [BUGGY]  if(!NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getConditionalValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(!NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getConditionalValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(!NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getConditionalValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getConditionalValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	52	None	replace
25	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  rightVal  ==  null)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  rightVal  ==  null)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  rightVal  ==  null)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    rightVal!=    null)    {    	non-compiled	[CE]  	38	None	replace
26	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)||  rightVal!=  null)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)||  rightVal!=  null)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)||  rightVal!=  null)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    rightVal!=    null)    {    	non-compiled	[CE]  	38	None	replace
27	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(n)&&  rightVal!=  null)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(n)&&  rightVal!=  null)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(n)&&  rightVal!=  null)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    rightVal!=    null)    {    	non-compiled	[CE]  	38	None	replace
28	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(rightVal)&&  rightVal!=  null)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(rightVal)&&  rightVal!=  null)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(rightVal)&&  rightVal!=  null)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    rightVal!=    null)    {    	non-compiled	[CE]  	38	None	replace
29	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(right)&&  rightVal!=  null)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(right)&&  rightVal!=  null)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(right)&&  rightVal!=  null)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    rightVal!=    null)    {    	non-compiled	[CE]  	38	None	replace
30	[BUG]  [BUGGY]  if(!NodeUtil.mayHaveSideEffects(left)&&  rightVal!=  null)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(!NodeUtil.mayHaveSideEffects(left)&&  rightVal!=  null)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(!NodeUtil.mayHaveSideEffects(left)&&  rightVal!=  null)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    rightVal!=    null)    {    	non-compiled	[CE]  	38	None	replace
31	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(left)||  NodeUtil.getAssignedValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayEffectMutableState(left)||  NodeUtil.getAssignedValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(left)||  NodeUtil.getAssignedValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayEffectMutableState(left)&&    NodeUtil.getAssignedValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	47	None	replace
32	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(n)&&  NodeUtil.getAssignedValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayEffectMutableState(n)&&  NodeUtil.getAssignedValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(n)&&  NodeUtil.getAssignedValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayEffectMutableState(left)&&    NodeUtil.getAssignedValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	47	None	replace
33	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(leftVal)&&  NodeUtil.getAssignedValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayEffectMutableState(leftVal)&&  NodeUtil.getAssignedValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(leftVal)&&  NodeUtil.getAssignedValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayEffectMutableState(left)&&    NodeUtil.getAssignedValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	47	None	replace
34	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getAssignedValue(nVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getAssignedValue(nVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getAssignedValue(nVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayEffectMutableState(left)&&    NodeUtil.getAssignedValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	47	None	replace
35	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getOwnerValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getOwnerValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getOwnerValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getOwnerValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	6	None	replace
36	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getOwnerValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getOwnerValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getOwnerValue(rightVal)  ==  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getOwnerValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	6	None	replace
37	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(n)&&  NodeUtil.getOwnerValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(n)&&  NodeUtil.getOwnerValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(n)&&  NodeUtil.getOwnerValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getOwnerValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	6	None	replace
38	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(right)&&  NodeUtil.getOwnerValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(right)&&  NodeUtil.getOwnerValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(right)&&  NodeUtil.getOwnerValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getOwnerValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	6	None	replace
39	[BUG]  [BUGGY]  if(!NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getOwnerValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(!NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getOwnerValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(!NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getOwnerValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getOwnerValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	6	None	replace
40	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getOwnerValue(nVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getOwnerValue(nVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getOwnerValue(nVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getOwnerValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	6	None	replace
41	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(n)&&  NodeUtil.mayHaveSideEffects(rightVal))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(n)&&  NodeUtil.mayHaveSideEffects(rightVal))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(n)&&  NodeUtil.mayHaveSideEffects(rightVal))  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.mayHaveSideEffects(rightVal))    {    	non-compiled	[CE]  	37	None	replace
42	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.mayHaveSideEffects(nVal))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.mayHaveSideEffects(nVal))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.mayHaveSideEffects(nVal))  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.mayHaveSideEffects(rightVal))    {    	non-compiled	[CE]  	37	None	replace
43	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(rightVal)&&  NodeUtil.mayHaveSideEffects(rightVal))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(rightVal)&&  NodeUtil.mayHaveSideEffects(rightVal))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(rightVal)&&  NodeUtil.mayHaveSideEffects(rightVal))  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.mayHaveSideEffects(rightVal))    {    	non-compiled	[CE]  	37	None	replace
44	[BUG]  [BUGGY]  Node  n  =  rightVal.getLastChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  n  =  rightVal.getLastChild();  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  n  =  rightVal.getLastChild();	  Node    n    =    rightVal.getFirstChild();    	non-compiled	[CE]  	49	None	replace
45	[BUG]  [BUGGY]  Node  n  =  leftVal.getFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  n  =  leftVal.getFirstChild();  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  n  =  leftVal.getFirstChild();	  Node    n    =    rightVal.getFirstChild();    	non-compiled	[CE]  	49	None	replace
46	[BUG]  [BUGGY]  Node  n  =  rightVal.removeFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  n  =  rightVal.removeFirstChild();  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  n  =  rightVal.removeFirstChild();	  Node    n    =    rightVal.getFirstChild();    	non-compiled	[CE]  	49	None	replace
47	[BUG]  [BUGGY]  Node  n  =  left.getFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  n  =  left.getFirstChild();  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  n  =  left.getFirstChild();	  Node    n    =    rightVal.getFirstChild();    	non-compiled	[CE]  	49	None	replace
48	[BUG]  [BUGGY]  Node  n  =  rightVal.getType();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  n  =  rightVal.getType();  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  n  =  rightVal.getType();	  Node    n    =    rightVal.getFirstChild();    	non-compiled	[CE]  	49	None	replace
49	[BUG]  [BUGGY]  Node  leftParent  =  rightVal.removeLastChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  leftParent  =  rightVal.removeLastChild();  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  leftParent  =  rightVal.removeLastChild();	  Node    leftParent    =    rightVal.removeFirstChild();    	non-compiled	[CE]  	21	None	replace
50	[BUG]  [BUGGY]  Node  leftParent  =  rightVal.replaceChild(n,  left);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  leftParent  =  rightVal.replaceChild(n,  left);  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  leftParent  =  rightVal.replaceChild(n,  left);	  Node    leftParent    =    rightVal.removeFirstChild();    	non-compiled	[CE]  	21	None	replace
51	[BUG]  [BUGGY]  if(NodeUtil.getBooleanValue(leftVal)  ==  TernaryValue.UNKNOWN  ||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.getBooleanValue(leftVal)  ==  TernaryValue.UNKNOWN  ||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.getBooleanValue(leftVal)  ==  TernaryValue.UNKNOWN  ||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {	  if(NodeUtil.getBooleanValue(rightVal)    ==    TernaryValue.UNKNOWN    ||    NodeUtil.getBooleanValue(rightVal)    ==    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	44	None	replace
52	[BUG]  [BUGGY]  if(NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN  &&  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN  &&  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN  &&  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {	  if(NodeUtil.getBooleanValue(rightVal)    ==    TernaryValue.UNKNOWN    ||    NodeUtil.getBooleanValue(rightVal)    ==    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	44	None	replace
53	[BUG]  [BUGGY]  if(NodeUtil.getBooleanValue(nVal)  ==  TernaryValue.UNKNOWN  ||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.getBooleanValue(nVal)  ==  TernaryValue.UNKNOWN  ||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.getBooleanValue(nVal)  ==  TernaryValue.UNKNOWN  ||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {	  if(NodeUtil.getBooleanValue(rightVal)    ==    TernaryValue.UNKNOWN    ||    NodeUtil.getBooleanValue(rightVal)    ==    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	44	None	replace
54	[BUG]  [BUGGY]  if(NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN  ||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN  ||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN  ||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {	  if(NodeUtil.getBooleanValue(rightVal)    ==    TernaryValue.UNKNOWN    ||    NodeUtil.getBooleanValue(rightVal)    ==    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	44	None	replace
55	[BUG]  [BUGGY]  if(NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN  &&  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN  &&  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN  &&  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {	  if(NodeUtil.getBooleanValue(rightVal)    ==    TernaryValue.UNKNOWN    ||    NodeUtil.getBooleanValue(rightVal)    ==    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	44	None	replace
56	[BUG]  [BUGGY]  if(NodeUtil.getBooleanValue(left)  ==  TernaryValue.UNKNOWN  ||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.getBooleanValue(left)  ==  TernaryValue.UNKNOWN  ||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.getBooleanValue(left)  ==  TernaryValue.UNKNOWN  ||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {	  if(NodeUtil.getBooleanValue(rightVal)    ==    TernaryValue.UNKNOWN    ||    NodeUtil.getBooleanValue(rightVal)    ==    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	44	None	replace
57	[BUG]  [BUGGY]  Node  left  =  rightVal.toBoolean(false);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  left  =  rightVal.toBoolean(false);  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  left  =  rightVal.toBoolean(false);	  Node    left    =    rightVal.toBoolean(true);    	non-compiled	[CE]  	19	None	replace
58	[BUG]  [BUGGY]  Node  left  =  n.toBoolean(true);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  left  =  n.toBoolean(true);  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  left  =  n.toBoolean(true);	  Node    left    =    rightVal.toBoolean(true);    	non-compiled	[CE]  	19	None	replace
59	[BUG]  [BUGGY]  Node  left  =  nVal.toBoolean(true);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  left  =  nVal.toBoolean(true);  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  left  =  nVal.toBoolean(true);	  Node    left    =    rightVal.toBoolean(true);    	non-compiled	[CE]  	19	None	replace
60	[BUG]  [BUGGY]  Node  left  =  rightParent.toBoolean(true);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  left  =  rightParent.toBoolean(true);  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  left  =  rightParent.toBoolean(true);	  Node    left    =    rightVal.toBoolean(true);    	non-compiled	[CE]  	19	None	replace
61	[BUG]  [BUGGY]  Node  left  =  wrongVal.toBoolean(false);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  left  =  wrongVal.toBoolean(false);  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  left  =  wrongVal.toBoolean(false);	  Node    left    =    rightVal.toBoolean(true);    	non-compiled	[CE]  	19	None	replace
62	[BUG]  [BUGGY]  Node  left  =  node.toBoolean(true);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  left  =  node.toBoolean(true);  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  left  =  node.toBoolean(true);	  Node    left    =    rightVal.toBoolean(true);    	non-compiled	[CE]  	19	None	replace
63	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(n)||  NodeUtil.getBooleanValue(nVal)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(n)||  NodeUtil.getBooleanValue(nVal)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(n)||  NodeUtil.getBooleanValue(nVal)  ==  TernaryValue.UNKNOWN)  {	  if    (NodeUtil.getBooleanValue(nVal)    ==    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	26	None	replace
64	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(n)&&  NodeUtil.getBooleanValue(nVal)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(n)&&  NodeUtil.getBooleanValue(nVal)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(n)&&  NodeUtil.getBooleanValue(nVal)  ==  TernaryValue.UNKNOWN)  {	  if    (NodeUtil.getBooleanValue(nVal)    ==    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	26	None	replace
65	[BUG]  [BUGGY]  Node  rightParent  =  rightVal.getNext();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  rightParent  =  rightVal.getNext();  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  rightParent  =  rightVal.getNext();	  Node    rightParent    =    rightVal.getParent();    	non-compiled	[CE]  	23	None	replace
66	[BUG]  [BUGGY]  Node  rightParent  =  rightVal.getLastChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  rightParent  =  rightVal.getLastChild();  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  rightParent  =  rightVal.getLastChild();	  Node    rightParent    =    rightVal.getParent();    	non-compiled	[CE]  	23	None	replace
67	[BUG]  [BUGGY]  Node  rightParent  =  leftVal.getParent();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  rightParent  =  leftVal.getParent();  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  rightParent  =  leftVal.getParent();	  Node    rightParent    =    rightVal.getParent();    	non-compiled	[CE]  	23	None	replace
68	[BUG]  [BUGGY]  Node  rightParent  =  rightVal.cloneTree();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  rightParent  =  rightVal.cloneTree();  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  rightParent  =  rightVal.cloneTree();	  Node    rightParent    =    rightVal.getParent();    	non-compiled	[CE]  	23	None	replace
69	[BUG]  [BUGGY]  Node  rightParent  =  rightVal.removeFirstChild();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  rightParent  =  rightVal.removeFirstChild();  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  rightParent  =  rightVal.removeFirstChild();	  Node    rightParent    =    rightVal.getParent();    	non-compiled	[CE]  	23	None	replace
70	[BUG]  [BUGGY]  Node  rightParent  =  rightVal.getFirstChild();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  rightParent  =  rightVal.getFirstChild();  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  rightParent  =  rightVal.getFirstChild();	  Node    rightParent    =    rightVal.getParent();    	non-compiled	[CE]  	23	None	replace
71	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(rightVal)&&  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(rightVal)&&  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(rightVal)&&  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(n)&&    NodeUtil.getBooleanValue(rightVal)    ==    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	25	None	replace
72	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(n)&&  NodeUtil.getBooleanValue(leftVal)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(n)&&  NodeUtil.getBooleanValue(leftVal)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(n)&&  NodeUtil.getBooleanValue(leftVal)  ==  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(n)&&    NodeUtil.getBooleanValue(rightVal)    ==    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	25	None	replace
73	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(n)&&  NodeUtil.getBooleanValue(left)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(n)&&  NodeUtil.getBooleanValue(left)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(n)&&  NodeUtil.getBooleanValue(left)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getBooleanValue(left)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	1	None	replace
74	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(right)&&  NodeUtil.getBooleanValue(left)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(right)&&  NodeUtil.getBooleanValue(left)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(right)&&  NodeUtil.getBooleanValue(left)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getBooleanValue(left)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	1	None	replace
75	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getOwnerValue(left)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getOwnerValue(left)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getOwnerValue(left)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getBooleanValue(left)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	1	None	replace
76	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(nVal))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(nVal))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(nVal))  {	  if(NodeUtil.mayHaveSideEffects(rightVal))    {    	non-compiled	[CE]  	13	None	replace
77	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(rightVal)||  NodeUtil.mayHaveSideEffects(nVal))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(rightVal)||  NodeUtil.mayHaveSideEffects(nVal))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(rightVal)||  NodeUtil.mayHaveSideEffects(nVal))  {	  if(NodeUtil.mayHaveSideEffects(rightVal))    {    	non-compiled	[CE]  	13	None	replace
78	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(rightVal)||  NodeUtil.mayHaveSideEffects(rightVal))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(rightVal)||  NodeUtil.mayHaveSideEffects(rightVal))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(rightVal)||  NodeUtil.mayHaveSideEffects(rightVal))  {	  if(NodeUtil.mayHaveSideEffects(rightVal))    {    	non-compiled	[CE]  	13	None	replace
79	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(leftVal))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(leftVal))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(leftVal))  {	  if(NodeUtil.mayHaveSideEffects(rightVal))    {    	non-compiled	[CE]  	13	None	replace
80	[BUG]  [BUGGY]  if(rightVal!=  null  &&!NodeUtil.mayHaveSideEffects(left))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(rightVal!=  null  &&!NodeUtil.mayHaveSideEffects(left))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(rightVal!=  null  &&!NodeUtil.mayHaveSideEffects(left))  {	  if(!NodeUtil.mayHaveSideEffects(left))    {    	non-compiled	[CE]  	16	None	replace
81	[BUG]  [BUGGY]  if(!NodeUtil.mayHaveSideEffects(leftVal))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(!NodeUtil.mayHaveSideEffects(leftVal))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(!NodeUtil.mayHaveSideEffects(leftVal))  {	  if(!NodeUtil.mayHaveSideEffects(left))    {    	non-compiled	[CE]  	16	None	replace
82	[BUG]  [BUGGY]  if(!NodeUtil.mayHaveSideEffects(n))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(!NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(!NodeUtil.mayHaveSideEffects(n))  {	  if(!NodeUtil.mayHaveSideEffects(left))    {    	non-compiled	[CE]  	16	None	replace
83	[BUG]  [BUGGY]  if(!NodeUtil.mayHaveSideEffects(rightVal)&&!NodeUtil.mayHaveSideEffects(left))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(!NodeUtil.mayHaveSideEffects(rightVal)&&!NodeUtil.mayHaveSideEffects(left))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(!NodeUtil.mayHaveSideEffects(rightVal)&&!NodeUtil.mayHaveSideEffects(left))  {	  if(!NodeUtil.mayHaveSideEffects(left))    {    	non-compiled	[CE]  	16	None	replace
84	[BUG]  [BUGGY]  if(!NodeUtil.mayHaveSideEffects(left)||!NodeUtil.mayHaveSideEffects(rightVal))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(!NodeUtil.mayHaveSideEffects(left)||!NodeUtil.mayHaveSideEffects(rightVal))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(!NodeUtil.mayHaveSideEffects(left)||!NodeUtil.mayHaveSideEffects(rightVal))  {	  if(!NodeUtil.mayHaveSideEffects(left))    {    	non-compiled	[CE]  	16	None	replace
85	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(left)||  NodeUtil.getBooleanValue(rightVal)  >=  TernaryValue.UNKNOWN)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayEffectMutableState(left)||  NodeUtil.getBooleanValue(rightVal)  >=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(left)||  NodeUtil.getBooleanValue(rightVal)  >=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayEffectMutableState(left)&&    NodeUtil.getBooleanValue(rightVal)    >=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	35	None	replace
86	[BUG]  [BUGGY]  if  (NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getBooleanValue(leftVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if  (NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getBooleanValue(leftVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if  (NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getBooleanValue(leftVal)!=  TernaryValue.UNKNOWN)  {	  if    (NodeUtil.getBooleanValue(leftVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	31	None	replace
87	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(n)||  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(n)||  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(n)||  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(n)&&    NodeUtil.getBooleanValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	4	None	replace
88	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(rightVal)&&  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(rightVal)&&  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(rightVal)&&  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(n)&&    NodeUtil.getBooleanValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	4	None	replace
89	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(n)&&  NodeUtil.getBooleanValue(leftVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(n)&&  NodeUtil.getBooleanValue(leftVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(n)&&  NodeUtil.getBooleanValue(leftVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(n)&&    NodeUtil.getBooleanValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	4	None	replace
90	[BUG]  [BUGGY]  n  =  rightVal.toBoolean(false);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  n  =  rightVal.toBoolean(false);  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	n  =  rightVal.toBoolean(false);	  n    =    rightVal.toBoolean(true);    	non-compiled	[CE]  	50	None	replace
91	[BUG]  [BUGGY]  n  =  leftVal.toBoolean(true);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  n  =  leftVal.toBoolean(true);  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	n  =  leftVal.toBoolean(true);	  n    =    rightVal.toBoolean(true);    	non-compiled	[CE]  	50	None	replace
92	[BUG]  [BUGGY]  n  =  leftVal.toBoolean(false);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  n  =  leftVal.toBoolean(false);  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	n  =  leftVal.toBoolean(false);	  n    =    rightVal.toBoolean(true);    	non-compiled	[CE]  	50	None	replace
93	[BUG]  [BUGGY]  n  =  left.toBoolean(true);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  n  =  left.toBoolean(true);  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	n  =  left.toBoolean(true);	  n    =    rightVal.toBoolean(true);    	non-compiled	[CE]  	50	None	replace
94	[BUG]  [BUGGY]  n  =  wrongVal.toBoolean(false);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  n  =  wrongVal.toBoolean(false);  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	n  =  wrongVal.toBoolean(false);	  n    =    rightVal.toBoolean(true);    	non-compiled	[CE]  	50	None	replace
95	[BUG]  [BUGGY]  Node  leftParent  =  rightVal.toBoolean(false);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  leftParent  =  rightVal.toBoolean(false);  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  leftParent  =  rightVal.toBoolean(false);	  Node    leftParent    =    rightVal.toBoolean(true);    	non-compiled	[CE]  	39	None	replace
96	[BUG]  [BUGGY]  Node  leftParent  =  n.toBoolean(true);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  leftParent  =  n.toBoolean(true);  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  leftParent  =  n.toBoolean(true);	  Node    leftParent    =    rightVal.toBoolean(true);    	non-compiled	[CE]  	39	None	replace
97	[BUG]  [BUGGY]  Node  leftParent  =  leftVal.toBoolean(false);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  leftParent  =  leftVal.toBoolean(false);  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  leftParent  =  leftVal.toBoolean(false);	  Node    leftParent    =    rightVal.toBoolean(true);    	non-compiled	[CE]  	39	None	replace
98	[BUG]  [BUGGY]  Node  rightParent  =  rightVal.toBoolean(false);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  rightParent  =  rightVal.toBoolean(false);  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  rightParent  =  rightVal.toBoolean(false);	  Node    leftParent    =    rightVal.toBoolean(true);    	non-compiled	[CE]  	39	None	replace
99	[BUG]  [BUGGY]  Node  leftParent  =  nVal.toBoolean(true);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  leftParent  =  nVal.toBoolean(true);  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  leftParent  =  nVal.toBoolean(true);	  Node    leftParent    =    rightVal.toBoolean(true);    	non-compiled	[CE]  	39	None	replace
100	[BUG]  [BUGGY]  Node  leftParent  =  node.toBoolean(true);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  leftParent  =  node.toBoolean(true);  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  leftParent  =  node.toBoolean(true);	  Node    leftParent    =    rightVal.toBoolean(true);    	non-compiled	[CE]  	39	None	replace
101	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(rightVal)||  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(rightVal)||  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(rightVal)||  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(right)&&    NodeUtil.getBooleanValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	5	None	replace
102	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(left)||  NodeUtil.getBooleanValue(left)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayEffectMutableState(left)||  NodeUtil.getBooleanValue(left)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(left)||  NodeUtil.getBooleanValue(left)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayEffectMutableState(left)&&    NodeUtil.getBooleanValue(left)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	46	None	replace
103	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(n)&&  NodeUtil.getBooleanValue(left)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayEffectMutableState(n)&&  NodeUtil.getBooleanValue(left)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(n)&&  NodeUtil.getBooleanValue(left)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayEffectMutableState(left)&&    NodeUtil.getBooleanValue(left)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	46	None	replace
104	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(right)&&  NodeUtil.getBooleanValue(left)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayEffectMutableState(right)&&  NodeUtil.getBooleanValue(left)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(right)&&  NodeUtil.getBooleanValue(left)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayEffectMutableState(left)&&    NodeUtil.getBooleanValue(left)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	46	None	replace
105	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(rightVal)&&  NodeUtil.mayHaveSideEffects(left))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(rightVal)&&  NodeUtil.mayHaveSideEffects(left))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(rightVal)&&  NodeUtil.mayHaveSideEffects(left))  {	  if(NodeUtil.mayHaveSideEffects(rightVal)||    NodeUtil.mayHaveSideEffects(left))    {    	non-compiled	[CE]  	14	None	replace
106	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(nVal)||  NodeUtil.mayHaveSideEffects(left))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(nVal)||  NodeUtil.mayHaveSideEffects(left))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(nVal)||  NodeUtil.mayHaveSideEffects(left))  {	  if(NodeUtil.mayHaveSideEffects(rightVal)||    NodeUtil.mayHaveSideEffects(left))    {    	non-compiled	[CE]  	14	None	replace
107	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(rightVal)||  NodeUtil.mayHaveSideEffects(left,  rightVal))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(rightVal)||  NodeUtil.mayHaveSideEffects(left,  rightVal))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(rightVal)||  NodeUtil.mayHaveSideEffects(left,  rightVal))  {	  if(NodeUtil.mayHaveSideEffects(rightVal)||    NodeUtil.mayHaveSideEffects(left))    {    	non-compiled	[CE]  	14	None	replace
108	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(leftVal)||  NodeUtil.mayHaveSideEffects(rightVal))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(leftVal)||  NodeUtil.mayHaveSideEffects(rightVal))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(leftVal)||  NodeUtil.mayHaveSideEffects(rightVal))  {	  if(NodeUtil.mayHaveSideEffects(rightVal)||    NodeUtil.mayHaveSideEffects(left))    {    	non-compiled	[CE]  	14	None	replace
109	[BUG]  [BUGGY]  if(!NodeUtil.mayHaveSideEffects(rightVal)&&  NodeUtil.mayHaveSideEffects(left))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(!NodeUtil.mayHaveSideEffects(rightVal)&&  NodeUtil.mayHaveSideEffects(left))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(!NodeUtil.mayHaveSideEffects(rightVal)&&  NodeUtil.mayHaveSideEffects(left))  {	  if(NodeUtil.mayHaveSideEffects(rightVal)||    NodeUtil.mayHaveSideEffects(left))    {    	non-compiled	[CE]  	14	None	replace
110	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(left)||  NodeUtil.getIntValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayEffectMutableState(left)||  NodeUtil.getIntValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(left)||  NodeUtil.getIntValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayEffectMutableState(left)&&    NodeUtil.getIntValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	48	None	replace
111	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getIntValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getIntValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getIntValue(rightVal)  ==  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayEffectMutableState(left)&&    NodeUtil.getIntValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	48	None	replace
112	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(n)&&  NodeUtil.getIntValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayEffectMutableState(n)&&  NodeUtil.getIntValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(n)&&  NodeUtil.getIntValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayEffectMutableState(left)&&    NodeUtil.getIntValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	48	None	replace
113	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getNumberValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getNumberValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getNumberValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayEffectMutableState(left)&&    NodeUtil.getIntValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	48	None	replace
114	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(left))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(left))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(n)||  NodeUtil.mayHaveSideEffects(left))  {	  if(NodeUtil.mayHaveSideEffects(n))    {    	non-compiled	[CE]  	17	None	replace
115	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getIntValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getIntValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getIntValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getIntValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	53	None	replace
116	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getIntValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getIntValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getIntValue(rightVal)  ==  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getIntValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	53	None	replace
117	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(n)&&  NodeUtil.getIntValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(n)&&  NodeUtil.getIntValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(n)&&  NodeUtil.getIntValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getIntValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	53	None	replace
118	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getNumberValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getNumberValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getNumberValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getIntValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	53	None	replace
119	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getLongValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getLongValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getLongValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getIntValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	53	None	replace
120	[BUG]  [BUGGY]  Node  leftParent  =  rightVal.cloneParent();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  leftParent  =  rightVal.cloneParent();  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  leftParent  =  rightVal.cloneParent();	  Node    leftParent    =    rightVal.cloneTree();    	non-compiled	[CE]  	20	None	replace
121	[BUG]  [BUGGY]  Node  leftParent  =  rightVal.clonePath();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  leftParent  =  rightVal.clonePath();  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  leftParent  =  rightVal.clonePath();	  Node    leftParent    =    rightVal.cloneTree();    	non-compiled	[CE]  	20	None	replace
122	[BUG]  [BUGGY]  Node  leftParent  =  leftVal.cloneTree();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  leftParent  =  leftVal.cloneTree();  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  leftParent  =  leftVal.cloneTree();	  Node    leftParent    =    rightVal.cloneTree();    	non-compiled	[CE]  	20	None	replace
123	[BUG]  [BUGGY]  Node  leftParent  =  rightVal.cloneNode();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  leftParent  =  rightVal.cloneNode();  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  leftParent  =  rightVal.cloneNode();	  Node    leftParent    =    rightVal.cloneTree();    	non-compiled	[CE]  	20	None	replace
124	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(rightVal)||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(rightVal)||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(rightVal)||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(n)||    NodeUtil.getBooleanValue(rightVal)    ==    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	43	None	replace
125	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(right)||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(right)||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(right)||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(n)||    NodeUtil.getBooleanValue(rightVal)    ==    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	43	None	replace
126	[BUG]  [BUGGY]  if  (NodeUtil.mayHaveSideEffects(right)||  NodeUtil.getBooleanValue(left)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if  (NodeUtil.mayHaveSideEffects(right)||  NodeUtil.getBooleanValue(left)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if  (NodeUtil.mayHaveSideEffects(right)||  NodeUtil.getBooleanValue(left)!=  TernaryValue.UNKNOWN)  {	  if    (NodeUtil.mayHaveSideEffects(left)||    NodeUtil.getBooleanValue(left)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	42	None	replace
127	[BUG]  [BUGGY]  if  (NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getBooleanValue(right)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if  (NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getBooleanValue(right)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if  (NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getBooleanValue(right)!=  TernaryValue.UNKNOWN)  {	  if    (NodeUtil.mayHaveSideEffects(left)||    NodeUtil.getBooleanValue(left)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	42	None	replace
128	[BUG]  [BUGGY]  if(!NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(!NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(!NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(!NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getBooleanValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	32	None	replace
129	[BUG]  [BUGGY]  if(!NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(!NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(!NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {	  if(!NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getBooleanValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	32	None	replace
130	[BUG]  [BUGGY]  if(!NodeUtil.mayHaveSideEffects(n)&&  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(!NodeUtil.mayHaveSideEffects(n)&&  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(!NodeUtil.mayHaveSideEffects(n)&&  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(!NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getBooleanValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	32	None	replace
131	[BUG]  [BUGGY]  if(!NodeUtil.mayHaveSideEffects(right)&&  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(!NodeUtil.mayHaveSideEffects(right)&&  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(!NodeUtil.mayHaveSideEffects(right)&&  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(!NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getBooleanValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	32	None	replace
132	[BUG]  [BUGGY]  Node  left  =  rightVal.getLastChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  left  =  rightVal.getLastChild();  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  left  =  rightVal.getLastChild();	  Node    left    =    rightVal.getNext();    	non-compiled	[CE]  	22	None	replace
133	[BUG]  [BUGGY]  Node  left  =  rightVal.getParent();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  left  =  rightVal.getParent();  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  left  =  rightVal.getParent();	  Node    left    =    rightVal.getNext();    	non-compiled	[CE]  	22	None	replace
134	[BUG]  [BUGGY]  Node  left  =  rightVal.getFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  left  =  rightVal.getFirstChild();  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  left  =  rightVal.getFirstChild();	  Node    left    =    rightVal.getNext();    	non-compiled	[CE]  	22	None	replace
135	[BUG]  [BUGGY]  Node  left  =  rightVal.toString();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  left  =  rightVal.toString();  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  left  =  rightVal.toString();	  Node    left    =    rightVal.getNext();    	non-compiled	[CE]  	22	None	replace
136	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getAssignedValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getAssignedValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getAssignedValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getAssignedValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	7	None	replace
137	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getAssignedValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getAssignedValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getAssignedValue(rightVal)  ==  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getAssignedValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	7	None	replace
138	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(n)&&  NodeUtil.getAssignedValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(n)&&  NodeUtil.getAssignedValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(n)&&  NodeUtil.getAssignedValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getAssignedValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	7	None	replace
139	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(right)&&  NodeUtil.getAssignedValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(right)&&  NodeUtil.getAssignedValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(right)&&  NodeUtil.getAssignedValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getAssignedValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	7	None	replace
140	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getAssignedValue(nVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getAssignedValue(nVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getAssignedValue(nVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getAssignedValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	7	None	replace
141	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(leftVal)||  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayEffectMutableState(leftVal)||  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(leftVal)||  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayEffectMutableState(leftVal)&&    NodeUtil.getBooleanValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	11	None	replace
142	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(nVal)&&  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayEffectMutableState(nVal)&&  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(nVal)&&  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayEffectMutableState(leftVal)&&    NodeUtil.getBooleanValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	11	None	replace
143	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(rightVal)&&  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayEffectMutableState(rightVal)&&  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(rightVal)&&  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayEffectMutableState(leftVal)&&    NodeUtil.getBooleanValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	11	None	replace
144	[BUG]  [BUGGY]  Node  leftParent  =  n.getLastChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  leftParent  =  n.getLastChild();  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  leftParent  =  n.getLastChild();	  Node    leftParent    =    n.getParent();    	non-compiled	[CE]  	24	None	replace
145	[BUG]  [BUGGY]  Node  leftParent  =  leftVal.getParent();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  leftParent  =  leftVal.getParent();  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  leftParent  =  leftVal.getParent();	  Node    leftParent    =    n.getParent();    	non-compiled	[CE]  	24	None	replace
146	[BUG]  [BUGGY]  Node  leftParent  =  right.getParent();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  leftParent  =  right.getParent();  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  leftParent  =  right.getParent();	  Node    leftParent    =    n.getParent();    	non-compiled	[CE]  	24	None	replace
147	[BUG]  [BUGGY]  Node  leftParent  =  left.getParent();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  leftParent  =  left.getParent();  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  leftParent  =  left.getParent();	  Node    leftParent    =    n.getParent();    	non-compiled	[CE]  	24	None	replace
148	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(n)||  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayEffectMutableState(n)||  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(n)||  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayEffectMutableState(left)||    NodeUtil.getBooleanValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	8	None	replace
149	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(right)||  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayEffectMutableState(right)||  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(right)||  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayEffectMutableState(left)||    NodeUtil.getBooleanValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	8	None	replace
150	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getOperatorValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getOperatorValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getOperatorValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getOperatorValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	33	None	replace
151	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getOperatorValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getOperatorValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getOperatorValue(rightVal)  ==  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getOperatorValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	33	None	replace
152	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(n)&&  NodeUtil.getOperatorValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(n)&&  NodeUtil.getOperatorValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(n)&&  NodeUtil.getOperatorValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getOperatorValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	33	None	replace
153	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getOperatorValue(nVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getOperatorValue(nVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getOperatorValue(nVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getOperatorValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	33	None	replace
154	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(right)&&  NodeUtil.getOperatorValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(right)&&  NodeUtil.getOperatorValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(right)&&  NodeUtil.getOperatorValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getOperatorValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	33	None	replace
155	[BUG]  [BUGGY]  if(!NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getOperatorValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(!NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getOperatorValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(!NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getOperatorValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getOperatorValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	33	None	replace
156	[BUG]  [BUGGY]  Integer  n  =  leftVal.toBoolean(true);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Integer  n  =  leftVal.toBoolean(true);  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Integer  n  =  leftVal.toBoolean(true);	  Integer    n    =    rightVal.toBoolean(true);    	non-compiled	[CE]  	40	None	replace
157	[BUG]  [BUGGY]  Integer  n  =  leftVal.toBoolean(false);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Integer  n  =  leftVal.toBoolean(false);  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Integer  n  =  leftVal.toBoolean(false);	  Integer    n    =    rightVal.toBoolean(true);    	non-compiled	[CE]  	40	None	replace
158	[BUG]  [BUGGY]  int  n  =  rightVal.toBoolean(false);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  int  n  =  rightVal.toBoolean(false);  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	int  n  =  rightVal.toBoolean(false);	  Integer    n    =    rightVal.toBoolean(true);    	non-compiled	[CE]  	40	None	replace
159	[BUG]  [BUGGY]  Node  n  =  leftVal.getNext();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  n  =  leftVal.getNext();  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  n  =  leftVal.getNext();	  Node    n    =    rightVal.getNext();    	non-compiled	[CE]  	51	None	replace
160	[BUG]  [BUGGY]  Node  n  =  rightVal.getParent();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  n  =  rightVal.getParent();  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  n  =  rightVal.getParent();	  Node    n    =    rightVal.getNext();    	non-compiled	[CE]  	51	None	replace
161	[BUG]  [BUGGY]  Node  n  =  rightVal.toBoolean(true);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  n  =  rightVal.toBoolean(true);  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  n  =  rightVal.toBoolean(true);	  Node    n    =    rightVal.getNext();    	non-compiled	[CE]  	51	None	replace
162	[BUG]  [BUGGY]  Node  n  =  rightVal.toBoolean(false);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  n  =  rightVal.toBoolean(false);  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  n  =  rightVal.toBoolean(false);	  Node    n    =    rightVal.getNext();    	non-compiled	[CE]  	51	None	replace
163	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getBooleanValue(left)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getBooleanValue(left)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getBooleanValue(left)  ==  TernaryValue.UNKNOWN)  {	  if    (NodeUtil.getBooleanValue(left)    ==    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	2	None	replace
164	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getBooleanValue(left)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getBooleanValue(left)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getBooleanValue(left)  ==  TernaryValue.UNKNOWN)  {	  if    (NodeUtil.getBooleanValue(left)    ==    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	2	None	replace
165	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getNumberValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getNumberValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getNumberValue(rightVal)  ==  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getBooleanValue(rightVal)    ==    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	3	None	replace
166	[BUG]  [BUGGY]  if(!NodeUtil.mayHaveSideEffects(nVal))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(!NodeUtil.mayHaveSideEffects(nVal))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(!NodeUtil.mayHaveSideEffects(nVal))  {	  if(!NodeUtil.mayHaveSideEffects(rightVal))    {    	non-compiled	[CE]  	15	None	replace
167	[BUG]  [BUGGY]  if(!NodeUtil.mayHaveSideEffects(rightVal)||!NodeUtil.mayHaveSideEffects(nVal))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(!NodeUtil.mayHaveSideEffects(rightVal)||!NodeUtil.mayHaveSideEffects(nVal))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(!NodeUtil.mayHaveSideEffects(rightVal)||!NodeUtil.mayHaveSideEffects(nVal))  {	  if(!NodeUtil.mayHaveSideEffects(rightVal))    {    	non-compiled	[CE]  	15	None	replace
168	[BUG]  [BUGGY]  if(!NodeUtil.mayHaveSideEffects(rightVal)||!NodeUtil.mayHaveSideEffects(rightVal))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(!NodeUtil.mayHaveSideEffects(rightVal)||!NodeUtil.mayHaveSideEffects(rightVal))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(!NodeUtil.mayHaveSideEffects(rightVal)||!NodeUtil.mayHaveSideEffects(rightVal))  {	  if(!NodeUtil.mayHaveSideEffects(rightVal))    {    	non-compiled	[CE]  	15	None	replace
169	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(rightVal)||  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayEffectMutableState(rightVal)||  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(rightVal)||  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayEffectMutableState(right)&&    NodeUtil.getBooleanValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	12	None	replace
170	[BUG]  [BUGGY]  Integer  n  =  rightVal.toInteger(true);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Integer  n  =  rightVal.toInteger(true);  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Integer  n  =  rightVal.toInteger(true);	  Integer    n    =    rightVal.toBoolean(false);    	non-compiled	[CE]  	41	None	replace
171	[BUG]  [BUGGY]  Integer  n  =  rightVal.toString(false);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Integer  n  =  rightVal.toString(false);  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Integer  n  =  rightVal.toString(false);	  Integer    n    =    rightVal.toBoolean(false);    	non-compiled	[CE]  	41	None	replace
172	[BUG]  [BUGGY]  int  n  =  rightVal.toBoolean(true);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  int  n  =  rightVal.toBoolean(true);  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	int  n  =  rightVal.toBoolean(true);	  Integer    n    =    rightVal.toBoolean(false);    	non-compiled	[CE]  	41	None	replace
173	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(n)||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayEffectMutableState(n)||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(n)||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayEffectMutableState(n)&&    NodeUtil.getBooleanValue(rightVal)    ==    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	54	None	replace
174	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getBooleanValue(rightVal)  >=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getBooleanValue(rightVal)  >=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getBooleanValue(rightVal)  >=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getBooleanValue(rightVal)    >=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	34	None	replace
175	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getBooleanValue(rightVal)  >>  TernaryValue.UNKNOWN)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getBooleanValue(rightVal)  >>  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getBooleanValue(rightVal)  >>  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getBooleanValue(rightVal)    >=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	34	None	replace
176	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(n)||  NodeUtil.getBooleanValue(nVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(n)||  NodeUtil.getBooleanValue(nVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(n)||  NodeUtil.getBooleanValue(nVal)!=  TernaryValue.UNKNOWN)  {	  if    (NodeUtil.getBooleanValue(nVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	30	None	replace
177	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getBooleanValue(right)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getBooleanValue(right)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getBooleanValue(right)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getBooleanValue(left)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	1	None	replace
178	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getBooleanValue(right)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getBooleanValue(right)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getBooleanValue(right)  ==  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getBooleanValue(left)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	1	None	replace
179	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getConditionalValue(rightVal)  >=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getConditionalValue(rightVal)  >=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getConditionalValue(rightVal)  >=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getConditionalValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	52	None	replace
180	[BUG]  [BUGGY]  n  =  leftParent.toBoolean(true);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  n  =  leftParent.toBoolean(true);  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	n  =  leftParent.toBoolean(true);	  n    =    rightVal.toBoolean(true);    	non-compiled	[CE]  	50	None	replace
181	[BUG]  [BUGGY]  if(!NodeUtil.mayHaveSideEffects(rightVal)||  NodeUtil.mayHaveSideEffects(left))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(!NodeUtil.mayHaveSideEffects(rightVal)||  NodeUtil.mayHaveSideEffects(left))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(!NodeUtil.mayHaveSideEffects(rightVal)||  NodeUtil.mayHaveSideEffects(left))  {	  if(!NodeUtil.mayHaveSideEffects(rightVal))    {    	non-compiled	[CE]  	15	None	replace
182	[BUG]  [BUGGY]  if(!NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(!NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(!NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayEffectMutableState(left)||    NodeUtil.getBooleanValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	8	None	replace
183	[BUG]  [BUGGY]  if(!NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getAssignedValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(!NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getAssignedValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(!NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getAssignedValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getAssignedValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	7	None	replace
184	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getAssignedValue(rightVal)  >=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getAssignedValue(rightVal)  >=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getAssignedValue(rightVal)  >=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getAssignedValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	7	None	replace
185	[BUG]  [BUGGY]  Node  leftParent  =  leftVal.toBoolean(true);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  leftParent  =  leftVal.toBoolean(true);  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  leftParent  =  leftVal.toBoolean(true);	  Node    leftParent    =    rightVal.toBoolean(true);    	non-compiled	[CE]  	39	None	replace
186	[BUG]  [BUGGY]  Node  leftParent  =  parent.toBoolean(true);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  leftParent  =  parent.toBoolean(true);  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  leftParent  =  parent.toBoolean(true);	  Node    leftParent    =    rightVal.toBoolean(true);    	non-compiled	[CE]  	39	None	replace
187	[BUG]  [BUGGY]  Node  left  =  wrongVal.toBoolean(true);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  left  =  wrongVal.toBoolean(true);  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  left  =  wrongVal.toBoolean(true);	  Node    left    =    rightVal.toBoolean(true);    	non-compiled	[CE]  	19	None	replace
188	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(right)&&  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(right)&&  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(right)&&  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(right)&&    NodeUtil.getBooleanValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	5	None	replace
189	[BUG]  [BUGGY]  if  (NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getBooleanValue(right)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if  (NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getBooleanValue(right)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if  (NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getBooleanValue(right)  ==  TernaryValue.UNKNOWN)  {	  if    (NodeUtil.mayHaveSideEffects(left)||    NodeUtil.getBooleanValue(left)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	42	None	replace
190	[BUG]  [BUGGY]  Integer  n  =  left.toBoolean(true);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Integer  n  =  left.toBoolean(true);  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Integer  n  =  left.toBoolean(true);	  Integer    n    =    rightVal.toBoolean(true);    	non-compiled	[CE]  	40	None	replace
191	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getNullValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getNullValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getNullValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getIntValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	53	None	replace
192	[BUG]  [BUGGY]  Node  rightParent  =  rightVal.toBoolean(true);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  rightParent  =  rightVal.toBoolean(true);  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  rightParent  =  rightVal.toBoolean(true);	  Node    rightParent    =    rightVal.getParent();    	non-compiled	[CE]  	23	None	replace
193	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getAssignedValue(rightVal)  >=  TernaryValue.UNKNOWN)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getAssignedValue(rightVal)  >=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getAssignedValue(rightVal)  >=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayEffectMutableState(left)&&    NodeUtil.getAssignedValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	47	None	replace
194	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.mayHaveSideEffects(rightVal)||  NodeUtil.mayHaveSideEffects(nVal))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.mayHaveSideEffects(rightVal)||  NodeUtil.mayHaveSideEffects(nVal))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.mayHaveSideEffects(rightVal)||  NodeUtil.mayHaveSideEffects(nVal))  {	  if(NodeUtil.mayHaveSideEffects(left)||    NodeUtil.mayHaveSideEffects(rightVal))    {    	non-compiled	[CE]  	36	None	replace
195	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(right)&&  rightVal  ==  null)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(right)&&  rightVal  ==  null)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(right)&&  rightVal  ==  null)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    rightVal!=    null)    {    	non-compiled	[CE]  	38	None	replace
196	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left)&&  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.isLiteralValue(left)&&  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.isLiteralValue(left)&&  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(!NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getBooleanValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	32	None	replace
197	[BUG]  [BUGGY]  if(NodeUtil.getBooleanValue(nVal)  ==  TernaryValue.UNKNOWN  ||  NodeUtil.getBooleanValue(nVal)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.getBooleanValue(nVal)  ==  TernaryValue.UNKNOWN  ||  NodeUtil.getBooleanValue(nVal)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.getBooleanValue(nVal)  ==  TernaryValue.UNKNOWN  ||  NodeUtil.getBooleanValue(nVal)  ==  TernaryValue.UNKNOWN)  {	  if(NodeUtil.getBooleanValue(rightVal)    ==    TernaryValue.UNKNOWN    ||    NodeUtil.getBooleanValue(rightVal)    ==    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	44	None	replace
198	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getOwnerValue(rightVal)  >=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getOwnerValue(rightVal)  >=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getOwnerValue(rightVal)  >=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getOwnerValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	6	None	replace
199	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(n)&&  NodeUtil.getBooleanValue(leftVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayEffectMutableState(n)&&  NodeUtil.getBooleanValue(leftVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(n)&&  NodeUtil.getBooleanValue(leftVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayEffectMutableState(n)&&    NodeUtil.getBooleanValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	10	None	replace
200	[BUG]  [BUGGY]  Node  left  =  n.getNext();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  left  =  n.getNext();  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  left  =  n.getNext();	  Node    left    =    rightVal.getNext();    	non-compiled	[CE]  	22	None	replace
201	[BUG]  [BUGGY]  Node  leftParent  =  n.removeFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  leftParent  =  n.removeFirstChild();  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  leftParent  =  n.removeFirstChild();	  Node    leftParent    =    rightVal.removeFirstChild();    	non-compiled	[CE]  	21	None	replace
202	[BUG]  [BUGGY]  Node  leftParent  =  rightVal.replaceChild(left,  falseNode);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  leftParent  =  rightVal.replaceChild(left,  falseNode);  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  leftParent  =  rightVal.replaceChild(left,  falseNode);	  Node    leftParent    =    rightVal.removeFirstChild();    	non-compiled	[CE]  	21	None	replace
203	[BUG]  [BUGGY]  Node  n  =  leftParent.getFirstChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  n  =  leftParent.getFirstChild();  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  n  =  leftParent.getFirstChild();	  Node    n    =    rightVal.getFirstChild();    	non-compiled	[CE]  	49	None	replace
204	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getOperatorValue(rightVal)  >=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getOperatorValue(rightVal)  >=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getOperatorValue(rightVal)  >=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getOperatorValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	33	None	replace
205	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(right))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(right))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(right))  {	  if(NodeUtil.mayHaveSideEffects(n))    {    	non-compiled	[CE]  	17	None	replace
206	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.mayHaveSideEffects(right))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.mayHaveSideEffects(right))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.mayHaveSideEffects(right))  {	  if(NodeUtil.mayHaveSideEffects(n))    {    	non-compiled	[CE]  	17	None	replace
207	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.mayHaveSideEffects(rightVal)||  rightVal!=  null)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.mayHaveSideEffects(rightVal)||  rightVal!=  null)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.mayHaveSideEffects(rightVal)||  rightVal!=  null)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.mayHaveSideEffects(rightVal))    {    	non-compiled	[CE]  	37	None	replace
208	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getBooleanValue(rightVal)  >>  TernaryValue.UNKNOWN)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getBooleanValue(rightVal)  >>  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getBooleanValue(rightVal)  >>  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getBooleanValue(rightVal)    >=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	34	None	replace
209	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getBooleanValue(rightVal)>  TernaryValue.UNKNOWN)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getBooleanValue(rightVal)>  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getBooleanValue(rightVal)>  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getBooleanValue(rightVal)    >=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	34	None	replace
210	[BUG]  [BUGGY]  if(!NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getBooleanValue(rightVal)  >=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(!NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getBooleanValue(rightVal)  >=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(!NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getBooleanValue(rightVal)  >=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getBooleanValue(rightVal)    >=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	34	None	replace
211	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(right)&&  NodeUtil.mayHaveSideEffects(left))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(right)&&  NodeUtil.mayHaveSideEffects(left))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(right)&&  NodeUtil.mayHaveSideEffects(left))  {	  if(NodeUtil.mayHaveSideEffects(rightVal)||    NodeUtil.mayHaveSideEffects(left))    {    	non-compiled	[CE]  	14	None	replace
212	[BUG]  [BUGGY]  Integer  n  =  left.toBoolean(false);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Integer  n  =  left.toBoolean(false);  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Integer  n  =  left.toBoolean(false);	  Integer    n    =    rightVal.toBoolean(false);    	non-compiled	[CE]  	41	None	replace
213	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getBooleanValue(leftVal)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getBooleanValue(leftVal)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getBooleanValue(leftVal)  ==  TernaryValue.UNKNOWN)  {	  if    (NodeUtil.getBooleanValue(leftVal)    ==    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	27	None	replace
214	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getBooleanValue(leftVal)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getBooleanValue(leftVal)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getBooleanValue(leftVal)  ==  TernaryValue.UNKNOWN)  {	  if    (NodeUtil.getBooleanValue(leftVal)    ==    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	27	None	replace
215	[BUG]  [BUGGY]  if(!NodeUtil.mayHaveSideEffects(left)||  NodeUtil.mayHaveSideEffects(rightVal))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(!NodeUtil.mayHaveSideEffects(left)||  NodeUtil.mayHaveSideEffects(rightVal))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(!NodeUtil.mayHaveSideEffects(left)||  NodeUtil.mayHaveSideEffects(rightVal))  {	  if(!NodeUtil.mayHaveSideEffects(left))    {    	non-compiled	[CE]  	16	None	replace
216	[BUG]  [BUGGY]  if(!NodeUtil.mayHaveSideEffects(left)&&!rightVal.toBoolean(true))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(!NodeUtil.mayHaveSideEffects(left)&&!rightVal.toBoolean(true))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(!NodeUtil.mayHaveSideEffects(left)&&!rightVal.toBoolean(true))  {	  if(!NodeUtil.mayHaveSideEffects(left))    {    	non-compiled	[CE]  	16	None	replace
217	[BUG]  [BUGGY]  if(!NodeUtil.mayHaveSideEffects(right)&&!NodeUtil.mayHaveSideEffects(rightVal))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(!NodeUtil.mayHaveSideEffects(right)&&!NodeUtil.mayHaveSideEffects(rightVal))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(!NodeUtil.mayHaveSideEffects(right)&&!NodeUtil.mayHaveSideEffects(rightVal))  {	  if(!NodeUtil.mayHaveSideEffects(left))    {    	non-compiled	[CE]  	16	None	replace
218	[BUG]  [BUGGY]  if(!NodeUtil.mayHaveSideEffects(right)&&!NodeUtil.mayHaveSideEffects(left))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(!NodeUtil.mayHaveSideEffects(right)&&!NodeUtil.mayHaveSideEffects(left))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(!NodeUtil.mayHaveSideEffects(right)&&!NodeUtil.mayHaveSideEffects(left))  {	  if(!NodeUtil.mayHaveSideEffects(left))    {    	non-compiled	[CE]  	16	None	replace
219	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  rightVal.isLowerBound()  ||  NodeUtil.mayHaveSideEffects(rightVal))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  rightVal.isLowerBound()  ||  NodeUtil.mayHaveSideEffects(rightVal))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  rightVal.isLowerBound()  ||  NodeUtil.mayHaveSideEffects(rightVal))  {	  if(NodeUtil.mayHaveSideEffects(left)&&    rightVal.isLowerBound())    {    	non-compiled	[CE]  	45	None	replace
220	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  rightVal.toBoolean())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  rightVal.toBoolean())  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  rightVal.toBoolean())  {	  if(NodeUtil.mayHaveSideEffects(left)&&    rightVal.isLowerBound())    {    	non-compiled	[CE]  	45	None	replace
221	[BUG]  [BUGGY]  Node  leftParent  =  n.cloneTree();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  leftParent  =  n.cloneTree();  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  leftParent  =  n.cloneTree();	  Node    leftParent    =    rightVal.cloneTree();    	non-compiled	[CE]  	20	None	replace
222	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(n)&&  NodeUtil.getBooleanValue(rightVal)  >=  TernaryValue.UNKNOWN)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayEffectMutableState(n)&&  NodeUtil.getBooleanValue(rightVal)  >=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(n)&&  NodeUtil.getBooleanValue(rightVal)  >=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayEffectMutableState(left)&&    NodeUtil.getBooleanValue(rightVal)    >=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	35	None	replace
223	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getOperatorValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getOperatorValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getOperatorValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getOperatorValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	33	None	replace
224	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getBooleanValue(leftVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getBooleanValue(leftVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getBooleanValue(leftVal)!=  TernaryValue.UNKNOWN)  {	  if    (NodeUtil.getBooleanValue(leftVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	31	None	replace
225	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getConditionalValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getConditionalValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getConditionalValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getConditionalValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	52	None	replace
226	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.mayHaveSideEffects(rightVal)||  NodeUtil.mayHaveSideEffects(rightVal))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.mayHaveSideEffects(rightVal)||  NodeUtil.mayHaveSideEffects(rightVal))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.mayHaveSideEffects(rightVal)||  NodeUtil.mayHaveSideEffects(rightVal))  {	  if(NodeUtil.mayHaveSideEffects(left)||    NodeUtil.mayHaveSideEffects(rightVal))    {    	non-compiled	[CE]  	36	None	replace
227	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.mayHaveSideEffects(rightVal))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.mayHaveSideEffects(rightVal))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.mayHaveSideEffects(rightVal))  {	  if(NodeUtil.mayHaveSideEffects(left)||    NodeUtil.mayHaveSideEffects(rightVal))    {    	non-compiled	[CE]  	36	None	replace
228	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getOwnerValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getOwnerValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getOwnerValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getOwnerValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	6	None	replace
229	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(leftVal)||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.isLiteralValue(leftVal)||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.isLiteralValue(leftVal)||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {	  if(NodeUtil.getBooleanValue(rightVal)    ==    TernaryValue.UNKNOWN    ||    NodeUtil.getBooleanValue(rightVal)    ==    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	44	None	replace
230	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(n)&&  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN  ||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNK  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayEffectMutableState(n)&&  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN  ||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNK  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(n)&&  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN  ||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNK	  if(NodeUtil.getBooleanValue(rightVal)    ==    TernaryValue.UNKNOWN    ||    NodeUtil.getBooleanValue(rightVal)    ==    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	44	None	replace
231	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(n)&&  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN  ||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOW  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayEffectMutableState(n)&&  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN  ||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOW  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(n)&&  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN  ||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOW	  if(NodeUtil.getBooleanValue(rightVal)    ==    TernaryValue.UNKNOWN    ||    NodeUtil.getBooleanValue(rightVal)    ==    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	44	None	replace
232	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(n)&&  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN  ||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UN  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayEffectMutableState(n)&&  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN  ||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UN  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(n)&&  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN  ||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UN	  if(NodeUtil.getBooleanValue(rightVal)    ==    TernaryValue.UNKNOWN    ||    NodeUtil.getBooleanValue(rightVal)    ==    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	44	None	replace
233	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(leftVal)||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(leftVal)||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(leftVal)||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(n)||    NodeUtil.getBooleanValue(rightVal)    ==    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	43	None	replace
234	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  rightVal.isAssignedOnce())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  rightVal.isAssignedOnce())  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  rightVal.isAssignedOnce())  {	  if(NodeUtil.mayHaveSideEffects(left)&&    rightVal.isLowerBound())    {    	non-compiled	[CE]  	45	None	replace
235	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getConditionalValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getConditionalValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getConditionalValue(rightVal)  ==  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayEffectMutableState(left)&&    NodeUtil.getBooleanValue(rightVal)    ==    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	9	None	replace
236	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getBooleanValue(left)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getBooleanValue(left)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getBooleanValue(left)  ==  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayEffectMutableState(left)&&    NodeUtil.getBooleanValue(left)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	46	None	replace
237	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getAssignedValue(left)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getAssignedValue(left)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getAssignedValue(left)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayEffectMutableState(left)&&    NodeUtil.getBooleanValue(left)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	46	None	replace
238	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getValue(left)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getValue(left)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getValue(left)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayEffectMutableState(left)&&    NodeUtil.getBooleanValue(left)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	46	None	replace
239	[BUG]  [BUGGY]  Node  left  =  rightVal.removeFirst();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  left  =  rightVal.removeFirst();  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  left  =  rightVal.removeFirst();	  Node    left    =    rightVal.getNext();    	non-compiled	[CE]  	22	None	replace
240	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(left)&&  NodeUtil.mayHaveSideEffects(rightVal))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.isLiteralValue(left)&&  NodeUtil.mayHaveSideEffects(rightVal))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.isLiteralValue(left)&&  NodeUtil.mayHaveSideEffects(rightVal))  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.mayHaveSideEffects(rightVal))    {    	non-compiled	[CE]  	37	None	replace
241	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(left)||  NodeUtil.getBooleanValue(left)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayEffectMutableState(left)||  NodeUtil.getBooleanValue(left)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(left)||  NodeUtil.getBooleanValue(left)  ==  TernaryValue.UNKNOWN)  {	  if    (NodeUtil.getBooleanValue(left)    ==    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	2	None	replace
242	[BUG]  [BUGGY]  n  =  rightVal.toString(true);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  n  =  rightVal.toString(true);  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	n  =  rightVal.toString(true);	  n    =    rightVal.toBoolean(true);    	non-compiled	[CE]  	50	None	replace
243	[BUG]  [BUGGY]  n  =  nextVal.toBoolean(false);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  n  =  nextVal.toBoolean(false);  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	n  =  nextVal.toBoolean(false);	  n    =    rightVal.toBoolean(true);    	non-compiled	[CE]  	50	None	replace
244	[BUG]  [BUGGY]  Integer  n  =  rightVal.toInt();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Integer  n  =  rightVal.toInt();  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Integer  n  =  rightVal.toInt();	  Integer    n    =    rightVal.toBoolean(false);    	non-compiled	[CE]  	41	None	replace
245	[BUG]  [BUGGY]  boolean  n  =  rightVal.toBoolean(true);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  boolean  n  =  rightVal.toBoolean(true);  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	boolean  n  =  rightVal.toBoolean(true);	  Integer    n    =    rightVal.toBoolean(false);    	non-compiled	[CE]  	41	None	replace
246	[BUG]  [BUGGY]  Node  leftParent  =  rightVal.toString(true);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  leftParent  =  rightVal.toString(true);  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  leftParent  =  rightVal.toString(true);	  Node    leftParent    =    rightVal.toBoolean(true);    	non-compiled	[CE]  	39	None	replace
247	[BUG]  [BUGGY]  Node  leftParent  =  rightVal.toLowerCase(true);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  leftParent  =  rightVal.toLowerCase(true);  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  leftParent  =  rightVal.toLowerCase(true);	  Node    leftParent    =    rightVal.toBoolean(true);    	non-compiled	[CE]  	39	None	replace
248	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(leftVal)&&  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(leftVal)&&  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(leftVal)&&  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(n)&&    NodeUtil.getBooleanValue(rightVal)    ==    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	25	None	replace
249	[BUG]  [BUGGY]  Integer  n  =  rightVal.toString(true);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Integer  n  =  rightVal.toString(true);  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Integer  n  =  rightVal.toString(true);	  Integer    n    =    rightVal.toBoolean(true);    	non-compiled	[CE]  	40	None	replace
250	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getAssignedValue(left)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getAssignedValue(left)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getAssignedValue(left)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getBooleanValue(left)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	1	None	replace
251	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getValue(left)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getValue(left)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getValue(left)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getBooleanValue(left)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	1	None	replace
252	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  rightVal!=  null  ||  NodeUtil.mayHaveSideEffects(rightVal))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  rightVal!=  null  ||  NodeUtil.mayHaveSideEffects(rightVal))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  rightVal!=  null  ||  NodeUtil.mayHaveSideEffects(rightVal))  {	  if(NodeUtil.mayHaveSideEffects(left)&&    rightVal!=    null)    {    	non-compiled	[CE]  	38	None	replace
253	[BUG]  [BUGGY]  if(!NodeUtil.mayHaveSideEffects(left)&&!NodeUtil.mayHaveSideEffects(rightVal))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(!NodeUtil.mayHaveSideEffects(left)&&!NodeUtil.mayHaveSideEffects(rightVal))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(!NodeUtil.mayHaveSideEffects(left)&&!NodeUtil.mayHaveSideEffects(rightVal))  {	  if(!NodeUtil.mayHaveSideEffects(left))    {    	non-compiled	[CE]  	16	None	replace
254	[BUG]  [BUGGY]  if(n.getType()  ==  Token.OR  &&!NodeUtil.mayHaveSideEffects(left))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(n.getType()  ==  Token.OR  &&!NodeUtil.mayHaveSideEffects(left))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(n.getType()  ==  Token.OR  &&!NodeUtil.mayHaveSideEffects(left))  {	  if(!NodeUtil.mayHaveSideEffects(left))    {    	non-compiled	[CE]  	16	None	replace
255	[BUG]  [BUGGY]  if(!NodeUtil.mayHaveSideEffects(left)&&  n.hasChildren())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(!NodeUtil.mayHaveSideEffects(left)&&  n.hasChildren())  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(!NodeUtil.mayHaveSideEffects(left)&&  n.hasChildren())  {	  if(!NodeUtil.mayHaveSideEffects(left))    {    	non-compiled	[CE]  	16	None	replace
256	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(n)&&  NodeUtil.getBooleanValue(nVal)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayEffectMutableState(n)&&  NodeUtil.getBooleanValue(nVal)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(n)&&  NodeUtil.getBooleanValue(nVal)  ==  TernaryValue.UNKNOWN)  {	  if    (NodeUtil.getBooleanValue(nVal)    ==    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	26	None	replace
257	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(leftVal)&&  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(leftVal)&&  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(leftVal)&&  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(n)&&    NodeUtil.getBooleanValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	4	None	replace
258	[BUG]  [BUGGY]  Node  n  =  rightVal.cloneTree();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  n  =  rightVal.cloneTree();  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  n  =  rightVal.cloneTree();	  Node    n    =    rightVal.getFirstChild();    	non-compiled	[CE]  	49	None	replace
259	[BUG]  [BUGGY]  Node  n  =  rightVal.toString();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  n  =  rightVal.toString();  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  n  =  rightVal.toString();	  Node    n    =    rightVal.getFirstChild();    	non-compiled	[CE]  	49	None	replace
260	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(left)||  NodeUtil.mayHaveSideEffects(rightVal))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayEffectMutableState(left)||  NodeUtil.mayHaveSideEffects(rightVal))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(left)||  NodeUtil.mayHaveSideEffects(rightVal))  {	  if(NodeUtil.mayHaveSideEffects(rightVal)||    NodeUtil.mayHaveSideEffects(left))    {    	non-compiled	[CE]  	14	None	replace
261	[BUG]  [BUGGY]  if(n.getType()  ==  Token.OR  &&!NodeUtil.mayHaveSideEffects(rightVal))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(n.getType()  ==  Token.OR  &&!NodeUtil.mayHaveSideEffects(rightVal))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(n.getType()  ==  Token.OR  &&!NodeUtil.mayHaveSideEffects(rightVal))  {	  if(!NodeUtil.mayHaveSideEffects(rightVal))    {    	non-compiled	[CE]  	15	None	replace
262	[BUG]  [BUGGY]  if(!NodeUtil.mayHaveSideEffects(rightVal)&&  n.hasChildren())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(!NodeUtil.mayHaveSideEffects(rightVal)&&  n.hasChildren())  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(!NodeUtil.mayHaveSideEffects(rightVal)&&  n.hasChildren())  {	  if(!NodeUtil.mayHaveSideEffects(rightVal))    {    	non-compiled	[CE]  	15	None	replace
263	[BUG]  [BUGGY]  if(!NodeUtil.mayHaveSideEffects(rightVal)&&!NodeUtil.mayHaveSideEffects(rightVal))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(!NodeUtil.mayHaveSideEffects(rightVal)&&!NodeUtil.mayHaveSideEffects(rightVal))  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(!NodeUtil.mayHaveSideEffects(rightVal)&&!NodeUtil.mayHaveSideEffects(rightVal))  {	  if(!NodeUtil.mayHaveSideEffects(rightVal))    {    	non-compiled	[CE]  	15	None	replace
264	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getConditionExpression(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getConditionExpression(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getConditionExpression(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getAssignedValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	7	None	replace
265	[BUG]  [BUGGY]  Node  rightParent  =  rightVal.toString();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  rightParent  =  rightVal.toString();  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  rightParent  =  rightVal.toString();	  Node    rightParent    =    rightVal.getParent();    	non-compiled	[CE]  	23	None	replace
266	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getBooleanValue(nVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getBooleanValue(nVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getBooleanValue(nVal)!=  TernaryValue.UNKNOWN)  {	  if    (NodeUtil.getBooleanValue(nVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	30	None	replace
267	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(n)&&  NodeUtil.getBooleanValue(nVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayEffectMutableState(n)&&  NodeUtil.getBooleanValue(nVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(n)&&  NodeUtil.getBooleanValue(nVal)!=  TernaryValue.UNKNOWN)  {	  if    (NodeUtil.getBooleanValue(nVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	30	None	replace
268	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(n)&&  NodeUtil.getBooleanValue(nVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(n)&&  NodeUtil.getBooleanValue(nVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(n)&&  NodeUtil.getBooleanValue(nVal)!=  TernaryValue.UNKNOWN)  {	  if    (NodeUtil.getBooleanValue(nVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	30	None	replace
269	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getIntValue(nVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getIntValue(nVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getIntValue(nVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getIntValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	53	None	replace
270	[BUG]  [BUGGY]  Node  left  =  rightVal.toString(true);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  left  =  rightVal.toString(true);  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  left  =  rightVal.toString(true);	  Node    left    =    rightVal.toBoolean(true);    	non-compiled	[CE]  	19	None	replace
271	[BUG]  [BUGGY]  Node  left  =  rightVal.toString(false);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  Node  left  =  rightVal.toString(false);  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  left  =  rightVal.toString(false);	  Node    left    =    rightVal.toBoolean(true);    	non-compiled	[CE]  	19	None	replace
272	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getValue(rightVal)  ==  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getBooleanValue(rightVal)    ==    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	3	None	replace
273	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getConditionExpression(rightVal)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getConditionExpression(rightVal)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getConditionExpression(rightVal)  ==  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getBooleanValue(rightVal)    ==    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	3	None	replace
274	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getBooleanValue(rightVal)>  TernaryValue.UNKNOWN)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);      [BUGGY]  if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getBooleanValue(rightVal)>  TernaryValue.UNKNOWN)  {  [BUGGY]      int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getBooleanValue(rightVal)>  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayEffectMutableState(left)&&    NodeUtil.getBooleanValue(rightVal)    >=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	35	None	replace
