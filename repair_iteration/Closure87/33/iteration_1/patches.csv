bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getBooleanValue(left)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getBooleanValue(left)!=  TernaryValue.UNKNOWN)  {  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getBooleanValue(left)!=  TernaryValue.UNKNOWN)  {	  if    (NodeUtil.getBooleanValue(left)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	1	None	replace
2	[BUG]  [BUGGY]  if  (NodeUtil.getBooleanValue(left)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  if  (NodeUtil.getBooleanValue(left)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if  (NodeUtil.getBooleanValue(left)  ==  TernaryValue.UNKNOWN)  {	  if    (NodeUtil.getBooleanValue(left)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	1	None	replace
3	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getBooleanValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	4	None	replace
4	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(n)&&  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  if(NodeUtil.mayHaveSideEffects(n)&&  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(n)&&  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getBooleanValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	4	None	replace
5	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(right)&&  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  if(NodeUtil.mayHaveSideEffects(right)&&  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(right)&&  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getBooleanValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	4	None	replace
6	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getOwnerValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getOwnerValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getOwnerValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getBooleanValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	4	None	replace
7	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getAssignedValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getAssignedValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getAssignedValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getBooleanValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	4	None	replace
8	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(left)||  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  if(NodeUtil.mayEffectMutableState(left)||  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(left)||  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayEffectMutableState(left)&&    NodeUtil.getBooleanValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	8	None	replace
9	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayEffectMutableState(left)&&    NodeUtil.getBooleanValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	8	None	replace
10	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(n)&&  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  if(NodeUtil.mayEffectMutableState(n)&&  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(n)&&  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayEffectMutableState(left)&&    NodeUtil.getBooleanValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	8	None	replace
11	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(leftVal)&&  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  if(NodeUtil.mayEffectMutableState(leftVal)&&  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(leftVal)&&  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayEffectMutableState(left)&&    NodeUtil.getBooleanValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	8	None	replace
12	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(right)&&  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  if(NodeUtil.mayEffectMutableState(right)&&  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(right)&&  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayEffectMutableState(left)&&    NodeUtil.getBooleanValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	8	None	replace
13	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(rightVal))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  if(NodeUtil.mayHaveSideEffects(rightVal))  {  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(rightVal))  {	  if    (NodeUtil.mayHaveSideEffects(left))    {    	non-compiled	[CE]  	7	None	replace
14	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(rightVal)||  NodeUtil.mayHaveSideEffects(left))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  if(NodeUtil.mayHaveSideEffects(rightVal)||  NodeUtil.mayHaveSideEffects(left))  {  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(rightVal)||  NodeUtil.mayHaveSideEffects(left))  {	  if    (NodeUtil.mayHaveSideEffects(left))    {    	non-compiled	[CE]  	7	None	replace
15	[BUG]  [BUGGY]  if(!NodeUtil.mayHaveSideEffects(rightVal))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  if(!NodeUtil.mayHaveSideEffects(rightVal))  {  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(!NodeUtil.mayHaveSideEffects(rightVal))  {	  if    (NodeUtil.mayHaveSideEffects(left))    {    	non-compiled	[CE]  	7	None	replace
16	[BUG]  [BUGGY]  if(!NodeUtil.mayHaveSideEffects(left))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  if(!NodeUtil.mayHaveSideEffects(left))  {  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(!NodeUtil.mayHaveSideEffects(left))  {	  if    (NodeUtil.mayHaveSideEffects(left))    {    	non-compiled	[CE]  	7	None	replace
17	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(n))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  if(NodeUtil.mayHaveSideEffects(n))  {  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(n))  {	  if    (NodeUtil.mayHaveSideEffects(left))    {    	non-compiled	[CE]  	7	None	replace
18	[BUG]  [BUGGY]  Node  leftParent  =  rightVal.getParent();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  Node  leftParent  =  rightVal.getParent();  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  leftParent  =  rightVal.getParent();	      	non-compiled	[CE]  	5	None	replace
19	[BUG]  [BUGGY]  Node  left  =  rightVal.toBoolean(true);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  Node  left  =  rightVal.toBoolean(true);  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  left  =  rightVal.toBoolean(true);	      	non-compiled	[CE]  	5	None	replace
20	[BUG]  [BUGGY]  Node  leftParent  =  rightVal.cloneTree();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  Node  leftParent  =  rightVal.cloneTree();  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  leftParent  =  rightVal.cloneTree();	      	non-compiled	[CE]  	5	None	replace
21	[BUG]  [BUGGY]  Node  leftParent  =  rightVal.removeFirstChild();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  Node  leftParent  =  rightVal.removeFirstChild();  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  leftParent  =  rightVal.removeFirstChild();	      	non-compiled	[CE]  	5	None	replace
22	[BUG]  [BUGGY]  Node  left  =  rightVal.getNext();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  Node  left  =  rightVal.getNext();  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  left  =  rightVal.getNext();	      	non-compiled	[CE]  	5	None	replace
23	[BUG]  [BUGGY]  Node  rightParent  =  rightVal.getParent();  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  Node  rightParent  =  rightVal.getParent();  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  rightParent  =  rightVal.getParent();	      	non-compiled	[CE]  	5	None	replace
24	[BUG]  [BUGGY]  Node  leftParent  =  n.getParent();  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  Node  leftParent  =  n.getParent();  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  leftParent  =  n.getParent();	      	non-compiled	[CE]  	5	None	replace
25	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(n)&&  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  if(NodeUtil.mayHaveSideEffects(n)&&  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(n)&&  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {	  if    (NodeUtil.getBooleanValue(rightVal)    ==    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	3	None	replace
26	[BUG]  [BUGGY]  if  (NodeUtil.getBooleanValue(nVal)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  if  (NodeUtil.getBooleanValue(nVal)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if  (NodeUtil.getBooleanValue(nVal)  ==  TernaryValue.UNKNOWN)  {	  if    (NodeUtil.getBooleanValue(rightVal)    ==    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	3	None	replace
27	[BUG]  [BUGGY]  if  (NodeUtil.getBooleanValue(leftVal)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  if  (NodeUtil.getBooleanValue(leftVal)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if  (NodeUtil.getBooleanValue(leftVal)  ==  TernaryValue.UNKNOWN)  {	  if    (NodeUtil.getBooleanValue(rightVal)    ==    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	3	None	replace
28	[BUG]  [BUGGY]  if  (NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  if  (NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if  (NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {	  if    (NodeUtil.mayHaveSideEffects(left)||    NodeUtil.getBooleanValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	6	None	replace
29	[BUG]  [BUGGY]  if  (NodeUtil.mayHaveSideEffects(right)||  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  if  (NodeUtil.mayHaveSideEffects(right)||  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if  (NodeUtil.mayHaveSideEffects(right)||  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if    (NodeUtil.mayHaveSideEffects(left)||    NodeUtil.getBooleanValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	6	None	replace
30	[BUG]  [BUGGY]  if  (NodeUtil.getBooleanValue(nVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  if  (NodeUtil.getBooleanValue(nVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if  (NodeUtil.getBooleanValue(nVal)!=  TernaryValue.UNKNOWN)  {	  if    (NodeUtil.getBooleanValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	2	None	replace
31	[BUG]  [BUGGY]  if  (NodeUtil.getBooleanValue(leftVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  if  (NodeUtil.getBooleanValue(leftVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if  (NodeUtil.getBooleanValue(leftVal)!=  TernaryValue.UNKNOWN)  {	  if    (NodeUtil.getBooleanValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	2	None	replace
32	[BUG]  [BUGGY]  if(!NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  if(!NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(!NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getBooleanValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getBooleanValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	4	None	replace
33	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getOperatorValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getOperatorValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getOperatorValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getBooleanValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	4	None	replace
34	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getBooleanValue(rightVal)  >=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getBooleanValue(rightVal)  >=  TernaryValue.UNKNOWN)  {  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getBooleanValue(rightVal)  >=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getBooleanValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	4	None	replace
35	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getBooleanValue(rightVal)  >=  TernaryValue.UNKNOWN)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getBooleanValue(rightVal)  >=  TernaryValue.UNKNOWN)  {  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getBooleanValue(rightVal)  >=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayEffectMutableState(left)&&    NodeUtil.getBooleanValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	8	None	replace
36	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.mayHaveSideEffects(rightVal))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.mayHaveSideEffects(rightVal))  {  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)||  NodeUtil.mayHaveSideEffects(rightVal))  {	  if    (NodeUtil.mayHaveSideEffects(left))    {    	non-compiled	[CE]  	7	None	replace
37	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.mayHaveSideEffects(rightVal))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.mayHaveSideEffects(rightVal))  {  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.mayHaveSideEffects(rightVal))  {	  if    (NodeUtil.mayHaveSideEffects(left))    {    	non-compiled	[CE]  	7	None	replace
38	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  rightVal!=  null)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  rightVal!=  null)  {  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  rightVal!=  null)  {	  if    (NodeUtil.mayHaveSideEffects(left))    {    	non-compiled	[CE]  	7	None	replace
39	[BUG]  [BUGGY]  Node  leftParent  =  rightVal.toBoolean(true);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  Node  leftParent  =  rightVal.toBoolean(true);  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  leftParent  =  rightVal.toBoolean(true);	      	non-compiled	[CE]  	5	None	replace
40	[BUG]  [BUGGY]  Integer  n  =  rightVal.toBoolean(true);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  Integer  n  =  rightVal.toBoolean(true);  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Integer  n  =  rightVal.toBoolean(true);	      	non-compiled	[CE]  	5	None	replace
41	[BUG]  [BUGGY]  Integer  n  =  rightVal.toBoolean(false);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  Integer  n  =  rightVal.toBoolean(false);  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Integer  n  =  rightVal.toBoolean(false);	      	non-compiled	[CE]  	5	None	replace
42	[BUG]  [BUGGY]  if  (NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getBooleanValue(left)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  if  (NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getBooleanValue(left)!=  TernaryValue.UNKNOWN)  {  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if  (NodeUtil.mayHaveSideEffects(left)||  NodeUtil.getBooleanValue(left)!=  TernaryValue.UNKNOWN)  {	  if    (NodeUtil.getBooleanValue(left)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	1	None	replace
43	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(n)||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  if(NodeUtil.mayHaveSideEffects(n)||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(n)||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {	  if    (NodeUtil.getBooleanValue(rightVal)    ==    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	3	None	replace
44	[BUG]  [BUGGY]  if(NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN  ||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  if(NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN  ||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN  ||  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {	  if    (NodeUtil.getBooleanValue(rightVal)    ==    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	3	None	replace
45	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  rightVal.isLowerBound())  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  rightVal.isLowerBound())  {  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  rightVal.isLowerBound())  {	  if    (NodeUtil.mayHaveSideEffects(left))    {    	non-compiled	[CE]  	7	None	replace
46	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getBooleanValue(left)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getBooleanValue(left)!=  TernaryValue.UNKNOWN)  {  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getBooleanValue(left)!=  TernaryValue.UNKNOWN)  {	  if    (NodeUtil.getBooleanValue(left)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	1	None	replace
47	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getAssignedValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getAssignedValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getAssignedValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayEffectMutableState(left)&&    NodeUtil.getBooleanValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	8	None	replace
48	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getIntValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getIntValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(left)&&  NodeUtil.getIntValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayEffectMutableState(left)&&    NodeUtil.getBooleanValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	8	None	replace
49	[BUG]  [BUGGY]  Node  n  =  rightVal.getFirstChild();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  Node  n  =  rightVal.getFirstChild();  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  n  =  rightVal.getFirstChild();	      	non-compiled	[CE]  	5	None	replace
50	[BUG]  [BUGGY]  n  =  rightVal.toBoolean(true);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  n  =  rightVal.toBoolean(true);  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	n  =  rightVal.toBoolean(true);	      	non-compiled	[CE]  	5	None	replace
51	[BUG]  [BUGGY]  Node  n  =  rightVal.getNext();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  Node  n  =  rightVal.getNext();  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	Node  n  =  rightVal.getNext();	      	non-compiled	[CE]  	5	None	replace
52	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getConditionalValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getConditionalValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getConditionalValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getBooleanValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	4	None	replace
53	[BUG]  [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getIntValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getIntValue(rightVal)!=  TernaryValue.UNKNOWN)  {  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayHaveSideEffects(left)&&  NodeUtil.getIntValue(rightVal)!=  TernaryValue.UNKNOWN)  {	  if(NodeUtil.mayHaveSideEffects(left)&&    NodeUtil.getBooleanValue(rightVal)!=    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	4	None	replace
54	[BUG]  [BUGGY]  if(NodeUtil.mayEffectMutableState(n)&&  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);    [BUGGY]  if(NodeUtil.mayEffectMutableState(n)&&  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {  [BUGGY]    int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  }  else  if  (!mayHaveSideEffects(left))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	728	728	1	replace	if(NodeUtil.mayEffectMutableState(n)&&  NodeUtil.getBooleanValue(rightVal)  ==  TernaryValue.UNKNOWN)  {	  if    (NodeUtil.getBooleanValue(rightVal)    ==    TernaryValue.UNKNOWN)    {    	non-compiled	[CE]  	3	None	replace
