bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getLastChild()  ==  null)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getLastChild()  ==  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  expr.getLastChild()  ==  null)  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()    ==    null)    {    	non-compiled	[CE]  ')'  expected	13	None	replace
2	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getLastChild()!=  null)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getLastChild()!=  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  expr.getLastChild()!=  null)  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()    ==    null)    {    	non-compiled	[CE]  ')'  expected	13	None	replace
3	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  elseBranchIsExpressionBlock)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  elseBranchIsExpressionBlock)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  elseBranchIsExpressionBlock)  {	  if(elseBranch.getType()    ==    Token.NOT    &&    elseBranchIsExpressionBlock)    {    	non-compiled	[CE]  ')'  expected	83	None	replace
4	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  ||  elseBranchIsExpressionBlock)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  ||  elseBranchIsExpressionBlock)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.NOT  ||  elseBranchIsExpressionBlock)  {	  if(elseBranch.getType()    ==    Token.NOT    &&    elseBranchIsExpressionBlock)    {    	non-compiled	[CE]  ')'  expected	83	None	replace
5	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  &&  elseBranchIsVar)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  &&  elseBranchIsVar)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.NOT  &&  elseBranchIsVar)  {	  if(elseBranch.getType()    ==    Token.NOT    &&    elseBranchIsExpressionBlock)    {    	non-compiled	[CE]  ')'  expected	83	None	replace
6	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.NOT  &&  elseBranchIsExpressionBlock)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.NOT  &&  elseBranchIsExpressionBlock)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.NOT  &&  elseBranchIsExpressionBlock)  {	  if(elseBranch.getType()    ==    Token.NOT    &&    elseBranchIsExpressionBlock)    {    	non-compiled	[CE]  ')'  expected	83	None	replace
7	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NOT  &&  elseBranchIsExpressionBlock)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()  ==  Token.NOT  &&  elseBranchIsExpressionBlock)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()  ==  Token.NOT  &&  elseBranchIsExpressionBlock)  {	  if(elseBranch.getType()    ==    Token.NOT    &&    elseBranchIsExpressionBlock)    {    	non-compiled	[CE]  ')'  expected	83	None	replace
8	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.VAR  &&  elseBranchIsExpressionBlock)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.VAR  &&  elseBranchIsExpressionBlock)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.VAR  &&  elseBranchIsExpressionBlock)  {	  if(elseBranch.getType()    ==    Token.NOT    &&    elseBranchIsExpressionBlock)    {    	non-compiled	[CE]  ')'  expected	83	None	replace
9	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.RETURN  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.RETURN  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.RETURN  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(expr.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  ')'  expected	113	None	replace
10	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.RETURN  &&  expr.getLastChild().getString().equals( "prototype "))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.RETURN  &&  expr.getLastChild().getString().equals( "prototype "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.RETURN  &&  expr.getLastChild().getString().equals( "prototype "))  {	  if(expr.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  ')'  expected	113	None	replace
11	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.RETURN  ||  expr.getType()  ==  Token.CALL)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.RETURN  ||  expr.getType()  ==  Token.CALL)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.RETURN  ||  expr.getType()  ==  Token.CALL)  {	  if(expr.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  ')'  expected	113	None	replace
12	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.RETURN  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.RETURN  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.RETURN  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {	  if(expr.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  ')'  expected	113	None	replace
13	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.RETURN  &&  isPropertyAssignmentInExpression(expr))  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.RETURN  &&  isPropertyAssignmentInExpression(expr))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.RETURN  &&  isPropertyAssignmentInExpression(expr))  {	  if(expr.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  ')'  expected	113	None	replace
14	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.RETURN  &&  isLowerPrecedenceInExpression(expr))  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.RETURN  &&  isLowerPrecedenceInExpression(expr))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.RETURN  &&  isLowerPrecedenceInExpression(expr))  {	  if(expr.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  ')'  expected	113	None	replace
15	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  null)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  null)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild()    ==    null)    {    	non-compiled	[CE]  ')'  expected	74	None	replace
16	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild()!=  null)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild()!=  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild()!=  null)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild()    ==    null)    {    	non-compiled	[CE]  ')'  expected	74	None	replace
17	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  null)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  null)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild()    ==    null)    {    	non-compiled	[CE]  ')'  expected	74	None	replace
18	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  cond.getFirstChild()  ==  null)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  cond.getFirstChild()  ==  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CALL  &&  cond.getFirstChild()  ==  null)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild()    ==    null)    {    	non-compiled	[CE]  ')'  expected	74	None	replace
19	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getLastChild()  ==  null)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getLastChild()  ==  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.CALL  &&  expr.getLastChild()  ==  null)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild()    ==    null)    {    	non-compiled	[CE]  ')'  expected	74	None	replace
20	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  expr.getFirstChild()!=  null)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  expr.getFirstChild()!=  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()  ==  Token.CALL  &&  expr.getFirstChild()!=  null)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild()!=    null)    {    	non-compiled	[CE]  ')'  expected	27	None	replace
21	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getString().equals( "prototype "))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getString().equals( "prototype "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getString().equals( "prototype "))  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild()!=    null)    {    	non-compiled	[CE]  ')'  expected	27	None	replace
22	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getLastChild()!=  null)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getLastChild()!=  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.CALL  &&  expr.getLastChild()!=  null)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild()!=    null)    {    	non-compiled	[CE]  ')'  expected	27	None	replace
23	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  cond.getFirstChild()!=  null)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  cond.getFirstChild()!=  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CALL  &&  cond.getFirstChild()!=  null)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild()!=    null)    {    	non-compiled	[CE]  ')'  expected	27	None	replace
24	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getType()  ==  Token.CALL)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getType()  ==  Token.CALL)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  &&  expr.getType()  ==  Token.CALL)  {	  if(expr.getType()    ==    Token.VAR    ||    expr.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	44	None	replace
25	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CALL  ||  expr.getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CALL  ||  expr.getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CALL  ||  expr.getType()  ==  Token.VAR)  {	  if(expr.getType()    ==    Token.VAR    ||    expr.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	44	None	replace
26	[BUG]  [BUGGY]  if(expr.getType()!=  Token.VAR  &&  expr.getType()  ==  Token.CALL)  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()!=  Token.VAR  &&  expr.getType()  ==  Token.CALL)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()!=  Token.VAR  &&  expr.getType()  ==  Token.CALL)  {	  if(expr.getType()    ==    Token.VAR    ||    expr.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	44	None	replace
27	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  ||  expr.getType()!=  Token.CALL)  {  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  ||  expr.getType()!=  Token.CALL)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  ||  expr.getType()!=  Token.CALL)  {	  if(expr.getType()    ==    Token.VAR    ||    expr.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	44	None	replace
28	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  ||  expr.getType()  ==  Token.CALL)  {  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()  ==  Token.VAR  ||  expr.getType()  ==  Token.CALL)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()  ==  Token.VAR  ||  expr.getType()  ==  Token.CALL)  {	  if(expr.getType()    ==    Token.VAR    ||    expr.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	44	None	replace
29	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.VAR  ||  expr.getType()  ==  Token.CALL)  {  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.VAR  ||  expr.getType()  ==  Token.CALL)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.VAR  ||  expr.getType()  ==  Token.CALL)  {	  if(expr.getType()    ==    Token.VAR    ||    expr.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	44	None	replace
30	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(cond.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(cond.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(cond.getFirstChild(),  OR_PRECEDENCE))  {	  if(expr.getType()    ==    Token.VAR    &&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	42	None	replace
31	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(expr.getType()    ==    Token.VAR    &&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	42	None	replace
32	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(expr.getType()    ==    Token.VAR    &&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	42	None	replace
33	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {	  if(expr.getType()    ==    Token.VAR    &&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	42	None	replace
34	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(expr.getType()    ==    Token.VAR    &&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	42	None	replace
35	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(expr.getType()    ==    Token.VAR    &&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	42	None	replace
36	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	26	None	replace
37	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	26	None	replace
38	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()!=  Token.VAR)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()!=  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()!=  Token.VAR)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	26	None	replace
39	[BUG]  [BUGGY]  if(expr.getType()!=  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()!=  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()!=  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	26	None	replace
40	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild().getType()  ==  Token.CALL)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild().getType()  ==  Token.CALL)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild().getType()  ==  Token.CALL)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	26	None	replace
41	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CALL  ||  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CALL  ||  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CALL  ||  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	26	None	replace
42	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  ||  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  ||  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  ||  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	35	None	replace
43	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  ||  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  ||  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  ||  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	35	None	replace
44	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.NOT  &&  cond.getType()!=  Token.CALL)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.NOT  &&  cond.getType()!=  Token.CALL)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.NOT  &&  cond.getType()!=  Token.CALL)  {	  if(cond.getType()    ==    Token.NOT    ||    cond.getType()!=    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	50	None	replace
45	[BUG]  [BUGGY]  if(cond.getType()!=  Token.NOT  &&  cond.getType()!=  Token.CALL)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()!=  Token.NOT  &&  cond.getType()!=  Token.CALL)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()!=  Token.NOT  &&  cond.getType()!=  Token.CALL)  {	  if(cond.getType()    ==    Token.NOT    ||    cond.getType()!=    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	50	None	replace
46	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  ||  cond.getType()!=  Token.CALL)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  ||  cond.getType()!=  Token.CALL)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  ||  cond.getType()!=  Token.CALL)  {	  if(cond.getType()    ==    Token.NOT    ||    cond.getType()!=    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	50	None	replace
47	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.NOT  ||  expr.getType()!=  Token.CALL)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.NOT  ||  expr.getType()!=  Token.CALL)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.NOT  ||  expr.getType()!=  Token.CALL)  {	  if(cond.getType()    ==    Token.NOT    ||    cond.getType()!=    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	50	None	replace
48	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getLastChild().getString().endsWith( "__ "))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getLastChild().getString().endsWith( "__ "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  expr.getLastChild().getString().endsWith( "__ "))  {	  if(elseBranch.getType()    ==    Token.NOT    &&    expr.getLastChild().getString().endsWith(   "__   "))    {    	non-compiled	[CE]  ')'  expected	118	None	replace
49	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild().getString().endsWith( "__ "))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild().getString().endsWith( "__ "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild().getString().endsWith( "__ "))  {	  if(elseBranch.getType()    ==    Token.NOT    &&    expr.getLastChild().getString().endsWith(   "__   "))    {    	non-compiled	[CE]  ')'  expected	118	None	replace
50	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  &&  expr.getFirstChild().getString().endsWith( "__ "))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  &&  expr.getFirstChild().getString().endsWith( "__ "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.NOT  &&  expr.getFirstChild().getString().endsWith( "__ "))  {	  if(elseBranch.getType()    ==    Token.NOT    &&    expr.getLastChild().getString().endsWith(   "__   "))    {    	non-compiled	[CE]  ')'  expected	118	None	replace
51	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NOT  &&  expr.getLastChild().getString().endsWith( "__ "))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()  ==  Token.NOT  &&  expr.getLastChild().getString().endsWith( "__ "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()  ==  Token.NOT  &&  expr.getLastChild().getString().endsWith( "__ "))  {	  if(elseBranch.getType()    ==    Token.NOT    &&    expr.getLastChild().getString().endsWith(   "__   "))    {    	non-compiled	[CE]  ')'  expected	118	None	replace
52	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getLastChild().getString().endsWith( "._ "))  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getLastChild().getString().endsWith( "._ "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  expr.getLastChild().getString().endsWith( "._ "))  {	  if(elseBranch.getType()    ==    Token.NOT    &&    expr.getLastChild().getString().endsWith(   "__   "))    {    	non-compiled	[CE]  ')'  expected	118	None	replace
53	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NOT  &&  expr.getType()  ==  Token.CALL)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()  ==  Token.NOT  &&  expr.getType()  ==  Token.CALL)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()  ==  Token.NOT  &&  expr.getType()  ==  Token.CALL)  {	  if(n.getType()    ==    Token.NOT    ||    expr.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	71	None	replace
54	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  ||  expr.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()  ==  Token.CALL  ||  expr.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()  ==  Token.CALL  ||  expr.getType()  ==  Token.NOT)  {	  if(n.getType()    ==    Token.NOT    ||    expr.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	71	None	replace
55	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  ||  expr.getType()!=  Token.CALL)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  ||  expr.getType()!=  Token.CALL)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  ||  expr.getType()!=  Token.CALL)  {	  if(n.getType()    ==    Token.NOT    ||    expr.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	71	None	replace
56	[BUG]  [BUGGY]  if(expr.getType()!=  Token.NOT  &&  expr.getFirstChild()!=  null)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()!=  Token.NOT  &&  expr.getFirstChild()!=  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()!=  Token.NOT  &&  expr.getFirstChild()!=  null)  {	  if(expr.getType()    ==    Token.NOT    ||    expr.getFirstChild()!=    null)    {    	non-compiled	[CE]  ')'  expected	8	None	replace
57	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.RETURN  ||  expr.getFirstChild()!=  null)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.RETURN  ||  expr.getFirstChild()!=  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.RETURN  ||  expr.getFirstChild()!=  null)  {	  if(expr.getType()    ==    Token.NOT    ||    expr.getFirstChild()!=    null)    {    	non-compiled	[CE]  ')'  expected	8	None	replace
58	[BUG]  [BUGGY]  if(cond.getType()!=  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()!=  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()!=  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(expr.getType()!=    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	38	None	replace
59	[BUG]  [BUGGY]  if(elseBranch.getType()!=  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()!=  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()!=  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(expr.getType()!=    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	38	None	replace
60	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getType()  ==  Token.CALL)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getType()  ==  Token.CALL)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  expr.getType()  ==  Token.CALL)  {	  if(cond.getType()    ==    Token.NOT    &&    expr.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	69	None	replace
61	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  cond.getType()  ==  Token.CALL)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  cond.getType()  ==  Token.CALL)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  cond.getType()  ==  Token.CALL)  {	  if(cond.getType()    ==    Token.NOT    &&    expr.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	69	None	replace
62	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  cond.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  cond.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CALL  &&  cond.getType()  ==  Token.NOT)  {	  if(cond.getType()    ==    Token.NOT    &&    expr.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	69	None	replace
63	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.CALL  &&  expr.getType()  ==  Token.NOT)  {	  if(cond.getType()    ==    Token.CALL    ||    expr.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	89	None	replace
64	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.RETURN  ||  cond.getType()  ==  Token.CALL  ||  expr.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.RETURN  ||  cond.getType()  ==  Token.CALL  ||  expr.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.RETURN  ||  cond.getType()  ==  Token.CALL  ||  expr.getType()  ==  Token.NOT)  {	  if(cond.getType()    ==    Token.CALL    ||    expr.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	89	None	replace
65	[BUG]  [BUGGY]  if(pr.getType()  ==  Token.CALL  ||  expr.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(pr.getType()  ==  Token.CALL  ||  expr.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(pr.getType()  ==  Token.CALL  ||  expr.getType()  ==  Token.NOT)  {	  if(cond.getType()    ==    Token.CALL    ||    expr.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	89	None	replace
66	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  ||  cond.getFirstChild()  ==  null)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  ||  cond.getFirstChild()  ==  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  ||  cond.getFirstChild()  ==  null)  {	  if(cond.getType()    ==    Token.NOT    ||    expr.getFirstChild()    ==    null)    {    	non-compiled	[CE]  ')'  expected	95	None	replace
67	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  ||  expr.getLastChild()  ==  null)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  ||  expr.getLastChild()  ==  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  ||  expr.getLastChild()  ==  null)  {	  if(cond.getType()    ==    Token.NOT    ||    expr.getFirstChild()    ==    null)    {    	non-compiled	[CE]  ')'  expected	95	None	replace
68	[BUG]  [BUGGY]  if(pr.getType()  ==  Token.NOT  ||  expr.getFirstChild()  ==  null)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(pr.getType()  ==  Token.NOT  ||  expr.getFirstChild()  ==  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(pr.getType()  ==  Token.NOT  ||  expr.getFirstChild()  ==  null)  {	  if(cond.getType()    ==    Token.NOT    ||    expr.getFirstChild()    ==    null)    {    	non-compiled	[CE]  ')'  expected	95	None	replace
69	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NAME  ||  expr.getFirstChild()  ==  null)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NAME  ||  expr.getFirstChild()  ==  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NAME  ||  expr.getFirstChild()  ==  null)  {	  if(cond.getType()    ==    Token.NOT    ||    expr.getFirstChild()    ==    null)    {    	non-compiled	[CE]  ')'  expected	95	None	replace
70	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild().getString().equals( "prototype "))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild().getString().equals( "prototype "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild().getString().equals( "prototype "))  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  ')'  expected	41	None	replace
71	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  &&  expr.getLastChild().getString().equals( "prototype "))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()  ==  Token.VAR  &&  expr.getLastChild().getString().equals( "prototype "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()  ==  Token.VAR  &&  expr.getLastChild().getString().equals( "prototype "))  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  ')'  expected	41	None	replace
72	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  ||  expr.getLastChild().getString().equals( "prototype "))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  ||  expr.getLastChild().getString().equals( "prototype "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  ||  expr.getLastChild().getString().equals( "prototype "))  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  ')'  expected	41	None	replace
73	[BUG]  [BUGGY]  if(expr.getType()!=  Token.VAR  &&  expr.getLastChild().getString().equals( "prototype "))  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()!=  Token.VAR  &&  expr.getLastChild().getString().equals( "prototype "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()!=  Token.VAR  &&  expr.getLastChild().getString().equals( "prototype "))  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  ')'  expected	41	None	replace
74	[BUG]  [BUGGY]  if(expr.getType()!=  Token.VAR  &&  expr.getFirstChild().getString().equals( "prototype "))  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()!=  Token.VAR  &&  expr.getFirstChild().getString().equals( "prototype "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()!=  Token.VAR  &&  expr.getFirstChild().getString().equals( "prototype "))  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  ')'  expected	41	None	replace
75	[BUG]  [BUGGY]  if(Expr.getType()  ==  Token.VAR  &&  expr.getLastChild().getString().equals( "prototype "))  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(Expr.getType()  ==  Token.VAR  &&  expr.getLastChild().getString().equals( "prototype "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(Expr.getType()  ==  Token.VAR  &&  expr.getLastChild().getString().equals( "prototype "))  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  ')'  expected	41	None	replace
76	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.NOT  &&  cond.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.NOT  &&  cond.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.NOT  &&  cond.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(expr.getType()    ==    Token.NOT    &&    cond.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	36	None	replace
77	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  cond.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  cond.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  cond.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.VAR)  {	  if(expr.getType()    ==    Token.NOT    &&    cond.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	36	None	replace
78	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  expr.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  expr.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()  ==  Token.CALL  &&  expr.getType()  ==  Token.NOT)  {	  if(expr.getType()    ==    Token.CALL    &&    expr.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	106	None	replace
79	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getType()!=  Token.NOT)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getType()!=  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CALL  &&  expr.getType()!=  Token.NOT)  {	  if(expr.getType()    ==    Token.CALL    &&    expr.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	106	None	replace
80	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.GETPROP  &&  expr.getType()  ==  Token.CALL  &&  expr.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.GETPROP  &&  expr.getType()  ==  Token.CALL  &&  expr.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.GETPROP  &&  expr.getType()  ==  Token.CALL  &&  expr.getType()  ==  Token.NOT)  {	  if(expr.getType()    ==    Token.CALL    &&    expr.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	106	None	replace
81	[BUG]  [BUGGY]  if(expr.getType()!=  Token.CALL  &&  expr.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()!=  Token.CALL  &&  expr.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()!=  Token.CALL  &&  expr.getType()  ==  Token.NOT)  {	  if(expr.getType()    ==    Token.CALL    &&    expr.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	106	None	replace
82	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(cond))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(cond))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(cond))  {	  if(expr.getType()    ==    Token.VAR    &&    isLowerPrecedenceInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	92	None	replace
83	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  ||  isLowerPrecedenceInExpression(expr))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  ||  isLowerPrecedenceInExpression(expr))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  ||  isLowerPrecedenceInExpression(expr))  {	  if(expr.getType()    ==    Token.VAR    &&    isLowerPrecedenceInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	92	None	replace
84	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(expr))  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(expr))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(expr))  {	  if(expr.getType()    ==    Token.VAR    &&    isLowerPrecedenceInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	92	None	replace
85	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(n))  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(n))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(n))  {	  if(expr.getType()    ==    Token.VAR    &&    isLowerPrecedenceInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	92	None	replace
86	[BUG]  [BUGGY]  Node  cond  =  expr.nextChild();  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  cond  =  expr.nextChild();  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  cond  =  expr.nextChild();	  Node    cond    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	62	None	replace
87	[BUG]  [BUGGY]  Node  cond2  =  expr.getFirstChild();  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  cond2  =  expr.getFirstChild();  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  cond2  =  expr.getFirstChild();	  Node    cond    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	62	None	replace
88	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  cond.getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  cond.getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  cond.getType()  ==  Token.VAR)  {	  if(expr.getType()    ==    Token.NOT    ||    cond.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	54	None	replace
89	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.NOT  ||  cond.getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.NOT  ||  cond.getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.NOT  ||  cond.getType()  ==  Token.VAR)  {	  if(expr.getType()    ==    Token.NOT    ||    cond.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	54	None	replace
90	[BUG]  [BUGGY]  if(consd.getType()  ==  Token.NOT  ||  expr.getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(consd.getType()  ==  Token.NOT  ||  expr.getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(consd.getType()  ==  Token.NOT  ||  expr.getType()  ==  Token.VAR)  {	  if(expr.getType()    ==    Token.NOT    ||    cond.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	54	None	replace
91	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  expr.getType()  ==  Token.VAR)  {	  if(expr.getType()    ==    Token.NOT    ||    cond.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	54	None	replace
92	[BUG]  [BUGGY]  if(expr.getType()!=  Token.NOT  &&  cond.getType()  ==  Token.CALL)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()!=  Token.NOT  &&  cond.getType()  ==  Token.CALL)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()!=  Token.NOT  &&  cond.getType()  ==  Token.CALL)  {	  if(cond.getType()!=    Token.NOT    &&    cond.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	51	None	replace
93	[BUG]  [BUGGY]  if(cond.getType()!=  Token.NOT  ||  cond.getType()  ==  Token.CALL)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()!=  Token.NOT  ||  cond.getType()  ==  Token.CALL)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()!=  Token.NOT  ||  cond.getType()  ==  Token.CALL)  {	  if(cond.getType()!=    Token.NOT    &&    cond.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	51	None	replace
94	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  cond.getType()!=  Token.NOT)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  cond.getType()!=  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.CALL  &&  cond.getType()!=  Token.NOT)  {	  if(cond.getType()!=    Token.NOT    &&    cond.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	51	None	replace
95	[BUG]  [BUGGY]  if(declaration.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(declaration.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(declaration.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.BLOCK)  {	  if(declaration.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	6	None	replace
96	[BUG]  [BUGGY]  if(declaration.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  ||  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(declaration.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  ||  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(declaration.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  ||  expr.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(declaration.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	6	None	replace
97	[BUG]  [BUGGY]  if(declaration.getType()  ==  Token.NOT  ||  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(declaration.getType()  ==  Token.NOT  ||  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(declaration.getType()  ==  Token.NOT  ||  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(declaration.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	6	None	replace
98	[BUG]  [BUGGY]  if(expr.getType()!=  Token.NOT  &&  expr.getFirstChild().getString().equals( "prototype "))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()!=  Token.NOT  &&  expr.getFirstChild().getString().equals( "prototype "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()!=  Token.NOT  &&  expr.getFirstChild().getString().equals( "prototype "))  {	  if(expr.getType()!=    Token.NOT    &&    expr.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  ')'  expected	34	None	replace
99	[BUG]  [BUGGY]  if(n.getType()!=  Token.NOT  &&  expr.getLastChild().getString().equals( "prototype "))  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()!=  Token.NOT  &&  expr.getLastChild().getString().equals( "prototype "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()!=  Token.NOT  &&  expr.getLastChild().getString().equals( "prototype "))  {	  if(expr.getType()!=    Token.NOT    &&    expr.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  ')'  expected	34	None	replace
100	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  ||  expr.getLastChild().getString().equals( "prototype   "))  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  ||  expr.getLastChild().getString().equals( "prototype   "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  ||  expr.getLastChild().getString().equals( "prototype   "))  {	  if(expr.getType()!=    Token.NOT    &&    expr.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  ')'  expected	34	None	replace
101	[BUG]  [BUGGY]  Node  cond  =  expr.getCondition();  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  cond  =  expr.getCondition();  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  cond  =  expr.getCondition();	  Node    cond    =    expr.getFirstChild();    	non-compiled	[CE]  ')'  expected	58	None	replace
102	[BUG]  [BUGGY]  Node  cond  =  expr.getOwnStatement();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  cond  =  expr.getOwnStatement();  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  cond  =  expr.getOwnStatement();	  Node    cond    =    expr.getFirstChild();    	non-compiled	[CE]  ')'  expected	58	None	replace
103	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  &&  expr.getType()  ==  Token.NOT)  {	  if(expr.getType()    ==    Token.VAR    ||    expr.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	108	None	replace
104	[BUG]  [BUGGY]  if(expr.getType()!=  Token.VAR  &&  expr.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()!=  Token.VAR  &&  expr.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()!=  Token.VAR  &&  expr.getType()  ==  Token.NOT)  {	  if(expr.getType()    ==    Token.VAR    ||    expr.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	108	None	replace
105	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  ||  expr.getType()!=  Token.NOT)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  ||  expr.getType()!=  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  ||  expr.getType()!=  Token.NOT)  {	  if(expr.getType()    ==    Token.VAR    ||    expr.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	108	None	replace
106	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  ||  expr.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()  ==  Token.VAR  ||  expr.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()  ==  Token.VAR  ||  expr.getType()  ==  Token.NOT)  {	  if(expr.getType()    ==    Token.VAR    ||    expr.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	108	None	replace
107	[BUG]  [BUGGY]  if(consd.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(consd.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(consd.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null)  {	  if(elseBranch.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null)    {    	non-compiled	[CE]  ')'  expected	81	None	replace
108	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(cond.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(cond.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(cond.getFirstChild(),  OR_PRECEDENCE))  {	  if(cond.getType()    ==    Token.CALL    &&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	24	None	replace
109	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(cond.getType()    ==    Token.CALL    &&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	24	None	replace
110	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {	  if(cond.getType()    ==    Token.CALL    &&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	24	None	replace
111	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(cond.getType()    ==    Token.CALL    &&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	24	None	replace
112	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(cond.getType()    ==    Token.CALL    &&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	24	None	replace
113	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(n.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(n.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(n.getFirstChild(),  OR_PRECEDENCE))  {	  if(cond.getType()    ==    Token.CALL    &&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	24	None	replace
114	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  &&  expr.getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  &&  expr.getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.NOT  &&  expr.getType()  ==  Token.VAR)  {	  if(elseBranch.getType()    ==    Token.NOT    ||    expr.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	66	None	replace
115	[BUG]  [BUGGY]  if(Expr.getType()  ==  Token.NOT  ||  expr.getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(Expr.getType()  ==  Token.NOT  ||  expr.getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(Expr.getType()  ==  Token.NOT  ||  expr.getType()  ==  Token.VAR)  {	  if(elseBranch.getType()    ==    Token.NOT    ||    expr.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	66	None	replace
116	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(elseBranch.getType()    ==    Token.NOT    &&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	115	None	replace
117	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.NOT  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.NOT  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.NOT  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(elseBranch.getType()    ==    Token.NOT    &&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	115	None	replace
118	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  &&  isLowerPrecedenceInExpression(cond.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  &&  isLowerPrecedenceInExpression(cond.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.NOT  &&  isLowerPrecedenceInExpression(cond.getFirstChild(),  OR_PRECEDENCE))  {	  if(elseBranch.getType()    ==    Token.NOT    &&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	115	None	replace
119	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  &&  isLowerPrecedenceInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  &&  isLowerPrecedenceInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.NOT  &&  isLowerPrecedenceInExpression(expr.getLastChild(),  OR_PRECEDENCE))  {	  if(elseBranch.getType()    ==    Token.NOT    &&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	115	None	replace
120	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NOT  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()  ==  Token.NOT  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()  ==  Token.NOT  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(elseBranch.getType()    ==    Token.NOT    &&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	115	None	replace
121	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NOT  ||  expr.getFirstChild()  ==  null)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()  ==  Token.NOT  ||  expr.getFirstChild()  ==  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()  ==  Token.NOT  ||  expr.getFirstChild()  ==  null)  {	  if(n.getType()    ==    Token.NOT    &&    expr.getFirstChild()    ==    null)    {    	non-compiled	[CE]  ')'  expected	15	None	replace
122	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.VAR)  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getLastChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	40	None	replace
123	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.VAR)  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getLastChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	40	None	replace
124	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  ||  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  ||  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  ||  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.VAR)  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getLastChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	40	None	replace
125	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  ||  expr.getLastChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  ||  expr.getLastChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  ||  expr.getLastChild().getType()  ==  Token.VAR)  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getLastChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	40	None	replace
126	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.VAR)  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getLastChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	40	None	replace
127	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getLastChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getLastChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  expr.getLastChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.VAR)  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getLastChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	40	None	replace
128	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.OR)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.OR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.OR)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild().getType()    ==    Token.OR)    {    	non-compiled	[CE]  ')'  expected	28	None	replace
129	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.OR)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.OR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.OR)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild().getType()    ==    Token.OR)    {    	non-compiled	[CE]  ')'  expected	28	None	replace
130	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()!=  Token.OR)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()!=  Token.OR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()!=  Token.OR)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild().getType()    ==    Token.OR)    {    	non-compiled	[CE]  ')'  expected	28	None	replace
131	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getLastChild().getType()  ==  Token.OR)  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getLastChild().getType()  ==  Token.OR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.CALL  &&  expr.getLastChild().getType()  ==  Token.OR)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild().getType()    ==    Token.OR)    {    	non-compiled	[CE]  ')'  expected	28	None	replace
132	[BUG]  [BUGGY]  if(expr.getType()!=  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.OR)  {  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()!=  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.OR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()!=  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.OR)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild().getType()    ==    Token.OR)    {    	non-compiled	[CE]  ')'  expected	28	None	replace
133	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.CALL  ||  expr.getFirstChild().getType()  ==  Token.OR)  {  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.CALL  ||  expr.getFirstChild().getType()  ==  Token.OR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.CALL  ||  expr.getFirstChild().getType()  ==  Token.OR)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild().getType()    ==    Token.OR)    {    	non-compiled	[CE]  ')'  expected	28	None	replace
134	[BUG]  [BUGGY]  if(pr.getType()  ==  Token.NOT  &&  expr.getType()  ==  Token.GETPROP)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(pr.getType()  ==  Token.NOT  &&  expr.getType()  ==  Token.GETPROP)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(pr.getType()  ==  Token.NOT  &&  expr.getType()  ==  Token.GETPROP)  {	  if(pr.getType()    ==    Token.NOT    ||    expr.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  ')'  expected	22	None	replace
135	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getType()  ==  Token.GETPROP)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getType()  ==  Token.GETPROP)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  expr.getType()  ==  Token.GETPROP)  {	  if(pr.getType()    ==    Token.NOT    ||    expr.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  ')'  expected	22	None	replace
136	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.GETPROP  ||  expr.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.GETPROP  ||  expr.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.GETPROP  ||  expr.getType()  ==  Token.NOT)  {	  if(pr.getType()    ==    Token.NOT    ||    expr.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  ')'  expected	22	None	replace
137	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  OR_PRECEDENCE)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  OR_PRECEDENCE)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  OR_PRECEDENCE)  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    parent)    {    	non-compiled	[CE]  ')'  expected	112	None	replace
138	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  expr)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(parent.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  expr)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(parent.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  expr)  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    parent)    {    	non-compiled	[CE]  ')'  expected	112	None	replace
139	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  cond)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  cond)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  cond)  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    parent)    {    	non-compiled	[CE]  ')'  expected	112	None	replace
140	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  ||  expr.getFirstChild()!=  parent)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  ||  expr.getFirstChild()!=  parent)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  ||  expr.getFirstChild()!=  parent)  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    parent)    {    	non-compiled	[CE]  ')'  expected	112	None	replace
141	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getLastChild()!=  parent)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getLastChild()!=  parent)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  expr.getLastChild()!=  parent)  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    parent)    {    	non-compiled	[CE]  ')'  expected	112	None	replace
142	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(cond.getType()    ==    Token.NOT    &&    expr.getFirstChild()    ==    null    ||    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	120	None	replace
143	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  ||  expr.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  ||  expr.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  ||  expr.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(cond.getType()    ==    Token.NOT    &&    expr.getFirstChild()    ==    null    ||    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	120	None	replace
144	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  ||  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  ||  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  ||  expr.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(cond.getType()    ==    Token.NOT    &&    expr.getFirstChild()    ==    null    ||    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	120	None	replace
145	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  ||  expr.getFirstChild()!=  null  ||  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  ||  expr.getFirstChild()!=  null  ||  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  ||  expr.getFirstChild()!=  null  ||  expr.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(cond.getType()    ==    Token.NOT    &&    expr.getFirstChild()    ==    null    ||    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	120	None	replace
146	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  ||  expr.getLastChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  ||  expr.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  ||  expr.getLastChild().getType()  ==  Token.BLOCK)  {	  if(cond.getType()    ==    Token.NOT    &&    expr.getFirstChild()    ==    null    ||    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	120	None	replace
147	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(cond.getType()    ==    Token.NOT    &&    expr.getFirstChild()    ==    null    ||    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	120	None	replace
148	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.NOT  ||  expr.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.NOT  ||  expr.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.NOT  ||  expr.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(cond.getType()    ==    Token.NOT    &&    expr.getFirstChild()    ==    null    ||    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	120	None	replace
149	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  ||  isPropertyAssignmentInExpression(expr))  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  ||  isPropertyAssignmentInExpression(expr))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  ||  isPropertyAssignmentInExpression(expr))  {	  if(expr.getType()    ==    Token.VAR    &&    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	46	None	replace
150	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  isPropertyAssignmentInExpression(cond))  {  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  isPropertyAssignmentInExpression(cond))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  &&  isPropertyAssignmentInExpression(cond))  {	  if(expr.getType()    ==    Token.VAR    &&    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	46	None	replace
151	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.VAR  &&  isPropertyAssignmentInExpression(expr))  {  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.VAR  &&  isPropertyAssignmentInExpression(expr))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.VAR  &&  isPropertyAssignmentInExpression(expr))  {	  if(expr.getType()    ==    Token.VAR    &&    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	46	None	replace
152	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  &&  isPropertyAssignmentInExpression(elseBranch))  {	  if(expr.getType()    ==    Token.VAR    &&    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	46	None	replace
153	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getLastChild().getString().equals( "prototype "))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getLastChild().getString().equals( "prototype "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CALL  &&  expr.getLastChild().getString().equals( "prototype "))  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  ')'  expected	25	None	replace
154	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild().getString().equals( "prototype "))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild().getString().equals( "prototype "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild().getString().equals( "prototype "))  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  ')'  expected	25	None	replace
155	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild().getString().equals( "prototype "))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild().getString().equals( "prototype "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild().getString().equals( "prototype "))  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  ')'  expected	25	None	replace
156	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  expr.getLastChild().getString().equals( "prototype "))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  expr.getLastChild().getString().equals( "prototype "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()  ==  Token.CALL  &&  expr.getLastChild().getString().equals( "prototype "))  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  ')'  expected	25	None	replace
157	[BUG]  [BUGGY]  if(expr.getType()!=  Token.CALL  &&  expr.getLastChild().getString().equals( "prototype "))  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()!=  Token.CALL  &&  expr.getLastChild().getString().equals( "prototype "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()!=  Token.CALL  &&  expr.getLastChild().getString().equals( "prototype "))  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  ')'  expected	25	None	replace
158	[BUG]  [BUGGY]  if(pr.getType()  ==  Token.NOT  &&  expr.getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(pr.getType()  ==  Token.NOT  &&  expr.getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(pr.getType()  ==  Token.NOT  &&  expr.getType()  ==  Token.VAR)  {	  if(pr.getType()    ==    Token.NOT    ||    expr.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	57	None	replace
159	[BUG]  [BUGGY]  if(pr.getType()  ==  Token.VAR  ||  expr.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(pr.getType()  ==  Token.VAR  ||  expr.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(pr.getType()  ==  Token.VAR  ||  expr.getType()  ==  Token.NOT)  {	  if(pr.getType()    ==    Token.NOT    ||    expr.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	57	None	replace
160	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  expr.getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  expr.getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  expr.getType()  ==  Token.VAR)  {	  if(elseBranch.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	84	None	replace
161	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.VAR  &&  expr.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.VAR  &&  expr.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.VAR  &&  expr.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(elseBranch.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	84	None	replace
162	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()  ==  Token.VAR)  {	  if(elseBranch.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	84	None	replace
163	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  ||  expr.getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  ||  expr.getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  ||  expr.getType()  ==  Token.VAR)  {	  if(elseBranch.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	84	None	replace
164	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.VAR  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.VAR  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.VAR  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(elseBranch.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	84	None	replace
165	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.VAR  &&  expr.getFirstChild().getType()  ==  Token.CALL)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.VAR  &&  expr.getFirstChild().getType()  ==  Token.CALL)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.VAR  &&  expr.getFirstChild().getType()  ==  Token.CALL)  {	  if(elseBranch.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	84	None	replace
166	[BUG]  [BUGGY]  if(pr.getType()  ==  Token.NOT  &&  expr.getType()  ==  Token.CALL)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(pr.getType()  ==  Token.NOT  &&  expr.getType()  ==  Token.CALL)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(pr.getType()  ==  Token.NOT  &&  expr.getType()  ==  Token.CALL)  {	  if(pr.getType()    ==    Token.NOT    ||    expr.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	72	None	replace
167	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  ||  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  ||  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  ||  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(n.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	37	None	replace
168	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NOT  ||  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()  ==  Token.NOT  ||  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()  ==  Token.NOT  ||  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(n.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	37	None	replace
169	[BUG]  [BUGGY]  if(expr.getType()!=  Token.NOT  &&  expr.getFirstChild()  ==  null)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()!=  Token.NOT  &&  expr.getFirstChild()  ==  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()!=  Token.NOT  &&  expr.getFirstChild()  ==  null)  {	  if(expr.getType()    ==    Token.NOT    ||    expr.getFirstChild()    ==    null)    {    	non-compiled	[CE]  ')'  expected	14	None	replace
170	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.RETURN  ||  expr.getFirstChild()  ==  null)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.RETURN  ||  expr.getFirstChild()  ==  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.RETURN  ||  expr.getFirstChild()  ==  null)  {	  if(expr.getType()    ==    Token.NOT    ||    expr.getFirstChild()    ==    null)    {    	non-compiled	[CE]  ')'  expected	14	None	replace
171	[BUG]  [BUGGY]  if(consd.getType()  ==  Token.CALL  ||  expr.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(consd.getType()  ==  Token.CALL  ||  expr.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(consd.getType()  ==  Token.CALL  ||  expr.getType()  ==  Token.NOT)  {	  if(expr.getType()    ==    Token.CALL    ||    cond.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	70	None	replace
172	[BUG]  [BUGGY]  if(consd.getType()  ==  Token.CALL  ||  cond.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(consd.getType()  ==  Token.CALL  ||  cond.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(consd.getType()  ==  Token.CALL  ||  cond.getType()  ==  Token.NOT)  {	  if(expr.getType()    ==    Token.CALL    ||    cond.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	70	None	replace
173	[BUG]  [BUGGY]  if(expr.getType()!=  Token.CALL  &&  cond.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()!=  Token.CALL  &&  cond.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()!=  Token.CALL  &&  cond.getType()  ==  Token.NOT)  {	  if(expr.getType()    ==    Token.CALL    ||    cond.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	70	None	replace
174	[BUG]  [BUGGY]  Node  cond  =  getBlockExpression(expr);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  cond  =  getBlockExpression(expr);  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  cond  =  getBlockExpression(expr);	  Node    cond    =    getBlockExpression(thenBranch);    	non-compiled	[CE]  ')'  expected	85	None	replace
175	[BUG]  [BUGGY]  Node  cond  =  getPropertyAssignmentInExpression(n);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  cond  =  getPropertyAssignmentInExpression(n);  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  cond  =  getPropertyAssignmentInExpression(n);	  Node    cond    =    getBlockExpression(thenBranch);    	non-compiled	[CE]  ')'  expected	85	None	replace
176	[BUG]  [BUGGY]  Node  cond  =  getPropertyAssignmentInExpression(expr);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  cond  =  getPropertyAssignmentInExpression(expr);  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  cond  =  getPropertyAssignmentInExpression(expr);	  Node    cond    =    getBlockExpression(thenBranch);    	non-compiled	[CE]  ')'  expected	85	None	replace
177	[BUG]  [BUGGY]  Node  cond  =  getConditionExpression(n);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  cond  =  getConditionExpression(n);  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  cond  =  getConditionExpression(n);	  Node    cond    =    getBlockExpression(thenBranch);    	non-compiled	[CE]  ')'  expected	85	None	replace
178	[BUG]  [BUGGY]  Node  cond  =  getConditionExpression(thenBranch);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  cond  =  getConditionExpression(thenBranch);  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  cond  =  getConditionExpression(thenBranch);	  Node    cond    =    getBlockExpression(thenBranch);    	non-compiled	[CE]  ')'  expected	85	None	replace
179	[BUG]  [BUGGY]  Node  cond  =  getBlockConditionExpression(thenBranch);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  cond  =  getBlockConditionExpression(thenBranch);  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  cond  =  getBlockConditionExpression(thenBranch);	  Node    cond    =    getBlockExpression(thenBranch);    	non-compiled	[CE]  ')'  expected	85	None	replace
180	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.NOT)  {	  if(elseBranch.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	78	None	replace
181	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  elseBranch.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  elseBranch.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  elseBranch.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR	  if(elseBranch.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	78	None	replace
182	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getChildCount()  >  2)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getChildCount()  >  2)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  &&  expr.getChildCount()  >  2)  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getChildCount()    >    1)    {    	non-compiled	[CE]  ')'  expected	43	None	replace
183	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getChildCount()  <  1)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getChildCount()  <  1)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  &&  expr.getChildCount()  <  1)  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getChildCount()    >    1)    {    	non-compiled	[CE]  ')'  expected	43	None	replace
184	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  ||  expr.getChildCount()  >  1)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  ||  expr.getChildCount()  >  1)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  ||  expr.getChildCount()  >  1)  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getChildCount()    >    1)    {    	non-compiled	[CE]  ')'  expected	43	None	replace
185	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getChildCount()  >=  1)  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getChildCount()  >=  1)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  &&  expr.getChildCount()  >=  1)  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getChildCount()    >    1)    {    	non-compiled	[CE]  ')'  expected	43	None	replace
186	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.VAR  &&  expr.getChildCount()  >  1)  {  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.VAR  &&  expr.getChildCount()  >  1)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.VAR  &&  expr.getChildCount()  >  1)  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getChildCount()    >    1)    {    	non-compiled	[CE]  ')'  expected	43	None	replace
187	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getChildCount()  <  2)  {  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getChildCount()  <  2)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  &&  expr.getChildCount()  <  2)  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getChildCount()    >    1)    {    	non-compiled	[CE]  ')'  expected	43	None	replace
188	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  cond.getType()  ==  Token.GETPROP)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  cond.getType()  ==  Token.GETPROP)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  cond.getType()  ==  Token.GETPROP)  {	  if(cond.getType()    ==    Token.NOT    &&    expr.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  ')'  expected	18	None	replace
189	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NOT  &&  expr.getType()  ==  Token.GETPROP)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()  ==  Token.NOT  &&  expr.getType()  ==  Token.GETPROP)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()  ==  Token.NOT  &&  expr.getType()  ==  Token.GETPROP)  {	  if(cond.getType()    ==    Token.NOT    &&    expr.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  ')'  expected	18	None	replace
190	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.GETPROP  &&  cond.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.GETPROP  &&  cond.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.GETPROP  &&  cond.getType()  ==  Token.NOT)  {	  if(cond.getType()    ==    Token.NOT    &&    expr.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  ')'  expected	18	None	replace
191	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.NAME  &&  cond.getType()  ==  Token.CALL)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.NAME  &&  cond.getType()  ==  Token.CALL)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.NAME  &&  cond.getType()  ==  Token.CALL)  {	  if(cond.getType()    ==    Token.NAME    ||    cond.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	96	None	replace
192	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NAME  ||  cond.getType()  ==  Token.CALL)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NAME  ||  cond.getType()  ==  Token.CALL)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NAME  ||  cond.getType()  ==  Token.CALL)  {	  if(cond.getType()    ==    Token.NAME    ||    cond.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	96	None	replace
193	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.NAME  ||  cond.getType()!=  Token.CALL)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.NAME  ||  cond.getType()!=  Token.CALL)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.NAME  ||  cond.getType()!=  Token.CALL)  {	  if(cond.getType()    ==    Token.NAME    ||    cond.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	96	None	replace
194	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.NAME  ||  expr.getType()  ==  Token.CALL)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.NAME  ||  expr.getType()  ==  Token.CALL)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.NAME  ||  expr.getType()  ==  Token.CALL)  {	  if(cond.getType()    ==    Token.NAME    ||    cond.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	96	None	replace
195	[BUG]  [BUGGY]  if(cond.getType()!=  Token.NAME  &&  cond.getType()  ==  Token.CALL)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()!=  Token.NAME  &&  cond.getType()  ==  Token.CALL)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()!=  Token.NAME  &&  cond.getType()  ==  Token.CALL)  {	  if(cond.getType()    ==    Token.NAME    ||    cond.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	96	None	replace
196	[BUG]  [BUGGY]  if(cond.getType()!=  Token.NAME  ||  cond.getType()  ==  Token.CALL)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()!=  Token.NAME  ||  cond.getType()  ==  Token.CALL)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()!=  Token.NAME  ||  cond.getType()  ==  Token.CALL)  {	  if(cond.getType()    ==    Token.NAME    ||    cond.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	96	None	replace
197	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	29	None	replace
198	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	29	None	replace
199	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getLastChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.CALL  &&  expr.getLastChild().getType()  ==  Token.BLOCK)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	29	None	replace
200	[BUG]  [BUGGY]  if(expr.getType()!=  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()!=  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()!=  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	29	None	replace
201	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()!=  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()!=  Token.BLOCK)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	29	None	replace
202	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.BLOCK  &&  expr.getFirstChild().getType()  ==  Token.CALL)  {  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.BLOCK  &&  expr.getFirstChild().getType()  ==  Token.CALL)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.BLOCK  &&  expr.getFirstChild().getType()  ==  Token.CALL)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	29	None	replace
203	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.CALL  &&  expr.getLastChild().getString().equals( "prototype "))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.CALL  &&  expr.getLastChild().getString().equals( "prototype "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.CALL  &&  expr.getLastChild().getString().equals( "prototype "))  {	  if(elseBranch.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	82	None	replace
204	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(elseBranch.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	82	None	replace
205	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(elseBranch.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	82	None	replace
206	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.NAME)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.NAME)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.NAME)  {	  if(elseBranch.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	82	None	replace
207	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.CALL  &&  expr.getFirstChild()!=  null)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.CALL  &&  expr.getFirstChild()!=  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.CALL  &&  expr.getFirstChild()!=  null)  {	  if(elseBranch.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	82	None	replace
208	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  &&  expr.getFirstChild().getString().equals( "prototype "))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  &&  expr.getFirstChild().getString().equals( "prototype "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.NOT  &&  expr.getFirstChild().getString().equals( "prototype "))  {	  if(elseBranch.getType()    ==    Token.NOT    &&    expr.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  ')'  expected	117	None	replace
209	[BUG]  [BUGGY]  if(Expr.getType()  ==  Token.NOT  &&  expr.getLastChild().getString().equals( "prototype "))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(Expr.getType()  ==  Token.NOT  &&  expr.getLastChild().getString().equals( "prototype "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(Expr.getType()  ==  Token.NOT  &&  expr.getLastChild().getString().equals( "prototype "))  {	  if(elseBranch.getType()    ==    Token.NOT    &&    expr.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  ')'  expected	117	None	replace
210	[BUG]  [BUGGY]  if(Expression.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(Expression.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(Expression.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(Expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	39	None	replace
211	[BUG]  [BUGGY]  if(Expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(Expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(Expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.VAR)  {	  if(Expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	39	None	replace
212	[BUG]  [BUGGY]  if(Expr.getType()  ==  Token.NOT  ||  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(Expr.getType()  ==  Token.NOT  ||  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(Expr.getType()  ==  Token.NOT  ||  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(Expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	39	None	replace
213	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  OR_PRECEDENCE)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  OR_PRECEDENCE)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  OR_PRECEDENCE)  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getFirstChild()!=    parent)    {    	non-compiled	[CE]  ')'  expected	100	None	replace
214	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  expr)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(parent.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  expr)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(parent.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  expr)  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getFirstChild()!=    parent)    {    	non-compiled	[CE]  ')'  expected	100	None	replace
215	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  cond)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  cond)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  cond)  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getFirstChild()!=    parent)    {    	non-compiled	[CE]  ')'  expected	100	None	replace
216	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()  ==  OR_PRECEDENCE)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()  ==  OR_PRECEDENCE)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()  ==  OR_PRECEDENCE)  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getFirstChild()!=    parent)    {    	non-compiled	[CE]  ')'  expected	100	None	replace
217	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getLastChild()!=  parent)  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getLastChild()!=  parent)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  &&  expr.getLastChild()!=  parent)  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getFirstChild()!=    parent)    {    	non-compiled	[CE]  ')'  expected	100	None	replace
218	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  cond.getFirstChild().getString().equals( "prototype "))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  cond.getFirstChild().getString().equals( "prototype "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  cond.getFirstChild().getString().equals( "prototype "))  {	  if(expr.getType()    ==    Token.NOT    &&    cond.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  ')'  expected	97	None	replace
219	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  cond.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  cond.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  cond.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.BLOCK)  {	  if(cond.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getLastChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	88	None	replace
220	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.BLOCK)  {	  if(cond.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getLastChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	88	None	replace
221	[BUG]  [BUGGY]  if(expr.getType()!=  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()!=  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()!=  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.BLOCK)  {	  if(cond.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getLastChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	88	None	replace
222	[BUG]  [BUGGY]  if(Expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(Expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(Expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.BLOCK)  {	  if(cond.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getLastChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	88	None	replace
223	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  ||  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  ||  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  ||  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.BLOCK)  {	  if(cond.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getLastChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	88	None	replace
224	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NAME  ||  expr.getType()  ==  Token.GETPROP)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NAME  ||  expr.getType()  ==  Token.GETPROP)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NAME  ||  expr.getType()  ==  Token.GETPROP)  {	  if(n.getType()    ==    Token.NOT    ||    expr.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  ')'  expected	20	None	replace
225	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CALL  ||  expr.getType()  ==  Token.GETPROP)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CALL  ||  expr.getType()  ==  Token.GETPROP)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CALL  ||  expr.getType()  ==  Token.GETPROP)  {	  if(n.getType()    ==    Token.NOT    ||    expr.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  ')'  expected	20	None	replace
226	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  ||  expr.getFirstChild().getString().equals( "prototype   "))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  ||  expr.getFirstChild().getString().equals( "prototype   "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  ||  expr.getFirstChild().getString().equals( "prototype   "))  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  ')'  expected	31	None	replace
227	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NOT  &&  expr.getFirstChild().getString().equals( "prototype "))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()  ==  Token.NOT  &&  expr.getFirstChild().getString().equals( "prototype "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()  ==  Token.NOT  &&  expr.getFirstChild().getString().equals( "prototype "))  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  ')'  expected	31	None	replace
228	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(cond.getFirstChild()))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(cond.getFirstChild()))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(cond.getFirstChild()))  {	  if(cond.getType()    ==    Token.CALL    &&    isLowerPrecedenceInExpression(expr.getFirstChild()))    {    	non-compiled	[CE]  ')'  expected	75	None	replace
229	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(expr.getFirstChild()))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(expr.getFirstChild()))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(expr.getFirstChild()))  {	  if(cond.getType()    ==    Token.CALL    &&    isLowerPrecedenceInExpression(expr.getFirstChild()))    {    	non-compiled	[CE]  ')'  expected	75	None	replace
230	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(expr.getLastChild()))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(expr.getLastChild()))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(expr.getLastChild()))  {	  if(cond.getType()    ==    Token.CALL    &&    isLowerPrecedenceInExpression(expr.getFirstChild()))    {    	non-compiled	[CE]  ')'  expected	75	None	replace
231	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(expr.getFirstChild()))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(expr.getFirstChild()))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(expr.getFirstChild()))  {	  if(cond.getType()    ==    Token.CALL    &&    isLowerPrecedenceInExpression(expr.getFirstChild()))    {    	non-compiled	[CE]  ')'  expected	75	None	replace
232	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(expr.getFirstChild()))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(expr.getFirstChild()))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(expr.getFirstChild()))  {	  if(cond.getType()    ==    Token.CALL    &&    isLowerPrecedenceInExpression(expr.getFirstChild()))    {    	non-compiled	[CE]  ')'  expected	75	None	replace
233	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.VAR  &&  expr.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.VAR  &&  expr.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.VAR  &&  expr.getType()  ==  Token.NOT)  {	  if(cond.getType()    ==    Token.VAR    ||    expr.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	94	None	replace
234	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  &&  expr.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()  ==  Token.VAR  &&  expr.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()  ==  Token.VAR  &&  expr.getType()  ==  Token.NOT)  {	  if(cond.getType()    ==    Token.VAR    ||    expr.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	94	None	replace
235	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.GETPROP)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.GETPROP)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.GETPROP)  {	  if(n.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	65	None	replace
236	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  ||  expr.getLastChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  ||  expr.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  ||  expr.getLastChild().getType()  ==  Token.BLOCK)  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getLastChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	4	None	replace
237	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.BLOCK)  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getLastChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	4	None	replace
238	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getLastChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getLastChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  expr.getLastChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.BLOCK)  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getLastChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	4	None	replace
239	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  ||  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  ||  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  ||  expr.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(n.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	3	None	replace
240	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NAME  &&  expr.getLastChild().getString().equals( "prototype "))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NAME  &&  expr.getLastChild().getString().equals( "prototype "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NAME  &&  expr.getLastChild().getString().equals( "prototype "))  {	  if(expr.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ')'  expected	67	None	replace
241	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NAME  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NAME  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NAME  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(expr.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ')'  expected	67	None	replace
242	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NAME  &&  expr.getChildCount()  >  1)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NAME  &&  expr.getChildCount()  >  1)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NAME  &&  expr.getChildCount()  >  1)  {	  if(expr.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ')'  expected	67	None	replace
243	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NAME  &&  expr.getFirstChild().getType()  ==  Token.CALL)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NAME  &&  expr.getFirstChild().getType()  ==  Token.CALL)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NAME  &&  expr.getFirstChild().getType()  ==  Token.CALL)  {	  if(expr.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ')'  expected	67	None	replace
244	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NAME  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NAME  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NAME  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(expr.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ')'  expected	67	None	replace
245	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NAME  &&  expr.getFirstChild()!=  parent)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NAME  &&  expr.getFirstChild()!=  parent)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NAME  &&  expr.getFirstChild()!=  parent)  {	  if(expr.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ')'  expected	67	None	replace
246	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {	  if(expr.getType()    ==    Token.VAR    &&    isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	93	None	replace
247	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  ||  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  ||  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  ||  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {	  if(expr.getType()    ==    Token.VAR    &&    isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	93	None	replace
248	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {	  if(expr.getType()    ==    Token.VAR    &&    isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	93	None	replace
249	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  expr.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  expr.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  expr.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {	  if(expr.getType()    ==    Token.VAR    &&    isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	93	None	replace
250	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {	  if(expr.getType()    ==    Token.VAR    &&    isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	93	None	replace
251	[BUG]  [BUGGY]  if(expr.getType()!=  Token.VAR  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()!=  Token.VAR  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()!=  Token.VAR  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {	  if(expr.getType()    ==    Token.VAR    &&    isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	93	None	replace
252	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.RETURN  ||  expr.getType()  ==  Token.GETPROP)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.RETURN  ||  expr.getType()  ==  Token.GETPROP)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.RETURN  ||  expr.getType()  ==  Token.GETPROP)  {	  if(expr.getType()    ==    Token.NOT    ||    expr.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  ')'  expected	17	None	replace
253	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  &&  expr.getType()  ==  Token.GETPROP)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  &&  expr.getType()  ==  Token.GETPROP)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.NOT  &&  expr.getType()  ==  Token.GETPROP)  {	  if(elseBranch.getType()    ==    Token.NOT    ||    expr.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  ')'  expected	77	None	replace
254	[BUG]  [BUGGY]  if(consd.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(consd.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(consd.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null)  {	  if(expr.getType()    ==    Token.NOT    &&    cond.getFirstChild()    ==    null)    {    	non-compiled	[CE]  ')'  expected	16	None	replace
255	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NOT  &&  expr.getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()  ==  Token.NOT  &&  expr.getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()  ==  Token.NOT  &&  expr.getType()  ==  Token.VAR)  {	  if(n.getType()    ==    Token.NOT    ||    expr.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	55	None	replace
256	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  ||  expr.getType()!=  Token.VAR)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  ||  expr.getType()!=  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  ||  expr.getType()!=  Token.VAR)  {	  if(n.getType()    ==    Token.NOT    ||    expr.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	55	None	replace
257	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  ||  cond.getFirstChild()!=  null)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  ||  cond.getFirstChild()!=  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  ||  cond.getFirstChild()!=  null)  {	  if(cond.getType()    ==    Token.NOT    ||    expr.getFirstChild()!=    null)    {    	non-compiled	[CE]  ')'  expected	11	None	replace
258	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  ||  expr.getLastChild()!=  null)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  ||  expr.getLastChild()!=  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  ||  expr.getLastChild()!=  null)  {	  if(cond.getType()    ==    Token.NOT    ||    expr.getFirstChild()!=    null)    {    	non-compiled	[CE]  ')'  expected	11	None	replace
259	[BUG]  [BUGGY]  if(expr.getType()!=  Token.NOT  ||  expr.getFirstChild()!=  null)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()!=  Token.NOT  ||  expr.getFirstChild()!=  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()!=  Token.NOT  ||  expr.getFirstChild()!=  null)  {	  if(cond.getType()    ==    Token.NOT    ||    expr.getFirstChild()!=    null)    {    	non-compiled	[CE]  ')'  expected	11	None	replace
260	[BUG]  [BUGGY]  if(pr.getType()  ==  Token.NOT  ||  expr.getFirstChild()!=  null)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(pr.getType()  ==  Token.NOT  ||  expr.getFirstChild()!=  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(pr.getType()  ==  Token.NOT  ||  expr.getFirstChild()!=  null)  {	  if(cond.getType()    ==    Token.NOT    ||    expr.getFirstChild()!=    null)    {    	non-compiled	[CE]  ')'  expected	11	None	replace
261	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NAME  ||  expr.getFirstChild()!=  null)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NAME  ||  expr.getFirstChild()!=  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NAME  ||  expr.getFirstChild()!=  null)  {	  if(cond.getType()    ==    Token.NOT    ||    expr.getFirstChild()!=    null)    {    	non-compiled	[CE]  ')'  expected	11	None	replace
262	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getType()  ==  Token.CATCH)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getType()  ==  Token.CATCH)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  &&  expr.getType()  ==  Token.CATCH)  {	  if(expr.getType()    ==    Token.VAR    ||    expr.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  ')'  expected	101	None	replace
263	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CATCH  ||  expr.getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CATCH  ||  expr.getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CATCH  ||  expr.getType()  ==  Token.VAR)  {	  if(expr.getType()    ==    Token.VAR    ||    expr.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  ')'  expected	101	None	replace
264	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  ||  expr.getType()  ==  Token.CATCH)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()  ==  Token.VAR  ||  expr.getType()  ==  Token.CATCH)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()  ==  Token.VAR  ||  expr.getType()  ==  Token.CATCH)  {	  if(expr.getType()    ==    Token.VAR    ||    expr.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  ')'  expected	101	None	replace
265	[BUG]  [BUGGY]  if(expr.getType()!=  Token.VAR  &&  expr.getType()  ==  Token.CATCH)  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()!=  Token.VAR  &&  expr.getType()  ==  Token.CATCH)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()!=  Token.VAR  &&  expr.getType()  ==  Token.CATCH)  {	  if(expr.getType()    ==    Token.VAR    ||    expr.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  ')'  expected	101	None	replace
266	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  ||  expr.getType()!=  Token.CATCH)  {  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  ||  expr.getType()!=  Token.CATCH)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  ||  expr.getType()!=  Token.CATCH)  {	  if(expr.getType()    ==    Token.VAR    ||    expr.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  ')'  expected	101	None	replace
267	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.VAR  ||  expr.getType()  ==  Token.CATCH)  {  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.VAR  ||  expr.getType()  ==  Token.CATCH)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.VAR  ||  expr.getType()  ==  Token.CATCH)  {	  if(expr.getType()    ==    Token.VAR    ||    expr.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  ')'  expected	101	None	replace
268	[BUG]  [BUGGY]  Node  cond  =  expr.getLastChild(),  OR_PRECEDENCE;  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  cond  =  expr.getLastChild(),  OR_PRECEDENCE;  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  cond  =  expr.getLastChild(),  OR_PRECEDENCE;	  Node    cond    =    expr.getLastChild();    	non-compiled	[CE]  ')'  expected	59	None	replace
269	[BUG]  [BUGGY]  Node  cond  =  expr.getLastChild(),  isLowerPrecedenceInExpression(expr);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  cond  =  expr.getLastChild(),  isLowerPrecedenceInExpression(expr);  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  cond  =  expr.getLastChild(),  isLowerPrecedenceInExpression(expr);	  Node    cond    =    expr.getLastChild();    	non-compiled	[CE]  ')'  expected	59	None	replace
270	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  &&  expr.getType()  ==  Token.CALL)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  &&  expr.getType()  ==  Token.CALL)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.NOT  &&  expr.getType()  ==  Token.CALL)  {	  if(elseBranch.getType()    ==    Token.NOT    ||    expr.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	90	None	replace
271	[BUG]  [BUGGY]  if(Expr.getType()  ==  Token.NOT  ||  expr.getType()  ==  Token.CALL)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(Expr.getType()  ==  Token.NOT  ||  expr.getType()  ==  Token.CALL)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(Expr.getType()  ==  Token.NOT  ||  expr.getType()  ==  Token.CALL)  {	  if(elseBranch.getType()    ==    Token.NOT    ||    expr.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	90	None	replace
272	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NAME  ||  expr.getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NAME  ||  expr.getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NAME  ||  expr.getType()  ==  Token.VAR)  {	  if(expr.getType()    ==    Token.NOT    ||    expr.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	52	None	replace
273	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.RETURN  ||  expr.getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.RETURN  ||  expr.getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.RETURN  ||  expr.getType()  ==  Token.VAR)  {	  if(expr.getType()    ==    Token.NOT    ||    expr.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	52	None	replace
274	[BUG]  [BUGGY]  Cond  cond  =  expr.getLastChild();  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Cond  cond  =  expr.getLastChild();  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Cond  cond  =  expr.getLastChild();	  Cond    cond    =    expr.getFirstChild();    	non-compiled	[CE]  ')'  expected	63	None	replace
275	[BUG]  [BUGGY]  Cond  cond  =  expr.getNext();  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Cond  cond  =  expr.getNext();  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Cond  cond  =  expr.getNext();	  Cond    cond    =    expr.getFirstChild();    	non-compiled	[CE]  ')'  expected	63	None	replace
276	[BUG]  [BUGGY]  Cond  cond  =  expr.getParent();  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Cond  cond  =  expr.getParent();  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Cond  cond  =  expr.getParent();	  Cond    cond    =    expr.getFirstChild();    	non-compiled	[CE]  ')'  expected	63	None	replace
277	[BUG]  [BUGGY]  Cond  cond  =  expr.removeFirstChild();  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Cond  cond  =  expr.removeFirstChild();  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Cond  cond  =  expr.removeFirstChild();	  Cond    cond    =    expr.getFirstChild();    	non-compiled	[CE]  ')'  expected	63	None	replace
278	[BUG]  [BUGGY]  Cond  cond  =  expr.getCondition();  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Cond  cond  =  expr.getCondition();  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Cond  cond  =  expr.getCondition();	  Cond    cond    =    expr.getFirstChild();    	non-compiled	[CE]  ')'  expected	63	None	replace
279	[BUG]  [BUGGY]  Cond  cond  =  expr.getConditionalParent();  [CE]  ')'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Cond  cond  =  expr.getConditionalParent();  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Cond  cond  =  expr.getConditionalParent();	  Cond    cond    =    expr.getFirstChild();    	non-compiled	[CE]  ')'  expected	63	None	replace
280	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.STRING  &&  expr.getLastChild().getString().equals( "prototype "))  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.STRING  &&  expr.getLastChild().getString().equals( "prototype "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.STRING  &&  expr.getLastChild().getString().equals( "prototype "))  {	  if(expr.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  ')'  expected	73	None	replace
281	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.STRING  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.STRING  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.STRING  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(expr.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  ')'  expected	73	None	replace
282	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.STRING  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.STRING  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.STRING  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {	  if(expr.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  ')'  expected	73	None	replace
283	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.STRING  &&  expr.getFirstChild()!=  null)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.STRING  &&  expr.getFirstChild()!=  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.STRING  &&  expr.getFirstChild()!=  null)  {	  if(expr.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  ')'  expected	73	None	replace
284	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.STRING  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.STRING  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.STRING  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(expr.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  ')'  expected	73	None	replace
285	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.STRING  &&  expr.hasChildren())  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.STRING  &&  expr.hasChildren())  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.STRING  &&  expr.hasChildren())  {	  if(expr.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  ')'  expected	73	None	replace
286	[BUG]  [BUGGY]  if(pr.getType()  ==  Token.NOT  &&  expr.getLastChild()!=  null)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(pr.getType()  ==  Token.NOT  &&  expr.getLastChild()!=  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(pr.getType()  ==  Token.NOT  &&  expr.getLastChild()!=  null)  {	  if(pr.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null)    {    	non-compiled	[CE]  ')'  expected	114	None	replace
287	[BUG]  [BUGGY]  if(pr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(pr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(pr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null)  {	  if(pr.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null)    {    	non-compiled	[CE]  ')'  expected	114	None	replace
288	[BUG]  [BUGGY]  if(expr.getType()!=  Token.NOT  &&  expr.getLastChild()!=  null)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()!=  Token.NOT  &&  expr.getLastChild()!=  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()!=  Token.NOT  &&  expr.getLastChild()!=  null)  {	  if(cond.getType()    ==    Token.NOT    &&    expr.getLastChild()!=    null)    {    	non-compiled	[CE]  ')'  expected	12	None	replace
289	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NOT  &&  expr.getLastChild()!=  null)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()  ==  Token.NOT  &&  expr.getLastChild()!=  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()  ==  Token.NOT  &&  expr.getLastChild()!=  null)  {	  if(cond.getType()    ==    Token.NOT    &&    expr.getLastChild()!=    null)    {    	non-compiled	[CE]  ')'  expected	12	None	replace
290	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.NOT  ||  expr.getLastChild()!=  null)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.NOT  ||  expr.getLastChild()!=  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.NOT  ||  expr.getLastChild()!=  null)  {	  if(cond.getType()    ==    Token.NOT    &&    expr.getLastChild()!=    null)    {    	non-compiled	[CE]  ')'  expected	12	None	replace
291	[BUG]  [BUGGY]  Node  cond  =  expr.getNext(),  OR_PRECEDENCE;  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  cond  =  expr.getNext(),  OR_PRECEDENCE;  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  cond  =  expr.getNext(),  OR_PRECEDENCE;	  Node    cond    =    expr.getNext();    	non-compiled	[CE]  ')'  expected	60	None	replace
292	[BUG]  [BUGGY]  Node  cond  =  expr.getNext()  -  1;  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  cond  =  expr.getNext()  -  1;  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  cond  =  expr.getNext()  -  1;	  Node    cond    =    expr.getNext();    	non-compiled	[CE]  ')'  expected	60	None	replace
293	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NOT  ||  expr.getFirstChild()!=  null)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()  ==  Token.NOT  ||  expr.getFirstChild()!=  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()  ==  Token.NOT  ||  expr.getFirstChild()!=  null)  {	  if(n.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null)    {    	non-compiled	[CE]  ')'  expected	9	None	replace
294	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	105	None	replace
295	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()  ==  Token.CALL  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	105	None	replace
296	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  cond.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  cond.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CALL  &&  cond.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	105	None	replace
297	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.VAR)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	105	None	replace
298	[BUG]  [BUGGY]  if(Expr.getType()  ==  Token.CALL  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(Expr.getType()  ==  Token.CALL  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(Expr.getType()  ==  Token.CALL  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	105	None	replace
299	[BUG]  [BUGGY]  if(expr.getType()!=  Token.CALL  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()!=  Token.CALL  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()!=  Token.CALL  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	105	None	replace
300	[BUG]  [BUGGY]  Node  cond  =  expr.getProp(Node.SOURCENAME_PROP);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  cond  =  expr.getProp(Node.SOURCENAME_PROP);  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  cond  =  expr.getProp(Node.SOURCENAME_PROP);	  Node    cond    =    expr.getParent();    	non-compiled	[CE]  ')'  expected	61	None	replace
301	[BUG]  [BUGGY]  Node  cond  =  expr.getContainingFunction();  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  cond  =  expr.getContainingFunction();  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  cond  =  expr.getContainingFunction();	  Node    cond    =    expr.getParent();    	non-compiled	[CE]  ')'  expected	61	None	replace
302	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  ||  expr.hasChildren())  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  ||  expr.hasChildren())  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  ||  expr.hasChildren())  {	  if(expr.getType()    ==    Token.VAR    &&    expr.hasChildren())    {    	non-compiled	[CE]  ')'  expected	45	None	replace
303	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.VAR  &&  expr.hasChildren())  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.VAR  &&  expr.hasChildren())  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.VAR  &&  expr.hasChildren())  {	  if(expr.getType()    ==    Token.VAR    &&    expr.hasChildren())    {    	non-compiled	[CE]  ')'  expected	45	None	replace
304	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.hasChildren()  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.hasChildren()  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  &&  expr.hasChildren()  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {	  if(expr.getType()    ==    Token.VAR    &&    expr.hasChildren())    {    	non-compiled	[CE]  ')'  expected	45	None	replace
305	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.hasChildren()  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.hasChildren()  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  &&  expr.hasChildren()  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(expr.getType()    ==    Token.VAR    &&    expr.hasChildren())    {    	non-compiled	[CE]  ')'  expected	45	None	replace
306	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.hasChildren()  ||  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.hasChildren()  ||  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  &&  expr.hasChildren()  ||  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {	  if(expr.getType()    ==    Token.VAR    &&    expr.hasChildren())    {    	non-compiled	[CE]  ')'  expected	45	None	replace
307	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  &&  expr.hasChildren())  {  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()  ==  Token.VAR  &&  expr.hasChildren())  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()  ==  Token.VAR  &&  expr.hasChildren())  {	  if(expr.getType()    ==    Token.VAR    &&    expr.hasChildren())    {    	non-compiled	[CE]  ')'  expected	45	None	replace
308	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getChildCount()  >  1)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getChildCount()  >  1)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CALL  &&  expr.getChildCount()  >  1)  {	  if(expr.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	23	None	replace
309	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {	  if(expr.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	23	None	replace
310	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild()!=  parent)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild()!=  parent)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild()!=  parent)  {	  if(expr.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	23	None	replace
311	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  isPropertyAssignmentInExpression(expr))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  isPropertyAssignmentInExpression(expr))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CALL  &&  isPropertyAssignmentInExpression(expr))  {	  if(expr.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	23	None	replace
312	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.GETPROP  ||  cond.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.GETPROP  ||  cond.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.GETPROP  ||  cond.getType()  ==  Token.NOT)  {	  if(expr.getType()    ==    Token.GETPROP    ||    cond.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	21	None	replace
313	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.GETPROP  ||  expr.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.GETPROP  ||  expr.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.GETPROP  ||  expr.getType()  ==  Token.NOT)  {	  if(expr.getType()    ==    Token.GETPROP    ||    cond.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	21	None	replace
314	[BUG]  [BUGGY]  if(consd.getType()  ==  Token.GETPROP  ||  expr.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(consd.getType()  ==  Token.GETPROP  ||  expr.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(consd.getType()  ==  Token.GETPROP  ||  expr.getType()  ==  Token.NOT)  {	  if(expr.getType()    ==    Token.GETPROP    ||    cond.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	21	None	replace
315	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.GETPROP  &&  expr.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.GETPROP  &&  expr.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.GETPROP  &&  expr.getType()  ==  Token.NOT)  {	  if(expr.getType()    ==    Token.GETPROP    ||    cond.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	21	None	replace
316	[BUG]  [BUGGY]  if(consd.getType()  ==  Token.GETPROP  ||  cond.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(consd.getType()  ==  Token.GETPROP  ||  cond.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(consd.getType()  ==  Token.GETPROP  ||  cond.getType()  ==  Token.NOT)  {	  if(expr.getType()    ==    Token.GETPROP    ||    cond.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	21	None	replace
317	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.RETURN  ||  expr.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.RETURN  ||  expr.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.RETURN  ||  expr.getType()  ==  Token.NOT)  {	  if(expr.getType()    ==    Token.CALL    ||    expr.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	103	None	replace
318	[BUG]  [BUGGY]  Node  parent  =  expr.getNext();  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  parent  =  expr.getNext();  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  parent  =  expr.getNext();	  Node    parent    =    expr.getParent();    	non-compiled	[CE]  ')'  expected	64	None	replace
319	[BUG]  [BUGGY]  Node  parent  =  expr.getLastChild();  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  parent  =  expr.getLastChild();  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  parent  =  expr.getLastChild();	  Node    parent    =    expr.getParent();    	non-compiled	[CE]  ')'  expected	64	None	replace
320	[BUG]  [BUGGY]  Node  parent  =  expr.getParent(),  cond;  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  parent  =  expr.getParent(),  cond;  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  parent  =  expr.getParent(),  cond;	  Node    parent    =    expr.getParent();    	non-compiled	[CE]  ')'  expected	64	None	replace
321	[BUG]  [BUGGY]  Node  parent  =  expr.getParent()  -  1;  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  parent  =  expr.getParent()  -  1;  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  parent  =  expr.getParent()  -  1;	  Node    parent    =    expr.getParent();    	non-compiled	[CE]  ')'  expected	64	None	replace
322	[BUG]  [BUGGY]  Node  parent  =  expr.getFirstChild();  [CE]  ')'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  parent  =  expr.getFirstChild();  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  parent  =  expr.getFirstChild();	  Node    parent    =    expr.getParent();    	non-compiled	[CE]  ')'  expected	64	None	replace
323	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(cond.getType()    ==    Token.NOT    &&    expr.getFirstChild()    ==    null    ||    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	109	None	replace
324	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  ||  expr.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  ||  expr.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  ||  expr.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(cond.getType()    ==    Token.NOT    &&    expr.getFirstChild()    ==    null    ||    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	109	None	replace
325	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  ||  expr.getFirstChild()!=  null  ||  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  ||  expr.getFirstChild()!=  null  ||  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  ||  expr.getFirstChild()!=  null  ||  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(cond.getType()    ==    Token.NOT    &&    expr.getFirstChild()    ==    null    ||    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	109	None	replace
326	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(cond.getType()    ==    Token.NOT    &&    expr.getFirstChild()    ==    null    ||    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	109	None	replace
327	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  ||  expr.getLastChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  ||  expr.getLastChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  ||  expr.getLastChild().getType()  ==  Token.VAR)  {	  if(cond.getType()    ==    Token.NOT    &&    expr.getFirstChild()    ==    null    ||    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	109	None	replace
328	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.NOT  ||  expr.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.NOT  ||  expr.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.NOT  ||  expr.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(cond.getType()    ==    Token.NOT    &&    expr.getFirstChild()    ==    null    ||    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	109	None	replace
329	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  OR_PRECEDENCE)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  OR_PRECEDENCE)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  OR_PRECEDENCE)  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  ')'  expected	111	None	replace
330	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  expr)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(parent.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  expr)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(parent.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  expr)  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  ')'  expected	111	None	replace
331	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  cond)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  cond)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  cond)  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  ')'  expected	111	None	replace
332	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  ||  expr.getFirstChild()  ==  parent)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  ||  expr.getFirstChild()  ==  parent)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  ||  expr.getFirstChild()  ==  parent)  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  ')'  expected	111	None	replace
333	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  parent)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  parent)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  parent)  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  ')'  expected	111	None	replace
334	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getLastChild()  ==  parent)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getLastChild()  ==  parent)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  expr.getLastChild()  ==  parent)  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  ')'  expected	111	None	replace
335	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getType()!=  Token.GETPROP)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getType()!=  Token.GETPROP)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  expr.getType()!=  Token.GETPROP)  {	  if(expr.getType()    ==    Token.NOT    ||    expr.getType()!=    Token.GETPROP)    {    	non-compiled	[CE]  ')'  expected	107	None	replace
336	[BUG]  [BUGGY]  if(expr.getType()!=  Token.NOT  &&  expr.getType()!=  Token.GETPROP)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()!=  Token.NOT  &&  expr.getType()!=  Token.GETPROP)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()!=  Token.NOT  &&  expr.getType()!=  Token.GETPROP)  {	  if(expr.getType()    ==    Token.NOT    ||    expr.getType()!=    Token.GETPROP)    {    	non-compiled	[CE]  ')'  expected	107	None	replace
337	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NAME  ||  expr.getType()!=  Token.GETPROP)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NAME  ||  expr.getType()!=  Token.GETPROP)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NAME  ||  expr.getType()!=  Token.GETPROP)  {	  if(expr.getType()    ==    Token.NOT    ||    expr.getType()!=    Token.GETPROP)    {    	non-compiled	[CE]  ')'  expected	107	None	replace
338	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.RETURN  ||  expr.getType()!=  Token.GETPROP)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.RETURN  ||  expr.getType()!=  Token.GETPROP)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.RETURN  ||  expr.getType()!=  Token.GETPROP)  {	  if(expr.getType()    ==    Token.NOT    ||    expr.getType()!=    Token.GETPROP)    {    	non-compiled	[CE]  ')'  expected	107	None	replace
339	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.GETPROP  ||  expr.getType()!=  Token.NOT)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.GETPROP  ||  expr.getType()!=  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.GETPROP  ||  expr.getType()!=  Token.NOT)  {	  if(expr.getType()    ==    Token.NOT    ||    expr.getType()!=    Token.GETPROP)    {    	non-compiled	[CE]  ')'  expected	107	None	replace
340	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  ||  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  ||  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  ||  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	1	None	replace
341	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  cond.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  cond.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.CALL  &&  cond.getType()  ==  Token.NOT)  {	  if(cond.getType()    ==    Token.NOT    &&    cond.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	47	None	replace
342	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  elseBranch.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  elseBranch.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  elseBranch.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(elseBranch.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	87	None	replace
343	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(elseBranch.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	87	None	replace
344	[BUG]  [BUGGY]  If(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild().getString().equals( "prototype "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  If(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild().getString().equals( "prototype "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	If(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild().getString().equals( "prototype "))  {	  If(expr.getType()    ==    Token.NOT    &&    expr.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  	98	None	replace
345	[BUG]  [BUGGY]  If(expr.getType()  ==  Token.NOT  ||  expr.getLastChild().getString().equals( "prototype   "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  If(expr.getType()  ==  Token.NOT  ||  expr.getLastChild().getString().equals( "prototype   "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	If(expr.getType()  ==  Token.NOT  ||  expr.getLastChild().getString().equals( "prototype   "))  {	  If(expr.getType()    ==    Token.NOT    &&    expr.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  	98	None	replace
346	[BUG]  [BUGGY]  If(n.getType()  ==  Token.NOT  &&  expr.getLastChild().getString().equals( "prototype "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  If(n.getType()  ==  Token.NOT  &&  expr.getLastChild().getString().equals( "prototype "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	If(n.getType()  ==  Token.NOT  &&  expr.getLastChild().getString().equals( "prototype "))  {	  If(expr.getType()    ==    Token.NOT    &&    expr.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  	98	None	replace
347	[BUG]  [BUGGY]  If(expr.getType()!=  Token.NOT  &&  expr.getLastChild().getString().equals( "prototype "))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  If(expr.getType()!=  Token.NOT  &&  expr.getLastChild().getString().equals( "prototype "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	If(expr.getType()!=  Token.NOT  &&  expr.getLastChild().getString().equals( "prototype "))  {	  If(expr.getType()    ==    Token.NOT    &&    expr.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  	98	None	replace
348	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NOT  ||  expr.getLastChild().getString().equals( "prototype   "))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()  ==  Token.NOT  ||  expr.getLastChild().getString().equals( "prototype   "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()  ==  Token.NOT  ||  expr.getLastChild().getString().equals( "prototype   "))  {	  if(n.getType()    ==    Token.NOT    &&    expr.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  ')'  expected	32	None	replace
349	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  ||  expr.hasChildren())  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  ||  expr.hasChildren())  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  ||  expr.hasChildren())  {	  if(expr.getType()    ==    Token.NOT    &&    expr.hasChildren())    {    	non-compiled	[CE]  ')'  expected	110	None	replace
350	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.NOT  &&  expr.hasChildren())  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.NOT  &&  expr.hasChildren())  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.NOT  &&  expr.hasChildren())  {	  if(expr.getType()    ==    Token.NOT    &&    expr.hasChildren())    {    	non-compiled	[CE]  ')'  expected	110	None	replace
351	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.hasChildren())  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.hasChildren())  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CALL  &&  expr.hasChildren())  {	  if(expr.getType()    ==    Token.NOT    &&    expr.hasChildren())    {    	non-compiled	[CE]  ')'  expected	110	None	replace
352	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NOT  &&  expr.hasChildren())  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()  ==  Token.NOT  &&  expr.hasChildren())  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()  ==  Token.NOT  &&  expr.hasChildren())  {	  if(expr.getType()    ==    Token.NOT    &&    expr.hasChildren())    {    	non-compiled	[CE]  ')'  expected	110	None	replace
353	[BUG]  [BUGGY]  if(expr.getType()!=  Token.NOT  &&  expr.hasChildren())  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()!=  Token.NOT  &&  expr.hasChildren())  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()!=  Token.NOT  &&  expr.hasChildren())  {	  if(expr.getType()    ==    Token.NOT    &&    expr.hasChildren())    {    	non-compiled	[CE]  ')'  expected	110	None	replace
354	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  cond)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  cond)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  cond)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  ')'  expected	104	None	replace
355	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  cond)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(parent.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  cond)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(parent.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  cond)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  ')'  expected	104	None	replace
356	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  OR_PRECEDENCE)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  OR_PRECEDENCE)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  OR_PRECEDENCE)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  ')'  expected	104	None	replace
357	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  parent)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  parent)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  parent)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  ')'  expected	104	None	replace
358	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getLastChild()  ==  parent)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getLastChild()  ==  parent)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.CALL  &&  expr.getLastChild()  ==  parent)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  ')'  expected	104	None	replace
359	[BUG]  [BUGGY]  if(declaration.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  parent)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(declaration.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  parent)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(declaration.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  parent)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  ')'  expected	104	None	replace
360	[BUG]  [BUGGY]  if(cond.getType()!=  Token.CALL  &&  cond.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()!=  Token.CALL  &&  cond.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()!=  Token.CALL  &&  cond.getType()  ==  Token.NOT)  {	  if(cond.getType()    ==    Token.CALL    ||    cond.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	49	None	replace
361	[BUG]  [BUGGY]  if(consd.getType()  ==  Token.CALL  &&  cond.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(consd.getType()  ==  Token.CALL  &&  cond.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(consd.getType()  ==  Token.CALL  &&  cond.getType()  ==  Token.NOT)  {	  if(cond.getType()    ==    Token.CALL    ||    cond.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	49	None	replace
362	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.RETURN  ||  cond.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.RETURN  ||  cond.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.RETURN  ||  cond.getType()  ==  Token.NOT)  {	  if(cond.getType()    ==    Token.CALL    ||    cond.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	49	None	replace
363	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  cond.hasChildren())  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  cond.hasChildren())  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CALL  &&  cond.hasChildren())  {	  if(cond.getType()    ==    Token.CALL    &&    expr.hasChildren())    {    	non-compiled	[CE]  ')'  expected	76	None	replace
364	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.hasChildren()  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.hasChildren()  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.CALL  &&  expr.hasChildren()  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(cond.getType()    ==    Token.CALL    &&    expr.hasChildren())    {    	non-compiled	[CE]  ')'  expected	76	None	replace
365	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.hasChildren()  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.hasChildren()  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.CALL  &&  expr.hasChildren()  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {	  if(cond.getType()    ==    Token.CALL    &&    expr.hasChildren())    {    	non-compiled	[CE]  ')'  expected	76	None	replace
366	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.hasChildren()  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.hasChildren()  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.CALL  &&  expr.hasChildren()  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(cond.getType()    ==    Token.CALL    &&    expr.hasChildren())    {    	non-compiled	[CE]  ')'  expected	76	None	replace
367	[BUG]  [BUGGY]  if(n.getType()  ==  Token.CALL  &&  expr.hasChildren())  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()  ==  Token.CALL  &&  expr.hasChildren())  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()  ==  Token.CALL  &&  expr.hasChildren())  {	  if(cond.getType()    ==    Token.CALL    &&    expr.hasChildren())    {    	non-compiled	[CE]  ')'  expected	76	None	replace
368	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ')'  expected	102	None	replace
369	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ')'  expected	102	None	replace
370	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.FUNCTION)  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.FUNCTION)  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ')'  expected	102	None	replace
371	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null  ||  expr.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null  ||  expr.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null  ||  expr.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ')'  expected	102	None	replace
372	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  ||  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  ||  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  ||  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ')'  expected	102	None	replace
373	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ')'  expected	102	None	replace
374	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  isLowerPrecedenceInExpression(cond))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  isLowerPrecedenceInExpression(cond))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  isLowerPrecedenceInExpression(cond))  {	  if(expr.getType()    ==    Token.NOT    &&    isLowerPrecedenceInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	80	None	replace
375	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {	  if(expr.getType()    ==    Token.NOT    &&    isLowerPrecedenceInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	80	None	replace
376	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  ||  isLowerPrecedenceInExpression(expr))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  ||  isLowerPrecedenceInExpression(expr))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  ||  isLowerPrecedenceInExpression(expr))  {	  if(expr.getType()    ==    Token.NOT    &&    isLowerPrecedenceInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	80	None	replace
377	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.NOT  &&  isLowerPrecedenceInExpression(expr))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.NOT  &&  isLowerPrecedenceInExpression(expr))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.NOT  &&  isLowerPrecedenceInExpression(expr))  {	  if(expr.getType()    ==    Token.NOT    &&    isLowerPrecedenceInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	80	None	replace
378	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  isPropertyAssignmentInExpression(expr))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  isPropertyAssignmentInExpression(expr))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  isPropertyAssignmentInExpression(expr))  {	  if(expr.getType()    ==    Token.NOT    &&    isLowerPrecedenceInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	80	None	replace
379	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  isLowerPrecedenceInExpression(n))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  isLowerPrecedenceInExpression(n))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  isLowerPrecedenceInExpression(n))  {	  if(expr.getType()    ==    Token.NOT    &&    isLowerPrecedenceInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	80	None	replace
380	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.NOT  &&  cond.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.NOT  &&  cond.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.NOT  &&  cond.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(expr.getType()    ==    Token.NOT    &&    cond.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	2	None	replace
381	[BUG]  [BUGGY]  Node  cond  =  getBlockExpression(n,  expr);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  cond  =  getBlockExpression(n,  expr);  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  cond  =  getBlockExpression(n,  expr);	  Node    cond    =    getBlockExpression(n);    	non-compiled	[CE]  ')'  expected	86	None	replace
382	[BUG]  [BUGGY]  Node  cond  =  getBlockExpression(n,  expr.getLastChild());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  cond  =  getBlockExpression(n,  expr.getLastChild());  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  cond  =  getBlockExpression(n,  expr.getLastChild());	  Node    cond    =    getBlockExpression(n);    	non-compiled	[CE]  ')'  expected	86	None	replace
383	[BUG]  [BUGGY]  Node  cond  =  getBlockExpression(n.getFirstChild());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  cond  =  getBlockExpression(n.getFirstChild());  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  cond  =  getBlockExpression(n.getFirstChild());	  Node    cond    =    getBlockExpression(n);    	non-compiled	[CE]  ')'  expected	86	None	replace
384	[BUG]  [BUGGY]  Node  cond  =  getBlockExpression(n,  expr.getFirstChild());  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  cond  =  getBlockExpression(n,  expr.getFirstChild());  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  cond  =  getBlockExpression(n,  expr.getFirstChild());	  Node    cond    =    getBlockExpression(n);    	non-compiled	[CE]  ')'  expected	86	None	replace
385	[BUG]  [BUGGY]  if(consd.getType()  ==  Token.NOT  ||  expr.getType()  ==  Token.CALL)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(consd.getType()  ==  Token.NOT  ||  expr.getType()  ==  Token.CALL)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(consd.getType()  ==  Token.NOT  ||  expr.getType()  ==  Token.CALL)  {	  if(expr.getType()    ==    Token.NOT    ||    cond.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	48	None	replace
386	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.VAR  &&  expr.getFirstChild()  ==  expr)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(parent.getType()  ==  Token.VAR  &&  expr.getFirstChild()  ==  expr)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(parent.getType()  ==  Token.VAR  &&  expr.getFirstChild()  ==  expr)  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  ')'  expected	99	None	replace
387	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()  ==  cond)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()  ==  cond)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()  ==  cond)  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  ')'  expected	99	None	replace
388	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  ||  expr.getFirstChild()  ==  parent)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  ||  expr.getFirstChild()  ==  parent)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  ||  expr.getFirstChild()  ==  parent)  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  ')'  expected	99	None	replace
389	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.VAR  &&  expr.getFirstChild()  ==  parent)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.VAR  &&  expr.getFirstChild()  ==  parent)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.VAR  &&  expr.getFirstChild()  ==  parent)  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  ')'  expected	99	None	replace
390	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getLastChild()  ==  parent)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getLastChild()  ==  parent)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  &&  expr.getLastChild()  ==  parent)  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  ')'  expected	99	None	replace
391	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null)  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getFirstChild()!=    null)    {    	non-compiled	[CE]  ')'  expected	91	None	replace
392	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getLastChild()!=  null)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getLastChild()!=  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  &&  expr.getLastChild()!=  null)  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getFirstChild()!=    null)    {    	non-compiled	[CE]  ')'  expected	91	None	replace
393	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  ||  expr.getFirstChild()!=  null)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  ||  expr.getFirstChild()!=  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  ||  expr.getFirstChild()!=  null)  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getFirstChild()!=    null)    {    	non-compiled	[CE]  ')'  expected	91	None	replace
394	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()  ==  null)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()  ==  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()  ==  null)  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getFirstChild()!=    null)    {    	non-compiled	[CE]  ')'  expected	91	None	replace
395	[BUG]  [BUGGY]  if(n.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null)  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getFirstChild()!=    null)    {    	non-compiled	[CE]  ')'  expected	91	None	replace
396	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.EXPR_RESULT  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.EXPR_RESULT  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.EXPR_RESULT  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(expr.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  ')'  expected	79	None	replace
397	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.EXPR_RESULT  &&  expr.getLastChild().getString().equals( "prototype "))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.EXPR_RESULT  &&  expr.getLastChild().getString().equals( "prototype "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.EXPR_RESULT  &&  expr.getLastChild().getString().equals( "prototype "))  {	  if(expr.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  ')'  expected	79	None	replace
398	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.EXPR_RESULT  ||  expr.getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.EXPR_RESULT  ||  expr.getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.EXPR_RESULT  ||  expr.getType()  ==  Token.VAR)  {	  if(expr.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  ')'  expected	79	None	replace
399	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.EXPR_RESULT  ||  expr.getType()  ==  Token.NAME)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.EXPR_RESULT  ||  expr.getType()  ==  Token.NAME)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.EXPR_RESULT  ||  expr.getType()  ==  Token.NAME)  {	  if(expr.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  ')'  expected	79	None	replace
400	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.EXPR_RESULT  ||  expr.getType()  ==  Token.FUNCTION)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.EXPR_RESULT  ||  expr.getType()  ==  Token.FUNCTION)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.EXPR_RESULT  ||  expr.getType()  ==  Token.FUNCTION)  {	  if(expr.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  ')'  expected	79	None	replace
401	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.EXPR_RESULT  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.EXPR_RESULT  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.EXPR_RESULT  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {	  if(expr.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  ')'  expected	79	None	replace
402	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.VAR  ||  cond.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.VAR  ||  cond.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.VAR  ||  cond.getType()  ==  Token.NOT)  {	  if(expr.getType()    ==    Token.VAR    ||    cond.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	56	None	replace
403	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  cond.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  cond.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  &&  cond.getType()  ==  Token.NOT)  {	  if(expr.getType()    ==    Token.VAR    ||    cond.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	56	None	replace
404	[BUG]  [BUGGY]  if(consd.getType()  ==  Token.VAR  ||  expr.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(consd.getType()  ==  Token.VAR  ||  expr.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(consd.getType()  ==  Token.VAR  ||  expr.getType()  ==  Token.NOT)  {	  if(expr.getType()    ==    Token.VAR    ||    cond.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	56	None	replace
405	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.NOT  ||  cond.getType()  ==  Token.GETPROP)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.NOT  ||  cond.getType()  ==  Token.GETPROP)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.NOT  ||  cond.getType()  ==  Token.GETPROP)  {	  if(expr.getType()    ==    Token.NOT    ||    cond.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  ')'  expected	19	None	replace
406	[BUG]  [BUGGY]  if(consd.getType()  ==  Token.NOT  ||  expr.getType()  ==  Token.GETPROP)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(consd.getType()  ==  Token.NOT  ||  expr.getType()  ==  Token.GETPROP)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(consd.getType()  ==  Token.NOT  ||  expr.getType()  ==  Token.GETPROP)  {	  if(expr.getType()    ==    Token.NOT    ||    cond.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  ')'  expected	19	None	replace
407	[BUG]  [BUGGY]  if(cond.getType()!=  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()!=  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()!=  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(expr.getType()!=    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	5	None	replace
408	[BUG]  [BUGGY]  if(elseBranch.getType()!=  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()!=  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()!=  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(expr.getType()!=    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	5	None	replace
409	[BUG]  [BUGGY]  Node  cond  =  expr.removeLastChild();  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  cond  =  expr.removeLastChild();  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  cond  =  expr.removeLastChild();	  Node    cond    =    expr.removeFirstChild();    	non-compiled	[CE]  ')'  expected	119	None	replace
410	[BUG]  [BUGGY]  Node  cond  =  expr.removeFirstChild(),  OR_PRECEDENCE;  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  cond  =  expr.removeFirstChild(),  OR_PRECEDENCE;  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  cond  =  expr.removeFirstChild(),  OR_PRECEDENCE;	  Node    cond    =    expr.removeFirstChild();    	non-compiled	[CE]  ')'  expected	119	None	replace
411	[BUG]  [BUGGY]  Node  cond  =  expr.cloneTree();  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  cond  =  expr.cloneTree();  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  cond  =  expr.cloneTree();	  Node    cond    =    expr.removeFirstChild();    	non-compiled	[CE]  ')'  expected	119	None	replace
412	[BUG]  [BUGGY]  if(Expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(Expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(Expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(Expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	39	None	replace
413	[BUG]  [BUGGY]  if(Expr.getType()  ==  Token.NOT  &&  expr.getLastChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(Expr.getType()  ==  Token.NOT  &&  expr.getLastChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(Expr.getType()  ==  Token.NOT  &&  expr.getLastChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(Expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	39	None	replace
414	[BUG]  [BUGGY]  if(elseBranch!=  null  &&  expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch!=  null  &&  expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch!=  null  &&  expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	35	None	replace
415	[BUG]  [BUGGY]  if(elseBranch  ==  null  &&  expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch  ==  null  &&  expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch  ==  null  &&  expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	35	None	replace
416	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getLastChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getLastChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  expr.getLastChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	35	None	replace
417	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  cond.getLastChild()!=  null)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  cond.getLastChild()!=  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  cond.getLastChild()!=  null)  {	  if(cond.getType()    ==    Token.NOT    &&    expr.getLastChild()!=    null)    {    	non-compiled	[CE]  ')'  expected	12	None	replace
418	[BUG]  [BUGGY]  if(declaration!=  null  &&  expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(declaration!=  null  &&  expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(declaration!=  null  &&  expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(declaration.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	6	None	replace
419	[BUG]  [BUGGY]  if(declaration!=  null  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(declaration!=  null  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(declaration!=  null  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(declaration.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	6	None	replace
420	[BUG]  [BUGGY]  if(declaration.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(declaration.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(declaration.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(declaration.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	6	None	replace
421	[BUG]  [BUGGY]  if(elseBranch!=  null  &&  expr.getType()  ==  Token.NOT  &&  cond.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch!=  null  &&  expr.getType()  ==  Token.NOT  &&  cond.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch!=  null  &&  expr.getType()  ==  Token.NOT  &&  cond.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(expr.getType()    ==    Token.NOT    &&    cond.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	2	None	replace
422	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.STRING  &&  isLowerPrecedenceInExpression(expr))  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.STRING  &&  isLowerPrecedenceInExpression(expr))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.STRING  &&  isLowerPrecedenceInExpression(expr))  {	  if(expr.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  ')'  expected	73	None	replace
423	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.STRING  &&  isPropertyAssignmentInExpression(expr))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.STRING  &&  isPropertyAssignmentInExpression(expr))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.STRING  &&  isPropertyAssignmentInExpression(expr))  {	  if(expr.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  ')'  expected	73	None	replace
424	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {	  if(expr.getType()    ==    Token.VAR    &&    isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	93	None	replace
425	[BUG]  [BUGGY]  if(elseBranch!=  null  &&  expr.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch!=  null  &&  expr.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch!=  null  &&  expr.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {	  if(expr.getType()    ==    Token.VAR    &&    isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	93	None	replace
426	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  isPropertyAssignmentInExpression(expr,  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  isPropertyAssignmentInExpression(expr,  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  &&  isPropertyAssignmentInExpression(expr,  OR_PRECEDENCE))  {	  if(expr.getType()    ==    Token.VAR    &&    isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	93	None	replace
427	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {	  if(expr.getType()    ==    Token.VAR    &&    isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	93	None	replace
428	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  &&  expr.getLastChild()!=  null)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  &&  expr.getLastChild()!=  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.NOT  &&  expr.getLastChild()!=  null)  {	  if(elseBranch.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null)    {    	non-compiled	[CE]  ')'  expected	81	None	replace
429	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  ||  expr.getFirstChild()!=  null)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  ||  expr.getFirstChild()!=  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.NOT  ||  expr.getFirstChild()!=  null)  {	  if(elseBranch.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null)    {    	non-compiled	[CE]  ')'  expected	81	None	replace
430	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.RETURN  &&  expr.hasChildren())  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.RETURN  &&  expr.hasChildren())  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.RETURN  &&  expr.hasChildren())  {	  if(expr.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  ')'  expected	113	None	replace
431	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.RETURN  &&  expr.getFirstChild()!=  null)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.RETURN  &&  expr.getFirstChild()!=  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.RETURN  &&  expr.getFirstChild()!=  null)  {	  if(expr.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  ')'  expected	113	None	replace
432	[BUG]  [BUGGY]  if(consd.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(consd.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(consd.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null)  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getFirstChild()!=    null)    {    	non-compiled	[CE]  ')'  expected	91	None	replace
433	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.CALL  &&  expr.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.CALL  &&  expr.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.CALL  &&  expr.getType()  ==  Token.NOT)  {	  if(expr.getType()    ==    Token.CALL    ||    expr.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	103	None	replace
434	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.OR  ||  expr.getType()  ==  Token.CALL)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.OR  ||  expr.getType()  ==  Token.CALL)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.OR  ||  expr.getType()  ==  Token.CALL)  {	  if(expr.getType()    ==    Token.CALL    ||    expr.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	103	None	replace
435	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.CALL)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.CALL)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.CALL)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	105	None	replace
436	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.VAR)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	105	None	replace
437	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null)  {	  if(elseBranch.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	84	None	replace
438	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.VAR  &&  expr.hasChildren())  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.VAR  &&  expr.hasChildren())  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.VAR  &&  expr.hasChildren())  {	  if(elseBranch.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	84	None	replace
439	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(cond))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(cond))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(cond))  {	  if(elseBranch.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	84	None	replace
440	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.GETPROP  &&  cond.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.GETPROP  &&  cond.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.GETPROP  &&  cond.getType()  ==  Token.NOT)  {	  if(expr.getType()    ==    Token.GETPROP    ||    cond.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	21	None	replace
441	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.GETPROP  &&  cond.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.GETPROP  &&  cond.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.GETPROP  &&  cond.getType()  ==  Token.NOT)  {	  if(expr.getType()    ==    Token.GETPROP    ||    cond.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	21	None	replace
442	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.GETPROP  &&  expr.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.GETPROP  &&  expr.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.GETPROP  &&  expr.getType()  ==  Token.NOT)  {	  if(expr.getType()    ==    Token.GETPROP    ||    cond.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	21	None	replace
443	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.VAR  ||  expr.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.VAR  ||  expr.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.VAR  ||  expr.getType()  ==  Token.NOT)  {	  if(cond.getType()    ==    Token.VAR    ||    expr.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	94	None	replace
444	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.CALL  ||  expr.hasChildren())  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.CALL  ||  expr.hasChildren())  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.CALL  ||  expr.hasChildren())  {	  if(cond.getType()    ==    Token.CALL    &&    expr.hasChildren())    {    	non-compiled	[CE]  ')'  expected	76	None	replace
445	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NAME  &&  expr.hasChildren())  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NAME  &&  expr.hasChildren())  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NAME  &&  expr.hasChildren())  {	  if(cond.getType()    ==    Token.CALL    &&    expr.hasChildren())    {    	non-compiled	[CE]  ')'  expected	76	None	replace
446	[BUG]  [BUGGY]  If(expr.getType()  ==  Token.NOT  &&  expr.getLastChild().getString().endsWith( "__ "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  If(expr.getType()  ==  Token.NOT  &&  expr.getLastChild().getString().endsWith( "__ "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	If(expr.getType()  ==  Token.NOT  &&  expr.getLastChild().getString().endsWith( "__ "))  {	  if(elseBranch.getType()    ==    Token.NOT    &&    expr.getLastChild().getString().endsWith(   "__   "))    {    	non-compiled	[CE]  	118	None	replace
447	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.VAR  &&  cond.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.VAR  &&  cond.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.VAR  &&  cond.getType()  ==  Token.NOT)  {	  if(expr.getType()    ==    Token.VAR    ||    cond.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	56	None	replace
448	[BUG]  [BUGGY]  if(parent!=  null  &&  expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  expr)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(parent!=  null  &&  expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  expr)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(parent!=  null  &&  expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  expr)  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getFirstChild()!=    parent)    {    	non-compiled	[CE]  ')'  expected	100	None	replace
449	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NAME  &&  expr.getFirstChild()!=  null)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NAME  &&  expr.getFirstChild()!=  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NAME  &&  expr.getFirstChild()!=  null)  {	  if(expr.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ')'  expected	67	None	replace
450	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NAME  &&  isPropertyAssignmentInExpression(expr))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NAME  &&  isPropertyAssignmentInExpression(expr))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NAME  &&  isPropertyAssignmentInExpression(expr))  {	  if(expr.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ')'  expected	67	None	replace
451	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NAME  &&  isLowerPrecedenceInExpression(expr))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NAME  &&  isLowerPrecedenceInExpression(expr))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NAME  &&  isLowerPrecedenceInExpression(expr))  {	  if(expr.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ')'  expected	67	None	replace
452	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NAME  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NAME  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NAME  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {	  if(expr.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ')'  expected	67	None	replace
453	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.CALL  ||  expr.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.CALL  ||  expr.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.CALL  ||  expr.getType()  ==  Token.NOT)  {	  if(elseBranch.getType()    ==    Token.NOT    ||    expr.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	90	None	replace
454	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getChildCount()!=  1)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getChildCount()!=  1)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  &&  expr.getChildCount()!=  1)  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getChildCount()    >    1)    {    	non-compiled	[CE]  ')'  expected	43	None	replace
455	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NOT  &&  isLowerPrecedenceInExpression(expr.getFirstChild()))  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()  ==  Token.NOT  &&  isLowerPrecedenceInExpression(expr.getFirstChild()))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()  ==  Token.NOT  &&  isLowerPrecedenceInExpression(expr.getFirstChild()))  {	  if(n.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	65	None	replace
456	[BUG]  [BUGGY]  if(n.getType()  ==  Token.NOT  &&  isLowerPrecedenceInExpression(cond))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(n.getType()  ==  Token.NOT  &&  isLowerPrecedenceInExpression(cond))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(n.getType()  ==  Token.NOT  &&  isLowerPrecedenceInExpression(cond))  {	  if(n.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	65	None	replace
457	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  ||  expr.getLastChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  ||  expr.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  ||  expr.getLastChild().getType()  ==  Token.BLOCK)  {	  if(cond.getType()    ==    Token.NOT    &&    expr.getFirstChild()    ==    null    ||    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	120	None	replace
458	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  ||  expr.getLastChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  ||  expr.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  ||  expr.getLastChild().getType()  ==  Token.BLOCK)  {	  if(cond.getType()    ==    Token.NOT    &&    expr.getFirstChild()    ==    null    ||    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	120	None	replace
459	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.EXPR_RESULT  &&  expr.getFirstChild()!=  null)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.EXPR_RESULT  &&  expr.getFirstChild()!=  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.EXPR_RESULT  &&  expr.getFirstChild()!=  null)  {	  if(expr.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  ')'  expected	79	None	replace
460	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.EXPR_RESULT  &&  isLowerPrecedenceInExpression(expr))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.EXPR_RESULT  &&  isLowerPrecedenceInExpression(expr))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.EXPR_RESULT  &&  isLowerPrecedenceInExpression(expr))  {	  if(expr.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  ')'  expected	79	None	replace
461	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.EXPR_RESULT  &&  expr.hasChildren())  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.EXPR_RESULT  &&  expr.hasChildren())  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.EXPR_RESULT  &&  expr.hasChildren())  {	  if(expr.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  ')'  expected	79	None	replace
462	[BUG]  [BUGGY]  if(elseBranch!=  null  &&  expr.getType()!=  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch!=  null  &&  expr.getType()!=  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch!=  null  &&  expr.getType()!=  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(expr.getType()!=    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	38	None	replace
463	[BUG]  [BUGGY]  if(elseBranch  ==  null  &&  expr.getType()!=  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch  ==  null  &&  expr.getType()!=  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch  ==  null  &&  expr.getType()!=  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(expr.getType()!=    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	38	None	replace
464	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.EXPR_RESULT  ||  expr.getFirstChild()  ==  null)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.EXPR_RESULT  ||  expr.getFirstChild()  ==  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.EXPR_RESULT  ||  expr.getFirstChild()  ==  null)  {	  if(expr.getType()    ==    Token.NOT    ||    expr.getFirstChild()    ==    null)    {    	non-compiled	[CE]  ')'  expected	14	None	replace
465	[BUG]  [BUGGY]  Node  cond1  =  expr.getFirstChild();  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  cond1  =  expr.getFirstChild();  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  cond1  =  expr.getFirstChild();	  Node    cond    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	62	None	replace
466	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getLastChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getLastChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.CALL  &&  expr.getLastChild().getType()  ==  Token.VAR)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	26	None	replace
467	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  returnNode)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  returnNode)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  returnNode)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  ')'  expected	104	None	replace
468	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  cond)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  cond)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  cond)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  ')'  expected	104	None	replace
469	[BUG]  [BUGGY]  Cond  cond  =  expr.nextChild();  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Cond  cond  =  expr.nextChild();  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Cond  cond  =  expr.nextChild();	  Cond    cond    =    expr.getFirstChild();    	non-compiled	[CE]  ')'  expected	63	None	replace
470	[BUG]  [BUGGY]  if(elseBranch!=  null  &&  expr.getType()!=  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch!=  null  &&  expr.getType()!=  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch!=  null  &&  expr.getType()!=  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(expr.getType()!=    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	5	None	replace
471	[BUG]  [BUGGY]  if(elseBranch  ==  null  &&  expr.getType()!=  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch  ==  null  &&  expr.getType()!=  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch  ==  null  &&  expr.getType()!=  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(expr.getType()!=    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	5	None	replace
472	[BUG]  [BUGGY]  if(elseBranch!=  null  &&  expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch!=  null  &&  expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch!=  null  &&  expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(expr.getType()!=    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	5	None	replace
473	[BUG]  [BUGGY]  Node  cond  =  getBlockExpression(elseBranch);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  cond  =  getBlockExpression(elseBranch);  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  cond  =  getBlockExpression(elseBranch);	  Node    cond    =    getBlockExpression(n);    	non-compiled	[CE]  ')'  expected	86	None	replace
474	[BUG]  [BUGGY]  Node  cond  =  getBlockConditionExpression(n);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  cond  =  getBlockConditionExpression(n);  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  cond  =  getBlockConditionExpression(n);	  Node    cond    =    getBlockExpression(n);    	non-compiled	[CE]  ')'  expected	86	None	replace
475	[BUG]  [BUGGY]  Node  cond  =  getBlockExpression(n.getLastChild());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  cond  =  getBlockExpression(n.getLastChild());  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  cond  =  getBlockExpression(n.getLastChild());	  Node    cond    =    getBlockExpression(n);    	non-compiled	[CE]  ')'  expected	86	None	replace
476	[BUG]  [BUGGY]  if(elseBranch!=  null  &&  expr.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch!=  null  &&  expr.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch!=  null  &&  expr.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(expr.getType()    ==    Token.VAR    &&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	42	None	replace
477	[BUG]  [BUGGY]  if(elseBranch  ==  null  &&  expr.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch  ==  null  &&  expr.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch  ==  null  &&  expr.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(expr.getType()    ==    Token.VAR    &&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	42	None	replace
478	[BUG]  [BUGGY]  if(elseBranch!=  null  &&  cond.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch!=  null  &&  cond.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch!=  null  &&  cond.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(expr.getType()    ==    Token.VAR    &&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	42	None	replace
479	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.CALL  &&  elseBranchIsExpressionBlock)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.CALL  &&  elseBranchIsExpressionBlock)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.CALL  &&  elseBranchIsExpressionBlock)  {	  if(elseBranch.getType()    ==    Token.NOT    &&    elseBranchIsExpressionBlock)    {    	non-compiled	[CE]  ')'  expected	83	None	replace
480	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  ||  expr.getFirstChild()  ==  null)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  ||  expr.getFirstChild()  ==  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.NOT  ||  expr.getFirstChild()  ==  null)  {	  if(elseBranch.getType()    ==    Token.NOT    &&    expr.getFirstChild()    ==    null)    {    	non-compiled	[CE]  ')'  expected	116	None	replace
481	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  isPropertyAssignmentInExpression(expr.getFirstChild()))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  isPropertyAssignmentInExpression(expr.getFirstChild()))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.CALL  &&  isPropertyAssignmentInExpression(expr.getFirstChild()))  {	  if(cond.getType()    ==    Token.CALL    &&    isLowerPrecedenceInExpression(expr.getFirstChild()))    {    	non-compiled	[CE]  ')'  expected	75	None	replace
482	[BUG]  [BUGGY]  Node  parent  =  expr.removeParent();  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  parent  =  expr.removeParent();  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  parent  =  expr.removeParent();	  Node    parent    =    expr.getParent();    	non-compiled	[CE]  ')'  expected	64	None	replace
483	[BUG]  [BUGGY]  Node  parent  =  expr.next();  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  parent  =  expr.next();  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  parent  =  expr.next();	  Node    parent    =    expr.getParent();    	non-compiled	[CE]  ')'  expected	64	None	replace
484	[BUG]  [BUGGY]  Node  parent  =  expr.removeFirstChild();  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  parent  =  expr.removeFirstChild();  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  parent  =  expr.removeFirstChild();	  Node    parent    =    expr.getParent();    	non-compiled	[CE]  ')'  expected	64	None	replace
485	[BUG]  [BUGGY]  Node  cond  =  expr.getfirstChild();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  cond  =  expr.getfirstChild();  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  cond  =  expr.getfirstChild();	  Node    cond    =    expr.getLastChild();    	non-compiled	[CE]  ')'  expected	59	None	replace
486	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getType()  ==  Token.NOT  ||  expr.getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getType()  ==  Token.NOT  ||  expr.getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CALL  &&  expr.getType()  ==  Token.NOT  ||  expr.getType()  ==  Token.VAR)  {	  if(expr.getType()    ==    Token.NOT    ||    expr.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	52	None	replace
487	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.EXPR_RESULT  ||  expr.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.EXPR_RESULT  ||  expr.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.EXPR_RESULT  ||  expr.getType()  ==  Token.NOT)  {	  if(expr.getType()    ==    Token.NOT    ||    expr.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	52	None	replace
488	[BUG]  [BUGGY]  If(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild().getString().equals( "prototype "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  If(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild().getString().equals( "prototype "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	If(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild().getString().equals( "prototype "))  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  	41	None	replace
489	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.hasChildren()  ||  expr.hasChildren())  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.hasChildren()  ||  expr.hasChildren())  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  &&  expr.hasChildren()  ||  expr.hasChildren())  {	  if(expr.getType()    ==    Token.VAR    &&    expr.hasChildren())    {    	non-compiled	[CE]  ')'  expected	45	None	replace
490	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.CALL  ||  cond.getType()  ==  Token.NAME)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.CALL  ||  cond.getType()  ==  Token.NAME)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.CALL  ||  cond.getType()  ==  Token.NAME)  {	  if(cond.getType()    ==    Token.NAME    ||    cond.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	96	None	replace
491	[BUG]  [BUGGY]  Node  cond  =  expr.getPrevious();  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  cond  =  expr.getPrevious();  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  cond  =  expr.getPrevious();	  Node    cond    =    expr.getParent();    	non-compiled	[CE]  ')'  expected	61	None	replace
492	[BUG]  [BUGGY]  Node  cond  =  expr.getConditionalParent();  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  cond  =  expr.getConditionalParent();  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  cond  =  expr.getConditionalParent();	  Node    cond    =    expr.getParent();    	non-compiled	[CE]  ')'  expected	61	None	replace
493	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(elseBranch))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(elseBranch))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(elseBranch))  {	  if(expr.getType()    ==    Token.VAR    &&    isLowerPrecedenceInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	92	None	replace
494	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(elseBranch))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(elseBranch))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  &&  isLowerPrecedenceInExpression(elseBranch))  {	  if(expr.getType()    ==    Token.VAR    &&    isLowerPrecedenceInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	92	None	replace
495	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(elseBranch.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	78	None	replace
496	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getType()  ==  Token.NOT  ||  expr.getType()  ==  Token.GETPROP)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getType()  ==  Token.NOT  ||  expr.getType()  ==  Token.GETPROP)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CALL  &&  expr.getType()  ==  Token.NOT  ||  expr.getType()  ==  Token.GETPROP)  {	  if(expr.getType()    ==    Token.CALL    &&    expr.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	106	None	replace
497	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.OR  ||  cond.getType()  ==  Token.CALL  ||  cond.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.OR  ||  cond.getType()  ==  Token.CALL  ||  cond.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.OR  ||  cond.getType()  ==  Token.CALL  ||  cond.getType()  ==  Token.NOT)  {	  if(cond.getType()    ==    Token.CALL    ||    cond.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	49	None	replace
498	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.RETURN  ||  cond.getType()  ==  Token.CALL  ||  cond.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.RETURN  ||  cond.getType()  ==  Token.CALL  ||  cond.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.RETURN  ||  cond.getType()  ==  Token.CALL  ||  cond.getType()  ==  Token.NOT)  {	  if(cond.getType()    ==    Token.CALL    ||    cond.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	49	None	replace
499	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.RETURN  ||  cond.getType()  ==  Token.CALL)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.RETURN  ||  cond.getType()  ==  Token.CALL)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.RETURN  ||  cond.getType()  ==  Token.CALL)  {	  if(cond.getType()    ==    Token.CALL    ||    cond.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	49	None	replace
500	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.EXPR_RESULT  ||  expr.getFirstChild()!=  null)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.EXPR_RESULT  ||  expr.getFirstChild()!=  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.EXPR_RESULT  ||  expr.getFirstChild()!=  null)  {	  if(expr.getType()    ==    Token.NOT    ||    expr.getFirstChild()!=    null)    {    	non-compiled	[CE]  ')'  expected	8	None	replace
501	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  ||  cond.getLastChild().getString().equals( "prototype "))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  ||  cond.getLastChild().getString().equals( "prototype "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  ||  cond.getLastChild().getString().equals( "prototype "))  {	  if(expr.getType()    ==    Token.NOT    &&    cond.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  ')'  expected	97	None	replace
502	[BUG]  [BUGGY]  if(elseBranch!=  null  &&  expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch!=  null  &&  expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch!=  null  &&  expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ')'  expected	102	None	replace
503	[BUG]  [BUGGY]  if(elseBranch  ==  null  &&  expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch  ==  null  &&  expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch  ==  null  &&  expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ')'  expected	102	None	replace
504	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getLastChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getLastChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  &&  expr.getLastChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ')'  expected	102	None	replace
505	[BUG]  [BUGGY]  if(elseBranch!=  null  &&  expr.getType()  ==  Token.NOT  &&  cond.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch!=  null  &&  expr.getType()  ==  Token.NOT  &&  cond.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch!=  null  &&  expr.getType()  ==  Token.NOT  &&  cond.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(expr.getType()    ==    Token.NOT    &&    cond.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	36	None	replace
506	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(expr))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(expr))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(expr))  {	  if(expr.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	23	None	replace
507	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(elseBranch.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	87	None	replace
508	[BUG]  [BUGGY]  if(elseBranch!=  null  &&  expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch!=  null  &&  expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch!=  null  &&  expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.VAR)  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getLastChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	40	None	replace
509	[BUG]  [BUGGY]  if(elseBranch  ==  null  &&  expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch  ==  null  &&  expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch  ==  null  &&  expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.VAR)  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getLastChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	40	None	replace
510	[BUG]  [BUGGY]  if(elseBranch!=  null  &&  expr.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch!=  null  &&  expr.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch!=  null  &&  expr.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(cond.getType()    ==    Token.CALL    &&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	24	None	replace
511	[BUG]  [BUGGY]  if(elseBranch  ==  null  &&  expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch  ==  null  &&  expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch  ==  null  &&  expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	1	None	replace
512	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getLastChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getLastChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  expr.getLastChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	1	None	replace
513	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.EXPR_RESULT  ||  expr.getType()!=  Token.NOT)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.EXPR_RESULT  ||  expr.getType()!=  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.EXPR_RESULT  ||  expr.getType()!=  Token.NOT)  {	  if(expr.getType()    ==    Token.NOT    ||    expr.getType()!=    Token.GETPROP)    {    	non-compiled	[CE]  ')'  expected	107	None	replace
514	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.EXPR_RESULT  ||  expr.getType()!=  Token.GETPROP)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.EXPR_RESULT  ||  expr.getType()!=  Token.GETPROP)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.EXPR_RESULT  ||  expr.getType()!=  Token.GETPROP)  {	  if(expr.getType()    ==    Token.NOT    ||    expr.getType()!=    Token.GETPROP)    {    	non-compiled	[CE]  ')'  expected	107	None	replace
515	[BUG]  [BUGGY]  If(expr.getType()!=  Token.NOT  &&  expr.getFirstChild().getString().equals( "prototype "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  If(expr.getType()!=  Token.NOT  &&  expr.getFirstChild().getString().equals( "prototype "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	If(expr.getType()!=  Token.NOT  &&  expr.getFirstChild().getString().equals( "prototype "))  {	  If(expr.getType()    ==    Token.NOT    &&    expr.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  	98	None	replace
516	[BUG]  [BUGGY]  if(parent!=  null  &&  expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()  ==  expr)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(parent!=  null  &&  expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()  ==  expr)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(parent!=  null  &&  expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()  ==  expr)  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  ')'  expected	99	None	replace
517	[BUG]  [BUGGY]  Node  cond  =  getBlockExpression(thenBranch,  expr);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  cond  =  getBlockExpression(thenBranch,  expr);  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  cond  =  getBlockExpression(thenBranch,  expr);	  Node    cond    =    getBlockExpression(thenBranch);    	non-compiled	[CE]  ')'  expected	85	None	replace
518	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(cond))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(cond))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(cond))  {	  if(elseBranch.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	82	None	replace
519	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  null)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  null)  {	  if(elseBranch.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	82	None	replace
520	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.EMPTY  &&  expr.hasChildren())  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.EMPTY  &&  expr.hasChildren())  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.EMPTY  &&  expr.hasChildren())  {	  if(expr.getType()    ==    Token.NOT    &&    expr.hasChildren())    {    	non-compiled	[CE]  ')'  expected	110	None	replace
521	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild().getString().equals( "prototype ")||  expr.getLastChild().getString().equals( "prototype "))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild().getString().equals( "prototype ")||  expr.getLastChild().getString().equals( "prototype "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild().getString().equals( "prototype ")||  expr.getLastChild().getString().equals( "prototype "))  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  ')'  expected	31	None	replace
522	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild().getString().equals( "prototype ")||  expr.getFirstChild().getString().equals( "prototype "))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild().getString().equals( "prototype ")||  expr.getFirstChild().getString().equals( "prototype "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild().getString().equals( "prototype ")||  expr.getFirstChild().getString().equals( "prototype "))  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  ')'  expected	31	None	replace
523	[BUG]  [BUGGY]  if(elseBranch!=  null  &&  expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch!=  null  &&  expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch!=  null  &&  expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.BLOCK)  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getLastChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	4	None	replace
524	[BUG]  [BUGGY]  if(elseBranch  ==  null  &&  expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch  ==  null  &&  expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch  ==  null  &&  expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getType()  ==  Token.BLOCK)  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getLastChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	4	None	replace
525	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.VAR  ||  expr.getType()  ==  Token.CATCH)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.VAR  ||  expr.getType()  ==  Token.CATCH)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.VAR  ||  expr.getType()  ==  Token.CATCH)  {	  if(expr.getType()    ==    Token.VAR    ||    expr.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  ')'  expected	101	None	replace
526	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.VAR  &&  expr.getType()  ==  Token.CATCH)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.VAR  &&  expr.getType()  ==  Token.CATCH)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.VAR  &&  expr.getType()  ==  Token.CATCH)  {	  if(expr.getType()    ==    Token.VAR    ||    expr.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  ')'  expected	101	None	replace
527	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.BLOCK  ||  expr.getType()  ==  Token.CATCH)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.BLOCK  ||  expr.getType()  ==  Token.CATCH)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.BLOCK  ||  expr.getType()  ==  Token.CATCH)  {	  if(expr.getType()    ==    Token.VAR    ||    expr.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  ')'  expected	101	None	replace
528	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.VAR  &&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.VAR  &&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.VAR  &&  isPropertyAssignmentInExpression(elseBranch))  {	  if(expr.getType()    ==    Token.VAR    &&    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	46	None	replace
529	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.VAR  ||  expr.getType()  ==  Token.CALL)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.VAR  ||  expr.getType()  ==  Token.CALL)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.VAR  ||  expr.getType()  ==  Token.CALL)  {	  if(expr.getType()    ==    Token.VAR    ||    expr.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	44	None	replace
530	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.VAR  &&  expr.getType()  ==  Token.CALL)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.VAR  &&  expr.getType()  ==  Token.CALL)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.VAR  &&  expr.getType()  ==  Token.CALL)  {	  if(expr.getType()    ==    Token.VAR    ||    expr.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	44	None	replace
531	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.VAR  &&  expr.getType()  ==  Token.CALL)  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.VAR  &&  expr.getType()  ==  Token.CALL)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.VAR  &&  expr.getType()  ==  Token.CALL)  {	  if(expr.getType()    ==    Token.VAR    ||    expr.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	44	None	replace
532	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  &&  elseBranchIsExpressionBlock  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  &&  elseBranchIsExpressionBlock  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.NOT  &&  elseBranchIsExpressionBlock  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(elseBranch.getType()    ==    Token.NOT    &&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	115	None	replace
533	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  isLowerPrecedenceInExpression(cond.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  isLowerPrecedenceInExpression(cond.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  isLowerPrecedenceInExpression(cond.getFirstChild(),  OR_PRECEDENCE))  {	  if(elseBranch.getType()    ==    Token.NOT    &&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	115	None	replace
534	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.NOT  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {	  if(elseBranch.getType()    ==    Token.NOT    &&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	115	None	replace
535	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  &&  isPropertyAssignmentInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  &&  isPropertyAssignmentInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.NOT  &&  isPropertyAssignmentInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(elseBranch.getType()    ==    Token.NOT    &&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	115	None	replace
536	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.CALL  &&  cond.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.CALL  &&  cond.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.CALL  &&  cond.getType()  ==  Token.NOT)  {	  if(expr.getType()    ==    Token.CALL    ||    cond.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	70	None	replace
537	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  isLowerPrecedenceInExpression(elseBranch))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  isLowerPrecedenceInExpression(elseBranch))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  isLowerPrecedenceInExpression(elseBranch))  {	  if(expr.getType()    ==    Token.NOT    &&    isLowerPrecedenceInExpression(expr))    {    	non-compiled	[CE]  ')'  expected	80	None	replace
538	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.OR  ||  expr.getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.OR  ||  expr.getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.OR  ||  expr.getType()  ==  Token.VAR)  {	  if(expr.getType()    ==    Token.VAR    ||    expr.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	108	None	replace
539	[BUG]  [BUGGY]  If(expr.getType()  ==  Token.CALL  &&  expr.getLastChild().getString().equals( "prototype "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  If(expr.getType()  ==  Token.CALL  &&  expr.getLastChild().getString().equals( "prototype "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	If(expr.getType()  ==  Token.CALL  &&  expr.getLastChild().getString().equals( "prototype "))  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  	25	None	replace
540	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  ||  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  ||  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  ||  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(cond.getType()    ==    Token.NOT    &&    expr.getFirstChild()    ==    null    ||    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	109	None	replace
541	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  ||  expr.getLastChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  ||  expr.getLastChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  ||  expr.getLastChild().getType()  ==  Token.VAR)  {	  if(cond.getType()    ==    Token.NOT    &&    expr.getFirstChild()    ==    null    ||    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	109	None	replace
542	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.OR)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.OR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.OR)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild().getType()    ==    Token.OR)    {    	non-compiled	[CE]  ')'  expected	28	None	replace
543	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.OR  ||  expr.getFirstChild().getType()  ==  Token.OR)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.OR  ||  expr.getFirstChild().getType()  ==  Token.OR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.OR  ||  expr.getFirstChild().getType()  ==  Token.OR)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild().getType()    ==    Token.OR)    {    	non-compiled	[CE]  ')'  expected	28	None	replace
544	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.VAR  &&  expr.getFirstChild()  ==  null)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.VAR  &&  expr.getFirstChild()  ==  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.VAR  &&  expr.getFirstChild()  ==  null)  {	  if(elseBranch.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	84	None	replace
545	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.VAR  &&  expr.getLastChild().getString().endsWith( "__ "))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.VAR  &&  expr.getLastChild().getString().endsWith( "__ "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.VAR  &&  expr.getLastChild().getString().endsWith( "__ "))  {	  if(elseBranch.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	84	None	replace
546	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.PRECEDENCE  ||  expr.getType()  ==  Token.GETPROP)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.PRECEDENCE  ||  expr.getType()  ==  Token.GETPROP)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.PRECEDENCE  ||  expr.getType()  ==  Token.GETPROP)  {	  if(expr.getType()    ==    Token.NOT    ||    expr.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  ')'  expected	17	None	replace
547	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ')'  expected	102	None	replace
548	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()  ==  null  &&  expr.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()  ==  null  &&  expr.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()  ==  null  &&  expr.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  ')'  expected	102	None	replace
549	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	1	None	replace
550	[BUG]  [BUGGY]  Node  parent  =  expr.cloneTree();  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  parent  =  expr.cloneTree();  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  parent  =  expr.cloneTree();	  Node    parent    =    expr.getParent();    	non-compiled	[CE]  ')'  expected	64	None	replace
551	[BUG]  [BUGGY]  Node  cond  =  expr.removeFirstChild(),  OR_PRECEDENCE);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  cond  =  expr.removeFirstChild(),  OR_PRECEDENCE);  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  cond  =  expr.removeFirstChild(),  OR_PRECEDENCE);	  Node    cond    =    expr.removeFirstChild();    	non-compiled	[CE]  ')'  expected	119	None	replace
552	[BUG]  [BUGGY]  if(expr.getType()!=  Token.NOT  &&  expr.getFirstChild()  ==  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()!=  Token.NOT  &&  expr.getFirstChild()  ==  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()!=  Token.NOT  &&  expr.getFirstChild()  ==  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(expr.getType()!=    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	5	None	replace
553	[BUG]  [BUGGY]  if(Expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(Expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(Expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(expr.getType()!=    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	5	None	replace
554	[BUG]  [BUGGY]  if(expr.getFirstChild().getType()  ==  Token.NOT  &&  expr.getLastChild().getString().equals( "prototype "))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getFirstChild().getType()  ==  Token.NOT  &&  expr.getLastChild().getString().equals( "prototype "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getFirstChild().getType()  ==  Token.NOT  &&  expr.getLastChild().getString().equals( "prototype "))  {	  if(elseBranch.getType()    ==    Token.NOT    &&    expr.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  ')'  expected	117	None	replace
555	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  ||  expr.getLastChild().getString().equals( "prototype "))  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  ||  expr.getLastChild().getString().equals( "prototype "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  ||  expr.getLastChild().getString().equals( "prototype "))  {	  if(expr.getType()    ==    Token.NOT    &&    cond.getFirstChild()    ==    null)    {    	non-compiled	[CE]  ')'  expected	16	None	replace
556	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  ||  expr.getFirstChild()!=  null)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  ||  expr.getFirstChild()!=  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  ||  expr.getFirstChild()!=  null)  {	  if(expr.getType()    ==    Token.NOT    &&    cond.getFirstChild()    ==    null)    {    	non-compiled	[CE]  ')'  expected	16	None	replace
557	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.RETURN  ||  expr.getType()  ==  Token.GETPROP  ||  expr.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.RETURN  ||  expr.getType()  ==  Token.GETPROP  ||  expr.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.RETURN  ||  expr.getType()  ==  Token.GETPROP  ||  expr.getType()  ==  Token.NOT)  {	  if(expr.getType()    ==    Token.GETPROP    ||    cond.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	21	None	replace
558	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.GETPROP  &&  expr.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.GETPROP  &&  expr.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.GETPROP  &&  expr.getType()  ==  Token.NOT)  {	  if(expr.getType()    ==    Token.GETPROP    ||    cond.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	21	None	replace
559	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(expr.getFirstChild()))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(parent.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(expr.getFirstChild()))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(parent.getType()  ==  Token.CALL  &&  isLowerPrecedenceInExpression(expr.getFirstChild()))  {	  if(cond.getType()    ==    Token.CALL    &&    isLowerPrecedenceInExpression(expr.getFirstChild()))    {    	non-compiled	[CE]  ')'  expected	75	None	replace
560	[BUG]  [BUGGY]  if(pr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getString().equals( "prototype "))  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(pr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getString().equals( "prototype "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(pr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getString().equals( "prototype "))  {	  if(pr.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null)    {    	non-compiled	[CE]  ')'  expected	114	None	replace
561	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getString().equals( "prototype "))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getString().equals( "prototype "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getString().equals( "prototype "))  {	  if(pr.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null)    {    	non-compiled	[CE]  ')'  expected	114	None	replace
562	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(elseBranch.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	78	None	replace
563	[BUG]  [BUGGY]  if(epr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(epr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(epr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(elseBranch.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	78	None	replace
564	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CATCH  ||  expr.getFirstChild()  ==  null)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CATCH  ||  expr.getFirstChild()  ==  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CATCH  ||  expr.getFirstChild()  ==  null)  {	  if(cond.getType()    ==    Token.NOT    ||    expr.getFirstChild()    ==    null)    {    	non-compiled	[CE]  ')'  expected	95	None	replace
565	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.BLOCK  ||  expr.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.BLOCK  ||  expr.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.BLOCK  ||  expr.getType()  ==  Token.NOT)  {	  if(expr.getType()    ==    Token.NOT    ||    expr.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	68	None	replace
566	[BUG]  [BUGGY]  if(Expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(Expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(Expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(Expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	39	None	replace
567	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild().getLastChild().getString().equals( "prototype "))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild().getLastChild().getString().equals( "prototype "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild().getLastChild().getString().equals( "prototype "))  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  ')'  expected	31	None	replace
568	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  &&  expr.getLastChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  &&  expr.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  &&  expr.getLastChild().getType()  ==  Token.BLOCK)  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getLastChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	4	None	replace
569	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getLastChild().getString().equals( "prototype ")||  expr.getFirstChild().getString().equals( "prototype "))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getLastChild().getString().equals( "prototype ")||  expr.getFirstChild().getString().equals( "prototype "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  expr.getLastChild().getString().equals( "prototype ")||  expr.getFirstChild().getString().equals( "prototype "))  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  ')'  expected	30	None	replace
570	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getLastChild().getString().equals( "prototype ")||  expr.getLastChild().getString().equals( "prototype "))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getLastChild().getString().equals( "prototype ")||  expr.getLastChild().getString().equals( "prototype "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  expr.getLastChild().getString().equals( "prototype ")||  expr.getLastChild().getString().equals( "prototype "))  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  ')'  expected	30	None	replace
571	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.hasChildren()  ||  expr.hasChildren())  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.hasChildren()  ||  expr.hasChildren())  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  expr.hasChildren()  ||  expr.hasChildren())  {	  if(expr.getType()    ==    Token.NOT    &&    expr.hasChildren())    {    	non-compiled	[CE]  ')'  expected	110	None	replace
572	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.EXPR_RESULT  &&  expr.getFirstChild()  ==  parent)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.EXPR_RESULT  &&  expr.getFirstChild()  ==  parent)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.EXPR_RESULT  &&  expr.getFirstChild()  ==  parent)  {	  if(expr.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  ')'  expected	79	None	replace
573	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.EXPR_RESULT  &&  expr.getFirstChild()!=  OR_PRECEDENCE)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.EXPR_RESULT  &&  expr.getFirstChild()!=  OR_PRECEDENCE)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.EXPR_RESULT  &&  expr.getFirstChild()!=  OR_PRECEDENCE)  {	  if(expr.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  ')'  expected	79	None	replace
574	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CATCH  ||  expr.getType()  ==  Token.EXPR_RESULT)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CATCH  ||  expr.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CATCH  ||  expr.getType()  ==  Token.EXPR_RESULT)  {	  if(expr.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  ')'  expected	79	None	replace
575	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.EXPR_RESULT  &&  expr.getFirstChild()!=  parent)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.EXPR_RESULT  &&  expr.getFirstChild()!=  parent)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.EXPR_RESULT  &&  expr.getFirstChild()!=  parent)  {	  if(expr.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  ')'  expected	79	None	replace
576	[BUG]  [BUGGY]  if(expr.getType()!=  Token.NOT  &&  expr.getFirstChild()  ==  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()!=  Token.NOT  &&  expr.getFirstChild()  ==  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()!=  Token.NOT  &&  expr.getFirstChild()  ==  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(expr.getType()!=    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	38	None	replace
577	[BUG]  [BUGGY]  Node  cond  =  expr.getNext(),  OR_PRECEDENCE);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  cond  =  expr.getNext(),  OR_PRECEDENCE);  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  cond  =  expr.getNext(),  OR_PRECEDENCE);	  Node    cond    =    expr.getNext();    	non-compiled	[CE]  ')'  expected	60	None	replace
578	[BUG]  [BUGGY]  if(elseBranch.getType()!=  Token.NOT  &&  elseBranchIsExpressionBlock)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()!=  Token.NOT  &&  elseBranchIsExpressionBlock)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()!=  Token.NOT  &&  elseBranchIsExpressionBlock)  {	  if(elseBranch.getType()    ==    Token.NOT    &&    elseBranchIsExpressionBlock)    {    	non-compiled	[CE]  ')'  expected	83	None	replace
579	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  &&  elseBranchIsExpressionBlock  ||  expr.getFirstChild()!=  null)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  &&  elseBranchIsExpressionBlock  ||  expr.getFirstChild()!=  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.NOT  &&  elseBranchIsExpressionBlock  ||  expr.getFirstChild()!=  null)  {	  if(elseBranch.getType()    ==    Token.NOT    &&    elseBranchIsExpressionBlock)    {    	non-compiled	[CE]  ')'  expected	83	None	replace
580	[BUG]  [BUGGY]  Cond  cond  =  expr.cloneTree();  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Cond  cond  =  expr.cloneTree();  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Cond  cond  =  expr.cloneTree();	  Cond    cond    =    expr.getFirstChild();    	non-compiled	[CE]  ')'  expected	63	None	replace
581	[BUG]  [BUGGY]  Cond  expr  =  expr.getLastChild();  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Cond  expr  =  expr.getLastChild();  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Cond  expr  =  expr.getLastChild();	  Cond    cond    =    expr.getFirstChild();    	non-compiled	[CE]  ')'  expected	63	None	replace
582	[BUG]  [BUGGY]  Node  cond  =  getBlockExpression(n,  OR_PRECEDENCE);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  cond  =  getBlockExpression(n,  OR_PRECEDENCE);  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  cond  =  getBlockExpression(n,  OR_PRECEDENCE);	  Node    cond    =    getBlockExpression(n);    	non-compiled	[CE]  ')'  expected	86	None	replace
583	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.RETURN  ||  expr.getType()  ==  Token.CATCH)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.RETURN  ||  expr.getType()  ==  Token.CATCH)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.RETURN  ||  expr.getType()  ==  Token.CATCH)  {	  if(expr.getType()    ==    Token.VAR    ||    expr.getType()    ==    Token.CATCH)    {    	non-compiled	[CE]  ')'  expected	101	None	replace
584	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.OR  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.OR  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.OR  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild().getType()    ==    Token.OR)    {    	non-compiled	[CE]  ')'  expected	28	None	replace
585	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  parent)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  parent)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  parent)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  ')'  expected	104	None	replace
586	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  context)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  context)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  context)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  ')'  expected	104	None	replace
587	[BUG]  [BUGGY]  if(pr.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  cond)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(pr.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  cond)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(pr.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  cond)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  ')'  expected	104	None	replace
588	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  OR_PRECEDENCE)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  OR_PRECEDENCE)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  OR_PRECEDENCE)  {	  if(expr.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	23	None	replace
589	[BUG]  [BUGGY]  if(expr.getType()!=  Token.NOT  &&  expr.getType()  ==  Token.CALL)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()!=  Token.NOT  &&  expr.getType()  ==  Token.CALL)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()!=  Token.NOT  &&  expr.getType()  ==  Token.CALL)  {	  if(cond.getType()!=    Token.NOT    &&    cond.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	51	None	replace
590	[BUG]  [BUGGY]  if(elseBranch.getType()!=  Token.NOT  &&  expr.getType()  ==  Token.CALL)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()!=  Token.NOT  &&  expr.getType()  ==  Token.CALL)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()!=  Token.NOT  &&  expr.getType()  ==  Token.CALL)  {	  if(cond.getType()!=    Token.NOT    &&    cond.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	51	None	replace
591	[BUG]  [BUGGY]  if(expr.getType()!=  Token.VAR  &&  expr.hasChildren())  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()!=  Token.VAR  &&  expr.hasChildren())  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()!=  Token.VAR  &&  expr.hasChildren())  {	  if(expr.getType()    ==    Token.VAR    &&    expr.hasChildren())    {    	non-compiled	[CE]  ')'  expected	45	None	replace
592	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.ASSIGN  &&  expr.getFirstChild()!=  null)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.ASSIGN  &&  expr.getFirstChild()!=  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.ASSIGN  &&  expr.getFirstChild()!=  null)  {	  if(expr.getType()    ==    Token.NOT    ||    expr.getFirstChild()!=    null)    {    	non-compiled	[CE]  ')'  expected	8	None	replace
593	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  parent)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  parent)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  parent)  {	  if(elseBranch.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	82	None	replace
594	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.CALL  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.CALL  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.CALL  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(elseBranch.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	82	None	replace
595	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(elseBranch.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	87	None	replace
596	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  ||  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.NOT  ||  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.NOT  ||  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(elseBranch.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	87	None	replace
597	[BUG]  [BUGGY]  if(expr.getFirstChild().getType()  ==  Token.NOT  &&  expr.getLastChild().getString().endsWith( "__ "))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getFirstChild().getType()  ==  Token.NOT  &&  expr.getLastChild().getString().endsWith( "__ "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getFirstChild().getType()  ==  Token.NOT  &&  expr.getLastChild().getString().endsWith( "__ "))  {	  if(elseBranch.getType()    ==    Token.NOT    &&    expr.getLastChild().getString().endsWith(   "__   "))    {    	non-compiled	[CE]  ')'  expected	118	None	replace
598	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CATCH)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CATCH)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CATCH)  {	  if(n.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	65	None	replace
599	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.OR  ||  expr.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.OR  ||  expr.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.OR  ||  expr.getType()  ==  Token.NOT)  {	  if(expr.getType()    ==    Token.CALL    ||    expr.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	103	None	replace
600	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  ||  expr.getType()!=  Token.GETPROP)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  ||  expr.getType()!=  Token.GETPROP)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  ||  expr.getType()!=  Token.GETPROP)  {	  if(expr.getType()    ==    Token.NOT    ||    expr.getType()!=    Token.GETPROP)    {    	non-compiled	[CE]  ')'  expected	107	None	replace
601	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getType()!=  Token.GETPROP)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getType()!=  Token.GETPROP)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CALL  &&  expr.getType()!=  Token.GETPROP)  {	  if(expr.getType()    ==    Token.NOT    ||    expr.getType()!=    Token.GETPROP)    {    	non-compiled	[CE]  ')'  expected	107	None	replace
602	[BUG]  [BUGGY]  If(expr.getType()  ==  Token.NOT  &&  expr.getLastChild().getString().equals( "prototype ")||  expr.getFirstChild().getString().equals( "prototype "))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  If(expr.getType()  ==  Token.NOT  &&  expr.getLastChild().getString().equals( "prototype ")||  expr.getFirstChild().getString().equals( "prototype "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	If(expr.getType()  ==  Token.NOT  &&  expr.getLastChild().getString().equals( "prototype ")||  expr.getFirstChild().getString().equals( "prototype "))  {	  If(expr.getType()    ==    Token.NOT    &&    expr.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  	98	None	replace
603	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.NOT  &&  elseBranchIsExpressionBlock  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.NOT  &&  elseBranchIsExpressionBlock  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.NOT  &&  elseBranchIsExpressionBlock  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(elseBranch.getType()    ==    Token.NOT    &&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	115	None	replace
604	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.NOT  &&  elseBranchIsExpressionBlock  &&  expr.getFirstChild()  ==  OR_PRECEDENCE)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.NOT  &&  elseBranchIsExpressionBlock  &&  expr.getFirstChild()  ==  OR_PRECEDENCE)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.NOT  &&  elseBranchIsExpressionBlock  &&  expr.getFirstChild()  ==  OR_PRECEDENCE)  {	  if(elseBranch.getType()    ==    Token.NOT    &&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	115	None	replace
605	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  OR_PRECEDENCE)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  OR_PRECEDENCE)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  OR_PRECEDENCE)  {	  if(elseBranch.getType()    ==    Token.NOT    &&    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	115	None	replace
606	[BUG]  [BUGGY]  if(expr.getType()!=  Token.NOT  &&  expr.getFirstChild()  ==  parent)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()!=  Token.NOT  &&  expr.getFirstChild()  ==  parent)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()!=  Token.NOT  &&  expr.getFirstChild()  ==  parent)  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    parent)    {    	non-compiled	[CE]  ')'  expected	112	None	replace
607	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  ||  expr.getLastChild().getString().equals( "property "))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  ||  expr.getLastChild().getString().equals( "property "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  ||  expr.getLastChild().getString().equals( "property "))  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()    ==    null)    {    	non-compiled	[CE]  ')'  expected	13	None	replace
608	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.CALL  &&  expr.hasChildren())  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(elseBranch.getType()  ==  Token.CALL  &&  expr.hasChildren())  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.CALL  &&  expr.hasChildren())  {	  if(cond.getType()    ==    Token.CALL    &&    expr.hasChildren())    {    	non-compiled	[CE]  ')'  expected	76	None	replace
609	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.hasChildren()  ||  expr.hasChildren())  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.hasChildren()  ||  expr.hasChildren())  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.CALL  &&  expr.hasChildren()  ||  expr.hasChildren())  {	  if(cond.getType()    ==    Token.CALL    &&    expr.hasChildren())    {    	non-compiled	[CE]  ')'  expected	76	None	replace
610	[BUG]  [BUGGY]  if(pr.getType()  ==  Token.CALL  &&  expr.hasChildren())  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(pr.getType()  ==  Token.CALL  &&  expr.hasChildren())  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(pr.getType()  ==  Token.CALL  &&  expr.hasChildren())  {	  if(cond.getType()    ==    Token.CALL    &&    expr.hasChildren())    {    	non-compiled	[CE]  ')'  expected	76	None	replace
611	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	105	None	replace
612	[BUG]  [BUGGY]  Node  cond  =  expr.firstChild();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  cond  =  expr.firstChild();  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  cond  =  expr.firstChild();	  Node    cond    =    expr.getLastChild();    	non-compiled	[CE]  ')'  expected	59	None	replace
613	[BUG]  [BUGGY]  Node  cond  =  expr.next();  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  Node  cond  =  expr.next();  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	Node  cond  =  expr.next();	  Node    cond    =    expr.getLastChild();    	non-compiled	[CE]  ')'  expected	59	None	replace
614	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NAME  &&  expr.getFirstChild()  ==  parent)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NAME  &&  expr.getFirstChild()  ==  parent)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NAME  &&  expr.getFirstChild()  ==  parent)  {	  if(expr.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ')'  expected	67	None	replace
615	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NAME  &&  expr.getLastChild().getString().endsWith( "__ "))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NAME  &&  expr.getLastChild().getString().endsWith( "__ "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NAME  &&  expr.getLastChild().getString().endsWith( "__ "))  {	  if(expr.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ')'  expected	67	None	replace
616	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.STRING  &&  expr.getFirstChild()  ==  parent)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.STRING  &&  expr.getFirstChild()  ==  parent)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.STRING  &&  expr.getFirstChild()  ==  parent)  {	  if(expr.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  ')'  expected	73	None	replace
617	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.STRING  &&  expr.getFirstChild()!=  parent)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.STRING  &&  expr.getFirstChild()!=  parent)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.STRING  &&  expr.getFirstChild()!=  parent)  {	  if(expr.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  ')'  expected	73	None	replace
618	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.STRING  &&  expr.getFirstChild()  ==  null)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.STRING  &&  expr.getFirstChild()  ==  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.STRING  &&  expr.getFirstChild()  ==  null)  {	  if(expr.getType()    ==    Token.STRING)    {    	non-compiled	[CE]  ')'  expected	73	None	replace
619	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  cond.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  cond.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  cond.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(expr.getType()    ==    Token.NOT    &&    cond.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	2	None	replace
620	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getString().endsWith( "__ "))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getString().endsWith( "__ "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getString().endsWith( "__ "))  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild()!=    null)    {    	non-compiled	[CE]  ')'  expected	27	None	replace
621	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getString().equals( "property "))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getString().equals( "property "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getString().equals( "property "))  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild()!=    null)    {    	non-compiled	[CE]  ')'  expected	27	None	replace
622	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getString().equals( "call "))  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getString().equals( "call "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getString().equals( "call "))  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild()!=    null)    {    	non-compiled	[CE]  ')'  expected	27	None	replace
623	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NAME  ||  expr.getType()  ==  Token.CALL)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NAME  ||  expr.getType()  ==  Token.CALL)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NAME  ||  expr.getType()  ==  Token.CALL)  {	  if(cond.getType()    ==    Token.NAME    ||    cond.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  ')'  expected	96	None	replace
624	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getString().endsWith( "__ "))  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getString().endsWith( "__ "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getString().endsWith( "__ "))  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null)    {    	non-compiled	[CE]  ')'  expected	7	None	replace
625	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  ||  expr.getFirstChild()!=  parent)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  ||  expr.getFirstChild()!=  parent)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  ||  expr.getFirstChild()!=  parent)  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getFirstChild()!=    parent)    {    	non-compiled	[CE]  ')'  expected	100	None	replace
626	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.OR  &&  expr.getType()  ==  Token.CALL  &&  expr.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.OR  &&  expr.getType()  ==  Token.CALL  &&  expr.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.OR  &&  expr.getType()  ==  Token.CALL  &&  expr.getType()  ==  Token.NOT)  {	  if(expr.getType()    ==    Token.CALL    &&    expr.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	106	None	replace
627	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getType()  ==  Token.NOT  ||  expr.getFirstChild()  ==  parent)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CALL  &&  expr.getType()  ==  Token.NOT  ||  expr.getFirstChild()  ==  parent)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CALL  &&  expr.getType()  ==  Token.NOT  ||  expr.getFirstChild()  ==  parent)  {	  if(expr.getType()    ==    Token.CALL    &&    expr.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	106	None	replace
628	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.BLOCK  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.BLOCK  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.BLOCK  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	29	None	replace
629	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.BLOCK  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.BLOCK  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild().getType()  ==  Token.BLOCK  &&  isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE))  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	29	None	replace
630	[BUG]  [BUGGY]  if(declaration.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(declaration.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(declaration.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(declaration.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	6	None	replace
631	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CALL  ||  expr.getType()!=  Token.NOT)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CALL  ||  expr.getType()!=  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CALL  ||  expr.getType()!=  Token.NOT)  {	  if(cond.getType()    ==    Token.CALL    ||    expr.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	89	None	replace
632	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  ||  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  ||  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  ||  expr.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(cond.getType()    ==    Token.NOT    &&    expr.getFirstChild()    ==    null    ||    expr.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  ')'  expected	120	None	replace
633	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CATCH  ||  expr.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CATCH  ||  expr.getType()  ==  Token.NOT)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CATCH  ||  expr.getType()  ==  Token.NOT)  {	  if(expr.getType()    ==    Token.VAR    ||    expr.getType()    ==    Token.NOT)    {    	non-compiled	[CE]  ')'  expected	108	None	replace
634	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getString().equals( "prototype "))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getString().equals( "prototype "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getString().equals( "prototype "))  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getFirstChild()!=    null)    {    	non-compiled	[CE]  ')'  expected	91	None	replace
635	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getString().endsWith( "__ "))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getString().endsWith( "__ "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getString().endsWith( "__ "))  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getFirstChild()!=    null)    {    	non-compiled	[CE]  ')'  expected	91	None	replace
636	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getString().equals( "property "))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getString().equals( "property "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR  &&  expr.getFirstChild()!=  null  &&  expr.getLastChild().getString().equals( "property "))  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getFirstChild()!=    null)    {    	non-compiled	[CE]  ')'  expected	91	None	replace
637	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.CATCH  ||  expr.getType()  ==  Token.GETPROP)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.CATCH  ||  expr.getType()  ==  Token.GETPROP)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.CATCH  ||  expr.getType()  ==  Token.GETPROP)  {	  if(elseBranch.getType()    ==    Token.NOT    ||    expr.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  ')'  expected	77	None	replace
638	[BUG]  [BUGGY]  if(Expr.getType()  ==  Token.VAR  &&  expr.getFirstChild().getString().equals( "prototype "))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(Expr.getType()  ==  Token.VAR  &&  expr.getFirstChild().getString().equals( "prototype "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(Expr.getType()  ==  Token.VAR  &&  expr.getFirstChild().getString().equals( "prototype "))  {	  if(expr.getType()    ==    Token.VAR    &&    expr.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  ')'  expected	41	None	replace
639	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  expr.getFirstChild()  ==  OR_PRECEDENCE)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  expr.getFirstChild()  ==  OR_PRECEDENCE)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  expr.getFirstChild()  ==  OR_PRECEDENCE)  {	  if(expr.getType()    ==    Token.VAR    &&    isLowerPrecedenceInExpression(expr,    OR_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	93	None	replace
640	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(expr.getType()    ==    Token.NOT    &&    cond.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	36	None	replace
641	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  cond.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  cond.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  cond.getFirstChild()  ==  null  ||  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(expr.getType()    ==    Token.NOT    &&    cond.getFirstChild()!=    null    &&    expr.getFirstChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	36	None	replace
642	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  &&  expr.getLastChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  &&  expr.getLastChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null  &&  expr.getLastChild().getType()  ==  Token.VAR)  {	  if(expr.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null    &&    expr.getLastChild().getType()    ==    Token.VAR)    {    	non-compiled	[CE]  ')'  expected	40	None	replace
643	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  null  ||  expr.getLastChild().getString().equals( "prototype "))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  null  ||  expr.getLastChild().getString().equals( "prototype "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  null  ||  expr.getLastChild().getString().equals( "prototype "))  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild()    ==    null)    {    	non-compiled	[CE]  ')'  expected	74	None	replace
644	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  null  ||  expr.getLastChild().getString().equals( "property "))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  null  ||  expr.getLastChild().getString().equals( "property "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  null  ||  expr.getLastChild().getString().equals( "property "))  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild()    ==    null)    {    	non-compiled	[CE]  ')'  expected	74	None	replace
645	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  null  ||  expr.getLastChild().getString().equals( "call "))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  null  ||  expr.getLastChild().getString().equals( "call "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  null  ||  expr.getLastChild().getString().equals( "call "))  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild()    ==    null)    {    	non-compiled	[CE]  ')'  expected	74	None	replace
646	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  null  ||  expr.getLastChild().getString().endsWith( "__ "))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  null  ||  expr.getLastChild().getString().endsWith( "__ "))  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.CALL  &&  expr.getFirstChild()  ==  null  ||  expr.getLastChild().getString().endsWith( "__ "))  {	  if(cond.getType()    ==    Token.CALL    &&    expr.getFirstChild()    ==    null)    {    	non-compiled	[CE]  ')'  expected	74	None	replace
647	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.RETURN  &&  expr.getFirstChild()  ==  parent)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.RETURN  &&  expr.getFirstChild()  ==  parent)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.RETURN  &&  expr.getFirstChild()  ==  parent)  {	  if(expr.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  ')'  expected	113	None	replace
648	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.RETURN  &&  expr.getFirstChild()!=  parent)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.RETURN  &&  expr.getFirstChild()!=  parent)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.RETURN  &&  expr.getFirstChild()!=  parent)  {	  if(expr.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  ')'  expected	113	None	replace
649	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.RETURN  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.CATCH)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.RETURN  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.CATCH)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.RETURN  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.CATCH)  {	  if(expr.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  ')'  expected	113	None	replace
650	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.RETURN  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(expr.getType()  ==  Token.RETURN  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.RETURN  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {	  if(expr.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  ')'  expected	113	None	replace
651	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(parent.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(parent.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null)  {	  if(elseBranch.getType()    ==    Token.NOT    &&    expr.getFirstChild()!=    null)    {    	non-compiled	[CE]  ')'  expected	81	None	replace
652	[BUG]  [BUGGY]  if(cond.getType()!=  Token.NOT  &&  expr.getFirstChild()!=  null)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }      [BUGGY]  if(cond.getType()!=  Token.NOT  &&  expr.getFirstChild()!=  null)  {  [BUGGY]        if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()!=  Token.NOT  &&  expr.getFirstChild()!=  null)  {	  if(cond.getType()    ==    Token.NOT    ||    expr.getFirstChild()!=    null)    {    	non-compiled	[CE]  ')'  expected	11	None	replace
