bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]    AssertionFailedError  [CONTEXT]  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [BUGGY]  if(expr.getType()  ==  Token.NOT)  {  [BUGGY]    if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.NOT)  {	if  (cond.getType()  ==  Token.NOT)  {  	non-compiled	[CE]  ')'  expected	19	None	replace
2	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.NOT  ||  expr.getType()  ==  Token.GETPROP)  {  [CE]  ')'  expected  [FE]      AssertionFailedError  [CONTEXT]  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [BUGGY]  if(cond.getType()  ==  Token.NOT  ||  expr.getType()  ==  Token.GETPROP)  {  [BUGGY]    if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.NOT  ||  expr.getType()  ==  Token.GETPROP)  {	if  (cond.getType()  ==  Token.NOT)  {  	non-compiled	[CE]  ')'  expected	19	None	replace
3	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.NOT  ||  expr.getType()  ==  Token.CALL)  {  [CE]  ')'  expected  [FE]        AssertionFailedError  [CONTEXT]  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [BUGGY]  if(cond.getType()  ==  Token.NOT  ||  expr.getType()  ==  Token.CALL)  {  [BUGGY]    if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.NOT  ||  expr.getType()  ==  Token.CALL)  {	if  (cond.getType()  ==  Token.NOT)  {  	non-compiled	[CE]  ')'  expected	19	None	replace
4	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.NOT  ||  expr.getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]          AssertionFailedError  [CONTEXT]  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [BUGGY]  if(cond.getType()  ==  Token.NOT  ||  expr.getType()  ==  Token.VAR)  {  [BUGGY]    if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.NOT  ||  expr.getType()  ==  Token.VAR)  {	if  (cond.getType()  ==  Token.NOT)  {  	non-compiled	[CE]  ')'  expected	19	None	replace
5	[BUG]  [BUGGY]  if(expr.getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]            AssertionFailedError  [CONTEXT]  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [BUGGY]  if(expr.getType()  ==  Token.VAR)  {  [BUGGY]    if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(expr.getType()  ==  Token.VAR)  {	if  (cond.getType()  ==  Token.NOT)  {  	non-compiled	[CE]  ')'  expected	19	None	replace
6	[BUG]  [BUGGY]    [CE]  ')'  expected  [FE]              AssertionFailedError  [CONTEXT]  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [BUGGY]    [BUGGY]    if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	  	if  (cond.getType()  ==  Token.NOT)  {  	non-compiled	[CE]  ')'  expected	19	None	replace
7	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null)  {  [CE]  ')'  expected  [FE]    AssertionFailedError  [CONTEXT]  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [BUGGY]  if(cond.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null)  {  [BUGGY]    if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null)  {	if  (cond.getType()  ==  Token.NOT)  {  	non-compiled	[CE]  ')'  expected	19	None	replace
8	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.CALL)  {  [CE]  ')'  expected  [FE]      AssertionFailedError  [CONTEXT]  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [BUGGY]  if(cond.getType()  ==  Token.CALL)  {  [BUGGY]    if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.CALL)  {	if  (cond.getType()  ==  Token.NOT)  {  	non-compiled	[CE]  ')'  expected	19	None	replace
9	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.NOT  ||  cond.getType()  ==  Token.CALL)  {  [CE]  ')'  expected  [FE]        AssertionFailedError  [CONTEXT]  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [BUGGY]  if(cond.getType()  ==  Token.NOT  ||  cond.getType()  ==  Token.CALL)  {  [BUGGY]    if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.NOT  ||  cond.getType()  ==  Token.CALL)  {	if  (cond.getType()  ==  Token.NOT)  {  	non-compiled	[CE]  ')'  expected	19	None	replace
10	[BUG]  [BUGGY]  if(elseBranch.getType()  ==  Token.NOT)  {  [CE]  ')'  expected  [FE]    AssertionFailedError  [CONTEXT]  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [BUGGY]  if(elseBranch.getType()  ==  Token.NOT)  {  [BUGGY]    if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(elseBranch.getType()  ==  Token.NOT)  {	if  (cond.getType()  ==  Token.NOT)  {  	non-compiled	[CE]  ')'  expected	19	None	replace
11	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [CE]  ')'  expected  [FE]      AssertionFailedError  [CONTEXT]  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [BUGGY]  if(cond.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {  [BUGGY]    if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.VAR)  {	if  (cond.getType()  ==  Token.NOT)  {  	non-compiled	[CE]  ')'  expected	19	None	replace
12	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.NOT  &&  expr.getLastChild().getString().equals( "prototype "))  {  [CE]  ')'  expected  [FE]        AssertionFailedError  [CONTEXT]  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [BUGGY]  if(cond.getType()  ==  Token.NOT  &&  expr.getLastChild().getString().equals( "prototype "))  {  [BUGGY]    if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.NOT  &&  expr.getLastChild().getString().equals( "prototype "))  {	if  (cond.getType()  ==  Token.NOT)  {  	non-compiled	[CE]  ')'  expected	19	None	replace
13	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  ')'  expected  [FE]          AssertionFailedError  [CONTEXT]  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [BUGGY]  if(cond.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]    if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.NOT  &&  expr.getFirstChild()!=  null  &&  expr.getFirstChild().getType()  ==  Token.BLOCK)  {	if  (cond.getType()  ==  Token.NOT)  {  	non-compiled	[CE]  ')'  expected	19	None	replace
14	[BUG]  [BUGGY]  if(cond.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null)  {  [CE]  ')'  expected  [FE]            AssertionFailedError  [CONTEXT]  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [BUGGY]  if(cond.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null)  {  [BUGGY]    if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  return  n;  }  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	283	283	1	replace	if(cond.getType()  ==  Token.NOT  &&  expr.getFirstChild()  ==  null)  {	if  (cond.getType()  ==  Token.NOT)  {  	non-compiled	[CE]  ')'  expected	19	None	replace
