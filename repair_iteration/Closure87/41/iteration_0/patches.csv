bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (NodeUtil.isLiteralValue(cond,  false))  {  [CE]  [FE]    AssertionFailedError  [CONTEXT]  private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();      [BUGGY]  if  (NodeUtil.isLiteralValue(cond,  false))  {  [BUGGY]  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if  (NodeUtil.isLiteralValue(cond,  false))  {	if  (NodeUtil.isLiteralValue(cond,  true))  {  	non-compiled	[CE]  	81	None	replace
2	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(cond,  true))  {  [CE]  [FE]      AssertionFailedError  [CONTEXT]  private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();      [BUGGY]  if(!NodeUtil.isLiteralValue(cond,  true))  {  [BUGGY]  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(!NodeUtil.isLiteralValue(cond,  true))  {	if  (NodeUtil.isLiteralValue(cond,  true))  {  	non-compiled	[CE]  	81	None	replace
3	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(cond,  false))  {  [CE]  [FE]        AssertionFailedError  [CONTEXT]  private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();      [BUGGY]  if(!NodeUtil.isLiteralValue(cond,  false))  {  [BUGGY]  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(!NodeUtil.isLiteralValue(cond,  false))  {	if  (NodeUtil.isLiteralValue(cond,  true))  {  	non-compiled	[CE]  	81	None	replace
4	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  [FE]          AssertionFailedError  [CONTEXT]  private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();      [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isFunctionDeclaration(parent))  {	if  (NodeUtil.isLiteralValue(cond,  true))  {  	non-compiled	[CE]  	81	None	replace
5	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]            AssertionFailedError  [CONTEXT]  private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();      [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.FUNCTION)  {	if  (NodeUtil.isLiteralValue(cond,  true))  {  	non-compiled	[CE]  	81	None	replace
6	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.NAME)  {  [CE]  [FE]              AssertionFailedError  [CONTEXT]  private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();      [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.NAME)  {  [BUGGY]  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.NAME)  {	if  (NodeUtil.isLiteralValue(cond,  true))  {  	non-compiled	[CE]  	81	None	replace
7	[BUG]  [BUGGY]    [CE]  [FE]                AssertionFailedError  [CONTEXT]  private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();      [BUGGY]    [BUGGY]  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	  	if  (NodeUtil.isLiteralValue(cond,  true))  {  	non-compiled	[CE]  	81	None	replace
8	[BUG]  [BUGGY]  if(cond  ==  null  ||  NodeUtil.isLiteralValue(cond,  true))  {  [CE]  [FE]    AssertionFailedError  [CONTEXT]  private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();      [BUGGY]  if(cond  ==  null  ||  NodeUtil.isLiteralValue(cond,  true))  {  [BUGGY]  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(cond  ==  null  ||  NodeUtil.isLiteralValue(cond,  true))  {	if  (NodeUtil.isLiteralValue(cond,  true))  {  	non-compiled	[CE]  	81	None	replace
9	[BUG]  [BUGGY]  if(cond!=  null  ||  NodeUtil.isLiteralValue(cond,  true))  {  [CE]  [FE]      AssertionFailedError  [CONTEXT]  private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();      [BUGGY]  if(cond!=  null  ||  NodeUtil.isLiteralValue(cond,  true))  {  [BUGGY]  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(cond!=  null  ||  NodeUtil.isLiteralValue(cond,  true))  {	if  (NodeUtil.isLiteralValue(cond,  true))  {  	non-compiled	[CE]  	81	None	replace
10	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isAssignmentOp(parent))  {  [CE]  [FE]        AssertionFailedError  [CONTEXT]  private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();      [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isAssignmentOp(parent))  {  [BUGGY]  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isAssignmentOp(parent))  {	if  (NodeUtil.isLiteralValue(cond,  true))  {  	non-compiled	[CE]  	81	None	replace
11	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isVarDeclaration(cond))  {  [CE]  [FE]    AssertionFailedError  [CONTEXT]  private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();      [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isVarDeclaration(cond))  {  [BUGGY]  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isVarDeclaration(cond))  {	if  (NodeUtil.isLiteralValue(cond,  true))  {  	non-compiled	[CE]  	81	None	replace
12	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isFunction(parent))  {  [CE]  [FE]      AssertionFailedError  [CONTEXT]  private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();      [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isFunction(parent))  {  [BUGGY]  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isFunction(parent))  {	if  (NodeUtil.isLiteralValue(cond,  true))  {  	non-compiled	[CE]  	81	None	replace
13	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isFunction(cond))  {  [CE]  [FE]        AssertionFailedError  [CONTEXT]  private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();      [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isFunction(cond))  {  [BUGGY]  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isFunction(cond))  {	if  (NodeUtil.isLiteralValue(cond,  true))  {  	non-compiled	[CE]  	81	None	replace
14	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.VAR)  {  [CE]  [FE]          AssertionFailedError  [CONTEXT]  private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();      [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.VAR)  {  [BUGGY]  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.VAR)  {	if  (NodeUtil.isLiteralValue(cond,  true))  {  	non-compiled	[CE]  	81	None	replace
