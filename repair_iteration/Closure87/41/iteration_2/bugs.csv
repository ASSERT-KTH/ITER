bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(cond!=  null  ||!NodeUtil.isLiteralValue(cond,  true))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(cond!=  null  ||!NodeUtil.isLiteralValue(cond,  true))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(cond!=  null  ||!NodeUtil.isLiteralValue(cond,  true))  {	  if(!NodeUtil.isLiteralValue(cond,    true))    {    	non-compiled	[CE]  	2	None	replace
2	[BUG]  [BUGGY]  if(cond  ==  null  ||!NodeUtil.isLiteralValue(cond,  true))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(cond  ==  null  ||!NodeUtil.isLiteralValue(cond,  true))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(cond  ==  null  ||!NodeUtil.isLiteralValue(cond,  true))  {	  if(!NodeUtil.isLiteralValue(cond,    true))    {    	non-compiled	[CE]  	2	None	replace
3	[BUG]  [BUGGY]  if(parent  ==  null  ||!NodeUtil.isLiteralValue(cond,  true))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(parent  ==  null  ||!NodeUtil.isLiteralValue(cond,  true))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(parent  ==  null  ||!NodeUtil.isLiteralValue(cond,  true))  {	  if(!NodeUtil.isLiteralValue(cond,    true))    {    	non-compiled	[CE]  	2	None	replace
4	[BUG]  [BUGGY]  if(parent!=  null  ||!NodeUtil.isLiteralValue(cond,  true))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(parent!=  null  ||!NodeUtil.isLiteralValue(cond,  true))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(parent!=  null  ||!NodeUtil.isLiteralValue(cond,  true))  {	  if(!NodeUtil.isLiteralValue(cond,    true))    {    	non-compiled	[CE]  	2	None	replace
5	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(parent,  true))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(!NodeUtil.isLiteralValue(parent,  true))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(!NodeUtil.isLiteralValue(parent,  true))  {	  if(!NodeUtil.isLiteralValue(cond,    true))    {    	non-compiled	[CE]  	2	None	replace
6	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(!NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(!NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.FUNCTION)  {	  if(!NodeUtil.isLiteralValue(cond,    true))    {    	non-compiled	[CE]  	2	None	replace
7	[BUG]  [BUGGY]  Node  assign  =  parent.getParent();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  Node  assign  =  parent.getParent();  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	Node  assign  =  parent.getParent();	      	non-compiled	[CE]  	7	None	replace
8	[BUG]  [BUGGY]  Node  assign  =  parent.getFirstChild();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  Node  assign  =  parent.getFirstChild();  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	Node  assign  =  parent.getFirstChild();	      	non-compiled	[CE]  	7	None	replace
9	[BUG]  [BUGGY]  Node  assign  =  parent.getNext();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  Node  assign  =  parent.getNext();  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	Node  assign  =  parent.getNext();	      	non-compiled	[CE]  	7	None	replace
10	[BUG]  [BUGGY]  Node  assign  =  cond.getFirstChild();  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  Node  assign  =  cond.getFirstChild();  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	Node  assign  =  cond.getFirstChild();	      	non-compiled	[CE]  	7	None	replace
11	[BUG]  [BUGGY]  Node  assign  =  n.getFirstChild();  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  Node  assign  =  n.getFirstChild();  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	Node  assign  =  n.getFirstChild();	      	non-compiled	[CE]  	7	None	replace
12	[BUG]  [BUGGY]  Node  assign  =  parent.getLastChild();  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  Node  assign  =  parent.getLastChild();  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	Node  assign  =  parent.getLastChild();	      	non-compiled	[CE]  	7	None	replace
13	[BUG]  [BUGGY]  Node  assign  =  cond.getNext();  [CE]  [FE]                                AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  Node  assign  =  cond.getNext();  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	Node  assign  =  cond.getNext();	      	non-compiled	[CE]  	7	None	replace
14	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(parent,  false))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(parent,  false))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(parent,  false))  {	  if    (NodeUtil.isLiteralValue(cond,    false))    {    	non-compiled	[CE]  	1	None	replace
15	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isFunctionDeclaration(parent))  {	  if    (NodeUtil.isLiteralValue(cond,    false))    {    	non-compiled	[CE]  	1	None	replace
16	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isFunctionDeclaration(n))  {	  if    (NodeUtil.isLiteralValue(cond,    false))    {    	non-compiled	[CE]  	1	None	replace
17	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isFunction(parent))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isFunction(parent))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isFunction(parent))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isFunction(parent))    {    	non-compiled	[CE]  	12	None	replace
18	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)&&  NodeUtil.isFunction(parent))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)&&  NodeUtil.isFunction(parent))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  true)&&  NodeUtil.isFunction(parent))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isFunction(parent))    {    	non-compiled	[CE]  	12	None	replace
19	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isAssignmentOp(parent))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isAssignmentOp(parent))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isAssignmentOp(parent))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isFunction(parent))    {    	non-compiled	[CE]  	12	None	replace
20	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)&&  NodeUtil.isFunction(parent))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)&&  NodeUtil.isFunction(parent))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  false)&&  NodeUtil.isFunction(parent))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isFunction(parent))    {    	non-compiled	[CE]  	12	None	replace
21	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isVar(parent))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isVar(parent))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isVar(parent))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isFunction(parent))    {    	non-compiled	[CE]  	12	None	replace
22	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isFunction(n))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isFunction(n))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isFunction(n))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isFunction(parent))    {    	non-compiled	[CE]  	12	None	replace
23	[BUG]  [BUGGY]  if(cond  ==  null  ||  NodeUtil.isLiteralValue(cond,  false))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(cond  ==  null  ||  NodeUtil.isLiteralValue(cond,  false))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(cond  ==  null  ||  NodeUtil.isLiteralValue(cond,  false))  {	  if(cond    ==    null    ||    NodeUtil.isLiteralValue(cond,    true))    {    	non-compiled	[CE]  	8	None	replace
24	[BUG]  [BUGGY]  if(cond!=  null  ||  NodeUtil.isLiteralValue(cond,  false))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(cond!=  null  ||  NodeUtil.isLiteralValue(cond,  false))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(cond!=  null  ||  NodeUtil.isLiteralValue(cond,  false))  {	  if(cond    ==    null    ||    NodeUtil.isLiteralValue(cond,    true))    {    	non-compiled	[CE]  	8	None	replace
25	[BUG]  [BUGGY]  if(parent  ==  null  ||  NodeUtil.isLiteralValue(cond,  true))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(parent  ==  null  ||  NodeUtil.isLiteralValue(cond,  true))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(parent  ==  null  ||  NodeUtil.isLiteralValue(cond,  true))  {	  if(cond    ==    null    ||    NodeUtil.isLiteralValue(cond,    true))    {    	non-compiled	[CE]  	8	None	replace
26	[BUG]  [BUGGY]  if(cond  ==  null  &&  NodeUtil.isLiteralValue(cond,  true))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(cond  ==  null  &&  NodeUtil.isLiteralValue(cond,  true))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(cond  ==  null  &&  NodeUtil.isLiteralValue(cond,  true))  {	  if(cond    ==    null    ||    NodeUtil.isLiteralValue(cond,    true))    {    	non-compiled	[CE]  	8	None	replace
27	[BUG]  [BUGGY]  if(cond  ==  null  ||  NodeUtil.isLiteralValue(parent,  true))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(cond  ==  null  ||  NodeUtil.isLiteralValue(parent,  true))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(cond  ==  null  ||  NodeUtil.isLiteralValue(parent,  true))  {	  if(cond    ==    null    ||    NodeUtil.isLiteralValue(cond,    true))    {    	non-compiled	[CE]  	8	None	replace
28	[BUG]  [BUGGY]  if(cond  >=  null  ||  NodeUtil.isLiteralValue(cond,  false))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(cond  >=  null  ||  NodeUtil.isLiteralValue(cond,  false))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(cond  >=  null  ||  NodeUtil.isLiteralValue(cond,  false))  {	  if(cond    ==    null    ||    NodeUtil.isLiteralValue(cond,    true))    {    	non-compiled	[CE]  	8	None	replace
29	[BUG]  [BUGGY]  if(cond  ==  parent  ||  NodeUtil.isLiteralValue(cond,  true))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(cond  ==  parent  ||  NodeUtil.isLiteralValue(cond,  true))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(cond  ==  parent  ||  NodeUtil.isLiteralValue(cond,  true))  {	  if(cond    ==    null    ||    NodeUtil.isLiteralValue(cond,    true))    {    	non-compiled	[CE]  	8	None	replace
30	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  parent.getType()  ==  Token.VAR)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  parent.getType()  ==  Token.VAR)  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  true)||  parent.getType()  ==  Token.VAR)  {	  if(NodeUtil.isLiteralValue(cond,    false)||    parent.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	14	None	replace
31	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)&&  parent.getType()  ==  Token.VAR)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)&&  parent.getType()  ==  Token.VAR)  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  true)&&  parent.getType()  ==  Token.VAR)  {	  if(NodeUtil.isLiteralValue(cond,    false)||    parent.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	14	None	replace
32	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)&&  parent.getType()  ==  Token.VAR)  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)&&  parent.getType()  ==  Token.VAR)  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  false)&&  parent.getType()  ==  Token.VAR)  {	  if(NodeUtil.isLiteralValue(cond,    false)||    parent.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	14	None	replace
33	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(parent,  false)||  parent.getType()  ==  Token.VAR)  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(parent,  false)||  parent.getType()  ==  Token.VAR)  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(parent,  false)||  parent.getType()  ==  Token.VAR)  {	  if(NodeUtil.isLiteralValue(cond,    false)||    parent.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	14	None	replace
34	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  parent.getType()!=  Token.VAR)  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  parent.getType()!=  Token.VAR)  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  true)||  parent.getType()!=  Token.VAR)  {	  if(NodeUtil.isLiteralValue(cond,    false)||    parent.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	14	None	replace
35	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)&&  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)&&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  true)&&  NodeUtil.isFunctionDeclaration(parent))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isFunctionDeclaration(parent))    {    	non-compiled	[CE]  	4	None	replace
36	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isFunctionDeclaration(n))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isFunctionDeclaration(n))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isFunctionDeclaration(n))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isFunctionDeclaration(parent))    {    	non-compiled	[CE]  	4	None	replace
37	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)&&  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)&&  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  false)&&  NodeUtil.isFunctionDeclaration(parent))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isFunctionDeclaration(parent))    {    	non-compiled	[CE]  	4	None	replace
38	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)&&  NodeUtil.isAssignmentOp(parent))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)&&  NodeUtil.isAssignmentOp(parent))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  true)&&  NodeUtil.isAssignmentOp(parent))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isAssignmentOp(parent))    {    	non-compiled	[CE]  	10	None	replace
39	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isAssignmentOp(n))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isAssignmentOp(n))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isAssignmentOp(n))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isAssignmentOp(parent))    {    	non-compiled	[CE]  	10	None	replace
40	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)&&  NodeUtil.isAssignmentOp(parent))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)&&  NodeUtil.isAssignmentOp(parent))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  false)&&  NodeUtil.isAssignmentOp(parent))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isAssignmentOp(parent))    {    	non-compiled	[CE]  	10	None	replace
41	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isAssignmentOp(n))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isAssignmentOp(n))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isAssignmentOp(n))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isAssignmentOp(parent))    {    	non-compiled	[CE]  	10	None	replace
42	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isForIn(parent))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isForIn(parent))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isForIn(parent))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isAssignmentOp(parent))    {    	non-compiled	[CE]  	10	None	replace
43	[BUG]  [BUGGY]  if(cond!=  null  ||!NodeUtil.isLiteralValue(cond,  false))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(cond!=  null  ||!NodeUtil.isLiteralValue(cond,  false))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(cond!=  null  ||!NodeUtil.isLiteralValue(cond,  false))  {	  if(!NodeUtil.isLiteralValue(cond,    false))    {    	non-compiled	[CE]  	3	None	replace
44	[BUG]  [BUGGY]  if(cond  ==  null  ||!NodeUtil.isLiteralValue(cond,  false))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(cond  ==  null  ||!NodeUtil.isLiteralValue(cond,  false))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(cond  ==  null  ||!NodeUtil.isLiteralValue(cond,  false))  {	  if(!NodeUtil.isLiteralValue(cond,    false))    {    	non-compiled	[CE]  	3	None	replace
45	[BUG]  [BUGGY]  if(parent  ==  null  ||!NodeUtil.isLiteralValue(cond,  false))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(parent  ==  null  ||!NodeUtil.isLiteralValue(cond,  false))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(parent  ==  null  ||!NodeUtil.isLiteralValue(cond,  false))  {	  if(!NodeUtil.isLiteralValue(cond,    false))    {    	non-compiled	[CE]  	3	None	replace
46	[BUG]  [BUGGY]  if(parent!=  null  ||!NodeUtil.isLiteralValue(cond,  false))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(parent!=  null  ||!NodeUtil.isLiteralValue(cond,  false))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(parent!=  null  ||!NodeUtil.isLiteralValue(cond,  false))  {	  if(!NodeUtil.isLiteralValue(cond,    false))    {    	non-compiled	[CE]  	3	None	replace
47	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(parent,  false))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(!NodeUtil.isLiteralValue(parent,  false))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(!NodeUtil.isLiteralValue(parent,  false))  {	  if(!NodeUtil.isLiteralValue(cond,    false))    {    	non-compiled	[CE]  	3	None	replace
48	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(cond,  true)&&  parent.getType()  ==  Token.STRING)  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(!NodeUtil.isLiteralValue(cond,  true)&&  parent.getType()  ==  Token.STRING)  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(!NodeUtil.isLiteralValue(cond,  true)&&  parent.getType()  ==  Token.STRING)  {	  if(!NodeUtil.isLiteralValue(cond,    false))    {    	non-compiled	[CE]  	3	None	replace
49	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  true)||  parent.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isLiteralValue(cond,    false)||    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	5	None	replace
50	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)&&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)&&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  true)&&  parent.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isLiteralValue(cond,    false)||    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	5	None	replace
51	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)&&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)&&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  false)&&  parent.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isLiteralValue(cond,    false)||    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	5	None	replace
52	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(parent,  false)||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(parent,  false)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(parent,  false)||  parent.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isLiteralValue(cond,    false)||    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	5	None	replace
53	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  parent.getType()!=  Token.FUNCTION)  {  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  parent.getType()!=  Token.FUNCTION)  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  true)||  parent.getType()!=  Token.FUNCTION)  {	  if(NodeUtil.isLiteralValue(cond,    false)||    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	5	None	replace
54	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)||  parent.getType()!=  Token.FUNCTION)  {  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)||  parent.getType()!=  Token.FUNCTION)  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  false)||  parent.getType()!=  Token.FUNCTION)  {	  if(NodeUtil.isLiteralValue(cond,    false)||    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	5	None	replace
55	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)&&  NodeUtil.isFunction(cond))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)&&  NodeUtil.isFunction(cond))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  true)&&  NodeUtil.isFunction(cond))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isFunction(cond))    {    	non-compiled	[CE]  	13	None	replace
56	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isFunction(cond))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isFunction(cond))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isFunction(cond))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isFunction(cond))    {    	non-compiled	[CE]  	13	None	replace
57	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)&&  NodeUtil.isFunction(cond))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)&&  NodeUtil.isFunction(cond))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  false)&&  NodeUtil.isFunction(cond))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isFunction(cond))    {    	non-compiled	[CE]  	13	None	replace
58	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(parent,  false)||  NodeUtil.isFunction(cond))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(parent,  false)||  NodeUtil.isFunction(cond))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(parent,  false)||  NodeUtil.isFunction(cond))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isFunction(cond))    {    	non-compiled	[CE]  	13	None	replace
59	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  parent.getType()  ==  Token.NAME)  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  parent.getType()  ==  Token.NAME)  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  true)||  parent.getType()  ==  Token.NAME)  {	  if(NodeUtil.isLiteralValue(cond,    false)||    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	6	None	replace
60	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)&&  parent.getType()  ==  Token.NAME)  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)&&  parent.getType()  ==  Token.NAME)  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  true)&&  parent.getType()  ==  Token.NAME)  {	  if(NodeUtil.isLiteralValue(cond,    false)||    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	6	None	replace
61	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)&&  parent.getType()  ==  Token.NAME)  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)&&  parent.getType()  ==  Token.NAME)  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  false)&&  parent.getType()  ==  Token.NAME)  {	  if(NodeUtil.isLiteralValue(cond,    false)||    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	6	None	replace
62	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.NAME  ||  NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.NAME)  {  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(parent.getType()  ==  Token.NAME  ||  NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.NAME)  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(parent.getType()  ==  Token.NAME  ||  NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.NAME)  {	  if(NodeUtil.isLiteralValue(cond,    false)||    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	6	None	replace
63	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(parent,  false)||  parent.getType()  ==  Token.NAME)  {  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(parent,  false)||  parent.getType()  ==  Token.NAME)  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(parent,  false)||  parent.getType()  ==  Token.NAME)  {	  if(NodeUtil.isLiteralValue(cond,    false)||    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	6	None	replace
64	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  parent.getType()!=  Token.NAME)  {  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  parent.getType()!=  Token.NAME)  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  true)||  parent.getType()!=  Token.NAME)  {	  if(NodeUtil.isLiteralValue(cond,    false)||    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	6	None	replace
65	[BUG]  [BUGGY]  if(cond!=  null  &&  NodeUtil.isLiteralValue(cond,  true))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(cond!=  null  &&  NodeUtil.isLiteralValue(cond,  true))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(cond!=  null  &&  NodeUtil.isLiteralValue(cond,  true))  {	  if(cond!=    null    ||    NodeUtil.isLiteralValue(cond,    true))    {    	non-compiled	[CE]  	9	None	replace
66	[BUG]  [BUGGY]  if(parent!=  null  ||  NodeUtil.isLiteralValue(cond,  true))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(parent!=  null  ||  NodeUtil.isLiteralValue(cond,  true))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(parent!=  null  ||  NodeUtil.isLiteralValue(cond,  true))  {	  if(cond!=    null    ||    NodeUtil.isLiteralValue(cond,    true))    {    	non-compiled	[CE]  	9	None	replace
67	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isVarDeclaration(cond))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isVarDeclaration(cond))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isVarDeclaration(cond))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isVarDeclaration(cond))    {    	non-compiled	[CE]  	11	None	replace
68	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)&&  NodeUtil.isVarDeclaration(cond))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)&&  NodeUtil.isVarDeclaration(cond))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  true)&&  NodeUtil.isVarDeclaration(cond))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isVarDeclaration(cond))    {    	non-compiled	[CE]  	11	None	replace
69	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isVarDeclaration(parent))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isVarDeclaration(parent))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isVarDeclaration(parent))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isVarDeclaration(cond))    {    	non-compiled	[CE]  	11	None	replace
70	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isVarDeclaration(parent))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isVarDeclaration(parent))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isVarDeclaration(parent))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isVarDeclaration(cond))    {    	non-compiled	[CE]  	11	None	replace
71	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)&&  NodeUtil.isVarDeclaration(cond))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)&&  NodeUtil.isVarDeclaration(cond))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  false)&&  NodeUtil.isVarDeclaration(cond))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isVarDeclaration(cond))    {    	non-compiled	[CE]  	11	None	replace
72	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isFunctionDeclaration(cond))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isFunctionDeclaration(cond))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isFunctionDeclaration(cond))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isVarDeclaration(cond))    {    	non-compiled	[CE]  	11	None	replace
73	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(parent,  false)||  NodeUtil.isVarDeclaration(parent))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(parent,  false)||  NodeUtil.isVarDeclaration(parent))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(parent,  false)||  NodeUtil.isVarDeclaration(parent))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isVarDeclaration(cond))    {    	non-compiled	[CE]  	11	None	replace
74	[BUG]  [BUGGY]  if(parent  ==  null  ||  NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isFunction(cond))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(parent  ==  null  ||  NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isFunction(cond))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(parent  ==  null  ||  NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isFunction(cond))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isFunction(cond))    {    	non-compiled	[CE]  	13	None	replace
75	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isAssignmentOp(cond))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isAssignmentOp(cond))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isAssignmentOp(cond))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isFunction(cond))    {    	non-compiled	[CE]  	13	None	replace
76	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isExpressionNode(cond))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isExpressionNode(cond))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isExpressionNode(cond))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isFunction(cond))    {    	non-compiled	[CE]  	13	None	replace
77	[BUG]  [BUGGY]  if(parent  ==  null  ||  NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.VAR)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(parent  ==  null  ||  NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.VAR)  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(parent  ==  null  ||  NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.VAR)  {	  if(NodeUtil.isLiteralValue(cond,    false)||    parent.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	14	None	replace
78	[BUG]  [BUGGY]  if(parent!=  null  &&  NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.VAR)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(parent!=  null  &&  NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.VAR)  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(parent!=  null  &&  NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.VAR)  {	  if(NodeUtil.isLiteralValue(cond,    false)||    parent.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	14	None	replace
79	[BUG]  [BUGGY]  if(parent!=  null  ||  NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.VAR)  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(parent!=  null  ||  NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.VAR)  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(parent!=  null  ||  NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.VAR)  {	  if(NodeUtil.isLiteralValue(cond,    false)||    parent.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	14	None	replace
80	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isLiteralValue(cond,    false)||    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	5	None	replace
81	[BUG]  [BUGGY]  if(parent  ==  null  ||  NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(parent  ==  null  ||  NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(parent  ==  null  ||  NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isLiteralValue(cond,    false)||    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	5	None	replace
82	[BUG]  [BUGGY]  if(parent  ==  null  ||  NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.NAME)  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(parent  ==  null  ||  NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.NAME)  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(parent  ==  null  ||  NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.NAME)  {	  if(NodeUtil.isLiteralValue(cond,    false)||    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	6	None	replace
83	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(cond,  false)&&  parent.getType()  ==  Token.NAME)  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(!NodeUtil.isLiteralValue(cond,  false)&&  parent.getType()  ==  Token.NAME)  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(!NodeUtil.isLiteralValue(cond,  false)&&  parent.getType()  ==  Token.NAME)  {	  if(NodeUtil.isLiteralValue(cond,    false)||    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	6	None	replace
84	[BUG]  [BUGGY]  if(parent  ==  null  ||  NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isVarDeclaration(cond))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(parent  ==  null  ||  NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isVarDeclaration(cond))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(parent  ==  null  ||  NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isVarDeclaration(cond))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isVarDeclaration(cond))    {    	non-compiled	[CE]  	11	None	replace
85	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isFunctionDeclaration(cond))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isFunctionDeclaration(cond))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isFunctionDeclaration(cond))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isVarDeclaration(cond))    {    	non-compiled	[CE]  	11	None	replace
86	[BUG]  [BUGGY]  if(cond!=  null  ||  NodeUtil.mayHaveSideEffects(cond))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(cond!=  null  ||  NodeUtil.mayHaveSideEffects(cond))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(cond!=  null  ||  NodeUtil.mayHaveSideEffects(cond))  {	  if(cond!=    null    ||    NodeUtil.isLiteralValue(cond,    true))    {    	non-compiled	[CE]  	9	None	replace
87	[BUG]  [BUGGY]  if(cond  ==  null  ||  NodeUtil.mayHaveSideEffects(cond))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(cond  ==  null  ||  NodeUtil.mayHaveSideEffects(cond))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(cond  ==  null  ||  NodeUtil.mayHaveSideEffects(cond))  {	  if(cond!=    null    ||    NodeUtil.isLiteralValue(cond,    true))    {    	non-compiled	[CE]  	9	None	replace
88	[BUG]  [BUGGY]  if(cond  ==  null  ||  NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(cond  ==  null  ||  NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(cond  ==  null  ||  NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isFunctionDeclaration(parent))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isFunctionDeclaration(parent))    {    	non-compiled	[CE]  	4	None	replace
89	[BUG]  [BUGGY]  if(cond!=  null  ||  NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(cond!=  null  ||  NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(cond!=  null  ||  NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isFunctionDeclaration(parent))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isFunctionDeclaration(parent))    {    	non-compiled	[CE]  	4	None	replace
90	[BUG]  [BUGGY]  if(cond!=  null  &&!NodeUtil.isLiteralValue(cond,  false))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(cond!=  null  &&!NodeUtil.isLiteralValue(cond,  false))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(cond!=  null  &&!NodeUtil.isLiteralValue(cond,  false))  {	  if(!NodeUtil.isLiteralValue(cond,    false))    {    	non-compiled	[CE]  	3	None	replace
91	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isLiteralValue(cond,  false))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isLiteralValue(cond,  false))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isLiteralValue(cond,  false))  {	  if    (NodeUtil.isLiteralValue(cond,    false))    {    	non-compiled	[CE]  	1	None	replace
92	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  parent  ==  null)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  parent  ==  null)  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  true)||  parent  ==  null)  {	  if    (NodeUtil.isLiteralValue(cond,    false))    {    	non-compiled	[CE]  	1	None	replace
93	[BUG]  [BUGGY]  if(cond  ==  null  ||  NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isAssignmentOp(parent))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(cond  ==  null  ||  NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isAssignmentOp(parent))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(cond  ==  null  ||  NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isAssignmentOp(parent))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isAssignmentOp(parent))    {    	non-compiled	[CE]  	10	None	replace
94	[BUG]  [BUGGY]  if(cond!=  null  ||  NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isAssignmentOp(parent))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(cond!=  null  ||  NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isAssignmentOp(parent))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(cond!=  null  ||  NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isAssignmentOp(parent))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isAssignmentOp(parent))    {    	non-compiled	[CE]  	10	None	replace
95	[BUG]  [BUGGY]  Node  thenBranch  =  cond.getNext();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  Node  thenBranch  =  cond.getNext();  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	Node  thenBranch  =  cond.getNext();	      	non-compiled	[CE]  	7	None	replace
96	[BUG]  [BUGGY]  Node  assign  =  getBlockExpression(cond);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  Node  assign  =  getBlockExpression(cond);  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	Node  assign  =  getBlockExpression(cond);	      	non-compiled	[CE]  	7	None	replace
97	[BUG]  [BUGGY]  Preconditions.checkState(cond!=  null);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  Preconditions.checkState(cond!=  null);  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	Preconditions.checkState(cond!=  null);	      	non-compiled	[CE]  	7	None	replace
98	[BUG]  [BUGGY]  Node  assign  =  n.getParent();  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  Node  assign  =  n.getParent();  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	Node  assign  =  n.getParent();	      	non-compiled	[CE]  	7	None	replace
99	[BUG]  [BUGGY]  if(cond  ==  null  ||  NodeUtil.isImmutableValue(cond,  true))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(cond  ==  null  ||  NodeUtil.isImmutableValue(cond,  true))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(cond  ==  null  ||  NodeUtil.isImmutableValue(cond,  true))  {	  if(cond    ==    null    ||    NodeUtil.isLiteralValue(cond,    true))    {    	non-compiled	[CE]  	8	None	replace
100	[BUG]  [BUGGY]  if(cond  ==  null  ||  NodeUtil.isLiteralValue(cond,  false)&&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(cond  ==  null  ||  NodeUtil.isLiteralValue(cond,  false)&&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(cond  ==  null  ||  NodeUtil.isLiteralValue(cond,  false)&&  parent.getType()  ==  Token.FUNCTION)  {	  if(cond    ==    null    ||    NodeUtil.isLiteralValue(cond,    true))    {    	non-compiled	[CE]  	8	None	replace
101	[BUG]  [BUGGY]  if(cond!=  null  &&!NodeUtil.isLiteralValue(cond,  true))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(cond!=  null  &&!NodeUtil.isLiteralValue(cond,  true))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(cond!=  null  &&!NodeUtil.isLiteralValue(cond,  true))  {	  if(!NodeUtil.isLiteralValue(cond,    true))    {    	non-compiled	[CE]  	2	None	replace
102	[BUG]  [BUGGY]  if(cond  ==  null  ||  NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isFunction(parent))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(cond  ==  null  ||  NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isFunction(parent))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(cond  ==  null  ||  NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isFunction(parent))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isFunction(parent))    {    	non-compiled	[CE]  	12	None	replace
103	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isGetProp(parent))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isGetProp(parent))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isGetProp(parent))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isFunction(parent))    {    	non-compiled	[CE]  	12	None	replace
104	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isExpressionNode(parent))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isExpressionNode(parent))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isExpressionNode(parent))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isFunction(parent))    {    	non-compiled	[CE]  	12	None	replace
105	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond)||  NodeUtil.isAssignmentOp(parent))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond)||  NodeUtil.isAssignmentOp(parent))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond)||  NodeUtil.isAssignmentOp(parent))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isAssignmentOp(parent))    {    	non-compiled	[CE]  	10	None	replace
106	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond)||  NodeUtil.isLiteralValue(cond,  false))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond)||  NodeUtil.isLiteralValue(cond,  false))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond)||  NodeUtil.isLiteralValue(cond,  false))  {	  if    (NodeUtil.isLiteralValue(cond,    false))    {    	non-compiled	[CE]  	1	None	replace
107	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond)||  NodeUtil.isLiteralValue(cond,  true))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond)||  NodeUtil.isLiteralValue(cond,  true))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond)||  NodeUtil.isLiteralValue(cond,  true))  {	  if    (NodeUtil.isLiteralValue(cond,    false))    {    	non-compiled	[CE]  	1	None	replace
108	[BUG]  [BUGGY]  if(cond!=  null  ||  NodeUtil.isLiteralValue(cond,  false)&&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(cond!=  null  ||  NodeUtil.isLiteralValue(cond,  false)&&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(cond!=  null  ||  NodeUtil.isLiteralValue(cond,  false)&&  parent.getType()  ==  Token.FUNCTION)  {	  if(cond!=    null    ||    NodeUtil.isLiteralValue(cond,    true))    {    	non-compiled	[CE]  	9	None	replace
109	[BUG]  [BUGGY]  if(cond!=  null  ||  NodeUtil.isLiteralValue(cond,  false)&&  parent.getType()  ==  Token.NAME)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(cond!=  null  ||  NodeUtil.isLiteralValue(cond,  false)&&  parent.getType()  ==  Token.NAME)  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(cond!=  null  ||  NodeUtil.isLiteralValue(cond,  false)&&  parent.getType()  ==  Token.NAME)  {	  if(cond!=    null    ||    NodeUtil.isLiteralValue(cond,    true))    {    	non-compiled	[CE]  	9	None	replace
110	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond)||  NodeUtil.isFunction(parent))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond)||  NodeUtil.isFunction(parent))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond)||  NodeUtil.isFunction(parent))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isFunction(parent))    {    	non-compiled	[CE]  	12	None	replace
111	[BUG]  [BUGGY]  if(parent!=  null  &&!NodeUtil.isLiteralValue(cond,  false))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(parent!=  null  &&!NodeUtil.isLiteralValue(cond,  false))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(parent!=  null  &&!NodeUtil.isLiteralValue(cond,  false))  {	  if(!NodeUtil.isLiteralValue(cond,    false))    {    	non-compiled	[CE]  	3	None	replace
112	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(cond,  true)||!NodeUtil.isFunction(cond))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(!NodeUtil.isLiteralValue(cond,  true)||!NodeUtil.isFunction(cond))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(!NodeUtil.isLiteralValue(cond,  true)||!NodeUtil.isFunction(cond))  {	  if(!NodeUtil.isLiteralValue(cond,    false))    {    	non-compiled	[CE]  	3	None	replace
113	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.EXPR_RESULT);	      	non-compiled	[CE]  	7	None	replace
114	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.VAR);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.VAR);  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.VAR);	      	non-compiled	[CE]  	7	None	replace
115	[BUG]  [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  Preconditions.checkArgument(cond.getType()  ==  Token.NAME);  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	Preconditions.checkArgument(cond.getType()  ==  Token.NAME);	      	non-compiled	[CE]  	7	None	replace
116	[BUG]  [BUGGY]  Node  assignName  =  parent.getFirstChild().getNext().getString();  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  Node  assignName  =  parent.getFirstChild().getNext().getString();  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	Node  assignName  =  parent.getFirstChild().getNext().getString();	      	non-compiled	[CE]  	7	None	replace
117	[BUG]  [BUGGY]  Node  assignName  =  parent.getFirstChild().getString();  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  Node  assignName  =  parent.getFirstChild().getString();  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	Node  assignName  =  parent.getFirstChild().getString();	      	non-compiled	[CE]  	7	None	replace
118	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.VAR  ||  NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.VAR)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(parent.getType()  ==  Token.VAR  ||  NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.VAR)  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(parent.getType()  ==  Token.VAR  ||  NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.VAR)  {	  if(NodeUtil.isLiteralValue(cond,    false)||    parent.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	14	None	replace
119	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)||  parent.getType()!=  Token.VAR)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)||  parent.getType()!=  Token.VAR)  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  false)||  parent.getType()!=  Token.VAR)  {	  if(NodeUtil.isLiteralValue(cond,    false)||    parent.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	14	None	replace
120	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond)||  parent.getType()  ==  Token.VAR)  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond)||  parent.getType()  ==  Token.VAR)  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond)||  parent.getType()  ==  Token.VAR)  {	  if(NodeUtil.isLiteralValue(cond,    false)||    parent.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	14	None	replace
121	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isVar(cond))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isVar(cond))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  true)||  NodeUtil.isVar(cond))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isFunction(cond))    {    	non-compiled	[CE]  	13	None	replace
122	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(cond,  false)||  NodeUtil.isFunction(cond))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isImmutableValue(cond,  false)||  NodeUtil.isFunction(cond))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isImmutableValue(cond,  false)||  NodeUtil.isFunction(cond))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isFunction(cond))    {    	non-compiled	[CE]  	13	None	replace
123	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isVar(cond))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isVar(cond))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isVar(cond))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isFunction(cond))    {    	non-compiled	[CE]  	13	None	replace
124	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)||  parent.getType()!=  Token.NAME)  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)||  parent.getType()!=  Token.NAME)  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  false)||  parent.getType()!=  Token.NAME)  {	  if(NodeUtil.isLiteralValue(cond,    false)||    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	6	None	replace
125	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR)  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR)  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.NAME  ||  parent.getType()  ==  Token.VAR)  {	  if(NodeUtil.isLiteralValue(cond,    false)||    parent.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	6	None	replace
126	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(cond,  false)||  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isImmutableValue(cond,  false)||  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isImmutableValue(cond,  false)||  NodeUtil.isFunctionDeclaration(parent))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isFunctionDeclaration(parent))    {    	non-compiled	[CE]  	4	None	replace
127	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond)||  NodeUtil.isFunctionDeclaration(parent))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond)||  NodeUtil.isFunctionDeclaration(parent))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond)||  NodeUtil.isFunctionDeclaration(parent))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isFunctionDeclaration(parent))    {    	non-compiled	[CE]  	4	None	replace
128	[BUG]  [BUGGY]  if(cond  ==  null  ||  NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.VAR)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(cond  ==  null  ||  NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.VAR)  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(cond  ==  null  ||  NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.VAR)  {	  if(cond    ==    null    ||    NodeUtil.isLiteralValue(cond,    true))    {    	non-compiled	[CE]  	8	None	replace
129	[BUG]  [BUGGY]  if(cond  ==  null  ||  NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(cond  ==  null  ||  NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(cond  ==  null  ||  NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.FUNCTION)  {	  if(cond    ==    null    ||    NodeUtil.isLiteralValue(cond,    true))    {    	non-compiled	[CE]  	8	None	replace
130	[BUG]  [BUGGY]  if(cond  ==  null  ||  NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.NAME)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(cond  ==  null  ||  NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.NAME)  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(cond  ==  null  ||  NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.NAME)  {	  if(cond    ==    null    ||    NodeUtil.isLiteralValue(cond,    true))    {    	non-compiled	[CE]  	8	None	replace
131	[BUG]  [BUGGY]  if(parent!=  null  &&!NodeUtil.isLiteralValue(cond,  true))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(parent!=  null  &&!NodeUtil.isLiteralValue(cond,  true))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(parent!=  null  &&!NodeUtil.isLiteralValue(cond,  true))  {	  if(!NodeUtil.isLiteralValue(cond,    true))    {    	non-compiled	[CE]  	2	None	replace
132	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(cond,  false)||!NodeUtil.isFunction(cond))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(!NodeUtil.isLiteralValue(cond,  false)||!NodeUtil.isFunction(cond))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(!NodeUtil.isLiteralValue(cond,  false)||!NodeUtil.isFunction(cond))  {	  if(!NodeUtil.isLiteralValue(cond,    true))    {    	non-compiled	[CE]  	2	None	replace
133	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(cond,  false)||!NodeUtil.isVarDeclaration(cond))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(!NodeUtil.isLiteralValue(cond,  false)||!NodeUtil.isVarDeclaration(cond))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(!NodeUtil.isLiteralValue(cond,  false)||!NodeUtil.isVarDeclaration(cond))  {	  if(!NodeUtil.isLiteralValue(cond,    true))    {    	non-compiled	[CE]  	2	None	replace
134	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.NAME)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(!NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.NAME)  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(!NodeUtil.isLiteralValue(cond,  false)||  parent.getType()  ==  Token.NAME)  {	  if(!NodeUtil.isLiteralValue(cond,    true))    {    	non-compiled	[CE]  	2	None	replace
135	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond)||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isLiteralValue(cond)||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isLiteralValue(cond)||  parent.getType()  ==  Token.FUNCTION)  {	  if(NodeUtil.isLiteralValue(cond,    false)||    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	5	None	replace
136	[BUG]  [BUGGY]  if(NodeUtil.isVarDeclaration(cond)||  NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isVarDeclaration(cond))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  tryMinimizeIf(Node  n)  {  Node  parent  =  n.getParent();  Node  cond  =  n.getFirstChild();        [BUGGY]  if(NodeUtil.isVarDeclaration(cond)||  NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isVarDeclaration(cond))  {  [BUGGY]    return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	267	267	1	replace	if(NodeUtil.isVarDeclaration(cond)||  NodeUtil.isLiteralValue(cond,  false)||  NodeUtil.isVarDeclaration(cond))  {	  if(NodeUtil.isLiteralValue(cond,    false)||    NodeUtil.isVarDeclaration(cond))    {    	non-compiled	[CE]  	11	None	replace
