bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  tryMinimizeIf(NodeUtil.getExpressionExpression(node));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeIf(NodeUtil.getExpressionExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeIf(NodeUtil.getExpressionExpression(node));	  return    tryMinimize(NodeUtil.getExpressionExpression(node));    	non-compiled	[CE]  	7	None	replace
2	[BUG]  [BUGGY]  return  tryPredicate(NodeUtil.getExpressionExpression(node));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryPredicate(NodeUtil.getExpressionExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryPredicate(NodeUtil.getExpressionExpression(node));	  return    tryMinimize(NodeUtil.getExpressionExpression(node));    	non-compiled	[CE]  	7	None	replace
3	[BUG]  [BUGGY]  return  trySubtree(NodeUtil.getExpressionExpression(node));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  trySubtree(NodeUtil.getExpressionExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  trySubtree(NodeUtil.getExpressionExpression(node));	  return    tryMinimize(NodeUtil.getExpressionExpression(node));    	non-compiled	[CE]  	7	None	replace
4	[BUG]  [BUGGY]  return  tryMinimize(NodeUtil.getExpressionExpression(node)+  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimize(NodeUtil.getExpressionExpression(node)+  1);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimize(NodeUtil.getExpressionExpression(node)+  1);	  return    tryMinimize(NodeUtil.getExpressionExpression(node));    	non-compiled	[CE]  	7	None	replace
5	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;	  case    Token.EXPR_RESULT:    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    node;    	non-compiled	[CE]  orphaned  case	14	None	replace
6	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  null;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  case  Token.EXPR_RESULT:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  null;  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	case  Token.EXPR_RESULT:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  null;	  case    Token.EXPR_RESULT:    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    node;    	non-compiled	[CE]  orphaned  case	14	None	replace
7	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getLastChild());  return  node;  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getLastChild());  return  node;  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getLastChild());  return  node;	  case    Token.EXPR_RESULT:    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    node;    	non-compiled	[CE]  orphaned  case	14	None	replace
8	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  NodeUtil.getConditionExpression(node);  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  NodeUtil.getConditionExpression(node);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  NodeUtil.getConditionExpression(node);	  case    Token.EXPR_RESULT:    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    node;    	non-compiled	[CE]  orphaned  case	14	None	replace
9	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(node))  {  return  tryMinimizeNode(NodeUtil.getConditionExpression(node));  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  if(NodeUtil.isExpressionNode(node))  {  return  tryMinimizeNode(NodeUtil.getConditionExpression(node));  }  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	if(NodeUtil.isExpressionNode(node))  {  return  tryMinimizeNode(NodeUtil.getConditionExpression(node));  }	  return    tryMinimizeNode(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	37	None	replace
10	[BUG]  [BUGGY]  return  tryEXPR_RESULT(node.getLastChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryEXPR_RESULT(node.getLastChild());  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryEXPR_RESULT(node.getLastChild());	  return    tryEXPR_RESULT(node);    	non-compiled	[CE]  	11	None	replace
11	[BUG]  [BUGGY]  return  tryEXPR_RESULT(node.getFirstChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryEXPR_RESULT(node.getFirstChild());  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryEXPR_RESULT(node.getFirstChild());	  return    tryEXPR_RESULT(node);    	non-compiled	[CE]  	11	None	replace
12	[BUG]  [BUGGY]  return  tryEXPR_RESULT(node.getString());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryEXPR_RESULT(node.getString());  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryEXPR_RESULT(node.getString());	  return    tryEXPR_RESULT(node);    	non-compiled	[CE]  	11	None	replace
13	[BUG]  [BUGGY]  return  tryEXPR_RESULT(node.getNext());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryEXPR_RESULT(node.getNext());  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryEXPR_RESULT(node.getNext());	  return    tryEXPR_RESULT(node);    	non-compiled	[CE]  	11	None	replace
14	[BUG]  [BUGGY]  return  tryMinimizeCondition(NodeUtil.getEXPR_RESULT(node));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(NodeUtil.getEXPR_RESULT(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(NodeUtil.getEXPR_RESULT(node));	  return    tryMinimizeCondition(NodeUtil.getFunctionExpression(node));    	non-compiled	[CE]  	5	None	replace
15	[BUG]  [BUGGY]  return  tryMinimizeCondition(NodeUtil.getStatementExpression(node));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(NodeUtil.getStatementExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(NodeUtil.getStatementExpression(node));	  return    tryMinimizeCondition(NodeUtil.getFunctionExpression(node));    	non-compiled	[CE]  	5	None	replace
16	[BUG]  [BUGGY]  Node  node  =  NodeUtil.getConditionExpression(node);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  Node  node  =  NodeUtil.getConditionExpression(node);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	Node  node  =  NodeUtil.getConditionExpression(node);	  if(NodeUtil.getConditionExpression(node)    ==    null)    {    return    tryMinimizeNot(node);    }    	non-compiled	[CE]  	43	None	replace
17	[BUG]  [BUGGY]  tryMinimizeCondition(node.getFirstChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  tryMinimizeCondition(node.getFirstChild());  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	tryMinimizeCondition(node.getFirstChild());	  if(NodeUtil.getConditionExpression(node)    ==    null)    {    return    tryMinimizeNot(node);    }    	non-compiled	[CE]  	43	None	replace
18	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node));	  if(NodeUtil.getConditionExpression(node)    ==    null)    {    return    tryMinimizeNot(node);    }    	non-compiled	[CE]  	43	None	replace
19	[BUG]  [BUGGY]  return  tryMinimize(node.getLastChild(),  node);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimize(node.getLastChild(),  node);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimize(node.getLastChild(),  node);	  return    tryMinimize(node.getLastChild());    	non-compiled	[CE]  	23	None	replace
20	[BUG]  [BUGGY]  return  tryMinimizeNot(node.getLastChild());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeNot(node.getLastChild());  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeNot(node.getLastChild());	  return    tryMinimize(node.getLastChild());    	non-compiled	[CE]  	23	None	replace
21	[BUG]  [BUGGY]  return  tryMinimizeIf(node.getLastChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeIf(node.getLastChild());  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeIf(node.getLastChild());	  return    tryMinimize(node.getLastChild());    	non-compiled	[CE]  	23	None	replace
22	[BUG]  [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionReturn(node));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionReturn(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(NodeUtil.getConditionReturn(node));	  return    tryMinimizeCondition(NodeUtil.getConditionExpr(node));    	non-compiled	[CE]  	36	None	replace
23	[BUG]  [BUGGY]  return  tryMinimize(NodeUtil.getConditionExpr(node));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimize(NodeUtil.getConditionExpr(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimize(NodeUtil.getConditionExpr(node));	  return    tryMinimizeCondition(NodeUtil.getConditionExpr(node));    	non-compiled	[CE]  	36	None	replace
24	[BUG]  [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpr(node)+  1);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpr(node)+  1);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(NodeUtil.getConditionExpr(node)+  1);	  return    tryMinimizeCondition(NodeUtil.getConditionExpr(node));    	non-compiled	[CE]  	36	None	replace
25	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getEmptyChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getEmptyChild());  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getEmptyChild());	  return    tryMinimizeExpression(node.getEmptyChild());    	non-compiled	[CE]  	33	None	replace
26	[BUG]  [BUGGY]  return  tryMinimizeExpression(node.getExpression(),  NodeUtil.getConditionExpression(node));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeExpression(node.getExpression(),  NodeUtil.getConditionExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeExpression(node.getExpression(),  NodeUtil.getConditionExpression(node));	  return    tryMinimizeExpression(node.getExpression());    	non-compiled	[CE]  	32	None	replace
27	[BUG]  [BUGGY]  return  tryMinimizeExpression(node.getExpression(),  node);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeExpression(node.getExpression(),  node);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeExpression(node.getExpression(),  node);	  return    tryMinimizeExpression(node.getExpression());    	non-compiled	[CE]  	32	None	replace
28	[BUG]  [BUGGY]  return  tryMinimizeExpression(node.getExpression(),  false);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeExpression(node.getExpression(),  false);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeExpression(node.getExpression(),  false);	  return    tryMinimizeExpression(node.getExpression());    	non-compiled	[CE]  	32	None	replace
29	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getFirstChild(),  NodeUtil.getExpressionExpression(node));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getFirstChild(),  NodeUtil.getExpressionExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getFirstChild(),  NodeUtil.getExpressionExpression(node));	  return    tryMinimizeCondition(node.getFirstChild(),    NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	38	None	replace
30	[BUG]  [BUGGY]  return  tryMinimize(node.getFirstChild(),  NodeUtil.getConditionExpression(node));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimize(node.getFirstChild(),  NodeUtil.getConditionExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimize(node.getFirstChild(),  NodeUtil.getConditionExpression(node));	  return    tryMinimizeCondition(node.getFirstChild(),    NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	38	None	replace
31	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getFirstChild(),  NodeUtil.getFunctionExpression(node));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getFirstChild(),  NodeUtil.getFunctionExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getFirstChild(),  NodeUtil.getFunctionExpression(node));	  return    tryMinimizeCondition(node.getFirstChild(),    NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	38	None	replace
32	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getFirstChild(),  NodeUtil.getEXPR_RESULT(node));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getFirstChild(),  NodeUtil.getEXPR_RESULT(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getFirstChild(),  NodeUtil.getEXPR_RESULT(node));	  return    tryMinimizeCondition(node.getFirstChild(),    NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	38	None	replace
33	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getFirstChild(),  NodeUtil.getConditionExpression(node)+  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getFirstChild(),  NodeUtil.getConditionExpression(node)+  1);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getFirstChild(),  NodeUtil.getConditionExpression(node)+  1);	  return    tryMinimizeCondition(node.getFirstChild(),    NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	38	None	replace
34	[BUG]  [BUGGY]  return  tryMaximize(NodeUtil.getConditionExpression(node));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMaximize(NodeUtil.getConditionExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMaximize(NodeUtil.getConditionExpression(node));	  return    tryMaximizeCondition(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	41	None	replace
35	[BUG]  [BUGGY]  return  tryMaximizeCondition(NodeUtil.getExpressionExpression(node));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMaximizeCondition(NodeUtil.getExpressionExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMaximizeCondition(NodeUtil.getExpressionExpression(node));	  return    tryMaximizeCondition(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	41	None	replace
36	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getShortChild(),  node);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getShortChild(),  node);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getShortChild(),  node);	  return    tryMinimizeCondition(node.getShortChild());    	non-compiled	[CE]  	25	None	replace
37	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getShortChild(),  NodeUtil.getConditionExpression(node));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getShortChild(),  NodeUtil.getConditionExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getShortChild(),  NodeUtil.getConditionExpression(node));	  return    tryMinimizeCondition(node.getShortChild());    	non-compiled	[CE]  	25	None	replace
38	[BUG]  [BUGGY]  return  tryMinimize(NodeUtil.getReferenceExpression(node));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimize(NodeUtil.getReferenceExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimize(NodeUtil.getReferenceExpression(node));	  return    tryMinimizeCondition(NodeUtil.getReferenceExpression(node));    	non-compiled	[CE]  	4	None	replace
39	[BUG]  [BUGGY]  return  tryMinimizeCondition(NodeUtil.getReferenceExpression(node)+  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(NodeUtil.getReferenceExpression(node)+  1);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(NodeUtil.getReferenceExpression(node)+  1);	  return    tryMinimizeCondition(NodeUtil.getReferenceExpression(node));    	non-compiled	[CE]  	4	None	replace
40	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getExpressionExpression(node));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getExpressionExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getExpressionExpression(node));	  return    tryMinimizeCondition(node.getLastChild(),    NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	27	None	replace
41	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getFunctionExpression(node));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getFunctionExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getFunctionExpression(node));	  return    tryMinimizeCondition(node.getLastChild(),    NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	27	None	replace
42	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getEXPR_RESULT(node));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getEXPR_RESULT(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getEXPR_RESULT(node));	  return    tryMinimizeCondition(node.getLastChild(),    NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	27	None	replace
43	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getStatementExpression(node));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getStatementExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getStatementExpression(node));	  return    tryMinimizeCondition(node.getLastChild(),    NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	27	None	replace
44	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getReturnType(node));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getReturnType(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getReturnType(node));	  return    tryMinimizeCondition(node.getLastChild(),    NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	27	None	replace
45	[BUG]  [BUGGY]  return  tryMinimize(NodeUtil.getConditionExpression(node)/  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimize(NodeUtil.getConditionExpression(node)/  1);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimize(NodeUtil.getConditionExpression(node)/  1);	  return    tryMinimize(NodeUtil.getConditionExpression(node)+    1);    	non-compiled	[CE]  	9	None	replace
46	[BUG]  [BUGGY]  return  tryMinimize(NodeUtil.getConditionExpression(node)+  2);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimize(NodeUtil.getConditionExpression(node)+  2);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimize(NodeUtil.getConditionExpression(node)+  2);	  return    tryMinimize(NodeUtil.getConditionExpression(node)+    1);    	non-compiled	[CE]  	9	None	replace
47	[BUG]  [BUGGY]  return  tryMinimize(NodeUtil.getConditionExpression(node)+  0);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimize(NodeUtil.getConditionExpression(node)+  0);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimize(NodeUtil.getConditionExpression(node)+  0);	  return    tryMinimize(NodeUtil.getConditionExpression(node)+    1);    	non-compiled	[CE]  	9	None	replace
48	[BUG]  [BUGGY]  return  tryMinimize(NodeUtil.getConditionExpression(node)-  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimize(NodeUtil.getConditionExpression(node)-  1);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimize(NodeUtil.getConditionExpression(node)-  1);	  return    tryMinimize(NodeUtil.getConditionExpression(node)+    1);    	non-compiled	[CE]  	9	None	replace
49	[BUG]  [BUGGY]  if(NodeUtil.getConditionExpression(node)!=  null)  {  return  tryMinimizeCondition(node);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  if(NodeUtil.getConditionExpression(node)!=  null)  {  return  tryMinimizeCondition(node);  }  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	if(NodeUtil.getConditionExpression(node)!=  null)  {  return  tryMinimizeCondition(node);  }	  if(NodeUtil.getConditionExpression(node)!=    null)    {    return    tryMinimizeNot(node);    }    	non-compiled	[CE]  	42	None	replace
50	[BUG]  [BUGGY]  return  tryMinimizeExpression(node.getShortChild(),  node);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeExpression(node.getShortChild(),  node);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeExpression(node.getShortChild(),  node);	  return    tryMinimizeExpression(node.getShortChild());    	non-compiled	[CE]  	21	None	replace
51	[BUG]  [BUGGY]  return  tryMinimizeExpression(node.getShortChild(),  NodeUtil.getConditionExpression(node));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeExpression(node.getShortChild(),  NodeUtil.getConditionExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeExpression(node.getShortChild(),  NodeUtil.getConditionExpression(node));	  return    tryMinimizeExpression(node.getShortChild());    	non-compiled	[CE]  	21	None	replace
52	[BUG]  [BUGGY]  return  tryMinimizeExpression(node.getIntChild());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeExpression(node.getIntChild());  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeExpression(node.getIntChild());	  return    tryMinimizeExpression(node.getShortChild());    	non-compiled	[CE]  	21	None	replace
53	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getLastChild(),  true);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getLastChild(),  true);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getLastChild(),  true);	  return    tryMinimizeCondition(node.getLastChild(),    false);    	non-compiled	[CE]  	28	None	replace
54	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getFirstChild(),  false);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getFirstChild(),  false);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getFirstChild(),  false);	  return    tryMinimizeCondition(node.getLastChild(),    false);    	non-compiled	[CE]  	28	None	replace
55	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getLeftChild(),  false);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getLeftChild(),  false);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getLeftChild(),  false);	  return    tryMinimizeCondition(node.getLastChild(),    false);    	non-compiled	[CE]  	28	None	replace
56	[BUG]  [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node),  false);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node),  false);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(NodeUtil.getConditionExpression(node),  false);	  return    tryMinimizeCondition(node.getLastChild(),    false);    	non-compiled	[CE]  	28	None	replace
57	[BUG]  [BUGGY]  return  tryMinimize(node.getLastChild(),  true);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimize(node.getLastChild(),  true);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimize(node.getLastChild(),  true);	  return    tryMinimizeCondition(node.getLastChild(),    false);    	non-compiled	[CE]  	28	None	replace
58	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getType(),  node);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getType(),  node);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getType(),  node);	  return    tryMinimizeCondition(node.getType());    	non-compiled	[CE]  	26	None	replace
59	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getType(),  NodeUtil.getConditionExpression(node));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getType(),  NodeUtil.getConditionExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getType(),  NodeUtil.getConditionExpression(node));	  return    tryMinimizeCondition(node.getType());    	non-compiled	[CE]  	26	None	replace
60	[BUG]  [BUGGY]  return  tryMinimizeExpression(node.getType(),  NodeUtil.getConditionExpression(node));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeExpression(node.getType(),  NodeUtil.getConditionExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeExpression(node.getType(),  NodeUtil.getConditionExpression(node));	  return    tryMinimizeExpression(node.getType());    	non-compiled	[CE]  	19	None	replace
61	[BUG]  [BUGGY]  return  tryMinimizeExpression(node.getType(),  node);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeExpression(node.getType(),  node);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeExpression(node.getType(),  node);	  return    tryMinimizeExpression(node.getType());    	non-compiled	[CE]  	19	None	replace
62	[BUG]  [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node)+  2);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node)+  2);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(NodeUtil.getConditionExpression(node)+  2);	  return    tryMinimizeCondition(NodeUtil.getConditionExpression(node)+    1);    	non-compiled	[CE]  	2	None	replace
63	[BUG]  [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node)/  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node)/  1);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(NodeUtil.getConditionExpression(node)/  1);	  return    tryMinimizeCondition(NodeUtil.getConditionExpression(node)+    1);    	non-compiled	[CE]  	2	None	replace
64	[BUG]  [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node)+  0);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node)+  0);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(NodeUtil.getConditionExpression(node)+  0);	  return    tryMinimizeCondition(NodeUtil.getConditionExpression(node)+    1);    	non-compiled	[CE]  	2	None	replace
65	[BUG]  [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node)-  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node)-  1);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(NodeUtil.getConditionExpression(node)-  1);	  return    tryMinimizeCondition(NodeUtil.getConditionExpression(node)+    1);    	non-compiled	[CE]  	2	None	replace
66	[BUG]  [BUGGY]  if(NodeUtil.getConditionExpression(node)!=  null)  {  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  if(NodeUtil.getConditionExpression(node)!=  null)  {  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  }  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	if(NodeUtil.getConditionExpression(node)!=  null)  {  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  }	  return    tryMinimizeIf(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	6	None	replace
67	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(node))  {  return  tryMinimizeIf(NodeUtil.getConditionExpression(node));  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  if(NodeUtil.isExpressionNode(node))  {  return  tryMinimizeIf(NodeUtil.getConditionExpression(node));  }  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	if(NodeUtil.isExpressionNode(node))  {  return  tryMinimizeIf(NodeUtil.getConditionExpression(node));  }	  return    tryMinimizeIf(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	6	None	replace
68	[BUG]  [BUGGY]  return  tryMinimizeExpression(node.getLocalPart(),  node);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeExpression(node.getLocalPart(),  node);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeExpression(node.getLocalPart(),  node);	  return    tryMinimizeExpression(node.getLocalPart());    	non-compiled	[CE]  	22	None	replace
69	[BUG]  [BUGGY]  return  tryMinimizeExpression(node.getLocalPart(),  NodeUtil.getConditionExpression(node));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeExpression(node.getLocalPart(),  NodeUtil.getConditionExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeExpression(node.getLocalPart(),  NodeUtil.getConditionExpression(node));	  return    tryMinimizeExpression(node.getLocalPart());    	non-compiled	[CE]  	22	None	replace
70	[BUG]  [BUGGY]  return  tryMinimizeExpression(node.getLocalPart()  +  1);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeExpression(node.getLocalPart()  +  1);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeExpression(node.getLocalPart()  +  1);	  return    tryMinimizeExpression(node.getLocalPart());    	non-compiled	[CE]  	22	None	replace
71	[BUG]  [BUGGY]  return  tryPredicate(NodeUtil.getConditionExpression(node)+  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryPredicate(NodeUtil.getConditionExpression(node)+  1);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryPredicate(NodeUtil.getConditionExpression(node)+  1);	  return    tryPredicate(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	8	None	replace
72	[BUG]  [BUGGY]  if(node.getType()  ==  Token.EXPR_RESULT)  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  if(node.getType()  ==  Token.EXPR_RESULT)  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	if(node.getType()  ==  Token.EXPR_RESULT)  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }	  tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    node;    	non-compiled	[CE]  	15	None	replace
73	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  null;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  null;  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  null;	  tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    node;    	non-compiled	[CE]  	15	None	replace
74	[BUG]  [BUGGY]  if(node.getType()  ==  Token.EXPR_RESULT)  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  if(node.getType()  ==  Token.EXPR_RESULT)  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	if(node.getType()  ==  Token.EXPR_RESULT)  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    node;    	non-compiled	[CE]  	15	None	replace
75	[BUG]  [BUGGY]  if(node.getType()  ==  Token.EXPR_RESULT)  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  if(node.getType()  ==  Token.EXPR_RESULT)  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	if(node.getType()  ==  Token.EXPR_RESULT)  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }  else  {  throw  new  IllegalStateException( " ");  }	  tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    node;    	non-compiled	[CE]  	15	None	replace
76	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getExpression(),  node);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getExpression(),  node);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getExpression(),  node);	  return    tryMinimizeCondition(node.getExpression());    	non-compiled	[CE]  	35	None	replace
77	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getExpression(),  NodeUtil.getConditionExpression(node));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getExpression(),  NodeUtil.getConditionExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getExpression(),  NodeUtil.getConditionExpression(node));	  return    tryMinimizeCondition(node.getExpression());    	non-compiled	[CE]  	35	None	replace
78	[BUG]  [BUGGY]  return  tryMinimizeFor(NodeUtil.getExpressionExpression(node));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeFor(NodeUtil.getExpressionExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeFor(NodeUtil.getExpressionExpression(node));	  return    tryMinimizeFor(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	3	None	replace
79	[BUG]  [BUGGY]  return  tryMinimizeFor(NodeUtil.getConditionExpression(node)+  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeFor(NodeUtil.getConditionExpression(node)+  1);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeFor(NodeUtil.getConditionExpression(node)+  1);	  return    tryMinimizeFor(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	3	None	replace
80	[BUG]  [BUGGY]  return  tryMaximizeFor(NodeUtil.getConditionExpression(node));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMaximizeFor(NodeUtil.getConditionExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMaximizeFor(NodeUtil.getConditionExpression(node));	  return    tryMinimizeFor(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	3	None	replace
81	[BUG]  [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node),  node);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node),  node);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(NodeUtil.getConditionExpression(node),  node);	  return    tryMinimizeCondition(node.getFirstChild(),    node);    	non-compiled	[CE]  	12	None	replace
82	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  NodeTraversal.traverse(compiler,  node,  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	NodeTraversal.traverse(compiler,  node,  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;	  if(NodeUtil.isExpressionNode(node))    {    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    node;    }    	non-compiled	[CE]  	44	None	replace
83	[BUG]  [BUGGY]  ConditionExpression  node  =  NodeUtil.getConditionExpression(node);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  ConditionExpression  node  =  NodeUtil.getConditionExpression(node);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	ConditionExpression  node  =  NodeUtil.getConditionExpression(node);	  if(NodeUtil.isExpressionNode(node))    {    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    node;    }    	non-compiled	[CE]  	44	None	replace
84	[BUG]  [BUGGY]  return  tryMinimizeExpression(NodeUtil.getConditionExpression(node)+  1);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeExpression(NodeUtil.getConditionExpression(node)+  1);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeExpression(NodeUtil.getConditionExpression(node)+  1);	  return    tryMinimizeExpression(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	17	None	replace
85	[BUG]  [BUGGY]  return  tryMinimizeEscape(NodeUtil.getConditionExpression(node));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeEscape(NodeUtil.getConditionExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeEscape(NodeUtil.getConditionExpression(node));	  return    tryMinimizeExpression(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	17	None	replace
86	[BUG]  [BUGGY]  return  tryMinimizeExpression(NodeUtil.getReferenceExpression(node));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeExpression(NodeUtil.getReferenceExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeExpression(NodeUtil.getReferenceExpression(node));	  return    tryMinimizeExpression(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	17	None	replace
87	[BUG]  [BUGGY]  parent!=  null  &&  NodeUtil.isExpressionNode(node))  {  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  parent!=  null  &&  NodeUtil.isExpressionNode(node))  {  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  }  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	parent!=  null  &&  NodeUtil.isExpressionNode(node))  {  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  }	  if(NodeUtil.isExpressionNode(node))    {    return    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    }    	non-compiled	[CE]  not  a  statement	45	None	replace
88	[BUG]  [BUGGY]  parent.replaceChild(node,  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  parent.replaceChild(node,  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	parent.replaceChild(node,  tryMinimizeCondition(NodeUtil.getConditionExpression(node));	  if(NodeUtil.isExpressionNode(node))    {    return    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    }    	non-compiled	[CE]  	45	None	replace
89	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExpressionNode(node));  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  Preconditions.checkState(NodeUtil.isExpressionNode(node));  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	Preconditions.checkState(NodeUtil.isExpressionNode(node));  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));	  if(NodeUtil.isExpressionNode(node))    {    return    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    }    	non-compiled	[CE]  	45	None	replace
90	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExpressionNode(node));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  Preconditions.checkState(NodeUtil.isExpressionNode(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	Preconditions.checkState(NodeUtil.isExpressionNode(node));	  if(NodeUtil.isExpressionNode(node))    {    return    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    }    	non-compiled	[CE]  	45	None	replace
91	[BUG]  [BUGGY]  Predicates.checkState(NodeUtil.isExpressionNode(node));  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  Predicates.checkState(NodeUtil.isExpressionNode(node));  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	Predicates.checkState(NodeUtil.isExpressionNode(node));  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));	  if(NodeUtil.isExpressionNode(node))    {    return    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    }    	non-compiled	[CE]  	45	None	replace
92	[BUG]  [BUGGY]  return  tryMinimizeEmpty(node.getFirstChild());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeEmpty(node.getFirstChild());  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeEmpty(node.getFirstChild());	  return    tryMinimizeEmpty(node);    	non-compiled	[CE]  	40	None	replace
93	[BUG]  [BUGGY]  return  tryMinimizeExpression(node.getLastChild(),  NodeUtil.getConditionExpression(node));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeExpression(node.getLastChild(),  NodeUtil.getConditionExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeExpression(node.getLastChild(),  NodeUtil.getConditionExpression(node));	  return    tryMinimizeExpression(node.getLastChild());    	non-compiled	[CE]  	18	None	replace
94	[BUG]  [BUGGY]  return  tryMinimizeExpression(node.getLastChild(),  node);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeExpression(node.getLastChild(),  node);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeExpression(node.getLastChild(),  node);	  return    tryMinimizeExpression(node.getLastChild());    	non-compiled	[CE]  	18	None	replace
95	[BUG]  [BUGGY]  return  tryMaximizeExpression(node.getFirstChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMaximizeExpression(node.getFirstChild());  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMaximizeExpression(node.getFirstChild());	  return    tryMinimizeExpression(node.getLastChild());    	non-compiled	[CE]  	18	None	replace
96	[BUG]  [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node)/  2  -  1);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node)/  2  -  1);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(NodeUtil.getConditionExpression(node)/  2  -  1);	  return    tryMinimizeCondition(NodeUtil.getConditionExpression(node)/    2);    	non-compiled	[CE]  	39	None	replace
97	[BUG]  [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node)/  2  +  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node)/  2  +  1);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(NodeUtil.getConditionExpression(node)/  2  +  1);	  return    tryMinimizeCondition(NodeUtil.getConditionExpression(node)/    2);    	non-compiled	[CE]  	39	None	replace
98	[BUG]  [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node)/  3);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node)/  3);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(NodeUtil.getConditionExpression(node)/  3);	  return    tryMinimizeCondition(NodeUtil.getConditionExpression(node)/    2);    	non-compiled	[CE]  	39	None	replace
99	[BUG]  [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node)/  4);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node)/  4);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(NodeUtil.getConditionExpression(node)/  4);	  return    tryMinimizeCondition(NodeUtil.getConditionExpression(node)/    2);    	non-compiled	[CE]  	39	None	replace
100	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());	  case    Token.EXPR_RESULT:    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  orphaned  case	16	None	replace
101	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  tryMinimizeCondition(NodeUtil.getExpressionExpression(node));  [CE]  orphaned  case  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  case  Token.EXPR_RESULT:  tryMinimizeCondition(NodeUtil.getExpressionExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	case  Token.EXPR_RESULT:  tryMinimizeCondition(NodeUtil.getExpressionExpression(node));	  case    Token.EXPR_RESULT:    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  orphaned  case	16	None	replace
102	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  tryMinimizeCondition(NodeUtil.getReferenceExpression(node));  [CE]  orphaned  case  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  case  Token.EXPR_RESULT:  tryMinimizeCondition(NodeUtil.getReferenceExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	case  Token.EXPR_RESULT:  tryMinimizeCondition(NodeUtil.getReferenceExpression(node));	  case    Token.EXPR_RESULT:    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  orphaned  case	16	None	replace
103	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  tryMinimizeCondition(NodeUtil.getConditionExpression(node)+  1);  [CE]  orphaned  case  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  case  Token.EXPR_RESULT:  tryMinimizeCondition(NodeUtil.getConditionExpression(node)+  1);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	case  Token.EXPR_RESULT:  tryMinimizeCondition(NodeUtil.getConditionExpression(node)+  1);	  case    Token.EXPR_RESULT:    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  orphaned  case	16	None	replace
104	[BUG]  [BUGGY]  case  Node.EXPR_RESULT:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  [CE]  orphaned  case  [FE]                                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  case  Node.EXPR_RESULT:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	case  Node.EXPR_RESULT:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));	  case    Token.EXPR_RESULT:    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  orphaned  case	16	None	replace
105	[BUG]  [BUGGY]  return  tryMinimizeNot(node.getFirstChild());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeNot(node.getFirstChild());  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeNot(node.getFirstChild());	  return    tryMinimize(node.getFirstChild());    	non-compiled	[CE]  	24	None	replace
106	[BUG]  [BUGGY]  return  tryMinimizeIf(node.getFirstChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeIf(node.getFirstChild());  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeIf(node.getFirstChild());	  return    tryMinimize(node.getFirstChild());    	non-compiled	[CE]  	24	None	replace
107	[BUG]  [BUGGY]  return  tryCondition(node.getFirstChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryCondition(node.getFirstChild());  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryCondition(node.getFirstChild());	  return    tryMinimize(node.getFirstChild());    	non-compiled	[CE]  	24	None	replace
108	[BUG]  [BUGGY]  return  tryMinimizeCondition(NodeUtil.getExpressionExpression(node)+  1);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(NodeUtil.getExpressionExpression(node)+  1);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(NodeUtil.getExpressionExpression(node)+  1);	  return    tryMinimizeCondition(NodeUtil.getExpressionExpression(node));    	non-compiled	[CE]  	1	None	replace
109	[BUG]  [BUGGY]  return  tryMinimizeCondition(NodeUtil.getExprExpression(node));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(NodeUtil.getExprExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(NodeUtil.getExprExpression(node));	  return    tryMinimizeCondition(NodeUtil.getExpressionExpression(node));    	non-compiled	[CE]  	1	None	replace
110	[BUG]  [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getLastChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getLastChild());  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getLastChild());	  return    tryMinimizeCondition(NodeUtil.getConditionExpression(node).getFirstChild());    	non-compiled	[CE]  	46	None	replace
111	[BUG]  [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getOwnerChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getOwnerChild());  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getOwnerChild());	  return    tryMinimizeCondition(NodeUtil.getConditionExpression(node).getFirstChild());    	non-compiled	[CE]  	46	None	replace
112	[BUG]  [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node),  node.getFirstChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node),  node.getFirstChild());  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(NodeUtil.getConditionExpression(node),  node.getFirstChild());	  return    tryMinimizeCondition(NodeUtil.getConditionExpression(node).getFirstChild());    	non-compiled	[CE]  	46	None	replace
113	[BUG]  [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getLeastChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getLeastChild());  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getLeastChild());	  return    tryMinimizeCondition(NodeUtil.getConditionExpression(node).getFirstChild());    	non-compiled	[CE]  	46	None	replace
114	[BUG]  [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getNext());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getNext());  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getNext());	  return    tryMinimizeCondition(NodeUtil.getConditionExpression(node).getFirstChild());    	non-compiled	[CE]  	46	None	replace
115	[BUG]  [BUGGY]  return  tryMinimizeExpression(node.getType()  {  Token.EXPR_RESULT);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeExpression(node.getType()  {  Token.EXPR_RESULT);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeExpression(node.getType()  {  Token.EXPR_RESULT);	  return    tryMinimizeExpression(node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	29	None	replace
116	[BUG]  [BUGGY]  return  tryMinimizeExpression(node.getType()!=  Token.EXPR_RESULT);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeExpression(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeExpression(node.getType()!=  Token.EXPR_RESULT);	  return    tryMinimizeExpression(node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	29	None	replace
117	[BUG]  [BUGGY]  return  tryMinimizeExpression(node.getType()  >>  Token.EXPR_RESULT);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeExpression(node.getType()  >>  Token.EXPR_RESULT);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeExpression(node.getType()  >>  Token.EXPR_RESULT);	  return    tryMinimizeExpression(node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	29	None	replace
118	[BUG]  [BUGGY]  return  tryMinimizeExpression(node.getType()  }  );  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeExpression(node.getType()  }  );  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeExpression(node.getType()  }  );	  return    tryMinimizeExpression(node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	29	None	replace
119	[BUG]  [BUGGY]  return  tryMinimizeExpression(node.getType()  +  Token.EXPR_RESULT);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeExpression(node.getType()  +  Token.EXPR_RESULT);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeExpression(node.getType()  +  Token.EXPR_RESULT);	  return    tryMinimizeExpression(node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	29	None	replace
120	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getString());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getString());  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getString());	  return    tryMinimizeCondition(node.getEXPR_RESULT());    	non-compiled	[CE]  	31	None	replace
121	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getExpressionStatement(node));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getExpressionStatement(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getExpressionStatement(node));	  return    tryMinimizeCondition(node.getLastChild(),    node);    	non-compiled	[CE]  	13	None	replace
122	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getFirstChild()  +  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getFirstChild()  +  1);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getFirstChild()  +  1);	  return    tryMinimizeCondition(node.getLastChild()    +    1);    	non-compiled	[CE]  	30	None	replace
123	[BUG]  [BUGGY]  return  tryMaximizeCondition(node.getLastChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMaximizeCondition(node.getLastChild());  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMaximizeCondition(node.getLastChild());	  return    tryMinimizeCondition(node.getLastChild()    +    1);    	non-compiled	[CE]  	30	None	replace
124	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getLastChild()  /  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getLastChild()  /  1);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getLastChild()  /  1);	  return    tryMinimizeCondition(node.getLastChild()    +    1);    	non-compiled	[CE]  	30	None	replace
125	[BUG]  [BUGGY]  return  tryMinimizeExpression(node.getString(),  NodeUtil.getConditionExpression(node));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeExpression(node.getString(),  NodeUtil.getConditionExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeExpression(node.getString(),  NodeUtil.getConditionExpression(node));	  return    tryMinimizeExpression(node.getString());    	non-compiled	[CE]  	20	None	replace
126	[BUG]  [BUGGY]  return  tryMinimizeExpression(node.getString()  +  1);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeExpression(node.getString()  +  1);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeExpression(node.getString()  +  1);	  return    tryMinimizeExpression(node.getString());    	non-compiled	[CE]  	20	None	replace
127	[BUG]  [BUGGY]  return  tryMinimizeExpression(node.getString(),  node);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeExpression(node.getString(),  node);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeExpression(node.getString(),  node);	  return    tryMinimizeExpression(node.getString());    	non-compiled	[CE]  	20	None	replace
128	[BUG]  [BUGGY]  return  tryMinimizeExpression(node.getString(),  null);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeExpression(node.getString(),  null);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeExpression(node.getString(),  null);	  return    tryMinimizeExpression(node.getString());    	non-compiled	[CE]  	20	None	replace
129	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getType()  {  Token.EXPR_RESULT);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getType()  {  Token.EXPR_RESULT);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getType()  {  Token.EXPR_RESULT);	  return    tryMinimizeCondition(node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	34	None	replace
130	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getType()!=  Token.EXPR_RESULT);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getType()!=  Token.EXPR_RESULT);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getType()!=  Token.EXPR_RESULT);	  return    tryMinimizeCondition(node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	34	None	replace
131	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getType()  >>  Token.EXPR_RESULT);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getType()  >>  Token.EXPR_RESULT);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getType()  >>  Token.EXPR_RESULT);	  return    tryMinimizeCondition(node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	34	None	replace
132	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getType()  <  Token.EXPR_RESULT);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getType()  <  Token.EXPR_RESULT);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getType()  <  Token.EXPR_RESULT);	  return    tryMinimizeCondition(node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	34	None	replace
133	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getType()  >=  Token.EXPR_RESULT);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getType()  >=  Token.EXPR_RESULT);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getType()  >=  Token.EXPR_RESULT);	  return    tryMinimizeCondition(node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	34	None	replace
134	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getSecondChild(),  node);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getSecondChild(),  node);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getSecondChild(),  node);	  return    tryMinimizeCondition(node.getLastChild(),    node);    	non-compiled	[CE]  	13	None	replace
135	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getPreviousChild(),  node);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getPreviousChild(),  node);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getPreviousChild(),  node);	  return    tryMinimizeCondition(node.getLastChild(),    node);    	non-compiled	[CE]  	13	None	replace
136	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getLastChild());  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getLastChild());  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getLastChild());	  case    Token.EXPR_RESULT:    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  orphaned  case	16	None	replace
137	[BUG]  [BUGGY]  parent  ==  null  &&  NodeUtil.isExpressionNode(node))  {  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  parent  ==  null  &&  NodeUtil.isExpressionNode(node))  {  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  }  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	parent  ==  null  &&  NodeUtil.isExpressionNode(node))  {  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  }	  if(NodeUtil.isExpressionNode(node))    {    return    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    }    	non-compiled	[CE]  not  a  statement	45	None	replace
138	[BUG]  [BUGGY]  parent!=  null  &&  NodeUtil.isExpressionNode(node)||  NodeUtil.isExpressionNode(node))  {  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  parent!=  null  &&  NodeUtil.isExpressionNode(node)||  NodeUtil.isExpressionNode(node))  {  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  }  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	parent!=  null  &&  NodeUtil.isExpressionNode(node)||  NodeUtil.isExpressionNode(node))  {  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  }	  if(NodeUtil.isExpressionNode(node))    {    return    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    }    	non-compiled	[CE]  not  a  statement	45	None	replace
139	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.isExpressionNode(node)||  NodeUtil.isExpressionNode(node))  {  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  Preconditions.checkState(NodeUtil.isExpressionNode(node)||  NodeUtil.isExpressionNode(node))  {  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  }  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	Preconditions.checkState(NodeUtil.isExpressionNode(node)||  NodeUtil.isExpressionNode(node))  {  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  }	  if(NodeUtil.isExpressionNode(node))    {    return    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    }    	non-compiled	[CE]  	45	None	replace
140	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  this;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  this;  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  this;	  tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    node;    	non-compiled	[CE]  	15	None	replace
141	[BUG]  [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  parent;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  parent;  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  parent;	  tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    node;    	non-compiled	[CE]  	15	None	replace
142	[BUG]  [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionReference(node));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionReference(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(NodeUtil.getConditionReference(node));	  return    tryMinimizeCondition(NodeUtil.getConditionExpr(node));    	non-compiled	[CE]  	36	None	replace
143	[BUG]  [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionRelative(node));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionRelative(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(NodeUtil.getConditionRelative(node));	  return    tryMinimizeCondition(NodeUtil.getConditionExpr(node));    	non-compiled	[CE]  	36	None	replace
144	[BUG]  [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionEscaped(node));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionEscaped(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(NodeUtil.getConditionEscaped(node));	  return    tryMinimizeCondition(NodeUtil.getConditionExpr(node));    	non-compiled	[CE]  	36	None	replace
145	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getLastChild()  -  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getLastChild()  -  1);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getLastChild()  -  1);	  return    tryMinimizeCondition(node.getLastChild()    +    1);    	non-compiled	[CE]  	30	None	replace
146	[BUG]  [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node)+  3);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node)+  3);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(NodeUtil.getConditionExpression(node)+  3);	  return    tryMinimizeCondition(NodeUtil.getConditionExpression(node)+    1);    	non-compiled	[CE]  	2	None	replace
147	[BUG]  [BUGGY]  return  tryMinimizeEXPR_RESULT(node.getLastChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeEXPR_RESULT(node.getLastChild());  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeEXPR_RESULT(node.getLastChild());	  return    tryMinimizeExpression(node.getLastChild());    	non-compiled	[CE]  	18	None	replace
148	[BUG]  [BUGGY]  return  tryMinimize(node.getLastChild(),  NodeUtil.getConditionExpression(node));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimize(node.getLastChild(),  NodeUtil.getConditionExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimize(node.getLastChild(),  NodeUtil.getConditionExpression(node));	  return    tryMinimize(node.getLastChild());    	non-compiled	[CE]  	23	None	replace
149	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getEXPR_RESULT(),  node);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getEXPR_RESULT(),  node);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getEXPR_RESULT(),  node);	  return    tryMinimizeCondition(node.getEXPR_RESULT());    	non-compiled	[CE]  	31	None	replace
150	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getEXPR_RESULT()  +  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getEXPR_RESULT()  +  1);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getEXPR_RESULT()  +  1);	  return    tryMinimizeCondition(node.getEXPR_RESULT());    	non-compiled	[CE]  	31	None	replace
151	[BUG]  [BUGGY]  return  tryMinimizeNode(NodeUtil.getConditionExpression(node)+  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeNode(NodeUtil.getConditionExpression(node)+  1);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeNode(NodeUtil.getConditionExpression(node)+  1);	  return    tryMinimizeNode(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	37	None	replace
152	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getNext(),  NodeUtil.getConditionExpression(node));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getNext(),  NodeUtil.getConditionExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getNext(),  NodeUtil.getConditionExpression(node));	  return    tryMinimizeCondition(node.getFirstChild(),    NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	38	None	replace
153	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getEXPR_RESULT(),  false);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getEXPR_RESULT(),  false);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getEXPR_RESULT(),  false);	  return    tryMinimizeCondition(node.getLastChild(),    false);    	non-compiled	[CE]  	28	None	replace
154	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getSecondChild(),  false);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getSecondChild(),  false);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getSecondChild(),  false);	  return    tryMinimizeCondition(node.getLastChild(),    false);    	non-compiled	[CE]  	28	None	replace
155	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getPreviousChild(),  false);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getPreviousChild(),  false);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getPreviousChild(),  false);	  return    tryMinimizeCondition(node.getLastChild(),    false);    	non-compiled	[CE]  	28	None	replace
156	[BUG]  [BUGGY]  return  tryMinimizeEXPR_RESULT(NodeUtil.getConditionExpression(node));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeEXPR_RESULT(NodeUtil.getConditionExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeEXPR_RESULT(NodeUtil.getConditionExpression(node));	  return    tryMinimizeExpression(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	17	None	replace
157	[BUG]  [BUGGY]  return  tryMinimizeExpr(NodeUtil.getConditionExpression(node));  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeExpr(NodeUtil.getConditionExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeExpr(NodeUtil.getConditionExpression(node));	  return    tryMinimizeExpression(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	17	None	replace
158	[BUG]  [BUGGY]  tryMinimizeCondition(node);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  tryMinimizeCondition(node);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	tryMinimizeCondition(node);	  if(NodeUtil.getConditionExpression(node)!=    null)    {    return    tryMinimizeNot(node);    }    	non-compiled	[CE]  	42	None	replace
159	[BUG]  [BUGGY]  return  tryMinimizeIf(node);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeIf(node);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeIf(node);	  if(NodeUtil.getConditionExpression(node)!=    null)    {    return    tryMinimizeNot(node);    }    	non-compiled	[CE]  	42	None	replace
160	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getExpression()  +  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getExpression()  +  1);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getExpression()  +  1);	  return    tryMinimizeCondition(node.getExpression());    	non-compiled	[CE]  	35	None	replace
161	[BUG]  [BUGGY]  return  tryMaximizeCondition(NodeUtil.getConditionExpression(node)+  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMaximizeCondition(NodeUtil.getConditionExpression(node)+  1);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMaximizeCondition(NodeUtil.getConditionExpression(node)+  1);	  return    tryMaximizeCondition(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	41	None	replace
162	[BUG]  [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEmptyChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEmptyChild());  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEmptyChild());	  return    tryMinimizeCondition(NodeUtil.getConditionExpression(node).getFirstChild());    	non-compiled	[CE]  	46	None	replace
163	[BUG]  [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEXPR_RESULT());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEXPR_RESULT());  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getEXPR_RESULT());	  return    tryMinimizeCondition(NodeUtil.getConditionExpression(node).getFirstChild());    	non-compiled	[CE]  	46	None	replace
164	[BUG]  [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node).restrictByNotNullOrUndefined());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node).restrictByNotNullOrUndefined());  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(NodeUtil.getConditionExpression(node).restrictByNotNullOrUndefined());	  return    tryMinimizeCondition(NodeUtil.getConditionExpression(node).getFirstChild());    	non-compiled	[CE]  	46	None	replace
165	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getConditionExpression(node)+  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getConditionExpression(node)+  1);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getConditionExpression(node)+  1);	  return    tryMinimizeCondition(node.getLastChild(),    NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	27	None	replace
166	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getPreviousChild(),  NodeUtil.getConditionExpression(node));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getPreviousChild(),  NodeUtil.getConditionExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getPreviousChild(),  NodeUtil.getConditionExpression(node));	  return    tryMinimizeCondition(node.getLastChild(),    NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	27	None	replace
167	[BUG]  [BUGGY]  return  tryMinimize(ConditionUtil.getExpressionExpression(node));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimize(ConditionUtil.getExpressionExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimize(ConditionUtil.getExpressionExpression(node));	  return    tryMinimize(NodeUtil.getExpressionExpression(node));    	non-compiled	[CE]  	7	None	replace
168	[BUG]  [BUGGY]  return  tryMinimizeNode(NodeUtil.getExpressionExpression(node));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeNode(NodeUtil.getExpressionExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeNode(NodeUtil.getExpressionExpression(node));	  return    tryMinimize(NodeUtil.getExpressionExpression(node));    	non-compiled	[CE]  	7	None	replace
169	[BUG]  [BUGGY]  return  tryMinimizeFor(NodeUtil.getReferenceExpression(node));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeFor(NodeUtil.getReferenceExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeFor(NodeUtil.getReferenceExpression(node));	  return    tryMinimizeFor(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	3	None	replace
170	[BUG]  [BUGGY]  return  tryMinimizeAnd(NodeUtil.getConditionExpression(node));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeAnd(NodeUtil.getConditionExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeAnd(NodeUtil.getConditionExpression(node));	  return    tryMinimizeFor(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	3	None	replace
171	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  null;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  null;  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  null;	  case    Token.EXPR_RESULT:    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    node;    	non-compiled	[CE]  orphaned  case	14	None	replace
172	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getExpression());  return  node;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getExpression());  return  node;  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getExpression());  return  node;	  case    Token.EXPR_RESULT:    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    node;    	non-compiled	[CE]  orphaned  case	14	None	replace
173	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(node)||  NodeUtil.getConditionExpression(node)!=  null)  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  if(NodeUtil.isExpressionNode(node)||  NodeUtil.getConditionExpression(node)!=  null)  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	if(NodeUtil.isExpressionNode(node)||  NodeUtil.getConditionExpression(node)!=  null)  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }	  if(NodeUtil.isExpressionNode(node))    {    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    node;    }    	non-compiled	[CE]  	44	None	replace
174	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(node)||  NodeUtil.hasConditionExpression(node))  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  if(NodeUtil.isExpressionNode(node)||  NodeUtil.hasConditionExpression(node))  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	if(NodeUtil.isExpressionNode(node)||  NodeUtil.hasConditionExpression(node))  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }	  if(NodeUtil.isExpressionNode(node))    {    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    node;    }    	non-compiled	[CE]  	44	None	replace
175	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getType()  [Delete]  Token.EXPR_RESULT);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getType()  [Delete]  Token.EXPR_RESULT);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getType()  [Delete]  Token.EXPR_RESULT);	  return    tryMinimizeCondition(node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	34	None	replace
176	[BUG]  [BUGGY]  return  tryMinimizeExpression(node.getEmptyChild(),  node);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeExpression(node.getEmptyChild(),  node);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeExpression(node.getEmptyChild(),  node);	  return    tryMinimizeExpression(node.getEmptyChild());    	non-compiled	[CE]  	33	None	replace
177	[BUG]  [BUGGY]  return  tryMinimize(node.getEmptyChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimize(node.getEmptyChild());  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimize(node.getEmptyChild());	  return    tryMinimizeExpression(node.getEmptyChild());    	non-compiled	[CE]  	33	None	replace
178	[BUG]  [BUGGY]  return  tryMinimizeEXPR_RESULT(node);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeEXPR_RESULT(node);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeEXPR_RESULT(node);	  return    tryMinimizeCondition(node);    	non-compiled	[CE]  	10	None	replace
179	[BUG]  [BUGGY]  return  tryMinimizeExpression(node.getEXPR_RESULT());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeExpression(node.getEXPR_RESULT());  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeExpression(node.getEXPR_RESULT());	  return    tryMinimizeExpression(node.getShortChild());    	non-compiled	[CE]  	21	None	replace
180	[BUG]  [BUGGY]  return  tryMinimizeExpression(node.getExpressionShortChild());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeExpression(node.getExpressionShortChild());  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeExpression(node.getExpressionShortChild());	  return    tryMinimizeExpression(node.getShortChild());    	non-compiled	[CE]  	21	None	replace
181	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.getConditionExpression(node)  ==  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  Preconditions.checkState(NodeUtil.getConditionExpression(node)  ==  null);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	Preconditions.checkState(NodeUtil.getConditionExpression(node)  ==  null);	  if(NodeUtil.getConditionExpression(node)    ==    null)    {    return    tryMinimizeNot(node);    }    	non-compiled	[CE]  	43	None	replace
182	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.getConditionExpression(node)!=  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  Preconditions.checkState(NodeUtil.getConditionExpression(node)!=  null);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	Preconditions.checkState(NodeUtil.getConditionExpression(node)!=  null);	  if(NodeUtil.getConditionExpression(node)    ==    null)    {    return    tryMinimizeNot(node);    }    	non-compiled	[CE]  	43	None	replace
183	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getLocalPart());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getLocalPart());  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getLocalPart());	  return    tryMinimizeExpression(node.getLocalPart());    	non-compiled	[CE]  	22	None	replace
184	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(node))  {  return  tryMinimizeCondition(NodeUtil.getFunctionExpression(node));  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  if(NodeUtil.isExpressionNode(node))  {  return  tryMinimizeCondition(NodeUtil.getFunctionExpression(node));  }  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	if(NodeUtil.isExpressionNode(node))  {  return  tryMinimizeCondition(NodeUtil.getFunctionExpression(node));  }	  return    tryMinimizeCondition(NodeUtil.getFunctionExpression(node));    	non-compiled	[CE]  	5	None	replace
185	[BUG]  [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node).removeFirstChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node).removeFirstChild());  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(NodeUtil.getConditionExpression(node).removeFirstChild());	  return    tryMinimizeCondition(NodeUtil.getConditionExpression(node).getFirstChild());    	non-compiled	[CE]  	46	None	replace
186	[BUG]  [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getSimpleName());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getSimpleName());  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(NodeUtil.getConditionExpression(node).getSimpleName());	  return    tryMinimizeCondition(NodeUtil.getConditionExpression(node).getFirstChild());    	non-compiled	[CE]  	46	None	replace
187	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getLastChild(),  parent);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getLastChild(),  parent);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getLastChild(),  parent);	  return    tryMinimizeCondition(node.getLastChild(),    node);    	non-compiled	[CE]  	13	None	replace
188	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  tryMinimizeCondition(NodeUtil.getReturnExpression(node));  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  case  Token.EXPR_RESULT:  tryMinimizeCondition(NodeUtil.getReturnExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	case  Token.EXPR_RESULT:  tryMinimizeCondition(NodeUtil.getReturnExpression(node));	  case    Token.EXPR_RESULT:    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  orphaned  case	16	None	replace
189	[BUG]  [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node)/  2,  node);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node)/  2,  node);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(NodeUtil.getConditionExpression(node)/  2,  node);	  return    tryMinimizeCondition(NodeUtil.getConditionExpression(node)/    2);    	non-compiled	[CE]  	39	None	replace
190	[BUG]  [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node)/  2  *  node);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node)/  2  *  node);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(NodeUtil.getConditionExpression(node)/  2  *  node);	  return    tryMinimizeCondition(NodeUtil.getConditionExpression(node)/    2);    	non-compiled	[CE]  	39	None	replace
191	[BUG]  [BUGGY]  return  tryMinimizeExpression(node.getLastChild()  +  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeExpression(node.getLastChild()  +  1);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeExpression(node.getLastChild()  +  1);	  return    tryMinimizeExpression(node.getLastChild());    	non-compiled	[CE]  	18	None	replace
192	[BUG]  [BUGGY]  return  tryMinimizeExpr(node.getLastChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeExpr(node.getLastChild());  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeExpr(node.getLastChild());	  return    tryMinimizeExpression(node.getLastChild());    	non-compiled	[CE]  	18	None	replace
193	[BUG]  [BUGGY]  return  tryMinimizeCondition(NodeUtil.getEmptyExpression(node));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(NodeUtil.getEmptyExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(NodeUtil.getEmptyExpression(node));	  return    tryMinimizeCondition(NodeUtil.getExpressionExpression(node));    	non-compiled	[CE]  	1	None	replace
194	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getFirstChild(),  NodeUtil.getReturnExpression(node));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getFirstChild(),  NodeUtil.getReturnExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getFirstChild(),  NodeUtil.getReturnExpression(node));	  return    tryMinimizeCondition(node.getFirstChild(),    NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	38	None	replace
195	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getFirstChild(),  NodeUtil.getReferenceExpression(node));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getFirstChild(),  NodeUtil.getReferenceExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getFirstChild(),  NodeUtil.getReferenceExpression(node));	  return    tryMinimizeCondition(node.getFirstChild(),    NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	38	None	replace
196	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  this;  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  case  Token.EXPR_RESULT:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  this;  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	case  Token.EXPR_RESULT:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  this;	  case    Token.EXPR_RESULT:    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    node;    	non-compiled	[CE]  orphaned  case	14	None	replace
197	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  parent;  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  case  Token.EXPR_RESULT:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  parent;  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	case  Token.EXPR_RESULT:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  parent;	  case    Token.EXPR_RESULT:    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    node;    	non-compiled	[CE]  orphaned  case	14	None	replace
198	[BUG]  [BUGGY]  case  Token.EXPR_RESULT:  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  [CE]  orphaned  case  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  case  Token.EXPR_RESULT:  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	case  Token.EXPR_RESULT:  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));	  case    Token.EXPR_RESULT:    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    node;    	non-compiled	[CE]  orphaned  case	14	None	replace
199	[BUG]  [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpress(node));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(NodeUtil.getConditionExpress(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(NodeUtil.getConditionExpress(node));	  return    tryMinimizeCondition(NodeUtil.getConditionExpr(node));    	non-compiled	[CE]  	36	None	replace
200	[BUG]  [BUGGY]  if(node!=  null)  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  if(node!=  null)  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	if(node!=  null)  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }	  tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    node;    	non-compiled	[CE]  	15	None	replace
201	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.isExpressionNode(node)  {  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  }  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  parent  ==  node  ||  NodeUtil.isExpressionNode(node)  {  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  }  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	parent  ==  node  ||  NodeUtil.isExpressionNode(node)  {  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  }	  if(NodeUtil.isExpressionNode(node))    {    return    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    }    	non-compiled	[CE]  not  a  statement	45	None	replace
202	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.isExpressionNode(node))  {  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  }  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  parent  ==  node  ||  NodeUtil.isExpressionNode(node))  {  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  }  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	parent  ==  node  ||  NodeUtil.isExpressionNode(node))  {  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  }	  if(NodeUtil.isExpressionNode(node))    {    return    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    }    	non-compiled	[CE]  not  a  statement	45	None	replace
203	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getExprExpression(node));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getExprExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getExprExpression(node));	  return    tryMinimizeCondition(node.getLastChild(),    NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	27	None	replace
204	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getReturnExpression(node));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getReturnExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getLastChild(),  NodeUtil.getReturnExpression(node));	  return    tryMinimizeCondition(node.getLastChild(),    NodeUtil.getConditionExpression(node));    	non-compiled	[CE]  	27	None	replace
205	[BUG]  [BUGGY]  return  tryMinimizeIf(NodeUtil.getConditionExpression(node)+  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeIf(NodeUtil.getConditionExpression(node)+  1);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeIf(NodeUtil.getConditionExpression(node)+  1);	  return    tryMinimize(NodeUtil.getConditionExpression(node)+    1);    	non-compiled	[CE]  	9	None	replace
206	[BUG]  [BUGGY]  if(NodeUtil.getConditionExpression(node)!=  null  &&  NodeUtil.isExpressionNode(node))  {  return  tryMinimizeCondition(node);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  if(NodeUtil.getConditionExpression(node)!=  null  &&  NodeUtil.isExpressionNode(node))  {  return  tryMinimizeCondition(node);  }  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	if(NodeUtil.getConditionExpression(node)!=  null  &&  NodeUtil.isExpressionNode(node))  {  return  tryMinimizeCondition(node);  }	  if(NodeUtil.getConditionExpression(node)!=    null)    {    return    tryMinimizeNot(node);    }    	non-compiled	[CE]  	42	None	replace
207	[BUG]  [BUGGY]  parent.replaceChild(node,  tryMinimizeCondition(node));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  parent.replaceChild(node,  tryMinimizeCondition(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	parent.replaceChild(node,  tryMinimizeCondition(node));	  if(NodeUtil.getConditionExpression(node)!=    null)    {    return    tryMinimizeNot(node);    }    	non-compiled	[CE]  	42	None	replace
208	[BUG]  [BUGGY]  if(NodeUtil.getConditionExpression(node)  ==  null)  {  return  tryMinimizeCondition(node);  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  if(NodeUtil.getConditionExpression(node)  ==  null)  {  return  tryMinimizeCondition(node);  }  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	if(NodeUtil.getConditionExpression(node)  ==  null)  {  return  tryMinimizeCondition(node);  }	  if(NodeUtil.getConditionExpression(node)!=    null)    {    return    tryMinimizeNot(node);    }    	non-compiled	[CE]  	42	None	replace
209	[BUG]  [BUGGY]  if(NodeUtil.getConditionExpression(node)!=  null  &&  node.getFirstChild().getType()  ==  Token.EXPR_RESULT)  {  return  tryMinimizeCondition(node);  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  if(NodeUtil.getConditionExpression(node)!=  null  &&  node.getFirstChild().getType()  ==  Token.EXPR_RESULT)  {  return  tryMinimizeCondition(node);  }  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	if(NodeUtil.getConditionExpression(node)!=  null  &&  node.getFirstChild().getType()  ==  Token.EXPR_RESULT)  {  return  tryMinimizeCondition(node);  }	  if(NodeUtil.getConditionExpression(node)!=    null)    {    return    tryMinimizeNot(node);    }    	non-compiled	[CE]  	42	None	replace
210	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.getConditionExpression(node));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.getConditionExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.getConditionExpression(node));	  return    tryMinimizeCondition(node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	34	None	replace
211	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getType()  ==  Token.EXPR_RESULT)&&  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getType()  ==  Token.EXPR_RESULT)&&  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getType()  ==  Token.EXPR_RESULT)&&  tryMinimizeCondition(NodeUtil.getConditionExpression(node));	  return    tryMinimizeCondition(node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	34	None	replace
212	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getType()  ==  Token.EXPR_RESULT,  true);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getType()  ==  Token.EXPR_RESULT,  true);  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getType()  ==  Token.EXPR_RESULT,  true);	  return    tryMinimizeCondition(node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	34	None	replace
213	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(node)&&  NodeUtil.hasConditionExpression(node))  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  if(NodeUtil.isExpressionNode(node)&&  NodeUtil.hasConditionExpression(node))  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	if(NodeUtil.isExpressionNode(node)&&  NodeUtil.hasConditionExpression(node))  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }	  if(NodeUtil.isExpressionNode(node))    {    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    node;    }    	non-compiled	[CE]  	44	None	replace
214	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(node)&&  NodeUtil.getConditionExpression(node)!=  null)  {  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  if(NodeUtil.isExpressionNode(node)&&  NodeUtil.getConditionExpression(node)!=  null)  {  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	if(NodeUtil.isExpressionNode(node)&&  NodeUtil.getConditionExpression(node)!=  null)  {  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }	  if(NodeUtil.isExpressionNode(node))    {    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    node;    }    	non-compiled	[CE]  	44	None	replace
215	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(node)&&  NodeUtil.mayHaveSideEffects(node))  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  if(NodeUtil.isExpressionNode(node)&&  NodeUtil.mayHaveSideEffects(node))  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	if(NodeUtil.isExpressionNode(node)&&  NodeUtil.mayHaveSideEffects(node))  {  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }	  if(NodeUtil.isExpressionNode(node))    {    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    node;    }    	non-compiled	[CE]  	44	None	replace
216	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(node)&&  NodeUtil.getConditionExpression(node)  ==  null)  {  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  if(NodeUtil.isExpressionNode(node)&&  NodeUtil.getConditionExpression(node)  ==  null)  {  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	if(NodeUtil.isExpressionNode(node)&&  NodeUtil.getConditionExpression(node)  ==  null)  {  return  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  }	  if(NodeUtil.isExpressionNode(node))    {    tryMinimizeCondition(NodeUtil.getConditionExpression(node));    return    node;    }    	non-compiled	[CE]  	44	None	replace
217	[BUG]  [BUGGY]  return  attemptMinimizeCondition(node.getLastChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  attemptMinimizeCondition(node.getLastChild());  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  attemptMinimizeCondition(node.getLastChild());	  return    tryMinimizeCondition(node.getLastChild()    +    1);    	non-compiled	[CE]  	30	None	replace
218	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getLestChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getLestChild());  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeCondition(node.getLestChild());	  return    tryMinimizeCondition(node.getLastChild()    +    1);    	non-compiled	[CE]  	30	None	replace
219	[BUG]  [BUGGY]  return  tryMinimizeExpression(node.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.getConditionExpression(node));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeExpression(node.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.getConditionExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeExpression(node.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.getConditionExpression(node));	  return    tryMinimizeExpression(node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	29	None	replace
220	[BUG]  [BUGGY]  return  tryMinimizeExpression(node.getType()  ==  Token.EXPR_RESULT)&&  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeExpression(node.getType()  ==  Token.EXPR_RESULT)&&  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	return  tryMinimizeExpression(node.getType()  ==  Token.EXPR_RESULT)&&  tryMinimizeCondition(NodeUtil.getConditionExpression(node));	  return    tryMinimizeExpression(node.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	29	None	replace
221	[BUG]  [BUGGY]  parent.replaceChild(node,  NodeUtil.getConditionExpression(node));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeIf(node);  case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  parent.replaceChild(node,  NodeUtil.getConditionExpression(node));  [BUGGY]        case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  case  Token.DO:  tryMinimizeCondition(NodeUtil.getConditionExpression(node));  return  node;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.22941573387056174	73	73	1	replace	parent.replaceChild(node,  NodeUtil.getConditionExpression(node));	  if(NodeUtil.getConditionExpression(node)    ==    null)    {    return    tryMinimizeNot(node);    }    	non-compiled	[CE]  	43	None	replace
