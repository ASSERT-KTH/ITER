bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  tryFallThrough(node.getLastChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFallThrough(node.getLastChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFallThrough(node.getLastChild());	  return    tryFallThrough(node);    	non-compiled	[CE]  	32	None	replace
2	[BUG]  [BUGGY]  return  tryField(node.getLastChild(),  node);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryField(node.getLastChild(),  node);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryField(node.getLastChild(),  node);	  return    tryField(node.getLastChild());    	non-compiled	[CE]  	4	None	replace
3	[BUG]  [BUGGY]  return  tryFunction(node.getLastChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFunction(node.getLastChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFunction(node.getLastChild());	  return    tryField(node.getLastChild());    	non-compiled	[CE]  	4	None	replace
4	[BUG]  [BUGGY]  return  tryReduceCondition(node.getLastChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryReduceCondition(node.getLastChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryReduceCondition(node.getLastChild());	  return    tryField(node.getLastChild());    	non-compiled	[CE]  	4	None	replace
5	[BUG]  [BUGGY]  return  tryNot(node.getLastChild());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryNot(node.getLastChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryNot(node.getLastChild());	  return    tryField(node.getLastChild());    	non-compiled	[CE]  	4	None	replace
6	[BUG]  [BUGGY]  return  tryReduceField(node.getFirstChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryReduceField(node.getFirstChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryReduceField(node.getFirstChild());	  return    tryReduceField(node);    	non-compiled	[CE]  	19	None	replace
7	[BUG]  [BUGGY]  return  tryReduceField(node.getLastChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryReduceField(node.getLastChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryReduceField(node.getLastChild());	  return    tryReduceField(node);    	non-compiled	[CE]  	19	None	replace
8	[BUG]  [BUGGY]  return  tryReduceCondition(node);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryReduceCondition(node);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryReduceCondition(node);	  return    tryReduceField(node);    	non-compiled	[CE]  	19	None	replace
9	[BUG]  [BUGGY]  return  tryFunction(node.getFirstChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFunction(node.getFirstChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFunction(node.getFirstChild());	  return    tryFunction(node);    	non-compiled	[CE]  	10	None	replace
10	[BUG]  [BUGGY]  return  tryFunction(node.getType());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFunction(node.getType());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFunction(node.getType());	  return    tryFunction(node);    	non-compiled	[CE]  	10	None	replace
11	[BUG]  [BUGGY]  return  tryNot(node.getFirstChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryNot(node.getFirstChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryNot(node.getFirstChild());	  return    tryIf(node.getFirstChild());    	non-compiled	[CE]  	37	None	replace
12	[BUG]  [BUGGY]  return  tryInvalidCondition(node.getFirstChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryInvalidCondition(node.getFirstChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryInvalidCondition(node.getFirstChild());	  return    tryInvalidCondition(node);    	non-compiled	[CE]  	24	None	replace
13	[BUG]  [BUGGY]  return  tryInvalidCondition(node.getLastChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryInvalidCondition(node.getLastChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryInvalidCondition(node.getLastChild());	  return    tryInvalidCondition(node);    	non-compiled	[CE]  	24	None	replace
14	[BUG]  [BUGGY]  return  tryMinimizeNot(node.getLastChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeNot(node.getLastChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryMinimizeNot(node.getLastChild());	  return    tryMinimizeIF(node.getLastChild());    	non-compiled	[CE]  	16	None	replace
15	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getLastChild(),  node);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getLastChild(),  node);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryMinimizeCondition(node.getLastChild(),  node);	  return    tryMinimizeCondition(node.getFirstChild(),    node);    	non-compiled	[CE]  	38	None	replace
16	[BUG]  [BUGGY]  return  tryReduceFunction(node.getFirstChild(),  node);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryReduceFunction(node.getFirstChild(),  node);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryReduceFunction(node.getFirstChild(),  node);	  return    tryMinimizeCondition(node.getFirstChild(),    node);    	non-compiled	[CE]  	38	None	replace
17	[BUG]  [BUGGY]  return  tryMinimizeFunction(node.getFirstChild(),  node);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeFunction(node.getFirstChild(),  node);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryMinimizeFunction(node.getFirstChild(),  node);	  return    tryMinimizeCondition(node.getFirstChild(),    node);    	non-compiled	[CE]  	38	None	replace
18	[BUG]  [BUGGY]  return  tryMinimize(node.getFirstChild(),  node);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimize(node.getFirstChild(),  node);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryMinimize(node.getFirstChild(),  node);	  return    tryMinimizeCondition(node.getFirstChild(),    node);    	non-compiled	[CE]  	38	None	replace
19	[BUG]  [BUGGY]  return  tryMinimizeFor(node.getFirstChild(),  node);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeFor(node.getFirstChild(),  node);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryMinimizeFor(node.getFirstChild(),  node);	  return    tryMinimizeCondition(node.getFirstChild(),    node);    	non-compiled	[CE]  	38	None	replace
20	[BUG]  [BUGGY]  return  tryMinimize(node.getLastChild(),  node);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimize(node.getLastChild(),  node);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryMinimize(node.getLastChild(),  node);	  return    tryMinimizeCondition(node.getFirstChild(),    node);    	non-compiled	[CE]  	38	None	replace
21	[BUG]  [BUGGY]  return  tryFunctionCondition(node.getFirstChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFunctionCondition(node.getFirstChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFunctionCondition(node.getFirstChild());	  return    tryFunctionCondition(node);    	non-compiled	[CE]  	8	None	replace
22	[BUG]  [BUGGY]  return  tryFunctionCondition(node.getLastChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFunctionCondition(node.getLastChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFunctionCondition(node.getLastChild());	  return    tryFunctionCondition(node);    	non-compiled	[CE]  	8	None	replace
23	[BUG]  [BUGGY]  return  tryFieldCondition(node);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFieldCondition(node);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFieldCondition(node);	  return    tryFunctionCondition(node);    	non-compiled	[CE]  	8	None	replace
24	[BUG]  [BUGGY]  return  tryFunctionCondition(node.getType());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFunctionCondition(node.getType());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFunctionCondition(node.getType());	  return    tryFunctionCondition(node);    	non-compiled	[CE]  	8	None	replace
25	[BUG]  [BUGGY]  return  tryReduceFor(node.getLastChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryReduceFor(node.getLastChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryReduceFor(node.getLastChild());	  return    tryMinimizeFor(node.getLastChild());    	non-compiled	[CE]  	26	None	replace
26	[BUG]  [BUGGY]  return  tryMinimizeFor(node.getLastChild(),  node);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeFor(node.getLastChild(),  node);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryMinimizeFor(node.getLastChild(),  node);	  return    tryMinimizeFor(node.getLastChild());    	non-compiled	[CE]  	26	None	replace
27	[BUG]  [BUGGY]  return  tryFieldReturn(node.getFirstChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFieldReturn(node.getFirstChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFieldReturn(node.getFirstChild());	  return    tryFieldReturn(node);    	non-compiled	[CE]  	6	None	replace
28	[BUG]  [BUGGY]  return  tryFieldReturn(node.getLastChild());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFieldReturn(node.getLastChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFieldReturn(node.getLastChild());	  return    tryFieldReturn(node);    	non-compiled	[CE]  	6	None	replace
29	[BUG]  [BUGGY]  return  tryFieldInstantiation(node);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFieldInstantiation(node);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFieldInstantiation(node);	  return    tryFieldReturn(node);    	non-compiled	[CE]  	6	None	replace
30	[BUG]  [BUGGY]  return  tryFieldInsertion(node);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFieldInsertion(node);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFieldInsertion(node);	  return    tryFieldReturn(node);    	non-compiled	[CE]  	6	None	replace
31	[BUG]  [BUGGY]  return  tryFinalReturn(node);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFinalReturn(node);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFinalReturn(node);	  return    tryFieldReturn(node);    	non-compiled	[CE]  	6	None	replace
32	[BUG]  [BUGGY]  return  tryReduceFunction(node.getLastChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryReduceFunction(node.getLastChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryReduceFunction(node.getLastChild());	  return    tryReduceFunction(node);    	non-compiled	[CE]  	2	None	replace
33	[BUG]  [BUGGY]  return  tryFieldFor(node.getFirstChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFieldFor(node.getFirstChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFieldFor(node.getFirstChild());	  return    tryFieldFor(node);    	non-compiled	[CE]  	25	None	replace
34	[BUG]  [BUGGY]  return  tryFieldFor(node.getLastChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFieldFor(node.getLastChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFieldFor(node.getLastChild());	  return    tryFieldFor(node);    	non-compiled	[CE]  	25	None	replace
35	[BUG]  [BUGGY]  return  tryFieldFor(node.getType());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFieldFor(node.getType());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFieldFor(node.getType());	  return    tryFieldFor(node);    	non-compiled	[CE]  	25	None	replace
36	[BUG]  [BUGGY]  return  tryFieldFor(node.getChildCount());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFieldFor(node.getChildCount());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFieldFor(node.getChildCount());	  return    tryFieldFor(node);    	non-compiled	[CE]  	25	None	replace
37	[BUG]  [BUGGY]  return  tryFieldFor(node.getNext());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFieldFor(node.getNext());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFieldFor(node.getNext());	  return    tryFieldFor(node);    	non-compiled	[CE]  	25	None	replace
38	[BUG]  [BUGGY]  case  Token.IF:  tryMinimizeCondition(node.getLastChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  case  Token.IF:  tryMinimizeCondition(node.getLastChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	case  Token.IF:  tryMinimizeCondition(node.getLastChild());	  case    Token.IF:    tryMinimizeCondition(node.getFirstChild());    	non-compiled	[CE]  	11	None	replace
39	[BUG]  [BUGGY]  case  Token.IF:  tryMinimizeNot(node.getFirstChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  case  Token.IF:  tryMinimizeNot(node.getFirstChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	case  Token.IF:  tryMinimizeNot(node.getFirstChild());	  case    Token.IF:    tryMinimizeCondition(node.getFirstChild());    	non-compiled	[CE]  	11	None	replace
40	[BUG]  [BUGGY]  case  Token.IF:  tryMinimizeCondition(node.getFirstChild(),  node);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  case  Token.IF:  tryMinimizeCondition(node.getFirstChild(),  node);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	case  Token.IF:  tryMinimizeCondition(node.getFirstChild(),  node);	  case    Token.IF:    tryMinimizeCondition(node.getFirstChild());    	non-compiled	[CE]  	11	None	replace
41	[BUG]  [BUGGY]  return  tryField(node.getFirstChild(),  node);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryField(node.getFirstChild(),  node);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryField(node.getFirstChild(),  node);	  return    tryField(node.getFirstChild());    	non-compiled	[CE]  	3	None	replace
42	[BUG]  [BUGGY]  return  tryReduceCondition(node.getFirstChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryReduceCondition(node.getFirstChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryReduceCondition(node.getFirstChild());	  return    tryField(node.getFirstChild());    	non-compiled	[CE]  	3	None	replace
43	[BUG]  [BUGGY]  return  tryReduce(node.getFirstChild());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryReduce(node.getFirstChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryReduce(node.getFirstChild());	  return    tryMinimize(node.getFirstChild());    	non-compiled	[CE]  	30	None	replace
44	[BUG]  [BUGGY]  tryMinimizeCondition(node.getLastChild());  return  node;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  tryMinimizeCondition(node.getLastChild());  return  node;  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	tryMinimizeCondition(node.getLastChild());  return  node;	  tryMinimizeCondition(node.getFirstChild());    return    node;    	non-compiled	[CE]  	13	None	replace
45	[BUG]  [BUGGY]  tryMinimizeCondition(node.getLastChild());  return  null;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  tryMinimizeCondition(node.getLastChild());  return  null;  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	tryMinimizeCondition(node.getLastChild());  return  null;	  tryMinimizeCondition(node.getFirstChild());    return    node;    	non-compiled	[CE]  	13	None	replace
46	[BUG]  [BUGGY]  tryMinimizeCondition(node.getFirstChild());  return  null;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  tryMinimizeCondition(node.getFirstChild());  return  null;  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	tryMinimizeCondition(node.getFirstChild());  return  null;	  tryMinimizeCondition(node.getFirstChild());    return    node;    	non-compiled	[CE]  	13	None	replace
47	[BUG]  [BUGGY]  tryMinimizeNot(node.getFirstChild());  return  node;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  tryMinimizeNot(node.getFirstChild());  return  node;  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	tryMinimizeNot(node.getFirstChild());  return  node;	  tryMinimizeCondition(node.getFirstChild());    return    node;    	non-compiled	[CE]  	13	None	replace
48	[BUG]  [BUGGY]  tryMinimizeCondition(node.getLastChild());  return;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  tryMinimizeCondition(node.getLastChild());  return;  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	tryMinimizeCondition(node.getLastChild());  return;	  tryMinimizeCondition(node.getFirstChild());    return    node;    	non-compiled	[CE]  	13	None	replace
49	[BUG]  [BUGGY]  return  tryReduceFor(node.getFirstChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryReduceFor(node.getFirstChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryReduceFor(node.getFirstChild());	  return    tryMinimizeFor(node.getFirstChild());    	non-compiled	[CE]  	23	None	replace
50	[BUG]  [BUGGY]  return  tryFor(node.getFirstChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFor(node.getFirstChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFor(node.getFirstChild());	  return    tryMinimizeFor(node.getFirstChild());    	non-compiled	[CE]  	23	None	replace
51	[BUG]  [BUGGY]  case  Token.IF:  return  tryMinimizeCondition(node.getLastChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  case  Token.IF:  return  tryMinimizeCondition(node.getLastChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	case  Token.IF:  return  tryMinimizeCondition(node.getLastChild());	  case    Token.IF:    return    tryMinimizeCondition(node.getFirstChild());    	non-compiled	[CE]  	36	None	replace
52	[BUG]  [BUGGY]  case  Token.IF:  return  tryReturn(node.getFirstChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  case  Token.IF:  return  tryReturn(node.getFirstChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	case  Token.IF:  return  tryReturn(node.getFirstChild());	  case    Token.IF:    return    tryMinimizeCondition(node.getFirstChild());    	non-compiled	[CE]  	36	None	replace
53	[BUG]  [BUGGY]  case  Token.IF:  return  tryReduceCondition(node.getFirstChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  case  Token.IF:  return  tryReduceCondition(node.getFirstChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	case  Token.IF:  return  tryReduceCondition(node.getFirstChild());	  case    Token.IF:    return    tryMinimizeCondition(node.getFirstChild());    	non-compiled	[CE]  	36	None	replace
54	[BUG]  [BUGGY]  case  Token.IF:  return  tryMinimizeNot(node.getFirstChild());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  case  Token.IF:  return  tryMinimizeNot(node.getFirstChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	case  Token.IF:  return  tryMinimizeNot(node.getFirstChild());	  case    Token.IF:    return    tryMinimizeCondition(node.getFirstChild());    	non-compiled	[CE]  	36	None	replace
55	[BUG]  [BUGGY]  return  tryFixedSubtree(node.getFirstChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFixedSubtree(node.getFirstChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFixedSubtree(node.getFirstChild());	  return    tryFixedSubtree(node);    	non-compiled	[CE]  	9	None	replace
56	[BUG]  [BUGGY]  return  tryFixedSubtree(node.getLastChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFixedSubtree(node.getLastChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFixedSubtree(node.getLastChild());	  return    tryFixedSubtree(node);    	non-compiled	[CE]  	9	None	replace
57	[BUG]  [BUGGY]  return  tryFixedCondition(node);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFixedCondition(node);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFixedCondition(node);	  return    tryFixedSubtree(node);    	non-compiled	[CE]  	9	None	replace
58	[BUG]  [BUGGY]  return  tryFixedSubtree(node.getParent());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFixedSubtree(node.getParent());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFixedSubtree(node.getParent());	  return    tryFixedSubtree(node);    	non-compiled	[CE]  	9	None	replace
59	[BUG]  [BUGGY]  return  tryFixedSubtree(node.getType());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFixedSubtree(node.getType());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFixedSubtree(node.getType());	  return    tryFixedSubtree(node);    	non-compiled	[CE]  	9	None	replace
60	[BUG]  [BUGGY]  return  tryFixedSubtree(node.getNext());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFixedSubtree(node.getNext());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFixedSubtree(node.getNext());	  return    tryFixedSubtree(node);    	non-compiled	[CE]  	9	None	replace
61	[BUG]  [BUGGY]  return  tryFunctionIfNot(node);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFunctionIfNot(node);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFunctionIfNot(node);	  return    tryIfNot(node);    	non-compiled	[CE]  	29	None	replace
62	[BUG]  [BUGGY]  return  tryIfFunction(node);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryIfFunction(node);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryIfFunction(node);	  return    tryIfNot(node);    	non-compiled	[CE]  	29	None	replace
63	[BUG]  [BUGGY]  return  tryField(node.getFormatter());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryField(node.getFormatter());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryField(node.getFormatter());	  return    tryField(node.getNext());    	non-compiled	[CE]  	7	None	replace
64	[BUG]  [BUGGY]  return  tryField(node.getFullName());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryField(node.getFullName());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryField(node.getFullName());	  return    tryField(node.getNext());    	non-compiled	[CE]  	7	None	replace
65	[BUG]  [BUGGY]  return  tryField(node.getFullChild());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryField(node.getFullChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryField(node.getFullChild());	  return    tryField(node.getNext());    	non-compiled	[CE]  	7	None	replace
66	[BUG]  [BUGGY]  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  null;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  null;  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  null;	  case    Token.IF:    tryMinimizeCondition(node.getFirstChild());    return    node;    	non-compiled	[CE]  	12	None	replace
67	[BUG]  [BUGGY]  case  Token.IF:  tryMinimizeCondition(node.getLastChild());  return  node;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  case  Token.IF:  tryMinimizeCondition(node.getLastChild());  return  node;  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	case  Token.IF:  tryMinimizeCondition(node.getLastChild());  return  node;	  case    Token.IF:    tryMinimizeCondition(node.getFirstChild());    return    node;    	non-compiled	[CE]  	12	None	replace
68	[BUG]  [BUGGY]  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  this;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  this;  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  this;	  case    Token.IF:    tryMinimizeCondition(node.getFirstChild());    return    node;    	non-compiled	[CE]  	12	None	replace
69	[BUG]  [BUGGY]  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  parent;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  parent;  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  parent;	  case    Token.IF:    tryMinimizeCondition(node.getFirstChild());    return    node;    	non-compiled	[CE]  	12	None	replace
70	[BUG]  [BUGGY]  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  0;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  0;  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  0;	  case    Token.IF:    tryMinimizeCondition(node.getFirstChild());    return    node;    	non-compiled	[CE]  	12	None	replace
71	[BUG]  [BUGGY]  return  tryFieldNot(node.getFirstChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFieldNot(node.getFirstChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFieldNot(node.getFirstChild());	  return    tryFieldNot(node);    	non-compiled	[CE]  	35	None	replace
72	[BUG]  [BUGGY]  return  tryFieldToReturn(node);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFieldToReturn(node);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFieldToReturn(node);	  return    tryFieldNot(node);    	non-compiled	[CE]  	35	None	replace
73	[BUG]  [BUGGY]  return  tryField(node.getType(),  node);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryField(node.getType(),  node);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryField(node.getType(),  node);	  return    tryField(node.getType());    	non-compiled	[CE]  	5	None	replace
74	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getType());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getType());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryMinimizeCondition(node.getType());	  return    tryField(node.getType());    	non-compiled	[CE]  	5	None	replace
75	[BUG]  [BUGGY]  return  tryField(node.getChildCount());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryField(node.getChildCount());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryField(node.getChildCount());	  return    tryField(node.getType());    	non-compiled	[CE]  	5	None	replace
76	[BUG]  [BUGGY]  return  tryReduceSubtree(node.getLastChild());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryReduceSubtree(node.getLastChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryReduceSubtree(node.getLastChild());	  return    tryMinimizeCondition(node.getLastChild());    	non-compiled	[CE]  	1	None	replace
77	[BUG]  [BUGGY]  return  tryReduceSubtree(node.getFirstChild());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryReduceSubtree(node.getFirstChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryReduceSubtree(node.getFirstChild());	  return    tryMinimizeNot(node.getFirstChild());    	non-compiled	[CE]  	21	None	replace
78	[BUG]  [BUGGY]  return  tryReduceFallThrough(node.getFirstChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryReduceFallThrough(node.getFirstChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryReduceFallThrough(node.getFirstChild());	  return    tryMinimizeNot(node.getFirstChild());    	non-compiled	[CE]  	21	None	replace
79	[BUG]  [BUGGY]  return  tryFixCondition(node.getFirstChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFixCondition(node.getFirstChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFixCondition(node.getFirstChild());	  return    tryFixCondition(node);    	non-compiled	[CE]  	34	None	replace
80	[BUG]  [BUGGY]  return  tryFixCondition(node.getLastChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFixCondition(node.getLastChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFixCondition(node.getLastChild());	  return    tryFixCondition(node);    	non-compiled	[CE]  	34	None	replace
81	[BUG]  [BUGGY]  return  tryFixCondition(node.getType());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFixCondition(node.getType());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFixCondition(node.getType());	  return    tryFixCondition(node);    	non-compiled	[CE]  	34	None	replace
82	[BUG]  [BUGGY]  return  tryFixCondition(node.getChildCount());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFixCondition(node.getChildCount());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFixCondition(node.getChildCount());	  return    tryFixCondition(node);    	non-compiled	[CE]  	34	None	replace
83	[BUG]  [BUGGY]  return  tryFixCondition(node.getParent());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFixCondition(node.getParent());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFixCondition(node.getParent());	  return    tryFixCondition(node);    	non-compiled	[CE]  	34	None	replace
84	[BUG]  [BUGGY]  return  tryFixCondition(node.getLastChild(),  node);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFixCondition(node.getLastChild(),  node);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFixCondition(node.getLastChild(),  node);	  return    tryFixCondition(node);    	non-compiled	[CE]  	34	None	replace
85	[BUG]  [BUGGY]  return  tryFunctionFor(node.getFirstChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFunctionFor(node.getFirstChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFunctionFor(node.getFirstChild());	  return    tryFunctionFor(node);    	non-compiled	[CE]  	27	None	replace
86	[BUG]  [BUGGY]  return  tryFunctionFor(node.getLastChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFunctionFor(node.getLastChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFunctionFor(node.getLastChild());	  return    tryFunctionFor(node);    	non-compiled	[CE]  	27	None	replace
87	[BUG]  [BUGGY]  return  tryFunctionFor(node.getType());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFunctionFor(node.getType());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFunctionFor(node.getType());	  return    tryFunctionFor(node);    	non-compiled	[CE]  	27	None	replace
88	[BUG]  [BUGGY]  return  tryFinalCondition(node.getFirstChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFinalCondition(node.getFirstChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFinalCondition(node.getFirstChild());	  return    tryFinalCondition(node);    	non-compiled	[CE]  	39	None	replace
89	[BUG]  [BUGGY]  return  tryFinalCondition(node.getLastChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFinalCondition(node.getLastChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFinalCondition(node.getLastChild());	  return    tryFinalCondition(node);    	non-compiled	[CE]  	39	None	replace
90	[BUG]  [BUGGY]  return  tryFinalCondition(node.getParent());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFinalCondition(node.getParent());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFinalCondition(node.getParent());	  return    tryFinalCondition(node);    	non-compiled	[CE]  	39	None	replace
91	[BUG]  [BUGGY]  tryMinimizeCondition(node.getFirstChild());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  tryMinimizeCondition(node.getFirstChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	tryMinimizeCondition(node.getFirstChild());	  tryMinimizeCondition(node.getLastChild());    	non-compiled	[CE]  	14	None	replace
92	[BUG]  [BUGGY]  tryMinimizeNot(node.getLastChild());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  tryMinimizeNot(node.getLastChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	tryMinimizeNot(node.getLastChild());	  tryMinimizeCondition(node.getLastChild());    	non-compiled	[CE]  	14	None	replace
93	[BUG]  [BUGGY]  tryMinimizeCondition(node.getLastChild(),  node);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  tryMinimizeCondition(node.getLastChild(),  node);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	tryMinimizeCondition(node.getLastChild(),  node);	  tryMinimizeCondition(node.getLastChild());    	non-compiled	[CE]  	14	None	replace
94	[BUG]  [BUGGY]  tryReduceFunction(node.getLastChild());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  tryReduceFunction(node.getLastChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	tryReduceFunction(node.getLastChild());	  tryMinimizeCondition(node.getLastChild());    	non-compiled	[CE]  	14	None	replace
95	[BUG]  [BUGGY]  tryMinimize(node.getLastChild());  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  tryMinimize(node.getLastChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	tryMinimize(node.getLastChild());	  tryMinimizeCondition(node.getLastChild());    	non-compiled	[CE]  	14	None	replace
96	[BUG]  [BUGGY]  tryMinimizeCondition(node.getLastChild());  return  this;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  tryMinimizeCondition(node.getLastChild());  return  this;  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	tryMinimizeCondition(node.getLastChild());  return  this;	  tryMinimizeCondition(node.getFirstChild());    return    node;    	non-compiled	[CE]  	13	None	replace
97	[BUG]  [BUGGY]  tryMinimizeNot(node);  return  node;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  tryMinimizeNot(node);  return  node;  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	tryMinimizeNot(node);  return  node;	  tryMinimizeCondition(node.getFirstChild());    return    node;    	non-compiled	[CE]  	13	None	replace
98	[BUG]  [BUGGY]  return  tryReduceIF(node);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryReduceIF(node);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryReduceIF(node);	  return    tryReduceFor(node);    	non-compiled	[CE]  	28	None	replace
99	[BUG]  [BUGGY]  return  tryMaximizeCondition(node.getLastChild());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMaximizeCondition(node.getLastChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryMaximizeCondition(node.getLastChild());	  return    tryMinimize(node.getLastChild());    	non-compiled	[CE]  	33	None	replace
100	[BUG]  [BUGGY]  return  tryMinimizeFollowNode(node);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeFollowNode(node);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryMinimizeFollowNode(node);	  return    tryFallThrough(node);    	non-compiled	[CE]  	32	None	replace
101	[BUG]  [BUGGY]  tryMinimizeReturn(node.getLastChild());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  tryMinimizeReturn(node.getLastChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	tryMinimizeReturn(node.getLastChild());	  tryMinimizeCondition(node.getLastChild());    	non-compiled	[CE]  	14	None	replace
102	[BUG]  [BUGGY]  return  tryMinimizeField(node.getLastChild(),  node);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeField(node.getLastChild(),  node);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryMinimizeField(node.getLastChild(),  node);	  return    tryMinimizeField(node.getLastChild());    	non-compiled	[CE]  	17	None	replace
103	[BUG]  [BUGGY]  return  tryMinimizeIf(node.getLastChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeIf(node.getLastChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryMinimizeIf(node.getLastChild());	  return    tryMinimizeFor(node.getLastChild());    	non-compiled	[CE]  	26	None	replace
104	[BUG]  [BUGGY]  return  tryMaximizeCondition(node.getFirstChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMaximizeCondition(node.getFirstChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryMaximizeCondition(node.getFirstChild());	  return    tryField(node.getFirstChild());    	non-compiled	[CE]  	3	None	replace
105	[BUG]  [BUGGY]  return  tryMinimizeFixCondition(node);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeFixCondition(node);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryMinimizeFixCondition(node);	  return    tryFixCondition(node);    	non-compiled	[CE]  	34	None	replace
106	[BUG]  [BUGGY]  case  Token.IF:  tryMinimizeCondition(node.getFirstChild()  +  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  case  Token.IF:  tryMinimizeCondition(node.getFirstChild()  +  1);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	case  Token.IF:  tryMinimizeCondition(node.getFirstChild()  +  1);	  case    Token.IF:    tryMinimizeCondition(node.getFirstChild());    	non-compiled	[CE]  	11	None	replace
107	[BUG]  [BUGGY]  return  tryFieldNot(node.getLastChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFieldNot(node.getLastChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFieldNot(node.getLastChild());	  return    tryField(node.getLastChild());    	non-compiled	[CE]  	4	None	replace
108	[BUG]  [BUGGY]  return  tryIfFall(node);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryIfFall(node);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryIfFall(node);	  return    tryIfNot(node);    	non-compiled	[CE]  	29	None	replace
109	[BUG]  [BUGGY]  return  tryFieldInvalid(node);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFieldInvalid(node);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFieldInvalid(node);	  return    tryFieldNot(node);    	non-compiled	[CE]  	35	None	replace
110	[BUG]  [BUGGY]  return  tryFixedSubtree(node,  false);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFixedSubtree(node,  false);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFixedSubtree(node,  false);	  return    tryFixedSubtree(node);    	non-compiled	[CE]  	9	None	replace
111	[BUG]  [BUGGY]  return  tryMinimizeFixedSubtree(node);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeFixedSubtree(node);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryMinimizeFixedSubtree(node);	  return    tryFixedSubtree(node);    	non-compiled	[CE]  	9	None	replace
112	[BUG]  [BUGGY]  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);	  case    Token.IF:    tryMinimizeCondition(node.getFirstChild());    return    node;    	non-compiled	[CE]  	12	None	replace
113	[BUG]  [BUGGY]  case  Token.IF:  return  tryMinimizeCondition(node.getFirstChild(),  node);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  case  Token.IF:  return  tryMinimizeCondition(node.getFirstChild(),  node);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	case  Token.IF:  return  tryMinimizeCondition(node.getFirstChild(),  node);	  case    Token.IF:    return    tryMinimizeCondition(node.getFirstChild());    	non-compiled	[CE]  	36	None	replace
114	[BUG]  [BUGGY]  case  Token.IF:  return  tryMinimizeNot(node);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  case  Token.IF:  return  tryMinimizeNot(node);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	case  Token.IF:  return  tryMinimizeNot(node);	  case    Token.IF:    return    tryMinimizeCondition(node.getFirstChild());    	non-compiled	[CE]  	36	None	replace
115	[BUG]  [BUGGY]  case  Token.IF:  return  tryMinimizeCondition(node.getFirstChild()  +  1);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  case  Token.IF:  return  tryMinimizeCondition(node.getFirstChild()  +  1);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	case  Token.IF:  return  tryMinimizeCondition(node.getFirstChild()  +  1);	  case    Token.IF:    return    tryMinimizeCondition(node.getFirstChild());    	non-compiled	[CE]  	36	None	replace
116	[BUG]  [BUGGY]  return  tryMinimizeFunctionCondition(node);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeFunctionCondition(node);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryMinimizeFunctionCondition(node);	  return    tryFunctionCondition(node);    	non-compiled	[CE]  	8	None	replace
117	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getNext());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getNext());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryMinimizeCondition(node.getNext());	  return    tryField(node.getNext());    	non-compiled	[CE]  	7	None	replace
118	[BUG]  [BUGGY]  return  tryField(node.getNext(),  node);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryField(node.getNext(),  node);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryField(node.getNext(),  node);	  return    tryField(node.getNext());    	non-compiled	[CE]  	7	None	replace
119	[BUG]  [BUGGY]  return  tryMinimizeFinal(node);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeFinal(node);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryMinimizeFinal(node);	  return    tryFinalCondition(node);    	non-compiled	[CE]  	39	None	replace
120	[BUG]  [BUGGY]  return  tryMinimizeFunction(node.getLastChild(),  node);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeFunction(node.getLastChild(),  node);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryMinimizeFunction(node.getLastChild(),  node);	  return    tryMinimizeFunction(node.getLastChild());    	non-compiled	[CE]  	31	None	replace
121	[BUG]  [BUGGY]  return  tryMinimizeReturn(node.getLastChild());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeReturn(node.getLastChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryMinimizeReturn(node.getLastChild());	  return    tryMinimizeFunction(node.getLastChild());    	non-compiled	[CE]  	31	None	replace
122	[BUG]  [BUGGY]  return  tryFieldInstance(node);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFieldInstance(node);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFieldInstance(node);	  return    tryFieldNot(node);    	non-compiled	[CE]  	35	None	replace
123	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getLastChild()  +  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getLastChild()  +  1);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryMinimizeCondition(node.getLastChild()  +  1);	  return    tryMinimizeCondition(node.getLastChild());    	non-compiled	[CE]  	1	None	replace
124	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getSecondChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getSecondChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryMinimizeCondition(node.getSecondChild());	  return    tryMinimizeCondition(node.getLastChild());    	non-compiled	[CE]  	1	None	replace
125	[BUG]  [BUGGY]  if(node.getType()  ==  Token.IF)  {  tryMinimizeCondition(node.getFirstChild());  return  node;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  if(node.getType()  ==  Token.IF)  {  tryMinimizeCondition(node.getFirstChild());  return  node;  }  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	if(node.getType()  ==  Token.IF)  {  tryMinimizeCondition(node.getFirstChild());  return  node;  }	  tryMinimizeCondition(node.getFirstChild());    return    node;    	non-compiled	[CE]  	13	None	replace
126	[BUG]  [BUGGY]  if(node.getType()  ==  Token.IF)  {  tryMinimizeCondition(node.getFirstChild());  return  null;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  if(node.getType()  ==  Token.IF)  {  tryMinimizeCondition(node.getFirstChild());  return  null;  }  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	if(node.getType()  ==  Token.IF)  {  tryMinimizeCondition(node.getFirstChild());  return  null;  }	  tryMinimizeCondition(node.getFirstChild());    return    node;    	non-compiled	[CE]  	13	None	replace
127	[BUG]  [BUGGY]  tryMinimizeCondition(node.getSecondChild());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  tryMinimizeCondition(node.getSecondChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	tryMinimizeCondition(node.getSecondChild());	  tryMinimizeCondition(node.getLastChild());    	non-compiled	[CE]  	14	None	replace
128	[BUG]  [BUGGY]  tryMinimizeCondition(node.getLastChild()  +  1);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  tryMinimizeCondition(node.getLastChild()  +  1);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	tryMinimizeCondition(node.getLastChild()  +  1);	  tryMinimizeCondition(node.getLastChild());    	non-compiled	[CE]  	14	None	replace
129	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getType(),  node);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getType(),  node);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryMinimizeCondition(node.getType(),  node);	  return    tryMinimizeCondition(node.getFirstChild(),    node);    	non-compiled	[CE]  	38	None	replace
130	[BUG]  [BUGGY]  return  tryMaximizeCondition(node.getLastChild(),  node);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMaximizeCondition(node.getLastChild(),  node);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryMaximizeCondition(node.getLastChild(),  node);	  return    tryMinimizeCondition(node.getFirstChild(),    node);    	non-compiled	[CE]  	38	None	replace
131	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getFirstChild(),  parent);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getFirstChild(),  parent);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryMinimizeCondition(node.getFirstChild(),  parent);	  return    tryMinimizeCondition(node.getFirstChild(),    node);    	non-compiled	[CE]  	38	None	replace
132	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getNext(),  node);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryMinimizeCondition(node.getNext(),  node);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryMinimizeCondition(node.getNext(),  node);	  return    tryMinimizeCondition(node.getFirstChild(),    node);    	non-compiled	[CE]  	38	None	replace
133	[BUG]  [BUGGY]  return  try(node.getFirstChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  try(node.getFirstChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  try(node.getFirstChild());	  return    tryIf(node.getFirstChild());    	non-compiled	[CE]  	37	None	replace
134	[BUG]  [BUGGY]  return  tryFieldInstance(node.getLastChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFieldInstance(node.getLastChild());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFieldInstance(node.getLastChild());	  return    tryField(node.getLastChild());    	non-compiled	[CE]  	4	None	replace
135	[BUG]  [BUGGY]  return  tryFixedFunction(node);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryFixedFunction(node);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryFixedFunction(node);	  return    tryFixedSubtree(node);    	non-compiled	[CE]  	9	None	replace
136	[BUG]  [BUGGY]  return  tryIfCondition(node);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryIfCondition(node);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryIfCondition(node);	  return    tryIfNot(node);    	non-compiled	[CE]  	29	None	replace
137	[BUG]  [BUGGY]  return  tryField(node.getParent());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  return  tryField(node.getParent());  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryField(node.getParent());	  return    tryField(node.getType());    	non-compiled	[CE]  	5	None	replace
138	[BUG]  [BUGGY]  case  Token.IF:  return  tryMinimizeCondition(node.getFirstChild(),  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());      [BUGGY]  case  Token.IF:  return  tryMinimizeCondition(node.getFirstChild(),  null);  [BUGGY]        case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	case  Token.IF:  return  tryMinimizeCondition(node.getFirstChild(),  null);	  case    Token.IF:    return    tryMinimizeCondition(node.getFirstChild());    	non-compiled	[CE]  	36	None	replace
