bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  tryMinimizeIf(node.getFirstChild());  [CE]  [FE]    AssertionFailedError  [CONTEXT]  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  [BUGGY]  return  tryMinimizeIf(node.getFirstChild());  [BUGGY]    case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryMinimizeIf(node.getFirstChild());	return  tryMinimizeIf(node);  	non-compiled	[CE]  	75	None	replace
2	[BUG]  [BUGGY]  return  tryMinimizeIF(node);  [CE]  [FE]      AssertionFailedError  [CONTEXT]  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  [BUGGY]  return  tryMinimizeIF(node);  [BUGGY]    case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryMinimizeIF(node);	return  tryMinimizeIf(node);  	non-compiled	[CE]  	75	None	replace
3	[BUG]  [BUGGY]  return  tryMinimizeNot(node);  [CE]  [FE]        AssertionFailedError  [CONTEXT]  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  [BUGGY]  return  tryMinimizeNot(node);  [BUGGY]    case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryMinimizeNot(node);	return  tryMinimizeIf(node);  	non-compiled	[CE]  	75	None	replace
4	[BUG]  [BUGGY]  return  tryIf(node);  [CE]  [FE]          AssertionFailedError  [CONTEXT]  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  [BUGGY]  return  tryIf(node);  [BUGGY]    case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryIf(node);	return  tryMinimizeIf(node);  	non-compiled	[CE]  	75	None	replace
5	[BUG]  [BUGGY]  return  tryNot(node);  [CE]  [FE]            AssertionFailedError  [CONTEXT]  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  [BUGGY]  return  tryNot(node);  [BUGGY]    case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryNot(node);	return  tryMinimizeIf(node);  	non-compiled	[CE]  	75	None	replace
6	[BUG]  [BUGGY]  return  tryField(node);  [CE]  [FE]              AssertionFailedError  [CONTEXT]  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  [BUGGY]  return  tryField(node);  [BUGGY]    case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryField(node);	return  tryMinimizeIf(node);  	non-compiled	[CE]  	75	None	replace
7	[BUG]  [BUGGY]    [CE]  [FE]                AssertionFailedError  [CONTEXT]  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  [BUGGY]    [BUGGY]    case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	  	return  tryMinimizeIf(node);  	non-compiled	[CE]  	75	None	replace
8	[BUG]  [BUGGY]  return  tryMinimizeFunction(node);  [CE]  [FE]    AssertionFailedError  [CONTEXT]  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  [BUGGY]  return  tryMinimizeFunction(node);  [BUGGY]    case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryMinimizeFunction(node);	return  tryMinimizeIf(node);  	non-compiled	[CE]  	75	None	replace
9	[BUG]  [BUGGY]  return  tryMinimizeCondition(node);  [CE]  [FE]      AssertionFailedError  [CONTEXT]  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  [BUGGY]  return  tryMinimizeCondition(node);  [BUGGY]    case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryMinimizeCondition(node);	return  tryMinimizeIf(node);  	non-compiled	[CE]  	75	None	replace
10	[BUG]  [BUGGY]  return  tryMinimizeFor(node);  [CE]  [FE]        AssertionFailedError  [CONTEXT]  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  [BUGGY]  return  tryMinimizeFor(node);  [BUGGY]    case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryMinimizeFor(node);	return  tryMinimizeIf(node);  	non-compiled	[CE]  	75	None	replace
11	[BUG]  [BUGGY]  return  tryMinimizeField(node);  [CE]  [FE]          AssertionFailedError  [CONTEXT]  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  [BUGGY]  return  tryMinimizeField(node);  [BUGGY]    case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryMinimizeField(node);	return  tryMinimizeIf(node);  	non-compiled	[CE]  	75	None	replace
12	[BUG]  [BUGGY]  return  tryMinimizeCondition(node.getFirstChild());  [CE]  [FE]    AssertionFailedError  [CONTEXT]  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  [BUGGY]  return  tryMinimizeCondition(node.getFirstChild());  [BUGGY]    case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryMinimizeCondition(node.getFirstChild());	return  tryMinimizeIf(node);  	non-compiled	[CE]  	75	None	replace
13	[BUG]  [BUGGY]  return  tryMinimize(node);  [CE]  [FE]      AssertionFailedError  [CONTEXT]  switch(node.getType())  {  case  Token.RETURN:  return  tryReduceReturn(node);  case  Token.NOT:  tryMinimizeCondition(node.getFirstChild());  return  tryMinimizeNot(node);  case  Token.IF:  tryMinimizeCondition(node.getFirstChild());  [BUGGY]  return  tryMinimize(node);  [BUGGY]    case  Token.EXPR_RESULT:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.HOOK:  tryMinimizeCondition(node.getFirstChild());  return  node;  case  Token.WHILE:  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  optimizeSubtree  [RETURN_TYPE]  Node  Node  node  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  node  int  AND_PRECEDENCE  OR_PRECEDENCE  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	69	69	1	replace	return  tryMinimize(node);	return  tryMinimizeIf(node);  	non-compiled	[CE]  	75	None	replace
